
SWPWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000021fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  000021fc  00002290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  00800074  00800074  000022a4  2**0
                  ALLOC
  3 .stab         00002bf8  00000000  00000000  000022a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000141c  00000000  00000000  00004e9c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 86 0e 	jmp	0x1d0c	; 0x1d0c <__vector_4>
      14:	0c 94 b9 0e 	jmp	0x1d72	; 0x1d72 <__vector_5>
      18:	0c 94 ec 0e 	jmp	0x1dd8	; 0x1dd8 <__vector_6>
      1c:	0c 94 1f 0f 	jmp	0x1e3e	; 0x1e3e <__vector_7>
      20:	0c 94 52 0f 	jmp	0x1ea4	; 0x1ea4 <__vector_8>
      24:	0c 94 85 0f 	jmp	0x1f0a	; 0x1f0a <__vector_9>
      28:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__vector_10>
      2c:	0c 94 eb 0f 	jmp	0x1fd6	; 0x1fd6 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 bc 01 	jmp	0x378	; 0x378 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ef       	ldi	r30, 0xFC	; 252
      68:	f1 e2       	ldi	r31, 0x21	; 33
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 38       	cpi	r26, 0x8E	; 142
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 1e 10 	call	0x203c	; 0x203c <main>
      8a:	0c 94 fc 10 	jmp	0x21f8	; 0x21f8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_voidInit>:
static u8 ADC_u8ConversionMode;
//variables for Asynchronous Chain Conversion
static Chain_t *ADC_psChain=NULL;
static u8 ADC_u8ChainIndex=0;

void ADC_voidInit(void){
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
	//Reference Selection
#if REFERENCE_SELECTION==AREF_REF
	CLR_BIT(ADMUX,ADMUX_REFS1);
	CLR_BIT(ADMUX,ADMUX_REFS0);
#elif REFERENCE_SELECTION==AVCC_REF
	CLR_BIT(ADMUX,ADMUX_REFS1);
      9a:	a7 e2       	ldi	r26, 0x27	; 39
      9c:	b0 e0       	ldi	r27, 0x00	; 0
      9e:	e7 e2       	ldi	r30, 0x27	; 39
      a0:	f0 e0       	ldi	r31, 0x00	; 0
      a2:	80 81       	ld	r24, Z
      a4:	8f 77       	andi	r24, 0x7F	; 127
      a6:	8c 93       	st	X, r24
	SET_BIT(ADMUX,ADMUX_REFS0);
      a8:	a7 e2       	ldi	r26, 0x27	; 39
      aa:	b0 e0       	ldi	r27, 0x00	; 0
      ac:	e7 e2       	ldi	r30, 0x27	; 39
      ae:	f0 e0       	ldi	r31, 0x00	; 0
      b0:	80 81       	ld	r24, Z
      b2:	80 64       	ori	r24, 0x40	; 64
      b4:	8c 93       	st	X, r24
#endif
	//Adjust Resultion
#if ADC_RESOLUTION==10
	CLR_BIT(ADMUX,ADMUX_ADLAR);
#elif ADC_RESOLUTION==8
	SET_BIT(ADMUX,ADMUX_ADLAR);
      b6:	a7 e2       	ldi	r26, 0x27	; 39
      b8:	b0 e0       	ldi	r27, 0x00	; 0
      ba:	e7 e2       	ldi	r30, 0x27	; 39
      bc:	f0 e0       	ldi	r31, 0x00	; 0
      be:	80 81       	ld	r24, Z
      c0:	80 62       	ori	r24, 0x20	; 32
      c2:	8c 93       	st	X, r24
	SFIOR|=(AUTO_TRIGGER_SOURCE<<5);
#if AUTO_TRIGGER_SOURCE==FREE_RUNNING
	SET_BIT(ADCSRA,ADCSRA_ADSC);
#endif
#elif AUTO_TRIGGER==DISABLE
	CLR_BIT(ADCSRA,ADCSRA_ADATE);
      c4:	a6 e2       	ldi	r26, 0x26	; 38
      c6:	b0 e0       	ldi	r27, 0x00	; 0
      c8:	e6 e2       	ldi	r30, 0x26	; 38
      ca:	f0 e0       	ldi	r31, 0x00	; 0
      cc:	80 81       	ld	r24, Z
      ce:	8f 7d       	andi	r24, 0xDF	; 223
      d0:	8c 93       	st	X, r24

	//Interrupt enable
#if ADC_INT==ENABLE
	SET_BIT(ADCSRA,ADCSRA_ADIE);
#elif ADC_INT==DISABLE
	CLR_BIT(ADCSRA,ADCSRA_ADIE);
      d2:	a6 e2       	ldi	r26, 0x26	; 38
      d4:	b0 e0       	ldi	r27, 0x00	; 0
      d6:	e6 e2       	ldi	r30, 0x26	; 38
      d8:	f0 e0       	ldi	r31, 0x00	; 0
      da:	80 81       	ld	r24, Z
      dc:	87 7f       	andi	r24, 0xF7	; 247
      de:	8c 93       	st	X, r24
#else
#error "WRONG INT OPTION"
#endif

	//Prescaler Setting
	ADCSRA&=ADC_PRESCALER_MASK;
      e0:	a6 e2       	ldi	r26, 0x26	; 38
      e2:	b0 e0       	ldi	r27, 0x00	; 0
      e4:	e6 e2       	ldi	r30, 0x26	; 38
      e6:	f0 e0       	ldi	r31, 0x00	; 0
      e8:	80 81       	ld	r24, Z
      ea:	88 7f       	andi	r24, 0xF8	; 248
      ec:	8c 93       	st	X, r24
	ADCSRA|=PRESCALER ;
      ee:	a6 e2       	ldi	r26, 0x26	; 38
      f0:	b0 e0       	ldi	r27, 0x00	; 0
      f2:	e6 e2       	ldi	r30, 0x26	; 38
      f4:	f0 e0       	ldi	r31, 0x00	; 0
      f6:	80 81       	ld	r24, Z
      f8:	87 60       	ori	r24, 0x07	; 7
      fa:	8c 93       	st	X, r24

	//Enable or Disable ADC
#if ADC_ENABLE==ENABLE
	SET_BIT(ADCSRA,ADCSRA_ADEN);
      fc:	a6 e2       	ldi	r26, 0x26	; 38
      fe:	b0 e0       	ldi	r27, 0x00	; 0
     100:	e6 e2       	ldi	r30, 0x26	; 38
     102:	f0 e0       	ldi	r31, 0x00	; 0
     104:	80 81       	ld	r24, Z
     106:	80 68       	ori	r24, 0x80	; 128
     108:	8c 93       	st	X, r24
#elif ADC_ENABLE==DISABLE
	CLR_BIT(ADCSRA,ADCSRA_ADEN);
#else
#error "Wrong ADC_ENABLE Option"
#endif
}
     10a:	cf 91       	pop	r28
     10c:	df 91       	pop	r29
     10e:	08 95       	ret

00000110 <ADC_u8StartConversionSynch>:

u8 ADC_u8StartConversionSynch(u8 Copy_u8Channel,u16* Copy_pu16Reading){
     110:	df 93       	push	r29
     112:	cf 93       	push	r28
     114:	cd b7       	in	r28, 0x3d	; 61
     116:	de b7       	in	r29, 0x3e	; 62
     118:	28 97       	sbiw	r28, 0x08	; 8
     11a:	0f b6       	in	r0, 0x3f	; 63
     11c:	f8 94       	cli
     11e:	de bf       	out	0x3e, r29	; 62
     120:	0f be       	out	0x3f, r0	; 63
     122:	cd bf       	out	0x3d, r28	; 61
     124:	8e 83       	std	Y+6, r24	; 0x06
     126:	78 87       	std	Y+8, r23	; 0x08
     128:	6f 83       	std	Y+7, r22	; 0x07
	u32 Local_u32Counter=0;
     12a:	1a 82       	std	Y+2, r1	; 0x02
     12c:	1b 82       	std	Y+3, r1	; 0x03
     12e:	1c 82       	std	Y+4, r1	; 0x04
     130:	1d 82       	std	Y+5, r1	; 0x05
	u8 Local_u8ErrorState=OK;
     132:	19 82       	std	Y+1, r1	; 0x01
	if(ADC_u8BusyState==IDLE){
     134:	80 91 78 00 	lds	r24, 0x0078
     138:	88 23       	and	r24, r24
     13a:	09 f0       	breq	.+2      	; 0x13e <ADC_u8StartConversionSynch+0x2e>
     13c:	65 c0       	rjmp	.+202    	; 0x208 <ADC_u8StartConversionSynch+0xf8>
		if(Copy_pu16Reading==NULL){
     13e:	8f 81       	ldd	r24, Y+7	; 0x07
     140:	98 85       	ldd	r25, Y+8	; 0x08
     142:	00 97       	sbiw	r24, 0x00	; 0
     144:	19 f4       	brne	.+6      	; 0x14c <ADC_u8StartConversionSynch+0x3c>
			Local_u8ErrorState=NULL_POINTER;
     146:	82 e0       	ldi	r24, 0x02	; 2
     148:	89 83       	std	Y+1, r24	; 0x01
     14a:	60 c0       	rjmp	.+192    	; 0x20c <ADC_u8StartConversionSynch+0xfc>
		}
		else{
			ADC_u8BusyState=BUSY;
     14c:	81 e0       	ldi	r24, 0x01	; 1
     14e:	80 93 78 00 	sts	0x0078, r24
			//adjusting the channel using bit masking
			ADMUX&=CHANNEL_MUX_MASK;
     152:	a7 e2       	ldi	r26, 0x27	; 39
     154:	b0 e0       	ldi	r27, 0x00	; 0
     156:	e7 e2       	ldi	r30, 0x27	; 39
     158:	f0 e0       	ldi	r31, 0x00	; 0
     15a:	80 81       	ld	r24, Z
     15c:	80 7e       	andi	r24, 0xE0	; 224
     15e:	8c 93       	st	X, r24
			ADMUX|=Copy_u8Channel;
     160:	a7 e2       	ldi	r26, 0x27	; 39
     162:	b0 e0       	ldi	r27, 0x00	; 0
     164:	e7 e2       	ldi	r30, 0x27	; 39
     166:	f0 e0       	ldi	r31, 0x00	; 0
     168:	90 81       	ld	r25, Z
     16a:	8e 81       	ldd	r24, Y+6	; 0x06
     16c:	89 2b       	or	r24, r25
     16e:	8c 93       	st	X, r24
			//start conversion
			SET_BIT(ADCSRA,ADCSRA_ADSC);
     170:	a6 e2       	ldi	r26, 0x26	; 38
     172:	b0 e0       	ldi	r27, 0x00	; 0
     174:	e6 e2       	ldi	r30, 0x26	; 38
     176:	f0 e0       	ldi	r31, 0x00	; 0
     178:	80 81       	ld	r24, Z
     17a:	80 64       	ori	r24, 0x40	; 64
     17c:	8c 93       	st	X, r24
     17e:	0b c0       	rjmp	.+22     	; 0x196 <ADC_u8StartConversionSynch+0x86>
			//polling until the conversion is finished using the interrupt flag
			while((GET_BIT(ADCSRA,ADCSRA_ADIF)==0) && (Local_u32Counter!=ADC_u32TIMEOUT)){
				Local_u32Counter++;
     180:	8a 81       	ldd	r24, Y+2	; 0x02
     182:	9b 81       	ldd	r25, Y+3	; 0x03
     184:	ac 81       	ldd	r26, Y+4	; 0x04
     186:	bd 81       	ldd	r27, Y+5	; 0x05
     188:	01 96       	adiw	r24, 0x01	; 1
     18a:	a1 1d       	adc	r26, r1
     18c:	b1 1d       	adc	r27, r1
     18e:	8a 83       	std	Y+2, r24	; 0x02
     190:	9b 83       	std	Y+3, r25	; 0x03
     192:	ac 83       	std	Y+4, r26	; 0x04
     194:	bd 83       	std	Y+5, r27	; 0x05
			ADMUX&=CHANNEL_MUX_MASK;
			ADMUX|=Copy_u8Channel;
			//start conversion
			SET_BIT(ADCSRA,ADCSRA_ADSC);
			//polling until the conversion is finished using the interrupt flag
			while((GET_BIT(ADCSRA,ADCSRA_ADIF)==0) && (Local_u32Counter!=ADC_u32TIMEOUT)){
     196:	e6 e2       	ldi	r30, 0x26	; 38
     198:	f0 e0       	ldi	r31, 0x00	; 0
     19a:	80 81       	ld	r24, Z
     19c:	82 95       	swap	r24
     19e:	8f 70       	andi	r24, 0x0F	; 15
     1a0:	88 2f       	mov	r24, r24
     1a2:	90 e0       	ldi	r25, 0x00	; 0
     1a4:	81 70       	andi	r24, 0x01	; 1
     1a6:	90 70       	andi	r25, 0x00	; 0
     1a8:	00 97       	sbiw	r24, 0x00	; 0
     1aa:	61 f4       	brne	.+24     	; 0x1c4 <ADC_u8StartConversionSynch+0xb4>
     1ac:	8a 81       	ldd	r24, Y+2	; 0x02
     1ae:	9b 81       	ldd	r25, Y+3	; 0x03
     1b0:	ac 81       	ldd	r26, Y+4	; 0x04
     1b2:	bd 81       	ldd	r27, Y+5	; 0x05
     1b4:	80 35       	cpi	r24, 0x50	; 80
     1b6:	23 ec       	ldi	r18, 0xC3	; 195
     1b8:	92 07       	cpc	r25, r18
     1ba:	20 e0       	ldi	r18, 0x00	; 0
     1bc:	a2 07       	cpc	r26, r18
     1be:	20 e0       	ldi	r18, 0x00	; 0
     1c0:	b2 07       	cpc	r27, r18
     1c2:	f1 f6       	brne	.-68     	; 0x180 <ADC_u8StartConversionSynch+0x70>
				Local_u32Counter++;
			}
			//clearing the interrupt flag by writing 1
			if(Local_u32Counter==ADC_u32TIMEOUT){
     1c4:	8a 81       	ldd	r24, Y+2	; 0x02
     1c6:	9b 81       	ldd	r25, Y+3	; 0x03
     1c8:	ac 81       	ldd	r26, Y+4	; 0x04
     1ca:	bd 81       	ldd	r27, Y+5	; 0x05
     1cc:	80 35       	cpi	r24, 0x50	; 80
     1ce:	23 ec       	ldi	r18, 0xC3	; 195
     1d0:	92 07       	cpc	r25, r18
     1d2:	20 e0       	ldi	r18, 0x00	; 0
     1d4:	a2 07       	cpc	r26, r18
     1d6:	20 e0       	ldi	r18, 0x00	; 0
     1d8:	b2 07       	cpc	r27, r18
     1da:	19 f4       	brne	.+6      	; 0x1e2 <ADC_u8StartConversionSynch+0xd2>
				//loop is broken because timeout is reached
				Local_u8ErrorState=NOK;
     1dc:	81 e0       	ldi	r24, 0x01	; 1
     1de:	89 83       	std	Y+1, r24	; 0x01
     1e0:	15 c0       	rjmp	.+42     	; 0x20c <ADC_u8StartConversionSynch+0xfc>
			}
			else{
				//flag is raised
				SET_BIT(ADCSRA,ADCSRA_ADIF);
     1e2:	a6 e2       	ldi	r26, 0x26	; 38
     1e4:	b0 e0       	ldi	r27, 0x00	; 0
     1e6:	e6 e2       	ldi	r30, 0x26	; 38
     1e8:	f0 e0       	ldi	r31, 0x00	; 0
     1ea:	80 81       	ld	r24, Z
     1ec:	80 61       	ori	r24, 0x10	; 16
     1ee:	8c 93       	st	X, r24
				//returning the reading
#if ADC_RESOLUTION == 8
				*Copy_pu16Reading= ADCH;
     1f0:	e5 e2       	ldi	r30, 0x25	; 37
     1f2:	f0 e0       	ldi	r31, 0x00	; 0
     1f4:	80 81       	ld	r24, Z
     1f6:	88 2f       	mov	r24, r24
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	ef 81       	ldd	r30, Y+7	; 0x07
     1fc:	f8 85       	ldd	r31, Y+8	; 0x08
     1fe:	91 83       	std	Z+1, r25	; 0x01
     200:	80 83       	st	Z, r24
#elif ADC_RESOLUTION == 10
				*Copy_pu16Reading = ADC;
#else
#error "Wrong ADJUST OPTION"
#endif
				ADC_u8BusyState=IDLE;
     202:	10 92 78 00 	sts	0x0078, r1
     206:	02 c0       	rjmp	.+4      	; 0x20c <ADC_u8StartConversionSynch+0xfc>
			}
		}
	}
	else{
		Local_u8ErrorState=BUSY_FUNC;
     208:	83 e0       	ldi	r24, 0x03	; 3
     20a:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErrorState;
     20c:	89 81       	ldd	r24, Y+1	; 0x01
}
     20e:	28 96       	adiw	r28, 0x08	; 8
     210:	0f b6       	in	r0, 0x3f	; 63
     212:	f8 94       	cli
     214:	de bf       	out	0x3e, r29	; 62
     216:	0f be       	out	0x3f, r0	; 63
     218:	cd bf       	out	0x3d, r28	; 61
     21a:	cf 91       	pop	r28
     21c:	df 91       	pop	r29
     21e:	08 95       	ret

00000220 <ADC_u8StartConversionAsynch>:

u8 ADC_u8StartConversionAsynch(u8 Copy_u8Channel,u16* Copy_pu16Reading, void (*Copy_pvNotificationFunc)(void)){
     220:	df 93       	push	r29
     222:	cf 93       	push	r28
     224:	00 d0       	rcall	.+0      	; 0x226 <ADC_u8StartConversionAsynch+0x6>
     226:	00 d0       	rcall	.+0      	; 0x228 <ADC_u8StartConversionAsynch+0x8>
     228:	00 d0       	rcall	.+0      	; 0x22a <ADC_u8StartConversionAsynch+0xa>
     22a:	cd b7       	in	r28, 0x3d	; 61
     22c:	de b7       	in	r29, 0x3e	; 62
     22e:	8a 83       	std	Y+2, r24	; 0x02
     230:	7c 83       	std	Y+4, r23	; 0x04
     232:	6b 83       	std	Y+3, r22	; 0x03
     234:	5e 83       	std	Y+6, r21	; 0x06
     236:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState=OK;
     238:	19 82       	std	Y+1, r1	; 0x01
	if(ADC_u8BusyState==IDLE){
     23a:	80 91 78 00 	lds	r24, 0x0078
     23e:	88 23       	and	r24, r24
     240:	d1 f5       	brne	.+116    	; 0x2b6 <ADC_u8StartConversionAsynch+0x96>
		ADC_u8BusyState=BUSY;
     242:	81 e0       	ldi	r24, 0x01	; 1
     244:	80 93 78 00 	sts	0x0078, r24
		if(Copy_pu16Reading==NULL||Copy_pvNotificationFunc==NULL){
     248:	8b 81       	ldd	r24, Y+3	; 0x03
     24a:	9c 81       	ldd	r25, Y+4	; 0x04
     24c:	00 97       	sbiw	r24, 0x00	; 0
     24e:	21 f0       	breq	.+8      	; 0x258 <ADC_u8StartConversionAsynch+0x38>
     250:	8d 81       	ldd	r24, Y+5	; 0x05
     252:	9e 81       	ldd	r25, Y+6	; 0x06
     254:	00 97       	sbiw	r24, 0x00	; 0
     256:	19 f4       	brne	.+6      	; 0x25e <ADC_u8StartConversionAsynch+0x3e>
			Local_u8ErrorState=NULL_POINTER;
     258:	82 e0       	ldi	r24, 0x02	; 2
     25a:	89 83       	std	Y+1, r24	; 0x01
     25c:	2e c0       	rjmp	.+92     	; 0x2ba <ADC_u8StartConversionAsynch+0x9a>
		}
		else{
			ADC_u8ConversionMode=SINGLE;
     25e:	10 92 7c 00 	sts	0x007C, r1
			//put the local variables into global so they can be used in the ISR
			ADC_pu16Reading=Copy_pu16Reading;
     262:	8b 81       	ldd	r24, Y+3	; 0x03
     264:	9c 81       	ldd	r25, Y+4	; 0x04
     266:	90 93 75 00 	sts	0x0075, r25
     26a:	80 93 74 00 	sts	0x0074, r24
			ADC_pvCallBackNotificationFunc=Copy_pvNotificationFunc;
     26e:	8d 81       	ldd	r24, Y+5	; 0x05
     270:	9e 81       	ldd	r25, Y+6	; 0x06
     272:	90 93 77 00 	sts	0x0077, r25
     276:	80 93 76 00 	sts	0x0076, r24
			//adjusting the channel using bit masking
			ADMUX&=CHANNEL_MUX_MASK;
     27a:	a7 e2       	ldi	r26, 0x27	; 39
     27c:	b0 e0       	ldi	r27, 0x00	; 0
     27e:	e7 e2       	ldi	r30, 0x27	; 39
     280:	f0 e0       	ldi	r31, 0x00	; 0
     282:	80 81       	ld	r24, Z
     284:	80 7e       	andi	r24, 0xE0	; 224
     286:	8c 93       	st	X, r24
			ADMUX|=Copy_u8Channel;
     288:	a7 e2       	ldi	r26, 0x27	; 39
     28a:	b0 e0       	ldi	r27, 0x00	; 0
     28c:	e7 e2       	ldi	r30, 0x27	; 39
     28e:	f0 e0       	ldi	r31, 0x00	; 0
     290:	90 81       	ld	r25, Z
     292:	8a 81       	ldd	r24, Y+2	; 0x02
     294:	89 2b       	or	r24, r25
     296:	8c 93       	st	X, r24
			//start conversion
			SET_BIT(ADCSRA,ADCSRA_ADSC);
     298:	a6 e2       	ldi	r26, 0x26	; 38
     29a:	b0 e0       	ldi	r27, 0x00	; 0
     29c:	e6 e2       	ldi	r30, 0x26	; 38
     29e:	f0 e0       	ldi	r31, 0x00	; 0
     2a0:	80 81       	ld	r24, Z
     2a2:	80 64       	ori	r24, 0x40	; 64
     2a4:	8c 93       	st	X, r24
			//Interrupt enable user enables global interrupt
			SET_BIT(ADCSRA,ADCSRA_ADIE);
     2a6:	a6 e2       	ldi	r26, 0x26	; 38
     2a8:	b0 e0       	ldi	r27, 0x00	; 0
     2aa:	e6 e2       	ldi	r30, 0x26	; 38
     2ac:	f0 e0       	ldi	r31, 0x00	; 0
     2ae:	80 81       	ld	r24, Z
     2b0:	88 60       	ori	r24, 0x08	; 8
     2b2:	8c 93       	st	X, r24
     2b4:	02 c0       	rjmp	.+4      	; 0x2ba <ADC_u8StartConversionAsynch+0x9a>
		}
	}
	else{
		Local_u8ErrorState=BUSY_FUNC;
     2b6:	83 e0       	ldi	r24, 0x03	; 3
     2b8:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
     2ba:	89 81       	ldd	r24, Y+1	; 0x01
}
     2bc:	26 96       	adiw	r28, 0x06	; 6
     2be:	0f b6       	in	r0, 0x3f	; 63
     2c0:	f8 94       	cli
     2c2:	de bf       	out	0x3e, r29	; 62
     2c4:	0f be       	out	0x3f, r0	; 63
     2c6:	cd bf       	out	0x3d, r28	; 61
     2c8:	cf 91       	pop	r28
     2ca:	df 91       	pop	r29
     2cc:	08 95       	ret

000002ce <ADC_u8StartChainConversion>:

u8 ADC_u8StartChainConversion(Chain_t* Copy_psADCChain){
     2ce:	df 93       	push	r29
     2d0:	cf 93       	push	r28
     2d2:	00 d0       	rcall	.+0      	; 0x2d4 <ADC_u8StartChainConversion+0x6>
     2d4:	0f 92       	push	r0
     2d6:	cd b7       	in	r28, 0x3d	; 61
     2d8:	de b7       	in	r29, 0x3e	; 62
     2da:	9b 83       	std	Y+3, r25	; 0x03
     2dc:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
     2de:	19 82       	std	Y+1, r1	; 0x01
	if(ADC_u8BusyState==IDLE){
     2e0:	80 91 78 00 	lds	r24, 0x0078
     2e4:	88 23       	and	r24, r24
     2e6:	09 f0       	breq	.+2      	; 0x2ea <ADC_u8StartChainConversion+0x1c>
     2e8:	3e c0       	rjmp	.+124    	; 0x366 <ADC_u8StartChainConversion+0x98>
		if(Copy_psADCChain==NULL){
     2ea:	8a 81       	ldd	r24, Y+2	; 0x02
     2ec:	9b 81       	ldd	r25, Y+3	; 0x03
     2ee:	00 97       	sbiw	r24, 0x00	; 0
     2f0:	19 f4       	brne	.+6      	; 0x2f8 <ADC_u8StartChainConversion+0x2a>
			Local_u8ErrorState=NULL_POINTER;
     2f2:	82 e0       	ldi	r24, 0x02	; 2
     2f4:	89 83       	std	Y+1, r24	; 0x01
     2f6:	39 c0       	rjmp	.+114    	; 0x36a <ADC_u8StartChainConversion+0x9c>
		}
		else{
			//make ADC busy
			ADC_u8BusyState=BUSY;
     2f8:	81 e0       	ldi	r24, 0x01	; 1
     2fa:	80 93 78 00 	sts	0x0078, r24
			//make Conversion Mode Chain Conversion
			ADC_u8ConversionMode=CHAIN;
     2fe:	81 e0       	ldi	r24, 0x01	; 1
     300:	80 93 7c 00 	sts	0x007C, r24
			//put the local variables into global so they can be used in the ISR
			ADC_psChain=Copy_psADCChain;
     304:	8a 81       	ldd	r24, Y+2	; 0x02
     306:	9b 81       	ldd	r25, Y+3	; 0x03
     308:	90 93 7a 00 	sts	0x007A, r25
     30c:	80 93 79 00 	sts	0x0079, r24
			//adjusting the channel using bit masking
			ADC_u8ChainIndex=0;
     310:	10 92 7b 00 	sts	0x007B, r1
			ADMUX&=CHANNEL_MUX_MASK;
     314:	a7 e2       	ldi	r26, 0x27	; 39
     316:	b0 e0       	ldi	r27, 0x00	; 0
     318:	e7 e2       	ldi	r30, 0x27	; 39
     31a:	f0 e0       	ldi	r31, 0x00	; 0
     31c:	80 81       	ld	r24, Z
     31e:	80 7e       	andi	r24, 0xE0	; 224
     320:	8c 93       	st	X, r24
			ADMUX|=Copy_psADCChain->ChannelArr[ADC_u8ChainIndex];
     322:	a7 e2       	ldi	r26, 0x27	; 39
     324:	b0 e0       	ldi	r27, 0x00	; 0
     326:	e7 e2       	ldi	r30, 0x27	; 39
     328:	f0 e0       	ldi	r31, 0x00	; 0
     32a:	40 81       	ld	r20, Z
     32c:	ea 81       	ldd	r30, Y+2	; 0x02
     32e:	fb 81       	ldd	r31, Y+3	; 0x03
     330:	20 81       	ld	r18, Z
     332:	31 81       	ldd	r19, Z+1	; 0x01
     334:	80 91 7b 00 	lds	r24, 0x007B
     338:	88 2f       	mov	r24, r24
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	f9 01       	movw	r30, r18
     33e:	e8 0f       	add	r30, r24
     340:	f9 1f       	adc	r31, r25
     342:	80 81       	ld	r24, Z
     344:	84 2b       	or	r24, r20
     346:	8c 93       	st	X, r24
			//start conversion
			SET_BIT(ADCSRA,ADCSRA_ADSC);
     348:	a6 e2       	ldi	r26, 0x26	; 38
     34a:	b0 e0       	ldi	r27, 0x00	; 0
     34c:	e6 e2       	ldi	r30, 0x26	; 38
     34e:	f0 e0       	ldi	r31, 0x00	; 0
     350:	80 81       	ld	r24, Z
     352:	80 64       	ori	r24, 0x40	; 64
     354:	8c 93       	st	X, r24
			//Interrupt enable user enables global interrupt
			SET_BIT(ADCSRA,ADCSRA_ADIE);
     356:	a6 e2       	ldi	r26, 0x26	; 38
     358:	b0 e0       	ldi	r27, 0x00	; 0
     35a:	e6 e2       	ldi	r30, 0x26	; 38
     35c:	f0 e0       	ldi	r31, 0x00	; 0
     35e:	80 81       	ld	r24, Z
     360:	88 60       	ori	r24, 0x08	; 8
     362:	8c 93       	st	X, r24
     364:	02 c0       	rjmp	.+4      	; 0x36a <ADC_u8StartChainConversion+0x9c>
		}
	}
	else{
		Local_u8ErrorState=BUSY_FUNC;
     366:	83 e0       	ldi	r24, 0x03	; 3
     368:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
     36a:	89 81       	ldd	r24, Y+1	; 0x01
}
     36c:	0f 90       	pop	r0
     36e:	0f 90       	pop	r0
     370:	0f 90       	pop	r0
     372:	cf 91       	pop	r28
     374:	df 91       	pop	r29
     376:	08 95       	ret

00000378 <__vector_16>:

void __vector_16(void)   __attribute__((signal));
void __vector_16(void){
     378:	1f 92       	push	r1
     37a:	0f 92       	push	r0
     37c:	0f b6       	in	r0, 0x3f	; 63
     37e:	0f 92       	push	r0
     380:	11 24       	eor	r1, r1
     382:	2f 93       	push	r18
     384:	3f 93       	push	r19
     386:	4f 93       	push	r20
     388:	5f 93       	push	r21
     38a:	6f 93       	push	r22
     38c:	7f 93       	push	r23
     38e:	8f 93       	push	r24
     390:	9f 93       	push	r25
     392:	af 93       	push	r26
     394:	bf 93       	push	r27
     396:	ef 93       	push	r30
     398:	ff 93       	push	r31
     39a:	df 93       	push	r29
     39c:	cf 93       	push	r28
     39e:	cd b7       	in	r28, 0x3d	; 61
     3a0:	de b7       	in	r29, 0x3e	; 62
	if(ADC_u8ConversionMode==SINGLE){
     3a2:	80 91 7c 00 	lds	r24, 0x007C
     3a6:	88 23       	and	r24, r24
     3a8:	d1 f4       	brne	.+52     	; 0x3de <__vector_16+0x66>
		//read result
#if ADC_RESOLUTION == 8
		*ADC_pu16Reading= ADCH;
     3aa:	a0 91 74 00 	lds	r26, 0x0074
     3ae:	b0 91 75 00 	lds	r27, 0x0075
     3b2:	e5 e2       	ldi	r30, 0x25	; 37
     3b4:	f0 e0       	ldi	r31, 0x00	; 0
     3b6:	80 81       	ld	r24, Z
     3b8:	88 2f       	mov	r24, r24
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	8d 93       	st	X+, r24
     3be:	9c 93       	st	X, r25
		*ADC_pu16Reading = ADC;
#else
#error "Wrong ADJUST OPTION"
#endif
		//make the adc idle to work again
		ADC_u8BusyState=IDLE;
     3c0:	10 92 78 00 	sts	0x0078, r1
		//call the notification function
		ADC_pvCallBackNotificationFunc();
     3c4:	e0 91 76 00 	lds	r30, 0x0076
     3c8:	f0 91 77 00 	lds	r31, 0x0077
     3cc:	09 95       	icall
		//disable interrupt
		CLR_BIT(ADCSRA,ADCSRA_ADIE);
     3ce:	a6 e2       	ldi	r26, 0x26	; 38
     3d0:	b0 e0       	ldi	r27, 0x00	; 0
     3d2:	e6 e2       	ldi	r30, 0x26	; 38
     3d4:	f0 e0       	ldi	r31, 0x00	; 0
     3d6:	80 81       	ld	r24, Z
     3d8:	87 7f       	andi	r24, 0xF7	; 247
     3da:	8c 93       	st	X, r24
     3dc:	5f c0       	rjmp	.+190    	; 0x49c <__vector_16+0x124>
	}
	else if(ADC_u8ConversionMode==CHAIN){
     3de:	80 91 7c 00 	lds	r24, 0x007C
     3e2:	81 30       	cpi	r24, 0x01	; 1
     3e4:	09 f0       	breq	.+2      	; 0x3e8 <__vector_16+0x70>
     3e6:	5a c0       	rjmp	.+180    	; 0x49c <__vector_16+0x124>
#if ADC_RESOLUTION == 8
			ADC_psChain->ResultArr[ADC_u8ChainIndex]= ADCH;
     3e8:	e0 91 79 00 	lds	r30, 0x0079
     3ec:	f0 91 7a 00 	lds	r31, 0x007A
     3f0:	22 81       	ldd	r18, Z+2	; 0x02
     3f2:	33 81       	ldd	r19, Z+3	; 0x03
     3f4:	80 91 7b 00 	lds	r24, 0x007B
     3f8:	88 2f       	mov	r24, r24
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	88 0f       	add	r24, r24
     3fe:	99 1f       	adc	r25, r25
     400:	d9 01       	movw	r26, r18
     402:	a8 0f       	add	r26, r24
     404:	b9 1f       	adc	r27, r25
     406:	e5 e2       	ldi	r30, 0x25	; 37
     408:	f0 e0       	ldi	r31, 0x00	; 0
     40a:	80 81       	ld	r24, Z
     40c:	88 2f       	mov	r24, r24
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	11 96       	adiw	r26, 0x01	; 1
     412:	9c 93       	st	X, r25
     414:	8e 93       	st	-X, r24
			ADC_psChain->ResultArr[ADC_u8ChainIndex] = ADC;
#else
#error "WRONG RESOLUTION OPTION"
#endif
		//increment index
		ADC_u8ChainIndex++;
     416:	80 91 7b 00 	lds	r24, 0x007B
     41a:	8f 5f       	subi	r24, 0xFF	; 255
     41c:	80 93 7b 00 	sts	0x007B, r24
		
		if(ADC_u8ChainIndex==ADC_psChain->Size){
     420:	e0 91 79 00 	lds	r30, 0x0079
     424:	f0 91 7a 00 	lds	r31, 0x007A
     428:	94 81       	ldd	r25, Z+4	; 0x04
     42a:	80 91 7b 00 	lds	r24, 0x007B
     42e:	98 17       	cp	r25, r24
     430:	91 f4       	brne	.+36     	; 0x456 <__vector_16+0xde>
			ADC_psChain->NotiFunc();
     432:	e0 91 79 00 	lds	r30, 0x0079
     436:	f0 91 7a 00 	lds	r31, 0x007A
     43a:	05 80       	ldd	r0, Z+5	; 0x05
     43c:	f6 81       	ldd	r31, Z+6	; 0x06
     43e:	e0 2d       	mov	r30, r0
     440:	09 95       	icall
			//disable interrupt
			CLR_BIT(ADCSRA,ADCSRA_ADIE);
     442:	a6 e2       	ldi	r26, 0x26	; 38
     444:	b0 e0       	ldi	r27, 0x00	; 0
     446:	e6 e2       	ldi	r30, 0x26	; 38
     448:	f0 e0       	ldi	r31, 0x00	; 0
     44a:	80 81       	ld	r24, Z
     44c:	87 7f       	andi	r24, 0xF7	; 247
     44e:	8c 93       	st	X, r24
			//make the adc idle to work again
			ADC_u8BusyState=IDLE;
     450:	10 92 78 00 	sts	0x0078, r1
     454:	23 c0       	rjmp	.+70     	; 0x49c <__vector_16+0x124>
		}
		else{
			//store the result

			//set new channel and start next conversion
			ADMUX&=CHANNEL_MUX_MASK;
     456:	a7 e2       	ldi	r26, 0x27	; 39
     458:	b0 e0       	ldi	r27, 0x00	; 0
     45a:	e7 e2       	ldi	r30, 0x27	; 39
     45c:	f0 e0       	ldi	r31, 0x00	; 0
     45e:	80 81       	ld	r24, Z
     460:	80 7e       	andi	r24, 0xE0	; 224
     462:	8c 93       	st	X, r24
			ADMUX|=ADC_psChain->ChannelArr[ADC_u8ChainIndex];
     464:	a7 e2       	ldi	r26, 0x27	; 39
     466:	b0 e0       	ldi	r27, 0x00	; 0
     468:	e7 e2       	ldi	r30, 0x27	; 39
     46a:	f0 e0       	ldi	r31, 0x00	; 0
     46c:	40 81       	ld	r20, Z
     46e:	e0 91 79 00 	lds	r30, 0x0079
     472:	f0 91 7a 00 	lds	r31, 0x007A
     476:	20 81       	ld	r18, Z
     478:	31 81       	ldd	r19, Z+1	; 0x01
     47a:	80 91 7b 00 	lds	r24, 0x007B
     47e:	88 2f       	mov	r24, r24
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	f9 01       	movw	r30, r18
     484:	e8 0f       	add	r30, r24
     486:	f9 1f       	adc	r31, r25
     488:	80 81       	ld	r24, Z
     48a:	84 2b       	or	r24, r20
     48c:	8c 93       	st	X, r24
			SET_BIT(ADCSRA,ADCSRA_ADSC);
     48e:	a6 e2       	ldi	r26, 0x26	; 38
     490:	b0 e0       	ldi	r27, 0x00	; 0
     492:	e6 e2       	ldi	r30, 0x26	; 38
     494:	f0 e0       	ldi	r31, 0x00	; 0
     496:	80 81       	ld	r24, Z
     498:	80 64       	ori	r24, 0x40	; 64
     49a:	8c 93       	st	X, r24

		}
	}
}
     49c:	cf 91       	pop	r28
     49e:	df 91       	pop	r29
     4a0:	ff 91       	pop	r31
     4a2:	ef 91       	pop	r30
     4a4:	bf 91       	pop	r27
     4a6:	af 91       	pop	r26
     4a8:	9f 91       	pop	r25
     4aa:	8f 91       	pop	r24
     4ac:	7f 91       	pop	r23
     4ae:	6f 91       	pop	r22
     4b0:	5f 91       	pop	r21
     4b2:	4f 91       	pop	r20
     4b4:	3f 91       	pop	r19
     4b6:	2f 91       	pop	r18
     4b8:	0f 90       	pop	r0
     4ba:	0f be       	out	0x3f, r0	; 63
     4bc:	0f 90       	pop	r0
     4be:	1f 90       	pop	r1
     4c0:	18 95       	reti

000004c2 <DIO_u8SetPinValue>:
#include "DIO_private.h"
#include "DIO_config.h"



u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value){
     4c2:	df 93       	push	r29
     4c4:	cf 93       	push	r28
     4c6:	cd b7       	in	r28, 0x3d	; 61
     4c8:	de b7       	in	r29, 0x3e	; 62
     4ca:	28 97       	sbiw	r28, 0x08	; 8
     4cc:	0f b6       	in	r0, 0x3f	; 63
     4ce:	f8 94       	cli
     4d0:	de bf       	out	0x3e, r29	; 62
     4d2:	0f be       	out	0x3f, r0	; 63
     4d4:	cd bf       	out	0x3d, r28	; 61
     4d6:	8a 83       	std	Y+2, r24	; 0x02
     4d8:	6b 83       	std	Y+3, r22	; 0x03
     4da:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=OK;
     4dc:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin <= DIO_u8PIN7){
     4de:	8b 81       	ldd	r24, Y+3	; 0x03
     4e0:	88 30       	cpi	r24, 0x08	; 8
     4e2:	08 f0       	brcs	.+2      	; 0x4e6 <DIO_u8SetPinValue+0x24>
     4e4:	f4 c0       	rjmp	.+488    	; 0x6ce <DIO_u8SetPinValue+0x20c>
		if(Copy_u8Value == DIO_u8PIN_LOW){
     4e6:	8c 81       	ldd	r24, Y+4	; 0x04
     4e8:	88 23       	and	r24, r24
     4ea:	09 f0       	breq	.+2      	; 0x4ee <DIO_u8SetPinValue+0x2c>
     4ec:	77 c0       	rjmp	.+238    	; 0x5dc <DIO_u8SetPinValue+0x11a>
			switch(Copy_u8Port){
     4ee:	8a 81       	ldd	r24, Y+2	; 0x02
     4f0:	28 2f       	mov	r18, r24
     4f2:	30 e0       	ldi	r19, 0x00	; 0
     4f4:	38 87       	std	Y+8, r19	; 0x08
     4f6:	2f 83       	std	Y+7, r18	; 0x07
     4f8:	8f 81       	ldd	r24, Y+7	; 0x07
     4fa:	98 85       	ldd	r25, Y+8	; 0x08
     4fc:	81 30       	cpi	r24, 0x01	; 1
     4fe:	91 05       	cpc	r25, r1
     500:	59 f1       	breq	.+86     	; 0x558 <DIO_u8SetPinValue+0x96>
     502:	2f 81       	ldd	r18, Y+7	; 0x07
     504:	38 85       	ldd	r19, Y+8	; 0x08
     506:	22 30       	cpi	r18, 0x02	; 2
     508:	31 05       	cpc	r19, r1
     50a:	2c f4       	brge	.+10     	; 0x516 <DIO_u8SetPinValue+0x54>
     50c:	8f 81       	ldd	r24, Y+7	; 0x07
     50e:	98 85       	ldd	r25, Y+8	; 0x08
     510:	00 97       	sbiw	r24, 0x00	; 0
     512:	69 f0       	breq	.+26     	; 0x52e <DIO_u8SetPinValue+0x6c>
     514:	60 c0       	rjmp	.+192    	; 0x5d6 <DIO_u8SetPinValue+0x114>
     516:	2f 81       	ldd	r18, Y+7	; 0x07
     518:	38 85       	ldd	r19, Y+8	; 0x08
     51a:	22 30       	cpi	r18, 0x02	; 2
     51c:	31 05       	cpc	r19, r1
     51e:	89 f1       	breq	.+98     	; 0x582 <DIO_u8SetPinValue+0xc0>
     520:	8f 81       	ldd	r24, Y+7	; 0x07
     522:	98 85       	ldd	r25, Y+8	; 0x08
     524:	83 30       	cpi	r24, 0x03	; 3
     526:	91 05       	cpc	r25, r1
     528:	09 f4       	brne	.+2      	; 0x52c <DIO_u8SetPinValue+0x6a>
     52a:	40 c0       	rjmp	.+128    	; 0x5ac <DIO_u8SetPinValue+0xea>
     52c:	54 c0       	rjmp	.+168    	; 0x5d6 <DIO_u8SetPinValue+0x114>
			case DIO_u8PORTA : CLR_BIT(PORTA,Copy_u8Pin); break;
     52e:	ab e3       	ldi	r26, 0x3B	; 59
     530:	b0 e0       	ldi	r27, 0x00	; 0
     532:	eb e3       	ldi	r30, 0x3B	; 59
     534:	f0 e0       	ldi	r31, 0x00	; 0
     536:	80 81       	ld	r24, Z
     538:	48 2f       	mov	r20, r24
     53a:	8b 81       	ldd	r24, Y+3	; 0x03
     53c:	28 2f       	mov	r18, r24
     53e:	30 e0       	ldi	r19, 0x00	; 0
     540:	81 e0       	ldi	r24, 0x01	; 1
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	02 2e       	mov	r0, r18
     546:	02 c0       	rjmp	.+4      	; 0x54c <DIO_u8SetPinValue+0x8a>
     548:	88 0f       	add	r24, r24
     54a:	99 1f       	adc	r25, r25
     54c:	0a 94       	dec	r0
     54e:	e2 f7       	brpl	.-8      	; 0x548 <DIO_u8SetPinValue+0x86>
     550:	80 95       	com	r24
     552:	84 23       	and	r24, r20
     554:	8c 93       	st	X, r24
     556:	bd c0       	rjmp	.+378    	; 0x6d2 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB : CLR_BIT(PORTB,Copy_u8Pin); break;
     558:	a8 e3       	ldi	r26, 0x38	; 56
     55a:	b0 e0       	ldi	r27, 0x00	; 0
     55c:	e8 e3       	ldi	r30, 0x38	; 56
     55e:	f0 e0       	ldi	r31, 0x00	; 0
     560:	80 81       	ld	r24, Z
     562:	48 2f       	mov	r20, r24
     564:	8b 81       	ldd	r24, Y+3	; 0x03
     566:	28 2f       	mov	r18, r24
     568:	30 e0       	ldi	r19, 0x00	; 0
     56a:	81 e0       	ldi	r24, 0x01	; 1
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	02 2e       	mov	r0, r18
     570:	02 c0       	rjmp	.+4      	; 0x576 <DIO_u8SetPinValue+0xb4>
     572:	88 0f       	add	r24, r24
     574:	99 1f       	adc	r25, r25
     576:	0a 94       	dec	r0
     578:	e2 f7       	brpl	.-8      	; 0x572 <DIO_u8SetPinValue+0xb0>
     57a:	80 95       	com	r24
     57c:	84 23       	and	r24, r20
     57e:	8c 93       	st	X, r24
     580:	a8 c0       	rjmp	.+336    	; 0x6d2 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC : CLR_BIT(PORTC,Copy_u8Pin); break;
     582:	a5 e3       	ldi	r26, 0x35	; 53
     584:	b0 e0       	ldi	r27, 0x00	; 0
     586:	e5 e3       	ldi	r30, 0x35	; 53
     588:	f0 e0       	ldi	r31, 0x00	; 0
     58a:	80 81       	ld	r24, Z
     58c:	48 2f       	mov	r20, r24
     58e:	8b 81       	ldd	r24, Y+3	; 0x03
     590:	28 2f       	mov	r18, r24
     592:	30 e0       	ldi	r19, 0x00	; 0
     594:	81 e0       	ldi	r24, 0x01	; 1
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	02 2e       	mov	r0, r18
     59a:	02 c0       	rjmp	.+4      	; 0x5a0 <DIO_u8SetPinValue+0xde>
     59c:	88 0f       	add	r24, r24
     59e:	99 1f       	adc	r25, r25
     5a0:	0a 94       	dec	r0
     5a2:	e2 f7       	brpl	.-8      	; 0x59c <DIO_u8SetPinValue+0xda>
     5a4:	80 95       	com	r24
     5a6:	84 23       	and	r24, r20
     5a8:	8c 93       	st	X, r24
     5aa:	93 c0       	rjmp	.+294    	; 0x6d2 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD : CLR_BIT(PORTD,Copy_u8Pin); break;
     5ac:	a2 e3       	ldi	r26, 0x32	; 50
     5ae:	b0 e0       	ldi	r27, 0x00	; 0
     5b0:	e2 e3       	ldi	r30, 0x32	; 50
     5b2:	f0 e0       	ldi	r31, 0x00	; 0
     5b4:	80 81       	ld	r24, Z
     5b6:	48 2f       	mov	r20, r24
     5b8:	8b 81       	ldd	r24, Y+3	; 0x03
     5ba:	28 2f       	mov	r18, r24
     5bc:	30 e0       	ldi	r19, 0x00	; 0
     5be:	81 e0       	ldi	r24, 0x01	; 1
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	02 2e       	mov	r0, r18
     5c4:	02 c0       	rjmp	.+4      	; 0x5ca <DIO_u8SetPinValue+0x108>
     5c6:	88 0f       	add	r24, r24
     5c8:	99 1f       	adc	r25, r25
     5ca:	0a 94       	dec	r0
     5cc:	e2 f7       	brpl	.-8      	; 0x5c6 <DIO_u8SetPinValue+0x104>
     5ce:	80 95       	com	r24
     5d0:	84 23       	and	r24, r20
     5d2:	8c 93       	st	X, r24
     5d4:	7e c0       	rjmp	.+252    	; 0x6d2 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=NOK;
     5d6:	81 e0       	ldi	r24, 0x01	; 1
     5d8:	89 83       	std	Y+1, r24	; 0x01
     5da:	7b c0       	rjmp	.+246    	; 0x6d2 <DIO_u8SetPinValue+0x210>
			}
		}
		else if(Copy_u8Value == DIO_u8PIN_HIGH){
     5dc:	8c 81       	ldd	r24, Y+4	; 0x04
     5de:	81 30       	cpi	r24, 0x01	; 1
     5e0:	09 f0       	breq	.+2      	; 0x5e4 <DIO_u8SetPinValue+0x122>
     5e2:	72 c0       	rjmp	.+228    	; 0x6c8 <DIO_u8SetPinValue+0x206>
			switch(Copy_u8Port){
     5e4:	8a 81       	ldd	r24, Y+2	; 0x02
     5e6:	28 2f       	mov	r18, r24
     5e8:	30 e0       	ldi	r19, 0x00	; 0
     5ea:	3e 83       	std	Y+6, r19	; 0x06
     5ec:	2d 83       	std	Y+5, r18	; 0x05
     5ee:	8d 81       	ldd	r24, Y+5	; 0x05
     5f0:	9e 81       	ldd	r25, Y+6	; 0x06
     5f2:	81 30       	cpi	r24, 0x01	; 1
     5f4:	91 05       	cpc	r25, r1
     5f6:	49 f1       	breq	.+82     	; 0x64a <DIO_u8SetPinValue+0x188>
     5f8:	2d 81       	ldd	r18, Y+5	; 0x05
     5fa:	3e 81       	ldd	r19, Y+6	; 0x06
     5fc:	22 30       	cpi	r18, 0x02	; 2
     5fe:	31 05       	cpc	r19, r1
     600:	2c f4       	brge	.+10     	; 0x60c <DIO_u8SetPinValue+0x14a>
     602:	8d 81       	ldd	r24, Y+5	; 0x05
     604:	9e 81       	ldd	r25, Y+6	; 0x06
     606:	00 97       	sbiw	r24, 0x00	; 0
     608:	61 f0       	breq	.+24     	; 0x622 <DIO_u8SetPinValue+0x160>
     60a:	5b c0       	rjmp	.+182    	; 0x6c2 <DIO_u8SetPinValue+0x200>
     60c:	2d 81       	ldd	r18, Y+5	; 0x05
     60e:	3e 81       	ldd	r19, Y+6	; 0x06
     610:	22 30       	cpi	r18, 0x02	; 2
     612:	31 05       	cpc	r19, r1
     614:	71 f1       	breq	.+92     	; 0x672 <DIO_u8SetPinValue+0x1b0>
     616:	8d 81       	ldd	r24, Y+5	; 0x05
     618:	9e 81       	ldd	r25, Y+6	; 0x06
     61a:	83 30       	cpi	r24, 0x03	; 3
     61c:	91 05       	cpc	r25, r1
     61e:	e9 f1       	breq	.+122    	; 0x69a <DIO_u8SetPinValue+0x1d8>
     620:	50 c0       	rjmp	.+160    	; 0x6c2 <DIO_u8SetPinValue+0x200>
			case DIO_u8PORTA : SET_BIT(PORTA,Copy_u8Pin); break;
     622:	ab e3       	ldi	r26, 0x3B	; 59
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	eb e3       	ldi	r30, 0x3B	; 59
     628:	f0 e0       	ldi	r31, 0x00	; 0
     62a:	80 81       	ld	r24, Z
     62c:	48 2f       	mov	r20, r24
     62e:	8b 81       	ldd	r24, Y+3	; 0x03
     630:	28 2f       	mov	r18, r24
     632:	30 e0       	ldi	r19, 0x00	; 0
     634:	81 e0       	ldi	r24, 0x01	; 1
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	02 2e       	mov	r0, r18
     63a:	02 c0       	rjmp	.+4      	; 0x640 <DIO_u8SetPinValue+0x17e>
     63c:	88 0f       	add	r24, r24
     63e:	99 1f       	adc	r25, r25
     640:	0a 94       	dec	r0
     642:	e2 f7       	brpl	.-8      	; 0x63c <DIO_u8SetPinValue+0x17a>
     644:	84 2b       	or	r24, r20
     646:	8c 93       	st	X, r24
     648:	44 c0       	rjmp	.+136    	; 0x6d2 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB : SET_BIT(PORTB,Copy_u8Pin); break;
     64a:	a8 e3       	ldi	r26, 0x38	; 56
     64c:	b0 e0       	ldi	r27, 0x00	; 0
     64e:	e8 e3       	ldi	r30, 0x38	; 56
     650:	f0 e0       	ldi	r31, 0x00	; 0
     652:	80 81       	ld	r24, Z
     654:	48 2f       	mov	r20, r24
     656:	8b 81       	ldd	r24, Y+3	; 0x03
     658:	28 2f       	mov	r18, r24
     65a:	30 e0       	ldi	r19, 0x00	; 0
     65c:	81 e0       	ldi	r24, 0x01	; 1
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	02 2e       	mov	r0, r18
     662:	02 c0       	rjmp	.+4      	; 0x668 <DIO_u8SetPinValue+0x1a6>
     664:	88 0f       	add	r24, r24
     666:	99 1f       	adc	r25, r25
     668:	0a 94       	dec	r0
     66a:	e2 f7       	brpl	.-8      	; 0x664 <DIO_u8SetPinValue+0x1a2>
     66c:	84 2b       	or	r24, r20
     66e:	8c 93       	st	X, r24
     670:	30 c0       	rjmp	.+96     	; 0x6d2 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC : SET_BIT(PORTC,Copy_u8Pin); break;
     672:	a5 e3       	ldi	r26, 0x35	; 53
     674:	b0 e0       	ldi	r27, 0x00	; 0
     676:	e5 e3       	ldi	r30, 0x35	; 53
     678:	f0 e0       	ldi	r31, 0x00	; 0
     67a:	80 81       	ld	r24, Z
     67c:	48 2f       	mov	r20, r24
     67e:	8b 81       	ldd	r24, Y+3	; 0x03
     680:	28 2f       	mov	r18, r24
     682:	30 e0       	ldi	r19, 0x00	; 0
     684:	81 e0       	ldi	r24, 0x01	; 1
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	02 2e       	mov	r0, r18
     68a:	02 c0       	rjmp	.+4      	; 0x690 <DIO_u8SetPinValue+0x1ce>
     68c:	88 0f       	add	r24, r24
     68e:	99 1f       	adc	r25, r25
     690:	0a 94       	dec	r0
     692:	e2 f7       	brpl	.-8      	; 0x68c <DIO_u8SetPinValue+0x1ca>
     694:	84 2b       	or	r24, r20
     696:	8c 93       	st	X, r24
     698:	1c c0       	rjmp	.+56     	; 0x6d2 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD : SET_BIT(PORTD,Copy_u8Pin); break;
     69a:	a2 e3       	ldi	r26, 0x32	; 50
     69c:	b0 e0       	ldi	r27, 0x00	; 0
     69e:	e2 e3       	ldi	r30, 0x32	; 50
     6a0:	f0 e0       	ldi	r31, 0x00	; 0
     6a2:	80 81       	ld	r24, Z
     6a4:	48 2f       	mov	r20, r24
     6a6:	8b 81       	ldd	r24, Y+3	; 0x03
     6a8:	28 2f       	mov	r18, r24
     6aa:	30 e0       	ldi	r19, 0x00	; 0
     6ac:	81 e0       	ldi	r24, 0x01	; 1
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	02 2e       	mov	r0, r18
     6b2:	02 c0       	rjmp	.+4      	; 0x6b8 <DIO_u8SetPinValue+0x1f6>
     6b4:	88 0f       	add	r24, r24
     6b6:	99 1f       	adc	r25, r25
     6b8:	0a 94       	dec	r0
     6ba:	e2 f7       	brpl	.-8      	; 0x6b4 <DIO_u8SetPinValue+0x1f2>
     6bc:	84 2b       	or	r24, r20
     6be:	8c 93       	st	X, r24
     6c0:	08 c0       	rjmp	.+16     	; 0x6d2 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=NOK;
     6c2:	81 e0       	ldi	r24, 0x01	; 1
     6c4:	89 83       	std	Y+1, r24	; 0x01
     6c6:	05 c0       	rjmp	.+10     	; 0x6d2 <DIO_u8SetPinValue+0x210>
			}
		}
		else{
			Local_u8ErrorState=NOK;
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	89 83       	std	Y+1, r24	; 0x01
     6cc:	02 c0       	rjmp	.+4      	; 0x6d2 <DIO_u8SetPinValue+0x210>
		}
	}
	else{
		Local_u8ErrorState=NOK;
     6ce:	81 e0       	ldi	r24, 0x01	; 1
     6d0:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState ;
     6d2:	89 81       	ldd	r24, Y+1	; 0x01
}
     6d4:	28 96       	adiw	r28, 0x08	; 8
     6d6:	0f b6       	in	r0, 0x3f	; 63
     6d8:	f8 94       	cli
     6da:	de bf       	out	0x3e, r29	; 62
     6dc:	0f be       	out	0x3f, r0	; 63
     6de:	cd bf       	out	0x3d, r28	; 61
     6e0:	cf 91       	pop	r28
     6e2:	df 91       	pop	r29
     6e4:	08 95       	ret

000006e6 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8Port,u8 Copy_u8Value){
     6e6:	df 93       	push	r29
     6e8:	cf 93       	push	r28
     6ea:	00 d0       	rcall	.+0      	; 0x6ec <DIO_u8SetPortValue+0x6>
     6ec:	00 d0       	rcall	.+0      	; 0x6ee <DIO_u8SetPortValue+0x8>
     6ee:	0f 92       	push	r0
     6f0:	cd b7       	in	r28, 0x3d	; 61
     6f2:	de b7       	in	r29, 0x3e	; 62
     6f4:	8a 83       	std	Y+2, r24	; 0x02
     6f6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=OK;
     6f8:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8Port)
     6fa:	8a 81       	ldd	r24, Y+2	; 0x02
     6fc:	28 2f       	mov	r18, r24
     6fe:	30 e0       	ldi	r19, 0x00	; 0
     700:	3d 83       	std	Y+5, r19	; 0x05
     702:	2c 83       	std	Y+4, r18	; 0x04
     704:	8c 81       	ldd	r24, Y+4	; 0x04
     706:	9d 81       	ldd	r25, Y+5	; 0x05
     708:	81 30       	cpi	r24, 0x01	; 1
     70a:	91 05       	cpc	r25, r1
     70c:	d1 f0       	breq	.+52     	; 0x742 <DIO_u8SetPortValue+0x5c>
     70e:	2c 81       	ldd	r18, Y+4	; 0x04
     710:	3d 81       	ldd	r19, Y+5	; 0x05
     712:	22 30       	cpi	r18, 0x02	; 2
     714:	31 05       	cpc	r19, r1
     716:	2c f4       	brge	.+10     	; 0x722 <DIO_u8SetPortValue+0x3c>
     718:	8c 81       	ldd	r24, Y+4	; 0x04
     71a:	9d 81       	ldd	r25, Y+5	; 0x05
     71c:	00 97       	sbiw	r24, 0x00	; 0
     71e:	61 f0       	breq	.+24     	; 0x738 <DIO_u8SetPortValue+0x52>
     720:	1f c0       	rjmp	.+62     	; 0x760 <DIO_u8SetPortValue+0x7a>
     722:	2c 81       	ldd	r18, Y+4	; 0x04
     724:	3d 81       	ldd	r19, Y+5	; 0x05
     726:	22 30       	cpi	r18, 0x02	; 2
     728:	31 05       	cpc	r19, r1
     72a:	81 f0       	breq	.+32     	; 0x74c <DIO_u8SetPortValue+0x66>
     72c:	8c 81       	ldd	r24, Y+4	; 0x04
     72e:	9d 81       	ldd	r25, Y+5	; 0x05
     730:	83 30       	cpi	r24, 0x03	; 3
     732:	91 05       	cpc	r25, r1
     734:	81 f0       	breq	.+32     	; 0x756 <DIO_u8SetPortValue+0x70>
     736:	14 c0       	rjmp	.+40     	; 0x760 <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA: PORTA=Copy_u8Value; break;
     738:	eb e3       	ldi	r30, 0x3B	; 59
     73a:	f0 e0       	ldi	r31, 0x00	; 0
     73c:	8b 81       	ldd	r24, Y+3	; 0x03
     73e:	80 83       	st	Z, r24
     740:	11 c0       	rjmp	.+34     	; 0x764 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB: PORTB=Copy_u8Value; break;
     742:	e8 e3       	ldi	r30, 0x38	; 56
     744:	f0 e0       	ldi	r31, 0x00	; 0
     746:	8b 81       	ldd	r24, Y+3	; 0x03
     748:	80 83       	st	Z, r24
     74a:	0c c0       	rjmp	.+24     	; 0x764 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC: PORTC=Copy_u8Value; break;
     74c:	e5 e3       	ldi	r30, 0x35	; 53
     74e:	f0 e0       	ldi	r31, 0x00	; 0
     750:	8b 81       	ldd	r24, Y+3	; 0x03
     752:	80 83       	st	Z, r24
     754:	07 c0       	rjmp	.+14     	; 0x764 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD: PORTD=Copy_u8Value; break;
     756:	e2 e3       	ldi	r30, 0x32	; 50
     758:	f0 e0       	ldi	r31, 0x00	; 0
     75a:	8b 81       	ldd	r24, Y+3	; 0x03
     75c:	80 83       	st	Z, r24
     75e:	02 c0       	rjmp	.+4      	; 0x764 <DIO_u8SetPortValue+0x7e>
	default: Local_u8ErrorState=NOK ;
     760:	81 e0       	ldi	r24, 0x01	; 1
     762:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState ;
     764:	89 81       	ldd	r24, Y+1	; 0x01
}
     766:	0f 90       	pop	r0
     768:	0f 90       	pop	r0
     76a:	0f 90       	pop	r0
     76c:	0f 90       	pop	r0
     76e:	0f 90       	pop	r0
     770:	cf 91       	pop	r28
     772:	df 91       	pop	r29
     774:	08 95       	ret

00000776 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin, u8* Copy_pu8Value){
     776:	df 93       	push	r29
     778:	cf 93       	push	r28
     77a:	cd b7       	in	r28, 0x3d	; 61
     77c:	de b7       	in	r29, 0x3e	; 62
     77e:	27 97       	sbiw	r28, 0x07	; 7
     780:	0f b6       	in	r0, 0x3f	; 63
     782:	f8 94       	cli
     784:	de bf       	out	0x3e, r29	; 62
     786:	0f be       	out	0x3f, r0	; 63
     788:	cd bf       	out	0x3d, r28	; 61
     78a:	8a 83       	std	Y+2, r24	; 0x02
     78c:	6b 83       	std	Y+3, r22	; 0x03
     78e:	5d 83       	std	Y+5, r21	; 0x05
     790:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=OK;
     792:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_pu8Value != NULL) && (Copy_u8Pin <= DIO_u8PIN7)){
     794:	8c 81       	ldd	r24, Y+4	; 0x04
     796:	9d 81       	ldd	r25, Y+5	; 0x05
     798:	00 97       	sbiw	r24, 0x00	; 0
     79a:	09 f4       	brne	.+2      	; 0x79e <DIO_u8GetPinValue+0x28>
     79c:	78 c0       	rjmp	.+240    	; 0x88e <__stack+0x2f>
     79e:	8b 81       	ldd	r24, Y+3	; 0x03
     7a0:	88 30       	cpi	r24, 0x08	; 8
     7a2:	08 f0       	brcs	.+2      	; 0x7a6 <DIO_u8GetPinValue+0x30>
     7a4:	74 c0       	rjmp	.+232    	; 0x88e <__stack+0x2f>
		switch (Copy_u8Port){
     7a6:	8a 81       	ldd	r24, Y+2	; 0x02
     7a8:	28 2f       	mov	r18, r24
     7aa:	30 e0       	ldi	r19, 0x00	; 0
     7ac:	3f 83       	std	Y+7, r19	; 0x07
     7ae:	2e 83       	std	Y+6, r18	; 0x06
     7b0:	4e 81       	ldd	r20, Y+6	; 0x06
     7b2:	5f 81       	ldd	r21, Y+7	; 0x07
     7b4:	41 30       	cpi	r20, 0x01	; 1
     7b6:	51 05       	cpc	r21, r1
     7b8:	59 f1       	breq	.+86     	; 0x810 <DIO_u8GetPinValue+0x9a>
     7ba:	8e 81       	ldd	r24, Y+6	; 0x06
     7bc:	9f 81       	ldd	r25, Y+7	; 0x07
     7be:	82 30       	cpi	r24, 0x02	; 2
     7c0:	91 05       	cpc	r25, r1
     7c2:	34 f4       	brge	.+12     	; 0x7d0 <DIO_u8GetPinValue+0x5a>
     7c4:	2e 81       	ldd	r18, Y+6	; 0x06
     7c6:	3f 81       	ldd	r19, Y+7	; 0x07
     7c8:	21 15       	cp	r18, r1
     7ca:	31 05       	cpc	r19, r1
     7cc:	69 f0       	breq	.+26     	; 0x7e8 <DIO_u8GetPinValue+0x72>
     7ce:	5c c0       	rjmp	.+184    	; 0x888 <__stack+0x29>
     7d0:	4e 81       	ldd	r20, Y+6	; 0x06
     7d2:	5f 81       	ldd	r21, Y+7	; 0x07
     7d4:	42 30       	cpi	r20, 0x02	; 2
     7d6:	51 05       	cpc	r21, r1
     7d8:	79 f1       	breq	.+94     	; 0x838 <DIO_u8GetPinValue+0xc2>
     7da:	8e 81       	ldd	r24, Y+6	; 0x06
     7dc:	9f 81       	ldd	r25, Y+7	; 0x07
     7de:	83 30       	cpi	r24, 0x03	; 3
     7e0:	91 05       	cpc	r25, r1
     7e2:	09 f4       	brne	.+2      	; 0x7e6 <DIO_u8GetPinValue+0x70>
     7e4:	3d c0       	rjmp	.+122    	; 0x860 <__stack+0x1>
     7e6:	50 c0       	rjmp	.+160    	; 0x888 <__stack+0x29>
		case DIO_u8PORTA: *Copy_pu8Value = GET_BIT(PINA,Copy_u8Pin); break;
     7e8:	e9 e3       	ldi	r30, 0x39	; 57
     7ea:	f0 e0       	ldi	r31, 0x00	; 0
     7ec:	80 81       	ld	r24, Z
     7ee:	28 2f       	mov	r18, r24
     7f0:	30 e0       	ldi	r19, 0x00	; 0
     7f2:	8b 81       	ldd	r24, Y+3	; 0x03
     7f4:	88 2f       	mov	r24, r24
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	a9 01       	movw	r20, r18
     7fa:	02 c0       	rjmp	.+4      	; 0x800 <DIO_u8GetPinValue+0x8a>
     7fc:	55 95       	asr	r21
     7fe:	47 95       	ror	r20
     800:	8a 95       	dec	r24
     802:	e2 f7       	brpl	.-8      	; 0x7fc <DIO_u8GetPinValue+0x86>
     804:	ca 01       	movw	r24, r20
     806:	81 70       	andi	r24, 0x01	; 1
     808:	ec 81       	ldd	r30, Y+4	; 0x04
     80a:	fd 81       	ldd	r31, Y+5	; 0x05
     80c:	80 83       	st	Z, r24
     80e:	41 c0       	rjmp	.+130    	; 0x892 <__stack+0x33>
		case DIO_u8PORTB: *Copy_pu8Value = GET_BIT(PINB,Copy_u8Pin); break;
     810:	e6 e3       	ldi	r30, 0x36	; 54
     812:	f0 e0       	ldi	r31, 0x00	; 0
     814:	80 81       	ld	r24, Z
     816:	28 2f       	mov	r18, r24
     818:	30 e0       	ldi	r19, 0x00	; 0
     81a:	8b 81       	ldd	r24, Y+3	; 0x03
     81c:	88 2f       	mov	r24, r24
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	a9 01       	movw	r20, r18
     822:	02 c0       	rjmp	.+4      	; 0x828 <DIO_u8GetPinValue+0xb2>
     824:	55 95       	asr	r21
     826:	47 95       	ror	r20
     828:	8a 95       	dec	r24
     82a:	e2 f7       	brpl	.-8      	; 0x824 <DIO_u8GetPinValue+0xae>
     82c:	ca 01       	movw	r24, r20
     82e:	81 70       	andi	r24, 0x01	; 1
     830:	ec 81       	ldd	r30, Y+4	; 0x04
     832:	fd 81       	ldd	r31, Y+5	; 0x05
     834:	80 83       	st	Z, r24
     836:	2d c0       	rjmp	.+90     	; 0x892 <__stack+0x33>
		case DIO_u8PORTC: *Copy_pu8Value = GET_BIT(PINC,Copy_u8Pin); break;
     838:	e3 e3       	ldi	r30, 0x33	; 51
     83a:	f0 e0       	ldi	r31, 0x00	; 0
     83c:	80 81       	ld	r24, Z
     83e:	28 2f       	mov	r18, r24
     840:	30 e0       	ldi	r19, 0x00	; 0
     842:	8b 81       	ldd	r24, Y+3	; 0x03
     844:	88 2f       	mov	r24, r24
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	a9 01       	movw	r20, r18
     84a:	02 c0       	rjmp	.+4      	; 0x850 <DIO_u8GetPinValue+0xda>
     84c:	55 95       	asr	r21
     84e:	47 95       	ror	r20
     850:	8a 95       	dec	r24
     852:	e2 f7       	brpl	.-8      	; 0x84c <DIO_u8GetPinValue+0xd6>
     854:	ca 01       	movw	r24, r20
     856:	81 70       	andi	r24, 0x01	; 1
     858:	ec 81       	ldd	r30, Y+4	; 0x04
     85a:	fd 81       	ldd	r31, Y+5	; 0x05
     85c:	80 83       	st	Z, r24
     85e:	19 c0       	rjmp	.+50     	; 0x892 <__stack+0x33>
		case DIO_u8PORTD: *Copy_pu8Value = GET_BIT(PIND,Copy_u8Pin); break;
     860:	e0 e3       	ldi	r30, 0x30	; 48
     862:	f0 e0       	ldi	r31, 0x00	; 0
     864:	80 81       	ld	r24, Z
     866:	28 2f       	mov	r18, r24
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	8b 81       	ldd	r24, Y+3	; 0x03
     86c:	88 2f       	mov	r24, r24
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	a9 01       	movw	r20, r18
     872:	02 c0       	rjmp	.+4      	; 0x878 <__stack+0x19>
     874:	55 95       	asr	r21
     876:	47 95       	ror	r20
     878:	8a 95       	dec	r24
     87a:	e2 f7       	brpl	.-8      	; 0x874 <__stack+0x15>
     87c:	ca 01       	movw	r24, r20
     87e:	81 70       	andi	r24, 0x01	; 1
     880:	ec 81       	ldd	r30, Y+4	; 0x04
     882:	fd 81       	ldd	r31, Y+5	; 0x05
     884:	80 83       	st	Z, r24
     886:	05 c0       	rjmp	.+10     	; 0x892 <__stack+0x33>
		default:Local_u8ErrorState=NOK ;
     888:	81 e0       	ldi	r24, 0x01	; 1
     88a:	89 83       	std	Y+1, r24	; 0x01
     88c:	02 c0       	rjmp	.+4      	; 0x892 <__stack+0x33>
		}
	}
	else{
		Local_u8ErrorState=NOK;
     88e:	81 e0       	ldi	r24, 0x01	; 1
     890:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState ;
     892:	89 81       	ldd	r24, Y+1	; 0x01
}
     894:	27 96       	adiw	r28, 0x07	; 7
     896:	0f b6       	in	r0, 0x3f	; 63
     898:	f8 94       	cli
     89a:	de bf       	out	0x3e, r29	; 62
     89c:	0f be       	out	0x3f, r0	; 63
     89e:	cd bf       	out	0x3d, r28	; 61
     8a0:	cf 91       	pop	r28
     8a2:	df 91       	pop	r29
     8a4:	08 95       	ret

000008a6 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8Port,u8* Copy_pu8Value){
     8a6:	df 93       	push	r29
     8a8:	cf 93       	push	r28
     8aa:	00 d0       	rcall	.+0      	; 0x8ac <DIO_u8GetPortValue+0x6>
     8ac:	00 d0       	rcall	.+0      	; 0x8ae <DIO_u8GetPortValue+0x8>
     8ae:	00 d0       	rcall	.+0      	; 0x8b0 <DIO_u8GetPortValue+0xa>
     8b0:	cd b7       	in	r28, 0x3d	; 61
     8b2:	de b7       	in	r29, 0x3e	; 62
     8b4:	8a 83       	std	Y+2, r24	; 0x02
     8b6:	7c 83       	std	Y+4, r23	; 0x04
     8b8:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=OK;
     8ba:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8Port)
     8bc:	8a 81       	ldd	r24, Y+2	; 0x02
     8be:	28 2f       	mov	r18, r24
     8c0:	30 e0       	ldi	r19, 0x00	; 0
     8c2:	3e 83       	std	Y+6, r19	; 0x06
     8c4:	2d 83       	std	Y+5, r18	; 0x05
     8c6:	8d 81       	ldd	r24, Y+5	; 0x05
     8c8:	9e 81       	ldd	r25, Y+6	; 0x06
     8ca:	81 30       	cpi	r24, 0x01	; 1
     8cc:	91 05       	cpc	r25, r1
     8ce:	e1 f0       	breq	.+56     	; 0x908 <DIO_u8GetPortValue+0x62>
     8d0:	2d 81       	ldd	r18, Y+5	; 0x05
     8d2:	3e 81       	ldd	r19, Y+6	; 0x06
     8d4:	22 30       	cpi	r18, 0x02	; 2
     8d6:	31 05       	cpc	r19, r1
     8d8:	2c f4       	brge	.+10     	; 0x8e4 <DIO_u8GetPortValue+0x3e>
     8da:	8d 81       	ldd	r24, Y+5	; 0x05
     8dc:	9e 81       	ldd	r25, Y+6	; 0x06
     8de:	00 97       	sbiw	r24, 0x00	; 0
     8e0:	61 f0       	breq	.+24     	; 0x8fa <DIO_u8GetPortValue+0x54>
     8e2:	27 c0       	rjmp	.+78     	; 0x932 <DIO_u8GetPortValue+0x8c>
     8e4:	2d 81       	ldd	r18, Y+5	; 0x05
     8e6:	3e 81       	ldd	r19, Y+6	; 0x06
     8e8:	22 30       	cpi	r18, 0x02	; 2
     8ea:	31 05       	cpc	r19, r1
     8ec:	a1 f0       	breq	.+40     	; 0x916 <DIO_u8GetPortValue+0x70>
     8ee:	8d 81       	ldd	r24, Y+5	; 0x05
     8f0:	9e 81       	ldd	r25, Y+6	; 0x06
     8f2:	83 30       	cpi	r24, 0x03	; 3
     8f4:	91 05       	cpc	r25, r1
     8f6:	b1 f0       	breq	.+44     	; 0x924 <DIO_u8GetPortValue+0x7e>
     8f8:	1c c0       	rjmp	.+56     	; 0x932 <DIO_u8GetPortValue+0x8c>
	{
	case DIO_u8PORTA: *Copy_pu8Value = PINA; break;
     8fa:	e9 e3       	ldi	r30, 0x39	; 57
     8fc:	f0 e0       	ldi	r31, 0x00	; 0
     8fe:	80 81       	ld	r24, Z
     900:	eb 81       	ldd	r30, Y+3	; 0x03
     902:	fc 81       	ldd	r31, Y+4	; 0x04
     904:	80 83       	st	Z, r24
     906:	17 c0       	rjmp	.+46     	; 0x936 <DIO_u8GetPortValue+0x90>
	case DIO_u8PORTB: *Copy_pu8Value = PINB; break;
     908:	e6 e3       	ldi	r30, 0x36	; 54
     90a:	f0 e0       	ldi	r31, 0x00	; 0
     90c:	80 81       	ld	r24, Z
     90e:	eb 81       	ldd	r30, Y+3	; 0x03
     910:	fc 81       	ldd	r31, Y+4	; 0x04
     912:	80 83       	st	Z, r24
     914:	10 c0       	rjmp	.+32     	; 0x936 <DIO_u8GetPortValue+0x90>
	case DIO_u8PORTC: *Copy_pu8Value = PINC; break;
     916:	e3 e3       	ldi	r30, 0x33	; 51
     918:	f0 e0       	ldi	r31, 0x00	; 0
     91a:	80 81       	ld	r24, Z
     91c:	eb 81       	ldd	r30, Y+3	; 0x03
     91e:	fc 81       	ldd	r31, Y+4	; 0x04
     920:	80 83       	st	Z, r24
     922:	09 c0       	rjmp	.+18     	; 0x936 <DIO_u8GetPortValue+0x90>
	case DIO_u8PORTD: *Copy_pu8Value = PIND; break;
     924:	e0 e3       	ldi	r30, 0x30	; 48
     926:	f0 e0       	ldi	r31, 0x00	; 0
     928:	80 81       	ld	r24, Z
     92a:	eb 81       	ldd	r30, Y+3	; 0x03
     92c:	fc 81       	ldd	r31, Y+4	; 0x04
     92e:	80 83       	st	Z, r24
     930:	02 c0       	rjmp	.+4      	; 0x936 <DIO_u8GetPortValue+0x90>
	default: Local_u8ErrorState=NOK ;
     932:	81 e0       	ldi	r24, 0x01	; 1
     934:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
     936:	89 81       	ldd	r24, Y+1	; 0x01
}
     938:	26 96       	adiw	r28, 0x06	; 6
     93a:	0f b6       	in	r0, 0x3f	; 63
     93c:	f8 94       	cli
     93e:	de bf       	out	0x3e, r29	; 62
     940:	0f be       	out	0x3f, r0	; 63
     942:	cd bf       	out	0x3d, r28	; 61
     944:	cf 91       	pop	r28
     946:	df 91       	pop	r29
     948:	08 95       	ret

0000094a <DIO_u8TogglePinValue>:

u8 DIO_u8TogglePinValue(u8 Copy_u8Port,u8 Copy_u8Pin){
     94a:	df 93       	push	r29
     94c:	cf 93       	push	r28
     94e:	00 d0       	rcall	.+0      	; 0x950 <DIO_u8TogglePinValue+0x6>
     950:	00 d0       	rcall	.+0      	; 0x952 <DIO_u8TogglePinValue+0x8>
     952:	0f 92       	push	r0
     954:	cd b7       	in	r28, 0x3d	; 61
     956:	de b7       	in	r29, 0x3e	; 62
     958:	8a 83       	std	Y+2, r24	; 0x02
     95a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=OK;
     95c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin <= DIO_u8PIN7){
     95e:	8b 81       	ldd	r24, Y+3	; 0x03
     960:	88 30       	cpi	r24, 0x08	; 8
     962:	08 f0       	brcs	.+2      	; 0x966 <DIO_u8TogglePinValue+0x1c>
     964:	72 c0       	rjmp	.+228    	; 0xa4a <DIO_u8TogglePinValue+0x100>
			switch(Copy_u8Port){
     966:	8a 81       	ldd	r24, Y+2	; 0x02
     968:	28 2f       	mov	r18, r24
     96a:	30 e0       	ldi	r19, 0x00	; 0
     96c:	3d 83       	std	Y+5, r19	; 0x05
     96e:	2c 83       	std	Y+4, r18	; 0x04
     970:	8c 81       	ldd	r24, Y+4	; 0x04
     972:	9d 81       	ldd	r25, Y+5	; 0x05
     974:	81 30       	cpi	r24, 0x01	; 1
     976:	91 05       	cpc	r25, r1
     978:	49 f1       	breq	.+82     	; 0x9cc <DIO_u8TogglePinValue+0x82>
     97a:	2c 81       	ldd	r18, Y+4	; 0x04
     97c:	3d 81       	ldd	r19, Y+5	; 0x05
     97e:	22 30       	cpi	r18, 0x02	; 2
     980:	31 05       	cpc	r19, r1
     982:	2c f4       	brge	.+10     	; 0x98e <DIO_u8TogglePinValue+0x44>
     984:	8c 81       	ldd	r24, Y+4	; 0x04
     986:	9d 81       	ldd	r25, Y+5	; 0x05
     988:	00 97       	sbiw	r24, 0x00	; 0
     98a:	61 f0       	breq	.+24     	; 0x9a4 <DIO_u8TogglePinValue+0x5a>
     98c:	5b c0       	rjmp	.+182    	; 0xa44 <DIO_u8TogglePinValue+0xfa>
     98e:	2c 81       	ldd	r18, Y+4	; 0x04
     990:	3d 81       	ldd	r19, Y+5	; 0x05
     992:	22 30       	cpi	r18, 0x02	; 2
     994:	31 05       	cpc	r19, r1
     996:	71 f1       	breq	.+92     	; 0x9f4 <DIO_u8TogglePinValue+0xaa>
     998:	8c 81       	ldd	r24, Y+4	; 0x04
     99a:	9d 81       	ldd	r25, Y+5	; 0x05
     99c:	83 30       	cpi	r24, 0x03	; 3
     99e:	91 05       	cpc	r25, r1
     9a0:	e9 f1       	breq	.+122    	; 0xa1c <DIO_u8TogglePinValue+0xd2>
     9a2:	50 c0       	rjmp	.+160    	; 0xa44 <DIO_u8TogglePinValue+0xfa>
			case DIO_u8PORTA : TOGGLE_BIT(PORTA,Copy_u8Pin); break;
     9a4:	ab e3       	ldi	r26, 0x3B	; 59
     9a6:	b0 e0       	ldi	r27, 0x00	; 0
     9a8:	eb e3       	ldi	r30, 0x3B	; 59
     9aa:	f0 e0       	ldi	r31, 0x00	; 0
     9ac:	80 81       	ld	r24, Z
     9ae:	48 2f       	mov	r20, r24
     9b0:	8b 81       	ldd	r24, Y+3	; 0x03
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	81 e0       	ldi	r24, 0x01	; 1
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	02 2e       	mov	r0, r18
     9bc:	02 c0       	rjmp	.+4      	; 0x9c2 <DIO_u8TogglePinValue+0x78>
     9be:	88 0f       	add	r24, r24
     9c0:	99 1f       	adc	r25, r25
     9c2:	0a 94       	dec	r0
     9c4:	e2 f7       	brpl	.-8      	; 0x9be <DIO_u8TogglePinValue+0x74>
     9c6:	84 27       	eor	r24, r20
     9c8:	8c 93       	st	X, r24
     9ca:	41 c0       	rjmp	.+130    	; 0xa4e <DIO_u8TogglePinValue+0x104>
			case DIO_u8PORTB : TOGGLE_BIT(PORTB,Copy_u8Pin); break;
     9cc:	a8 e3       	ldi	r26, 0x38	; 56
     9ce:	b0 e0       	ldi	r27, 0x00	; 0
     9d0:	e8 e3       	ldi	r30, 0x38	; 56
     9d2:	f0 e0       	ldi	r31, 0x00	; 0
     9d4:	80 81       	ld	r24, Z
     9d6:	48 2f       	mov	r20, r24
     9d8:	8b 81       	ldd	r24, Y+3	; 0x03
     9da:	28 2f       	mov	r18, r24
     9dc:	30 e0       	ldi	r19, 0x00	; 0
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	02 2e       	mov	r0, r18
     9e4:	02 c0       	rjmp	.+4      	; 0x9ea <DIO_u8TogglePinValue+0xa0>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	0a 94       	dec	r0
     9ec:	e2 f7       	brpl	.-8      	; 0x9e6 <DIO_u8TogglePinValue+0x9c>
     9ee:	84 27       	eor	r24, r20
     9f0:	8c 93       	st	X, r24
     9f2:	2d c0       	rjmp	.+90     	; 0xa4e <DIO_u8TogglePinValue+0x104>
			case DIO_u8PORTC : TOGGLE_BIT(PORTC,Copy_u8Pin); break;
     9f4:	a5 e3       	ldi	r26, 0x35	; 53
     9f6:	b0 e0       	ldi	r27, 0x00	; 0
     9f8:	e5 e3       	ldi	r30, 0x35	; 53
     9fa:	f0 e0       	ldi	r31, 0x00	; 0
     9fc:	80 81       	ld	r24, Z
     9fe:	48 2f       	mov	r20, r24
     a00:	8b 81       	ldd	r24, Y+3	; 0x03
     a02:	28 2f       	mov	r18, r24
     a04:	30 e0       	ldi	r19, 0x00	; 0
     a06:	81 e0       	ldi	r24, 0x01	; 1
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	02 2e       	mov	r0, r18
     a0c:	02 c0       	rjmp	.+4      	; 0xa12 <DIO_u8TogglePinValue+0xc8>
     a0e:	88 0f       	add	r24, r24
     a10:	99 1f       	adc	r25, r25
     a12:	0a 94       	dec	r0
     a14:	e2 f7       	brpl	.-8      	; 0xa0e <DIO_u8TogglePinValue+0xc4>
     a16:	84 27       	eor	r24, r20
     a18:	8c 93       	st	X, r24
     a1a:	19 c0       	rjmp	.+50     	; 0xa4e <DIO_u8TogglePinValue+0x104>
			case DIO_u8PORTD : TOGGLE_BIT(PORTD,Copy_u8Pin); break;
     a1c:	a2 e3       	ldi	r26, 0x32	; 50
     a1e:	b0 e0       	ldi	r27, 0x00	; 0
     a20:	e2 e3       	ldi	r30, 0x32	; 50
     a22:	f0 e0       	ldi	r31, 0x00	; 0
     a24:	80 81       	ld	r24, Z
     a26:	48 2f       	mov	r20, r24
     a28:	8b 81       	ldd	r24, Y+3	; 0x03
     a2a:	28 2f       	mov	r18, r24
     a2c:	30 e0       	ldi	r19, 0x00	; 0
     a2e:	81 e0       	ldi	r24, 0x01	; 1
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	02 2e       	mov	r0, r18
     a34:	02 c0       	rjmp	.+4      	; 0xa3a <DIO_u8TogglePinValue+0xf0>
     a36:	88 0f       	add	r24, r24
     a38:	99 1f       	adc	r25, r25
     a3a:	0a 94       	dec	r0
     a3c:	e2 f7       	brpl	.-8      	; 0xa36 <DIO_u8TogglePinValue+0xec>
     a3e:	84 27       	eor	r24, r20
     a40:	8c 93       	st	X, r24
     a42:	05 c0       	rjmp	.+10     	; 0xa4e <DIO_u8TogglePinValue+0x104>
			default: Local_u8ErrorState=NOK;
     a44:	81 e0       	ldi	r24, 0x01	; 1
     a46:	89 83       	std	Y+1, r24	; 0x01
     a48:	02 c0       	rjmp	.+4      	; 0xa4e <DIO_u8TogglePinValue+0x104>
			}
		}
		else{
			Local_u8ErrorState=NOK;
     a4a:	81 e0       	ldi	r24, 0x01	; 1
     a4c:	89 83       	std	Y+1, r24	; 0x01
		}
	return Local_u8ErrorState;
     a4e:	89 81       	ldd	r24, Y+1	; 0x01
}
     a50:	0f 90       	pop	r0
     a52:	0f 90       	pop	r0
     a54:	0f 90       	pop	r0
     a56:	0f 90       	pop	r0
     a58:	0f 90       	pop	r0
     a5a:	cf 91       	pop	r28
     a5c:	df 91       	pop	r29
     a5e:	08 95       	ret

00000a60 <GIE_voidEnable>:
#include "BIT_MATH.h"

#include "GIE_interface.h"
#include "GIE_register.h"

void GIE_voidEnable(void){
     a60:	df 93       	push	r29
     a62:	cf 93       	push	r28
     a64:	cd b7       	in	r28, 0x3d	; 61
     a66:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(SREG,SREG_I);
     a68:	af e5       	ldi	r26, 0x5F	; 95
     a6a:	b0 e0       	ldi	r27, 0x00	; 0
     a6c:	ef e5       	ldi	r30, 0x5F	; 95
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	80 81       	ld	r24, Z
     a72:	80 68       	ori	r24, 0x80	; 128
     a74:	8c 93       	st	X, r24
}
     a76:	cf 91       	pop	r28
     a78:	df 91       	pop	r29
     a7a:	08 95       	ret

00000a7c <GIE_voidDisable>:

void GIE_voidDisable(void){
     a7c:	df 93       	push	r29
     a7e:	cf 93       	push	r28
     a80:	cd b7       	in	r28, 0x3d	; 61
     a82:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(SREG,SREG_I);
     a84:	af e5       	ldi	r26, 0x5F	; 95
     a86:	b0 e0       	ldi	r27, 0x00	; 0
     a88:	ef e5       	ldi	r30, 0x5F	; 95
     a8a:	f0 e0       	ldi	r31, 0x00	; 0
     a8c:	80 81       	ld	r24, Z
     a8e:	8f 77       	andi	r24, 0x7F	; 127
     a90:	8c 93       	st	X, r24
     a92:	cf 91       	pop	r28
     a94:	df 91       	pop	r29
     a96:	08 95       	ret

00000a98 <MATH_u32Power>:
#include "STD_TYPES.h"
#include "BIT_MATH.h"
#include "MATH_HELPER.h"

u32 MATH_u32Power(u32 Copy_u32Base,s32 Copy_u32Exponent){
     a98:	df 93       	push	r29
     a9a:	cf 93       	push	r28
     a9c:	cd b7       	in	r28, 0x3d	; 61
     a9e:	de b7       	in	r29, 0x3e	; 62
     aa0:	60 97       	sbiw	r28, 0x10	; 16
     aa2:	0f b6       	in	r0, 0x3f	; 63
     aa4:	f8 94       	cli
     aa6:	de bf       	out	0x3e, r29	; 62
     aa8:	0f be       	out	0x3f, r0	; 63
     aaa:	cd bf       	out	0x3d, r28	; 61
     aac:	69 87       	std	Y+9, r22	; 0x09
     aae:	7a 87       	std	Y+10, r23	; 0x0a
     ab0:	8b 87       	std	Y+11, r24	; 0x0b
     ab2:	9c 87       	std	Y+12, r25	; 0x0c
     ab4:	2d 87       	std	Y+13, r18	; 0x0d
     ab6:	3e 87       	std	Y+14, r19	; 0x0e
     ab8:	4f 87       	std	Y+15, r20	; 0x0f
     aba:	58 8b       	std	Y+16, r21	; 0x10
	u32 Local_u32Result=1;
     abc:	81 e0       	ldi	r24, 0x01	; 1
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	a0 e0       	ldi	r26, 0x00	; 0
     ac2:	b0 e0       	ldi	r27, 0x00	; 0
     ac4:	8d 83       	std	Y+5, r24	; 0x05
     ac6:	9e 83       	std	Y+6, r25	; 0x06
     ac8:	af 83       	std	Y+7, r26	; 0x07
     aca:	b8 87       	std	Y+8, r27	; 0x08
	for(u32 i=0;i<Copy_u32Exponent;i++){
     acc:	19 82       	std	Y+1, r1	; 0x01
     ace:	1a 82       	std	Y+2, r1	; 0x02
     ad0:	1b 82       	std	Y+3, r1	; 0x03
     ad2:	1c 82       	std	Y+4, r1	; 0x04
     ad4:	1d c0       	rjmp	.+58     	; 0xb10 <MATH_u32Power+0x78>
		Local_u32Result*=Copy_u32Base;
     ad6:	8d 81       	ldd	r24, Y+5	; 0x05
     ad8:	9e 81       	ldd	r25, Y+6	; 0x06
     ada:	af 81       	ldd	r26, Y+7	; 0x07
     adc:	b8 85       	ldd	r27, Y+8	; 0x08
     ade:	29 85       	ldd	r18, Y+9	; 0x09
     ae0:	3a 85       	ldd	r19, Y+10	; 0x0a
     ae2:	4b 85       	ldd	r20, Y+11	; 0x0b
     ae4:	5c 85       	ldd	r21, Y+12	; 0x0c
     ae6:	bc 01       	movw	r22, r24
     ae8:	cd 01       	movw	r24, r26
     aea:	0e 94 a0 10 	call	0x2140	; 0x2140 <__mulsi3>
     aee:	dc 01       	movw	r26, r24
     af0:	cb 01       	movw	r24, r22
     af2:	8d 83       	std	Y+5, r24	; 0x05
     af4:	9e 83       	std	Y+6, r25	; 0x06
     af6:	af 83       	std	Y+7, r26	; 0x07
     af8:	b8 87       	std	Y+8, r27	; 0x08
#include "BIT_MATH.h"
#include "MATH_HELPER.h"

u32 MATH_u32Power(u32 Copy_u32Base,s32 Copy_u32Exponent){
	u32 Local_u32Result=1;
	for(u32 i=0;i<Copy_u32Exponent;i++){
     afa:	89 81       	ldd	r24, Y+1	; 0x01
     afc:	9a 81       	ldd	r25, Y+2	; 0x02
     afe:	ab 81       	ldd	r26, Y+3	; 0x03
     b00:	bc 81       	ldd	r27, Y+4	; 0x04
     b02:	01 96       	adiw	r24, 0x01	; 1
     b04:	a1 1d       	adc	r26, r1
     b06:	b1 1d       	adc	r27, r1
     b08:	89 83       	std	Y+1, r24	; 0x01
     b0a:	9a 83       	std	Y+2, r25	; 0x02
     b0c:	ab 83       	std	Y+3, r26	; 0x03
     b0e:	bc 83       	std	Y+4, r27	; 0x04
     b10:	2d 85       	ldd	r18, Y+13	; 0x0d
     b12:	3e 85       	ldd	r19, Y+14	; 0x0e
     b14:	4f 85       	ldd	r20, Y+15	; 0x0f
     b16:	58 89       	ldd	r21, Y+16	; 0x10
     b18:	89 81       	ldd	r24, Y+1	; 0x01
     b1a:	9a 81       	ldd	r25, Y+2	; 0x02
     b1c:	ab 81       	ldd	r26, Y+3	; 0x03
     b1e:	bc 81       	ldd	r27, Y+4	; 0x04
     b20:	82 17       	cp	r24, r18
     b22:	93 07       	cpc	r25, r19
     b24:	a4 07       	cpc	r26, r20
     b26:	b5 07       	cpc	r27, r21
     b28:	b0 f2       	brcs	.-84     	; 0xad6 <MATH_u32Power+0x3e>
		Local_u32Result*=Copy_u32Base;
	}
	return Local_u32Result;
     b2a:	8d 81       	ldd	r24, Y+5	; 0x05
     b2c:	9e 81       	ldd	r25, Y+6	; 0x06
     b2e:	af 81       	ldd	r26, Y+7	; 0x07
     b30:	b8 85       	ldd	r27, Y+8	; 0x08
}
     b32:	bc 01       	movw	r22, r24
     b34:	cd 01       	movw	r24, r26
     b36:	60 96       	adiw	r28, 0x10	; 16
     b38:	0f b6       	in	r0, 0x3f	; 63
     b3a:	f8 94       	cli
     b3c:	de bf       	out	0x3e, r29	; 62
     b3e:	0f be       	out	0x3f, r0	; 63
     b40:	cd bf       	out	0x3d, r28	; 61
     b42:	cf 91       	pop	r28
     b44:	df 91       	pop	r29
     b46:	08 95       	ret

00000b48 <MATH_s32Map>:

s32 MATH_s32Map(s32 Copy_s32InputMin,s32 Copy_s32InputMax,s32 Copy_s32OutputMin,s32 Copy_s32OutputMax,s32 Copy_s32InputVal){
     b48:	af 92       	push	r10
     b4a:	bf 92       	push	r11
     b4c:	cf 92       	push	r12
     b4e:	df 92       	push	r13
     b50:	ef 92       	push	r14
     b52:	ff 92       	push	r15
     b54:	0f 93       	push	r16
     b56:	1f 93       	push	r17
     b58:	df 93       	push	r29
     b5a:	cf 93       	push	r28
     b5c:	cd b7       	in	r28, 0x3d	; 61
     b5e:	de b7       	in	r29, 0x3e	; 62
     b60:	64 97       	sbiw	r28, 0x14	; 20
     b62:	0f b6       	in	r0, 0x3f	; 63
     b64:	f8 94       	cli
     b66:	de bf       	out	0x3e, r29	; 62
     b68:	0f be       	out	0x3f, r0	; 63
     b6a:	cd bf       	out	0x3d, r28	; 61
     b6c:	6d 83       	std	Y+5, r22	; 0x05
     b6e:	7e 83       	std	Y+6, r23	; 0x06
     b70:	8f 83       	std	Y+7, r24	; 0x07
     b72:	98 87       	std	Y+8, r25	; 0x08
     b74:	29 87       	std	Y+9, r18	; 0x09
     b76:	3a 87       	std	Y+10, r19	; 0x0a
     b78:	4b 87       	std	Y+11, r20	; 0x0b
     b7a:	5c 87       	std	Y+12, r21	; 0x0c
     b7c:	ed 86       	std	Y+13, r14	; 0x0d
     b7e:	fe 86       	std	Y+14, r15	; 0x0e
     b80:	0f 87       	std	Y+15, r16	; 0x0f
     b82:	18 8b       	std	Y+16, r17	; 0x10
     b84:	a9 8a       	std	Y+17, r10	; 0x11
     b86:	ba 8a       	std	Y+18, r11	; 0x12
     b88:	cb 8a       	std	Y+19, r12	; 0x13
     b8a:	dc 8a       	std	Y+20, r13	; 0x14
    s32 Local_s32OutputVal;
    Local_s32OutputVal= (((Copy_s32OutputMax-Copy_s32OutputMin)*(Copy_s32InputVal-Copy_s32InputMin))/(Copy_s32InputMax-Copy_s32InputMin))+Copy_s32OutputMin;
     b8c:	29 89       	ldd	r18, Y+17	; 0x11
     b8e:	3a 89       	ldd	r19, Y+18	; 0x12
     b90:	4b 89       	ldd	r20, Y+19	; 0x13
     b92:	5c 89       	ldd	r21, Y+20	; 0x14
     b94:	8d 85       	ldd	r24, Y+13	; 0x0d
     b96:	9e 85       	ldd	r25, Y+14	; 0x0e
     b98:	af 85       	ldd	r26, Y+15	; 0x0f
     b9a:	b8 89       	ldd	r27, Y+16	; 0x10
     b9c:	79 01       	movw	r14, r18
     b9e:	8a 01       	movw	r16, r20
     ba0:	e8 1a       	sub	r14, r24
     ba2:	f9 0a       	sbc	r15, r25
     ba4:	0a 0b       	sbc	r16, r26
     ba6:	1b 0b       	sbc	r17, r27
     ba8:	29 a1       	ldd	r18, Y+33	; 0x21
     baa:	3a a1       	ldd	r19, Y+34	; 0x22
     bac:	4b a1       	ldd	r20, Y+35	; 0x23
     bae:	5c a1       	ldd	r21, Y+36	; 0x24
     bb0:	8d 81       	ldd	r24, Y+5	; 0x05
     bb2:	9e 81       	ldd	r25, Y+6	; 0x06
     bb4:	af 81       	ldd	r26, Y+7	; 0x07
     bb6:	b8 85       	ldd	r27, Y+8	; 0x08
     bb8:	28 1b       	sub	r18, r24
     bba:	39 0b       	sbc	r19, r25
     bbc:	4a 0b       	sbc	r20, r26
     bbe:	5b 0b       	sbc	r21, r27
     bc0:	c8 01       	movw	r24, r16
     bc2:	b7 01       	movw	r22, r14
     bc4:	0e 94 a0 10 	call	0x2140	; 0x2140 <__mulsi3>
     bc8:	7b 01       	movw	r14, r22
     bca:	8c 01       	movw	r16, r24
     bcc:	29 85       	ldd	r18, Y+9	; 0x09
     bce:	3a 85       	ldd	r19, Y+10	; 0x0a
     bd0:	4b 85       	ldd	r20, Y+11	; 0x0b
     bd2:	5c 85       	ldd	r21, Y+12	; 0x0c
     bd4:	8d 81       	ldd	r24, Y+5	; 0x05
     bd6:	9e 81       	ldd	r25, Y+6	; 0x06
     bd8:	af 81       	ldd	r26, Y+7	; 0x07
     bda:	b8 85       	ldd	r27, Y+8	; 0x08
     bdc:	28 1b       	sub	r18, r24
     bde:	39 0b       	sbc	r19, r25
     be0:	4a 0b       	sbc	r20, r26
     be2:	5b 0b       	sbc	r21, r27
     be4:	c8 01       	movw	r24, r16
     be6:	b7 01       	movw	r22, r14
     be8:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <__divmodsi4>
     bec:	da 01       	movw	r26, r20
     bee:	c9 01       	movw	r24, r18
     bf0:	9c 01       	movw	r18, r24
     bf2:	ad 01       	movw	r20, r26
     bf4:	8d 85       	ldd	r24, Y+13	; 0x0d
     bf6:	9e 85       	ldd	r25, Y+14	; 0x0e
     bf8:	af 85       	ldd	r26, Y+15	; 0x0f
     bfa:	b8 89       	ldd	r27, Y+16	; 0x10
     bfc:	82 0f       	add	r24, r18
     bfe:	93 1f       	adc	r25, r19
     c00:	a4 1f       	adc	r26, r20
     c02:	b5 1f       	adc	r27, r21
     c04:	89 83       	std	Y+1, r24	; 0x01
     c06:	9a 83       	std	Y+2, r25	; 0x02
     c08:	ab 83       	std	Y+3, r26	; 0x03
     c0a:	bc 83       	std	Y+4, r27	; 0x04
    return Local_s32OutputVal;
     c0c:	89 81       	ldd	r24, Y+1	; 0x01
     c0e:	9a 81       	ldd	r25, Y+2	; 0x02
     c10:	ab 81       	ldd	r26, Y+3	; 0x03
     c12:	bc 81       	ldd	r27, Y+4	; 0x04
     c14:	bc 01       	movw	r22, r24
     c16:	cd 01       	movw	r24, r26
     c18:	64 96       	adiw	r28, 0x14	; 20
     c1a:	0f b6       	in	r0, 0x3f	; 63
     c1c:	f8 94       	cli
     c1e:	de bf       	out	0x3e, r29	; 62
     c20:	0f be       	out	0x3f, r0	; 63
     c22:	cd bf       	out	0x3d, r28	; 61
     c24:	cf 91       	pop	r28
     c26:	df 91       	pop	r29
     c28:	1f 91       	pop	r17
     c2a:	0f 91       	pop	r16
     c2c:	ff 90       	pop	r15
     c2e:	ef 90       	pop	r14
     c30:	df 90       	pop	r13
     c32:	cf 90       	pop	r12
     c34:	bf 90       	pop	r11
     c36:	af 90       	pop	r10
     c38:	08 95       	ret

00000c3a <PORT_voidInit>:
#include "PORT_config.h"
#include "PORT_private.h"
#include "PORT_interface.h"
#include "PORT_register.h"

void PORT_voidInit(){
     c3a:	df 93       	push	r29
     c3c:	cf 93       	push	r28
     c3e:	cd b7       	in	r28, 0x3d	; 61
     c40:	de b7       	in	r29, 0x3e	; 62
    DDRA=PORTA_DIR;
     c42:	ea e3       	ldi	r30, 0x3A	; 58
     c44:	f0 e0       	ldi	r31, 0x00	; 0
     c46:	8e ef       	ldi	r24, 0xFE	; 254
     c48:	80 83       	st	Z, r24
    DDRB=PORTB_DIR;
     c4a:	e7 e3       	ldi	r30, 0x37	; 55
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	88 e0       	ldi	r24, 0x08	; 8
     c50:	80 83       	st	Z, r24
    DDRC=PORTC_DIR;
     c52:	e4 e3       	ldi	r30, 0x34	; 52
     c54:	f0 e0       	ldi	r31, 0x00	; 0
     c56:	80 ef       	ldi	r24, 0xF0	; 240
     c58:	80 83       	st	Z, r24
    DDRD=PORTD_DIR;
     c5a:	e1 e3       	ldi	r30, 0x31	; 49
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	83 e2       	ldi	r24, 0x23	; 35
     c60:	80 83       	st	Z, r24
    
    PORTA=PORTA_INIT_VAL;
     c62:	eb e3       	ldi	r30, 0x3B	; 59
     c64:	f0 e0       	ldi	r31, 0x00	; 0
     c66:	10 82       	st	Z, r1
    PORTB=PORTB_INIT_VAL;
     c68:	e8 e3       	ldi	r30, 0x38	; 56
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	10 82       	st	Z, r1
    PORTC=PORTC_INIT_VAL;
     c6e:	e5 e3       	ldi	r30, 0x35	; 53
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	80 ee       	ldi	r24, 0xE0	; 224
     c74:	80 83       	st	Z, r24
    PORTD=PORTD_INIT_VAL;
     c76:	e2 e3       	ldi	r30, 0x32	; 50
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	81 e0       	ldi	r24, 0x01	; 1
     c7c:	80 83       	st	Z, r24
}
     c7e:	cf 91       	pop	r28
     c80:	df 91       	pop	r29
     c82:	08 95       	ret

00000c84 <PWM_voidGenerate>:
#include "PWM_config.h"
#include "PWM_interface.h"
#include "PWM_private.h"
#include "PWM_register.h"

u8 PWM_voidGenerate(u8 Copy_u8DutyCycle){
     c84:	8f 92       	push	r8
     c86:	9f 92       	push	r9
     c88:	af 92       	push	r10
     c8a:	bf 92       	push	r11
     c8c:	cf 92       	push	r12
     c8e:	df 92       	push	r13
     c90:	ef 92       	push	r14
     c92:	ff 92       	push	r15
     c94:	0f 93       	push	r16
     c96:	1f 93       	push	r17
     c98:	df 93       	push	r29
     c9a:	cf 93       	push	r28
     c9c:	00 d0       	rcall	.+0      	; 0xc9e <PWM_voidGenerate+0x1a>
     c9e:	cd b7       	in	r28, 0x3d	; 61
     ca0:	de b7       	in	r29, 0x3e	; 62
     ca2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
     ca4:	19 82       	std	Y+1, r1	; 0x01
#if TIMER0_WAVE_GEN_MODE==PHASE_CORRECT_PWM
	CLR_BIT(TCCR0,TCCR0_WGM01);
	SET_BIT(TCCR0,TCCR0_WGM00);
#elif TIMER0_WAVE_GEN_MODE==FAST_PWM
	SET_BIT(TCCR0,TCCR0_WGM01);
     ca6:	a3 e5       	ldi	r26, 0x53	; 83
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	e3 e5       	ldi	r30, 0x53	; 83
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	88 60       	ori	r24, 0x08	; 8
     cb2:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_WGM00);
     cb4:	a3 e5       	ldi	r26, 0x53	; 83
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	e3 e5       	ldi	r30, 0x53	; 83
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	80 64       	ori	r24, 0x40	; 64
     cc0:	8c 93       	st	X, r24
#endif
	//Initialize Compare Match Output Mode
		TCCR0&=COMP_MATCH_OUT_MASK;
     cc2:	a3 e5       	ldi	r26, 0x53	; 83
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	e3 e5       	ldi	r30, 0x53	; 83
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	8f 7c       	andi	r24, 0xCF	; 207
     cce:	8c 93       	st	X, r24
		TCCR0|=(TIMER0_PWM_MODE<<4);
     cd0:	a3 e5       	ldi	r26, 0x53	; 83
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	e3 e5       	ldi	r30, 0x53	; 83
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	80 62       	ori	r24, 0x20	; 32
     cdc:	8c 93       	st	X, r24
	if(Copy_u8DutyCycle<=100){
     cde:	8a 81       	ldd	r24, Y+2	; 0x02
     ce0:	85 36       	cpi	r24, 0x65	; 101
     ce2:	98 f5       	brcc	.+102    	; 0xd4a <PWM_voidGenerate+0xc6>
		OCR0=MATH_s32Map(0,100,0,255,Copy_u8DutyCycle);
     ce4:	0f 2e       	mov	r0, r31
     ce6:	fc e5       	ldi	r31, 0x5C	; 92
     ce8:	8f 2e       	mov	r8, r31
     cea:	99 24       	eor	r9, r9
     cec:	f0 2d       	mov	r31, r0
     cee:	8a 81       	ldd	r24, Y+2	; 0x02
     cf0:	88 2f       	mov	r24, r24
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	a0 e0       	ldi	r26, 0x00	; 0
     cf6:	b0 e0       	ldi	r27, 0x00	; 0
     cf8:	00 d0       	rcall	.+0      	; 0xcfa <PWM_voidGenerate+0x76>
     cfa:	00 d0       	rcall	.+0      	; 0xcfc <PWM_voidGenerate+0x78>
     cfc:	ed b7       	in	r30, 0x3d	; 61
     cfe:	fe b7       	in	r31, 0x3e	; 62
     d00:	31 96       	adiw	r30, 0x01	; 1
     d02:	80 83       	st	Z, r24
     d04:	91 83       	std	Z+1, r25	; 0x01
     d06:	a2 83       	std	Z+2, r26	; 0x02
     d08:	b3 83       	std	Z+3, r27	; 0x03
     d0a:	60 e0       	ldi	r22, 0x00	; 0
     d0c:	70 e0       	ldi	r23, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	24 e6       	ldi	r18, 0x64	; 100
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	40 e0       	ldi	r20, 0x00	; 0
     d18:	50 e0       	ldi	r21, 0x00	; 0
     d1a:	ee 24       	eor	r14, r14
     d1c:	ff 24       	eor	r15, r15
     d1e:	87 01       	movw	r16, r14
     d20:	0f 2e       	mov	r0, r31
     d22:	ff ef       	ldi	r31, 0xFF	; 255
     d24:	af 2e       	mov	r10, r31
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	bf 2e       	mov	r11, r31
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	cf 2e       	mov	r12, r31
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	df 2e       	mov	r13, r31
     d32:	f0 2d       	mov	r31, r0
     d34:	0e 94 a4 05 	call	0xb48	; 0xb48 <MATH_s32Map>
     d38:	0f 90       	pop	r0
     d3a:	0f 90       	pop	r0
     d3c:	0f 90       	pop	r0
     d3e:	0f 90       	pop	r0
     d40:	dc 01       	movw	r26, r24
     d42:	cb 01       	movw	r24, r22
     d44:	f4 01       	movw	r30, r8
     d46:	80 83       	st	Z, r24
     d48:	02 c0       	rjmp	.+4      	; 0xd4e <PWM_voidGenerate+0xca>
	}
	else{
		Local_u8ErrorState=NOK;
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	89 83       	std	Y+1, r24	; 0x01
	}

	TCCR0&=PRESCALER_MASK;
     d4e:	a3 e5       	ldi	r26, 0x53	; 83
     d50:	b0 e0       	ldi	r27, 0x00	; 0
     d52:	e3 e5       	ldi	r30, 0x53	; 83
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	80 81       	ld	r24, Z
     d58:	88 7f       	andi	r24, 0xF8	; 248
     d5a:	8c 93       	st	X, r24
	TCCR0|=TIMER0_CLOCK_TICK;
     d5c:	a3 e5       	ldi	r26, 0x53	; 83
     d5e:	b0 e0       	ldi	r27, 0x00	; 0
     d60:	e3 e5       	ldi	r30, 0x53	; 83
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	83 60       	ori	r24, 0x03	; 3
     d68:	8c 93       	st	X, r24

	return Local_u8ErrorState;
     d6a:	89 81       	ldd	r24, Y+1	; 0x01

}
     d6c:	0f 90       	pop	r0
     d6e:	0f 90       	pop	r0
     d70:	cf 91       	pop	r28
     d72:	df 91       	pop	r29
     d74:	1f 91       	pop	r17
     d76:	0f 91       	pop	r16
     d78:	ff 90       	pop	r15
     d7a:	ef 90       	pop	r14
     d7c:	df 90       	pop	r13
     d7e:	cf 90       	pop	r12
     d80:	bf 90       	pop	r11
     d82:	af 90       	pop	r10
     d84:	9f 90       	pop	r9
     d86:	8f 90       	pop	r8
     d88:	08 95       	ret

00000d8a <SSD_u8SetNumber>:
		0b01111101,
		0b00000111,
		0b01111111,
		0b01101111};

u8 SSD_u8SetNumber(u8 Copy_u8Number,SSD_t* SSD){
     d8a:	df 93       	push	r29
     d8c:	cf 93       	push	r28
     d8e:	00 d0       	rcall	.+0      	; 0xd90 <SSD_u8SetNumber+0x6>
     d90:	00 d0       	rcall	.+0      	; 0xd92 <SSD_u8SetNumber+0x8>
     d92:	cd b7       	in	r28, 0x3d	; 61
     d94:	de b7       	in	r29, 0x3e	; 62
     d96:	8a 83       	std	Y+2, r24	; 0x02
     d98:	7c 83       	std	Y+4, r23	; 0x04
     d9a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorStatus=OK;
     d9c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Number<=9){
     d9e:	8a 81       	ldd	r24, Y+2	; 0x02
     da0:	8a 30       	cpi	r24, 0x0A	; 10
     da2:	68 f5       	brcc	.+90     	; 0xdfe <SSD_u8SetNumber+0x74>
		if((SSD->COM_TYPE)==ANODE){
     da4:	eb 81       	ldd	r30, Y+3	; 0x03
     da6:	fc 81       	ldd	r31, Y+4	; 0x04
     da8:	80 81       	ld	r24, Z
     daa:	81 30       	cpi	r24, 0x01	; 1
     dac:	89 f4       	brne	.+34     	; 0xdd0 <SSD_u8SetNumber+0x46>
			DIO_u8SetPortValue((SSD)->Port,~(SevenSegArray[Copy_u8Number]));
     dae:	eb 81       	ldd	r30, Y+3	; 0x03
     db0:	fc 81       	ldd	r31, Y+4	; 0x04
     db2:	21 81       	ldd	r18, Z+1	; 0x01
     db4:	8a 81       	ldd	r24, Y+2	; 0x02
     db6:	88 2f       	mov	r24, r24
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	fc 01       	movw	r30, r24
     dbc:	e0 5a       	subi	r30, 0xA0	; 160
     dbe:	ff 4f       	sbci	r31, 0xFF	; 255
     dc0:	80 81       	ld	r24, Z
     dc2:	98 2f       	mov	r25, r24
     dc4:	90 95       	com	r25
     dc6:	82 2f       	mov	r24, r18
     dc8:	69 2f       	mov	r22, r25
     dca:	0e 94 73 03 	call	0x6e6	; 0x6e6 <DIO_u8SetPortValue>
     dce:	19 c0       	rjmp	.+50     	; 0xe02 <SSD_u8SetNumber+0x78>
		}
		else if((SSD->COM_TYPE)==CATHODE){
     dd0:	eb 81       	ldd	r30, Y+3	; 0x03
     dd2:	fc 81       	ldd	r31, Y+4	; 0x04
     dd4:	80 81       	ld	r24, Z
     dd6:	88 23       	and	r24, r24
     dd8:	79 f4       	brne	.+30     	; 0xdf8 <SSD_u8SetNumber+0x6e>
			DIO_u8SetPortValue((SSD)->Port,SevenSegArray[Copy_u8Number]);
     dda:	eb 81       	ldd	r30, Y+3	; 0x03
     ddc:	fc 81       	ldd	r31, Y+4	; 0x04
     dde:	21 81       	ldd	r18, Z+1	; 0x01
     de0:	8a 81       	ldd	r24, Y+2	; 0x02
     de2:	88 2f       	mov	r24, r24
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	fc 01       	movw	r30, r24
     de8:	e0 5a       	subi	r30, 0xA0	; 160
     dea:	ff 4f       	sbci	r31, 0xFF	; 255
     dec:	90 81       	ld	r25, Z
     dee:	82 2f       	mov	r24, r18
     df0:	69 2f       	mov	r22, r25
     df2:	0e 94 73 03 	call	0x6e6	; 0x6e6 <DIO_u8SetPortValue>
     df6:	05 c0       	rjmp	.+10     	; 0xe02 <SSD_u8SetNumber+0x78>
		}
		else{
			Local_u8ErrorStatus=NOK;
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	89 83       	std	Y+1, r24	; 0x01
     dfc:	02 c0       	rjmp	.+4      	; 0xe02 <SSD_u8SetNumber+0x78>
		}
	}
	else{
		Local_u8ErrorStatus=NOK;
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorStatus;
     e02:	89 81       	ldd	r24, Y+1	; 0x01
}
     e04:	0f 90       	pop	r0
     e06:	0f 90       	pop	r0
     e08:	0f 90       	pop	r0
     e0a:	0f 90       	pop	r0
     e0c:	cf 91       	pop	r28
     e0e:	df 91       	pop	r29
     e10:	08 95       	ret

00000e12 <SSD_u8Enable>:

u8 SSD_u8Enable(SSD_t* SSD){
     e12:	df 93       	push	r29
     e14:	cf 93       	push	r28
     e16:	00 d0       	rcall	.+0      	; 0xe18 <SSD_u8Enable+0x6>
     e18:	0f 92       	push	r0
     e1a:	cd b7       	in	r28, 0x3d	; 61
     e1c:	de b7       	in	r29, 0x3e	; 62
     e1e:	9b 83       	std	Y+3, r25	; 0x03
     e20:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus=OK;
     e22:	19 82       	std	Y+1, r1	; 0x01
	if((SSD->COM_TYPE)==ANODE){
     e24:	ea 81       	ldd	r30, Y+2	; 0x02
     e26:	fb 81       	ldd	r31, Y+3	; 0x03
     e28:	80 81       	ld	r24, Z
     e2a:	81 30       	cpi	r24, 0x01	; 1
     e2c:	59 f4       	brne	.+22     	; 0xe44 <SSD_u8Enable+0x32>
		DIO_u8SetPinValue((SSD)->EnablePort,(SSD)->EnablePin,DIO_u8PIN_HIGH);
     e2e:	ea 81       	ldd	r30, Y+2	; 0x02
     e30:	fb 81       	ldd	r31, Y+3	; 0x03
     e32:	82 81       	ldd	r24, Z+2	; 0x02
     e34:	ea 81       	ldd	r30, Y+2	; 0x02
     e36:	fb 81       	ldd	r31, Y+3	; 0x03
     e38:	93 81       	ldd	r25, Z+3	; 0x03
     e3a:	69 2f       	mov	r22, r25
     e3c:	41 e0       	ldi	r20, 0x01	; 1
     e3e:	0e 94 61 02 	call	0x4c2	; 0x4c2 <DIO_u8SetPinValue>
     e42:	12 c0       	rjmp	.+36     	; 0xe68 <SSD_u8Enable+0x56>
	}
	else if((SSD->COM_TYPE)==CATHODE){
     e44:	ea 81       	ldd	r30, Y+2	; 0x02
     e46:	fb 81       	ldd	r31, Y+3	; 0x03
     e48:	80 81       	ld	r24, Z
     e4a:	88 23       	and	r24, r24
     e4c:	59 f4       	brne	.+22     	; 0xe64 <SSD_u8Enable+0x52>
		DIO_u8SetPinValue((SSD)->EnablePort,(SSD)->EnablePin,DIO_u8PIN_LOW);
     e4e:	ea 81       	ldd	r30, Y+2	; 0x02
     e50:	fb 81       	ldd	r31, Y+3	; 0x03
     e52:	82 81       	ldd	r24, Z+2	; 0x02
     e54:	ea 81       	ldd	r30, Y+2	; 0x02
     e56:	fb 81       	ldd	r31, Y+3	; 0x03
     e58:	93 81       	ldd	r25, Z+3	; 0x03
     e5a:	69 2f       	mov	r22, r25
     e5c:	40 e0       	ldi	r20, 0x00	; 0
     e5e:	0e 94 61 02 	call	0x4c2	; 0x4c2 <DIO_u8SetPinValue>
     e62:	02 c0       	rjmp	.+4      	; 0xe68 <SSD_u8Enable+0x56>
	}
	else{
		Local_u8ErrorStatus=NOK;
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorStatus;
     e68:	89 81       	ldd	r24, Y+1	; 0x01
}
     e6a:	0f 90       	pop	r0
     e6c:	0f 90       	pop	r0
     e6e:	0f 90       	pop	r0
     e70:	cf 91       	pop	r28
     e72:	df 91       	pop	r29
     e74:	08 95       	ret

00000e76 <SSD_u8Disable>:

u8 SSD_u8Disable(SSD_t* SSD){
     e76:	df 93       	push	r29
     e78:	cf 93       	push	r28
     e7a:	00 d0       	rcall	.+0      	; 0xe7c <SSD_u8Disable+0x6>
     e7c:	0f 92       	push	r0
     e7e:	cd b7       	in	r28, 0x3d	; 61
     e80:	de b7       	in	r29, 0x3e	; 62
     e82:	9b 83       	std	Y+3, r25	; 0x03
     e84:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus=OK;
     e86:	19 82       	std	Y+1, r1	; 0x01
	if((SSD->COM_TYPE)==ANODE){
     e88:	ea 81       	ldd	r30, Y+2	; 0x02
     e8a:	fb 81       	ldd	r31, Y+3	; 0x03
     e8c:	80 81       	ld	r24, Z
     e8e:	81 30       	cpi	r24, 0x01	; 1
     e90:	59 f4       	brne	.+22     	; 0xea8 <SSD_u8Disable+0x32>
		DIO_u8SetPinValue((SSD)->EnablePort,(SSD)->EnablePin,DIO_u8PIN_LOW);
     e92:	ea 81       	ldd	r30, Y+2	; 0x02
     e94:	fb 81       	ldd	r31, Y+3	; 0x03
     e96:	82 81       	ldd	r24, Z+2	; 0x02
     e98:	ea 81       	ldd	r30, Y+2	; 0x02
     e9a:	fb 81       	ldd	r31, Y+3	; 0x03
     e9c:	93 81       	ldd	r25, Z+3	; 0x03
     e9e:	69 2f       	mov	r22, r25
     ea0:	40 e0       	ldi	r20, 0x00	; 0
     ea2:	0e 94 61 02 	call	0x4c2	; 0x4c2 <DIO_u8SetPinValue>
     ea6:	12 c0       	rjmp	.+36     	; 0xecc <SSD_u8Disable+0x56>
	}
	else if((SSD->COM_TYPE)==CATHODE){
     ea8:	ea 81       	ldd	r30, Y+2	; 0x02
     eaa:	fb 81       	ldd	r31, Y+3	; 0x03
     eac:	80 81       	ld	r24, Z
     eae:	88 23       	and	r24, r24
     eb0:	59 f4       	brne	.+22     	; 0xec8 <SSD_u8Disable+0x52>
		DIO_u8SetPinValue((SSD)->EnablePort,(SSD)->EnablePin,DIO_u8PIN_HIGH);
     eb2:	ea 81       	ldd	r30, Y+2	; 0x02
     eb4:	fb 81       	ldd	r31, Y+3	; 0x03
     eb6:	82 81       	ldd	r24, Z+2	; 0x02
     eb8:	ea 81       	ldd	r30, Y+2	; 0x02
     eba:	fb 81       	ldd	r31, Y+3	; 0x03
     ebc:	93 81       	ldd	r25, Z+3	; 0x03
     ebe:	69 2f       	mov	r22, r25
     ec0:	41 e0       	ldi	r20, 0x01	; 1
     ec2:	0e 94 61 02 	call	0x4c2	; 0x4c2 <DIO_u8SetPinValue>
     ec6:	02 c0       	rjmp	.+4      	; 0xecc <SSD_u8Disable+0x56>
	}
	else{
		Local_u8ErrorStatus=NOK;
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorStatus;
     ecc:	89 81       	ldd	r24, Y+1	; 0x01
}
     ece:	0f 90       	pop	r0
     ed0:	0f 90       	pop	r0
     ed2:	0f 90       	pop	r0
     ed4:	cf 91       	pop	r28
     ed6:	df 91       	pop	r29
     ed8:	08 95       	ret

00000eda <TIMER_u8SetCompMatch>:
static void (*TIMER1B_pvCOMPCallBackFunc)(void)=NULL;
static void (*TIMER2_pvOVFCallBackFunc)(void)=NULL;
static void (*TIMER2_pvCOMPCallBackFunc)(void)=NULL;


u8 TIMER_u8SetCompMatch(u8 Copy_u8TimerID,u16 Copy_u16Value){
     eda:	df 93       	push	r29
     edc:	cf 93       	push	r28
     ede:	00 d0       	rcall	.+0      	; 0xee0 <TIMER_u8SetCompMatch+0x6>
     ee0:	00 d0       	rcall	.+0      	; 0xee2 <TIMER_u8SetCompMatch+0x8>
     ee2:	00 d0       	rcall	.+0      	; 0xee4 <TIMER_u8SetCompMatch+0xa>
     ee4:	cd b7       	in	r28, 0x3d	; 61
     ee6:	de b7       	in	r29, 0x3e	; 62
     ee8:	8a 83       	std	Y+2, r24	; 0x02
     eea:	7c 83       	std	Y+4, r23	; 0x04
     eec:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=OK;
     eee:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8TimerID){
     ef0:	8a 81       	ldd	r24, Y+2	; 0x02
     ef2:	28 2f       	mov	r18, r24
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	3e 83       	std	Y+6, r19	; 0x06
     ef8:	2d 83       	std	Y+5, r18	; 0x05
     efa:	8d 81       	ldd	r24, Y+5	; 0x05
     efc:	9e 81       	ldd	r25, Y+6	; 0x06
     efe:	81 30       	cpi	r24, 0x01	; 1
     f00:	91 05       	cpc	r25, r1
     f02:	19 f1       	breq	.+70     	; 0xf4a <TIMER_u8SetCompMatch+0x70>
     f04:	2d 81       	ldd	r18, Y+5	; 0x05
     f06:	3e 81       	ldd	r19, Y+6	; 0x06
     f08:	22 30       	cpi	r18, 0x02	; 2
     f0a:	31 05       	cpc	r19, r1
     f0c:	2c f4       	brge	.+10     	; 0xf18 <TIMER_u8SetCompMatch+0x3e>
     f0e:	8d 81       	ldd	r24, Y+5	; 0x05
     f10:	9e 81       	ldd	r25, Y+6	; 0x06
     f12:	00 97       	sbiw	r24, 0x00	; 0
     f14:	61 f0       	breq	.+24     	; 0xf2e <TIMER_u8SetCompMatch+0x54>
     f16:	35 c0       	rjmp	.+106    	; 0xf82 <TIMER_u8SetCompMatch+0xa8>
     f18:	2d 81       	ldd	r18, Y+5	; 0x05
     f1a:	3e 81       	ldd	r19, Y+6	; 0x06
     f1c:	22 30       	cpi	r18, 0x02	; 2
     f1e:	31 05       	cpc	r19, r1
     f20:	d9 f0       	breq	.+54     	; 0xf58 <TIMER_u8SetCompMatch+0x7e>
     f22:	8d 81       	ldd	r24, Y+5	; 0x05
     f24:	9e 81       	ldd	r25, Y+6	; 0x06
     f26:	83 30       	cpi	r24, 0x03	; 3
     f28:	91 05       	cpc	r25, r1
     f2a:	e9 f0       	breq	.+58     	; 0xf66 <TIMER_u8SetCompMatch+0x8c>
     f2c:	2a c0       	rjmp	.+84     	; 0xf82 <TIMER_u8SetCompMatch+0xa8>
	case TIMER0  : if(Copy_u16Value<256){OCR0  = Copy_u16Value;} else{Local_u8ErrorState=NOK;} break;
     f2e:	8b 81       	ldd	r24, Y+3	; 0x03
     f30:	9c 81       	ldd	r25, Y+4	; 0x04
     f32:	8f 3f       	cpi	r24, 0xFF	; 255
     f34:	91 05       	cpc	r25, r1
     f36:	09 f0       	breq	.+2      	; 0xf3a <TIMER_u8SetCompMatch+0x60>
     f38:	28 f4       	brcc	.+10     	; 0xf44 <TIMER_u8SetCompMatch+0x6a>
     f3a:	ec e5       	ldi	r30, 0x5C	; 92
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	8b 81       	ldd	r24, Y+3	; 0x03
     f40:	80 83       	st	Z, r24
     f42:	21 c0       	rjmp	.+66     	; 0xf86 <TIMER_u8SetCompMatch+0xac>
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	89 83       	std	Y+1, r24	; 0x01
     f48:	1e c0       	rjmp	.+60     	; 0xf86 <TIMER_u8SetCompMatch+0xac>
	case TIMER1A : OCR1A = Copy_u16Value; break;
     f4a:	ea e4       	ldi	r30, 0x4A	; 74
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	8b 81       	ldd	r24, Y+3	; 0x03
     f50:	9c 81       	ldd	r25, Y+4	; 0x04
     f52:	91 83       	std	Z+1, r25	; 0x01
     f54:	80 83       	st	Z, r24
     f56:	17 c0       	rjmp	.+46     	; 0xf86 <TIMER_u8SetCompMatch+0xac>
	case TIMER1B : OCR1B = Copy_u16Value; break;
     f58:	e8 e4       	ldi	r30, 0x48	; 72
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	8b 81       	ldd	r24, Y+3	; 0x03
     f5e:	9c 81       	ldd	r25, Y+4	; 0x04
     f60:	91 83       	std	Z+1, r25	; 0x01
     f62:	80 83       	st	Z, r24
     f64:	10 c0       	rjmp	.+32     	; 0xf86 <TIMER_u8SetCompMatch+0xac>
	case TIMER2  : if(Copy_u16Value<256){OCR2  = Copy_u16Value;} else{Local_u8ErrorState=NOK;} break;
     f66:	8b 81       	ldd	r24, Y+3	; 0x03
     f68:	9c 81       	ldd	r25, Y+4	; 0x04
     f6a:	8f 3f       	cpi	r24, 0xFF	; 255
     f6c:	91 05       	cpc	r25, r1
     f6e:	09 f0       	breq	.+2      	; 0xf72 <TIMER_u8SetCompMatch+0x98>
     f70:	28 f4       	brcc	.+10     	; 0xf7c <TIMER_u8SetCompMatch+0xa2>
     f72:	e3 e4       	ldi	r30, 0x43	; 67
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	8b 81       	ldd	r24, Y+3	; 0x03
     f78:	80 83       	st	Z, r24
     f7a:	05 c0       	rjmp	.+10     	; 0xf86 <TIMER_u8SetCompMatch+0xac>
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	89 83       	std	Y+1, r24	; 0x01
     f80:	02 c0       	rjmp	.+4      	; 0xf86 <TIMER_u8SetCompMatch+0xac>
	default: Local_u8ErrorState=NOK;
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
     f86:	89 81       	ldd	r24, Y+1	; 0x01
}
     f88:	26 96       	adiw	r28, 0x06	; 6
     f8a:	0f b6       	in	r0, 0x3f	; 63
     f8c:	f8 94       	cli
     f8e:	de bf       	out	0x3e, r29	; 62
     f90:	0f be       	out	0x3f, r0	; 63
     f92:	cd bf       	out	0x3d, r28	; 61
     f94:	cf 91       	pop	r28
     f96:	df 91       	pop	r29
     f98:	08 95       	ret

00000f9a <TIMER_u8SetPreload>:

u8 TIMER_u8SetPreload(u8 Copy_u8TimerID,u16 Copy_u16Value){
     f9a:	df 93       	push	r29
     f9c:	cf 93       	push	r28
     f9e:	00 d0       	rcall	.+0      	; 0xfa0 <TIMER_u8SetPreload+0x6>
     fa0:	00 d0       	rcall	.+0      	; 0xfa2 <TIMER_u8SetPreload+0x8>
     fa2:	00 d0       	rcall	.+0      	; 0xfa4 <TIMER_u8SetPreload+0xa>
     fa4:	cd b7       	in	r28, 0x3d	; 61
     fa6:	de b7       	in	r29, 0x3e	; 62
     fa8:	8a 83       	std	Y+2, r24	; 0x02
     faa:	7c 83       	std	Y+4, r23	; 0x04
     fac:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=OK;
     fae:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8TimerID){
     fb0:	8a 81       	ldd	r24, Y+2	; 0x02
     fb2:	28 2f       	mov	r18, r24
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	3e 83       	std	Y+6, r19	; 0x06
     fb8:	2d 83       	std	Y+5, r18	; 0x05
     fba:	8d 81       	ldd	r24, Y+5	; 0x05
     fbc:	9e 81       	ldd	r25, Y+6	; 0x06
     fbe:	81 30       	cpi	r24, 0x01	; 1
     fc0:	91 05       	cpc	r25, r1
     fc2:	19 f1       	breq	.+70     	; 0x100a <TIMER_u8SetPreload+0x70>
     fc4:	2d 81       	ldd	r18, Y+5	; 0x05
     fc6:	3e 81       	ldd	r19, Y+6	; 0x06
     fc8:	22 30       	cpi	r18, 0x02	; 2
     fca:	31 05       	cpc	r19, r1
     fcc:	2c f4       	brge	.+10     	; 0xfd8 <TIMER_u8SetPreload+0x3e>
     fce:	8d 81       	ldd	r24, Y+5	; 0x05
     fd0:	9e 81       	ldd	r25, Y+6	; 0x06
     fd2:	00 97       	sbiw	r24, 0x00	; 0
     fd4:	61 f0       	breq	.+24     	; 0xfee <TIMER_u8SetPreload+0x54>
     fd6:	35 c0       	rjmp	.+106    	; 0x1042 <TIMER_u8SetPreload+0xa8>
     fd8:	2d 81       	ldd	r18, Y+5	; 0x05
     fda:	3e 81       	ldd	r19, Y+6	; 0x06
     fdc:	22 30       	cpi	r18, 0x02	; 2
     fde:	31 05       	cpc	r19, r1
     fe0:	d9 f0       	breq	.+54     	; 0x1018 <TIMER_u8SetPreload+0x7e>
     fe2:	8d 81       	ldd	r24, Y+5	; 0x05
     fe4:	9e 81       	ldd	r25, Y+6	; 0x06
     fe6:	83 30       	cpi	r24, 0x03	; 3
     fe8:	91 05       	cpc	r25, r1
     fea:	e9 f0       	breq	.+58     	; 0x1026 <TIMER_u8SetPreload+0x8c>
     fec:	2a c0       	rjmp	.+84     	; 0x1042 <TIMER_u8SetPreload+0xa8>
	case TIMER0  : if(Copy_u16Value<256){TCNT0  = Copy_u16Value;} else{Local_u8ErrorState=NOK;} break;
     fee:	8b 81       	ldd	r24, Y+3	; 0x03
     ff0:	9c 81       	ldd	r25, Y+4	; 0x04
     ff2:	8f 3f       	cpi	r24, 0xFF	; 255
     ff4:	91 05       	cpc	r25, r1
     ff6:	09 f0       	breq	.+2      	; 0xffa <TIMER_u8SetPreload+0x60>
     ff8:	28 f4       	brcc	.+10     	; 0x1004 <TIMER_u8SetPreload+0x6a>
     ffa:	e2 e5       	ldi	r30, 0x52	; 82
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	8b 81       	ldd	r24, Y+3	; 0x03
    1000:	80 83       	st	Z, r24
    1002:	21 c0       	rjmp	.+66     	; 0x1046 <TIMER_u8SetPreload+0xac>
    1004:	81 e0       	ldi	r24, 0x01	; 1
    1006:	89 83       	std	Y+1, r24	; 0x01
    1008:	1e c0       	rjmp	.+60     	; 0x1046 <TIMER_u8SetPreload+0xac>
	case TIMER1A : TCNT1 = Copy_u16Value; break;
    100a:	ec e4       	ldi	r30, 0x4C	; 76
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	8b 81       	ldd	r24, Y+3	; 0x03
    1010:	9c 81       	ldd	r25, Y+4	; 0x04
    1012:	91 83       	std	Z+1, r25	; 0x01
    1014:	80 83       	st	Z, r24
    1016:	17 c0       	rjmp	.+46     	; 0x1046 <TIMER_u8SetPreload+0xac>
	case TIMER1B : TCNT1 = Copy_u16Value; break;
    1018:	ec e4       	ldi	r30, 0x4C	; 76
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	8b 81       	ldd	r24, Y+3	; 0x03
    101e:	9c 81       	ldd	r25, Y+4	; 0x04
    1020:	91 83       	std	Z+1, r25	; 0x01
    1022:	80 83       	st	Z, r24
    1024:	10 c0       	rjmp	.+32     	; 0x1046 <TIMER_u8SetPreload+0xac>
	case TIMER2  : if(Copy_u16Value<256){TCNT2  = Copy_u16Value;} else{Local_u8ErrorState=NOK;} break;
    1026:	8b 81       	ldd	r24, Y+3	; 0x03
    1028:	9c 81       	ldd	r25, Y+4	; 0x04
    102a:	8f 3f       	cpi	r24, 0xFF	; 255
    102c:	91 05       	cpc	r25, r1
    102e:	09 f0       	breq	.+2      	; 0x1032 <TIMER_u8SetPreload+0x98>
    1030:	28 f4       	brcc	.+10     	; 0x103c <TIMER_u8SetPreload+0xa2>
    1032:	e4 e4       	ldi	r30, 0x44	; 68
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	8b 81       	ldd	r24, Y+3	; 0x03
    1038:	80 83       	st	Z, r24
    103a:	05 c0       	rjmp	.+10     	; 0x1046 <TIMER_u8SetPreload+0xac>
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	89 83       	std	Y+1, r24	; 0x01
    1040:	02 c0       	rjmp	.+4      	; 0x1046 <TIMER_u8SetPreload+0xac>
	default: Local_u8ErrorState=NOK;
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1046:	89 81       	ldd	r24, Y+1	; 0x01
}
    1048:	26 96       	adiw	r28, 0x06	; 6
    104a:	0f b6       	in	r0, 0x3f	; 63
    104c:	f8 94       	cli
    104e:	de bf       	out	0x3e, r29	; 62
    1050:	0f be       	out	0x3f, r0	; 63
    1052:	cd bf       	out	0x3d, r28	; 61
    1054:	cf 91       	pop	r28
    1056:	df 91       	pop	r29
    1058:	08 95       	ret

0000105a <TIMER0_u8Init>:

/********************************************************TIMER0**********************************************************
 ************************************************************************************************************************/


u8 TIMER0_u8Init(Timer_t* Copy_psTimer){
    105a:	df 93       	push	r29
    105c:	cf 93       	push	r28
    105e:	00 d0       	rcall	.+0      	; 0x1060 <TIMER0_u8Init+0x6>
    1060:	0f 92       	push	r0
    1062:	cd b7       	in	r28, 0x3d	; 61
    1064:	de b7       	in	r29, 0x3e	; 62
    1066:	9b 83       	std	Y+3, r25	; 0x03
    1068:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
    106a:	19 82       	std	Y+1, r1	; 0x01
	//Initialize Wave Generation Mode
	if(Copy_psTimer!=NULL){
    106c:	8a 81       	ldd	r24, Y+2	; 0x02
    106e:	9b 81       	ldd	r25, Y+3	; 0x03
    1070:	00 97       	sbiw	r24, 0x00	; 0
    1072:	09 f4       	brne	.+2      	; 0x1076 <TIMER0_u8Init+0x1c>
    1074:	b6 c0       	rjmp	.+364    	; 0x11e2 <TIMER0_u8Init+0x188>
		if(Copy_psTimer->WaveGenMode==TIMER_NORMAL){
    1076:	ea 81       	ldd	r30, Y+2	; 0x02
    1078:	fb 81       	ldd	r31, Y+3	; 0x03
    107a:	80 81       	ld	r24, Z
    107c:	81 30       	cpi	r24, 0x01	; 1
    107e:	79 f4       	brne	.+30     	; 0x109e <TIMER0_u8Init+0x44>
			CLR_BIT(TCCR0,TCCR0_WGM01);
    1080:	a3 e5       	ldi	r26, 0x53	; 83
    1082:	b0 e0       	ldi	r27, 0x00	; 0
    1084:	e3 e5       	ldi	r30, 0x53	; 83
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	80 81       	ld	r24, Z
    108a:	87 7f       	andi	r24, 0xF7	; 247
    108c:	8c 93       	st	X, r24
			CLR_BIT(TCCR0,TCCR0_WGM00);
    108e:	a3 e5       	ldi	r26, 0x53	; 83
    1090:	b0 e0       	ldi	r27, 0x00	; 0
    1092:	e3 e5       	ldi	r30, 0x53	; 83
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	8f 7b       	andi	r24, 0xBF	; 191
    109a:	8c 93       	st	X, r24
    109c:	3e c0       	rjmp	.+124    	; 0x111a <TIMER0_u8Init+0xc0>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER_PHC_PWM){
    109e:	ea 81       	ldd	r30, Y+2	; 0x02
    10a0:	fb 81       	ldd	r31, Y+3	; 0x03
    10a2:	80 81       	ld	r24, Z
    10a4:	82 30       	cpi	r24, 0x02	; 2
    10a6:	79 f4       	brne	.+30     	; 0x10c6 <TIMER0_u8Init+0x6c>
			CLR_BIT(TCCR0,TCCR0_WGM01);
    10a8:	a3 e5       	ldi	r26, 0x53	; 83
    10aa:	b0 e0       	ldi	r27, 0x00	; 0
    10ac:	e3 e5       	ldi	r30, 0x53	; 83
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	80 81       	ld	r24, Z
    10b2:	87 7f       	andi	r24, 0xF7	; 247
    10b4:	8c 93       	st	X, r24
			SET_BIT(TCCR0,TCCR0_WGM00);
    10b6:	a3 e5       	ldi	r26, 0x53	; 83
    10b8:	b0 e0       	ldi	r27, 0x00	; 0
    10ba:	e3 e5       	ldi	r30, 0x53	; 83
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	80 81       	ld	r24, Z
    10c0:	80 64       	ori	r24, 0x40	; 64
    10c2:	8c 93       	st	X, r24
    10c4:	2a c0       	rjmp	.+84     	; 0x111a <TIMER0_u8Init+0xc0>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER_CTC){
    10c6:	ea 81       	ldd	r30, Y+2	; 0x02
    10c8:	fb 81       	ldd	r31, Y+3	; 0x03
    10ca:	80 81       	ld	r24, Z
    10cc:	83 30       	cpi	r24, 0x03	; 3
    10ce:	79 f4       	brne	.+30     	; 0x10ee <TIMER0_u8Init+0x94>
			SET_BIT(TCCR0,TCCR0_WGM01);
    10d0:	a3 e5       	ldi	r26, 0x53	; 83
    10d2:	b0 e0       	ldi	r27, 0x00	; 0
    10d4:	e3 e5       	ldi	r30, 0x53	; 83
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	80 81       	ld	r24, Z
    10da:	88 60       	ori	r24, 0x08	; 8
    10dc:	8c 93       	st	X, r24
			CLR_BIT(TCCR0,TCCR0_WGM00);
    10de:	a3 e5       	ldi	r26, 0x53	; 83
    10e0:	b0 e0       	ldi	r27, 0x00	; 0
    10e2:	e3 e5       	ldi	r30, 0x53	; 83
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	8f 7b       	andi	r24, 0xBF	; 191
    10ea:	8c 93       	st	X, r24
    10ec:	16 c0       	rjmp	.+44     	; 0x111a <TIMER0_u8Init+0xc0>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER_FAST_PWM){
    10ee:	ea 81       	ldd	r30, Y+2	; 0x02
    10f0:	fb 81       	ldd	r31, Y+3	; 0x03
    10f2:	80 81       	ld	r24, Z
    10f4:	84 30       	cpi	r24, 0x04	; 4
    10f6:	79 f4       	brne	.+30     	; 0x1116 <TIMER0_u8Init+0xbc>
			SET_BIT(TCCR0,TCCR0_WGM01);
    10f8:	a3 e5       	ldi	r26, 0x53	; 83
    10fa:	b0 e0       	ldi	r27, 0x00	; 0
    10fc:	e3 e5       	ldi	r30, 0x53	; 83
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
    1102:	88 60       	ori	r24, 0x08	; 8
    1104:	8c 93       	st	X, r24
			SET_BIT(TCCR0,TCCR0_WGM00);
    1106:	a3 e5       	ldi	r26, 0x53	; 83
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	e3 e5       	ldi	r30, 0x53	; 83
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	80 64       	ori	r24, 0x40	; 64
    1112:	8c 93       	st	X, r24
    1114:	02 c0       	rjmp	.+4      	; 0x111a <TIMER0_u8Init+0xc0>
		}
		else{
			Local_u8ErrorState=NOK;
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	89 83       	std	Y+1, r24	; 0x01
		}
		//Initialize Compare Match Output Mode
		TCCR0&=COMP_MATCH_OUT_MASK;
    111a:	a3 e5       	ldi	r26, 0x53	; 83
    111c:	b0 e0       	ldi	r27, 0x00	; 0
    111e:	e3 e5       	ldi	r30, 0x53	; 83
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	8f 7c       	andi	r24, 0xCF	; 207
    1126:	8c 93       	st	X, r24
		TCCR0|=((Copy_psTimer->CompareMatchOutputMode)<<4);
    1128:	a3 e5       	ldi	r26, 0x53	; 83
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	e3 e5       	ldi	r30, 0x53	; 83
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	28 2f       	mov	r18, r24
    1134:	ea 81       	ldd	r30, Y+2	; 0x02
    1136:	fb 81       	ldd	r31, Y+3	; 0x03
    1138:	82 81       	ldd	r24, Z+2	; 0x02
    113a:	88 2f       	mov	r24, r24
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	82 95       	swap	r24
    1140:	92 95       	swap	r25
    1142:	90 7f       	andi	r25, 0xF0	; 240
    1144:	98 27       	eor	r25, r24
    1146:	80 7f       	andi	r24, 0xF0	; 240
    1148:	98 27       	eor	r25, r24
    114a:	82 2b       	or	r24, r18
    114c:	8c 93       	st	X, r24
		//Initialize Interrupt Enable pins
		if(Copy_psTimer->CompareMatchInterrupt==INT_ENABLE){
    114e:	ea 81       	ldd	r30, Y+2	; 0x02
    1150:	fb 81       	ldd	r31, Y+3	; 0x03
    1152:	83 81       	ldd	r24, Z+3	; 0x03
    1154:	81 30       	cpi	r24, 0x01	; 1
    1156:	41 f4       	brne	.+16     	; 0x1168 <TIMER0_u8Init+0x10e>
			SET_BIT(TIMSK,TIMSK_OCIE0);
    1158:	a9 e5       	ldi	r26, 0x59	; 89
    115a:	b0 e0       	ldi	r27, 0x00	; 0
    115c:	e9 e5       	ldi	r30, 0x59	; 89
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	82 60       	ori	r24, 0x02	; 2
    1164:	8c 93       	st	X, r24
    1166:	0f c0       	rjmp	.+30     	; 0x1186 <TIMER0_u8Init+0x12c>
		}
		else if(Copy_psTimer->CompareMatchInterrupt==INT_DISABLE){
    1168:	ea 81       	ldd	r30, Y+2	; 0x02
    116a:	fb 81       	ldd	r31, Y+3	; 0x03
    116c:	83 81       	ldd	r24, Z+3	; 0x03
    116e:	82 30       	cpi	r24, 0x02	; 2
    1170:	41 f4       	brne	.+16     	; 0x1182 <TIMER0_u8Init+0x128>
			CLR_BIT(TIMSK,TIMSK_OCIE0);
    1172:	a9 e5       	ldi	r26, 0x59	; 89
    1174:	b0 e0       	ldi	r27, 0x00	; 0
    1176:	e9 e5       	ldi	r30, 0x59	; 89
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	8d 7f       	andi	r24, 0xFD	; 253
    117e:	8c 93       	st	X, r24
    1180:	02 c0       	rjmp	.+4      	; 0x1186 <TIMER0_u8Init+0x12c>
		}
		else{
			Local_u8ErrorState=NOK;
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	89 83       	std	Y+1, r24	; 0x01
		}

		if(Copy_psTimer->OverFlowInterrupt==INT_ENABLE){
    1186:	ea 81       	ldd	r30, Y+2	; 0x02
    1188:	fb 81       	ldd	r31, Y+3	; 0x03
    118a:	84 81       	ldd	r24, Z+4	; 0x04
    118c:	81 30       	cpi	r24, 0x01	; 1
    118e:	41 f4       	brne	.+16     	; 0x11a0 <TIMER0_u8Init+0x146>
			SET_BIT(TIMSK,TIMSK_TOIE0);
    1190:	a9 e5       	ldi	r26, 0x59	; 89
    1192:	b0 e0       	ldi	r27, 0x00	; 0
    1194:	e9 e5       	ldi	r30, 0x59	; 89
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	80 81       	ld	r24, Z
    119a:	81 60       	ori	r24, 0x01	; 1
    119c:	8c 93       	st	X, r24
    119e:	0f c0       	rjmp	.+30     	; 0x11be <TIMER0_u8Init+0x164>
		}
		else if(Copy_psTimer->OverFlowInterrupt==INT_DISABLE){
    11a0:	ea 81       	ldd	r30, Y+2	; 0x02
    11a2:	fb 81       	ldd	r31, Y+3	; 0x03
    11a4:	84 81       	ldd	r24, Z+4	; 0x04
    11a6:	82 30       	cpi	r24, 0x02	; 2
    11a8:	41 f4       	brne	.+16     	; 0x11ba <TIMER0_u8Init+0x160>
			CLR_BIT(TIMSK,TIMSK_TOIE0);
    11aa:	a9 e5       	ldi	r26, 0x59	; 89
    11ac:	b0 e0       	ldi	r27, 0x00	; 0
    11ae:	e9 e5       	ldi	r30, 0x59	; 89
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	8e 7f       	andi	r24, 0xFE	; 254
    11b6:	8c 93       	st	X, r24
    11b8:	02 c0       	rjmp	.+4      	; 0x11be <TIMER0_u8Init+0x164>
		}
		else{
			Local_u8ErrorState=NOK;
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	89 83       	std	Y+1, r24	; 0x01
		}

		//Initialize Prescaler
		TCCR0&=PRESCALER_MASK;
    11be:	a3 e5       	ldi	r26, 0x53	; 83
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	e3 e5       	ldi	r30, 0x53	; 83
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	88 7f       	andi	r24, 0xF8	; 248
    11ca:	8c 93       	st	X, r24
		TCCR0|=Copy_psTimer->Prescaler;
    11cc:	a3 e5       	ldi	r26, 0x53	; 83
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	e3 e5       	ldi	r30, 0x53	; 83
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	90 81       	ld	r25, Z
    11d6:	ea 81       	ldd	r30, Y+2	; 0x02
    11d8:	fb 81       	ldd	r31, Y+3	; 0x03
    11da:	81 81       	ldd	r24, Z+1	; 0x01
    11dc:	89 2b       	or	r24, r25
    11de:	8c 93       	st	X, r24
    11e0:	02 c0       	rjmp	.+4      	; 0x11e6 <TIMER0_u8Init+0x18c>
	}
	else{
		Local_u8ErrorState=NULL_POINTER;
    11e2:	82 e0       	ldi	r24, 0x02	; 2
    11e4:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    11e6:	89 81       	ldd	r24, Y+1	; 0x01
}
    11e8:	0f 90       	pop	r0
    11ea:	0f 90       	pop	r0
    11ec:	0f 90       	pop	r0
    11ee:	cf 91       	pop	r28
    11f0:	df 91       	pop	r29
    11f2:	08 95       	ret

000011f4 <TIMER1_u8Init>:

/********************************************************TIMER1**********************************************************
 ************************************************************************************************************************/


u8 TIMER1_u8Init(Timer1_t* Copy_psTimer){
    11f4:	df 93       	push	r29
    11f6:	cf 93       	push	r28
    11f8:	00 d0       	rcall	.+0      	; 0x11fa <TIMER1_u8Init+0x6>
    11fa:	0f 92       	push	r0
    11fc:	cd b7       	in	r28, 0x3d	; 61
    11fe:	de b7       	in	r29, 0x3e	; 62
    1200:	9b 83       	std	Y+3, r25	; 0x03
    1202:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
    1204:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_psTimer!=NULL){
    1206:	8a 81       	ldd	r24, Y+2	; 0x02
    1208:	9b 81       	ldd	r25, Y+3	; 0x03
    120a:	00 97       	sbiw	r24, 0x00	; 0
    120c:	09 f4       	brne	.+2      	; 0x1210 <TIMER1_u8Init+0x1c>
    120e:	b2 c2       	rjmp	.+1380   	; 0x1774 <TIMER1_u8Init+0x580>
		//initialize wave generation mode
		if(Copy_psTimer->WaveGenMode==TIMER1_NORMAL){
    1210:	ea 81       	ldd	r30, Y+2	; 0x02
    1212:	fb 81       	ldd	r31, Y+3	; 0x03
    1214:	80 81       	ld	r24, Z
    1216:	81 30       	cpi	r24, 0x01	; 1
    1218:	e9 f4       	brne	.+58     	; 0x1254 <TIMER1_u8Init+0x60>
			CLR_BIT(TCCR1B,TCCR1B_WGM13);
    121a:	ae e4       	ldi	r26, 0x4E	; 78
    121c:	b0 e0       	ldi	r27, 0x00	; 0
    121e:	ee e4       	ldi	r30, 0x4E	; 78
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	80 81       	ld	r24, Z
    1224:	8f 7e       	andi	r24, 0xEF	; 239
    1226:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B,TCCR1B_WGM12);
    1228:	ae e4       	ldi	r26, 0x4E	; 78
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	ee e4       	ldi	r30, 0x4E	; 78
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	87 7f       	andi	r24, 0xF7	; 247
    1234:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM11);
    1236:	af e4       	ldi	r26, 0x4F	; 79
    1238:	b0 e0       	ldi	r27, 0x00	; 0
    123a:	ef e4       	ldi	r30, 0x4F	; 79
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	80 81       	ld	r24, Z
    1240:	8d 7f       	andi	r24, 0xFD	; 253
    1242:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM10);
    1244:	af e4       	ldi	r26, 0x4F	; 79
    1246:	b0 e0       	ldi	r27, 0x00	; 0
    1248:	ef e4       	ldi	r30, 0x4F	; 79
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	80 81       	ld	r24, Z
    124e:	8e 7f       	andi	r24, 0xFE	; 254
    1250:	8c 93       	st	X, r24
    1252:	de c1       	rjmp	.+956    	; 0x1610 <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_PHC_PWM_8_BIT){
    1254:	ea 81       	ldd	r30, Y+2	; 0x02
    1256:	fb 81       	ldd	r31, Y+3	; 0x03
    1258:	80 81       	ld	r24, Z
    125a:	82 30       	cpi	r24, 0x02	; 2
    125c:	e9 f4       	brne	.+58     	; 0x1298 <TIMER1_u8Init+0xa4>
			CLR_BIT(TCCR1B,TCCR1B_WGM13);
    125e:	ae e4       	ldi	r26, 0x4E	; 78
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	ee e4       	ldi	r30, 0x4E	; 78
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	8f 7e       	andi	r24, 0xEF	; 239
    126a:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B,TCCR1B_WGM12);
    126c:	ae e4       	ldi	r26, 0x4E	; 78
    126e:	b0 e0       	ldi	r27, 0x00	; 0
    1270:	ee e4       	ldi	r30, 0x4E	; 78
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	87 7f       	andi	r24, 0xF7	; 247
    1278:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM11);
    127a:	af e4       	ldi	r26, 0x4F	; 79
    127c:	b0 e0       	ldi	r27, 0x00	; 0
    127e:	ef e4       	ldi	r30, 0x4F	; 79
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	80 81       	ld	r24, Z
    1284:	8d 7f       	andi	r24, 0xFD	; 253
    1286:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM10);
    1288:	af e4       	ldi	r26, 0x4F	; 79
    128a:	b0 e0       	ldi	r27, 0x00	; 0
    128c:	ef e4       	ldi	r30, 0x4F	; 79
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	81 60       	ori	r24, 0x01	; 1
    1294:	8c 93       	st	X, r24
    1296:	bc c1       	rjmp	.+888    	; 0x1610 <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_PHC_PWM_9_BIT){
    1298:	ea 81       	ldd	r30, Y+2	; 0x02
    129a:	fb 81       	ldd	r31, Y+3	; 0x03
    129c:	80 81       	ld	r24, Z
    129e:	83 30       	cpi	r24, 0x03	; 3
    12a0:	e9 f4       	brne	.+58     	; 0x12dc <TIMER1_u8Init+0xe8>
			CLR_BIT(TCCR1B,TCCR1B_WGM13);
    12a2:	ae e4       	ldi	r26, 0x4E	; 78
    12a4:	b0 e0       	ldi	r27, 0x00	; 0
    12a6:	ee e4       	ldi	r30, 0x4E	; 78
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	8f 7e       	andi	r24, 0xEF	; 239
    12ae:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B,TCCR1B_WGM12);
    12b0:	ae e4       	ldi	r26, 0x4E	; 78
    12b2:	b0 e0       	ldi	r27, 0x00	; 0
    12b4:	ee e4       	ldi	r30, 0x4E	; 78
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	87 7f       	andi	r24, 0xF7	; 247
    12bc:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM11);
    12be:	af e4       	ldi	r26, 0x4F	; 79
    12c0:	b0 e0       	ldi	r27, 0x00	; 0
    12c2:	ef e4       	ldi	r30, 0x4F	; 79
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	80 81       	ld	r24, Z
    12c8:	82 60       	ori	r24, 0x02	; 2
    12ca:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM10);
    12cc:	af e4       	ldi	r26, 0x4F	; 79
    12ce:	b0 e0       	ldi	r27, 0x00	; 0
    12d0:	ef e4       	ldi	r30, 0x4F	; 79
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	8e 7f       	andi	r24, 0xFE	; 254
    12d8:	8c 93       	st	X, r24
    12da:	9a c1       	rjmp	.+820    	; 0x1610 <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_PHC_PWM_10_BIT){
    12dc:	ea 81       	ldd	r30, Y+2	; 0x02
    12de:	fb 81       	ldd	r31, Y+3	; 0x03
    12e0:	80 81       	ld	r24, Z
    12e2:	84 30       	cpi	r24, 0x04	; 4
    12e4:	e9 f4       	brne	.+58     	; 0x1320 <TIMER1_u8Init+0x12c>
			CLR_BIT(TCCR1B,TCCR1B_WGM13);
    12e6:	ae e4       	ldi	r26, 0x4E	; 78
    12e8:	b0 e0       	ldi	r27, 0x00	; 0
    12ea:	ee e4       	ldi	r30, 0x4E	; 78
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 81       	ld	r24, Z
    12f0:	8f 7e       	andi	r24, 0xEF	; 239
    12f2:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B,TCCR1B_WGM12);
    12f4:	ae e4       	ldi	r26, 0x4E	; 78
    12f6:	b0 e0       	ldi	r27, 0x00	; 0
    12f8:	ee e4       	ldi	r30, 0x4E	; 78
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	87 7f       	andi	r24, 0xF7	; 247
    1300:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM11);
    1302:	af e4       	ldi	r26, 0x4F	; 79
    1304:	b0 e0       	ldi	r27, 0x00	; 0
    1306:	ef e4       	ldi	r30, 0x4F	; 79
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z
    130c:	82 60       	ori	r24, 0x02	; 2
    130e:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM10);
    1310:	af e4       	ldi	r26, 0x4F	; 79
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	ef e4       	ldi	r30, 0x4F	; 79
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	81 60       	ori	r24, 0x01	; 1
    131c:	8c 93       	st	X, r24
    131e:	78 c1       	rjmp	.+752    	; 0x1610 <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_CTC){
    1320:	ea 81       	ldd	r30, Y+2	; 0x02
    1322:	fb 81       	ldd	r31, Y+3	; 0x03
    1324:	80 81       	ld	r24, Z
    1326:	85 30       	cpi	r24, 0x05	; 5
    1328:	e9 f4       	brne	.+58     	; 0x1364 <TIMER1_u8Init+0x170>
			CLR_BIT(TCCR1B,TCCR1B_WGM13);
    132a:	ae e4       	ldi	r26, 0x4E	; 78
    132c:	b0 e0       	ldi	r27, 0x00	; 0
    132e:	ee e4       	ldi	r30, 0x4E	; 78
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	80 81       	ld	r24, Z
    1334:	8f 7e       	andi	r24, 0xEF	; 239
    1336:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,TCCR1B_WGM12);
    1338:	ae e4       	ldi	r26, 0x4E	; 78
    133a:	b0 e0       	ldi	r27, 0x00	; 0
    133c:	ee e4       	ldi	r30, 0x4E	; 78
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	88 60       	ori	r24, 0x08	; 8
    1344:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM11);
    1346:	af e4       	ldi	r26, 0x4F	; 79
    1348:	b0 e0       	ldi	r27, 0x00	; 0
    134a:	ef e4       	ldi	r30, 0x4F	; 79
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	80 81       	ld	r24, Z
    1350:	8d 7f       	andi	r24, 0xFD	; 253
    1352:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM10);
    1354:	af e4       	ldi	r26, 0x4F	; 79
    1356:	b0 e0       	ldi	r27, 0x00	; 0
    1358:	ef e4       	ldi	r30, 0x4F	; 79
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	80 81       	ld	r24, Z
    135e:	8e 7f       	andi	r24, 0xFE	; 254
    1360:	8c 93       	st	X, r24
    1362:	56 c1       	rjmp	.+684    	; 0x1610 <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_FAST_PWM_8_BIT){
    1364:	ea 81       	ldd	r30, Y+2	; 0x02
    1366:	fb 81       	ldd	r31, Y+3	; 0x03
    1368:	80 81       	ld	r24, Z
    136a:	86 30       	cpi	r24, 0x06	; 6
    136c:	e9 f4       	brne	.+58     	; 0x13a8 <TIMER1_u8Init+0x1b4>
			CLR_BIT(TCCR1B,TCCR1B_WGM13);
    136e:	ae e4       	ldi	r26, 0x4E	; 78
    1370:	b0 e0       	ldi	r27, 0x00	; 0
    1372:	ee e4       	ldi	r30, 0x4E	; 78
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	80 81       	ld	r24, Z
    1378:	8f 7e       	andi	r24, 0xEF	; 239
    137a:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,TCCR1B_WGM12);
    137c:	ae e4       	ldi	r26, 0x4E	; 78
    137e:	b0 e0       	ldi	r27, 0x00	; 0
    1380:	ee e4       	ldi	r30, 0x4E	; 78
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	80 81       	ld	r24, Z
    1386:	88 60       	ori	r24, 0x08	; 8
    1388:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM11);
    138a:	af e4       	ldi	r26, 0x4F	; 79
    138c:	b0 e0       	ldi	r27, 0x00	; 0
    138e:	ef e4       	ldi	r30, 0x4F	; 79
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	80 81       	ld	r24, Z
    1394:	8d 7f       	andi	r24, 0xFD	; 253
    1396:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM10);
    1398:	af e4       	ldi	r26, 0x4F	; 79
    139a:	b0 e0       	ldi	r27, 0x00	; 0
    139c:	ef e4       	ldi	r30, 0x4F	; 79
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	80 81       	ld	r24, Z
    13a2:	81 60       	ori	r24, 0x01	; 1
    13a4:	8c 93       	st	X, r24
    13a6:	34 c1       	rjmp	.+616    	; 0x1610 <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_FAST_PWM_9_BIT){
    13a8:	ea 81       	ldd	r30, Y+2	; 0x02
    13aa:	fb 81       	ldd	r31, Y+3	; 0x03
    13ac:	80 81       	ld	r24, Z
    13ae:	87 30       	cpi	r24, 0x07	; 7
    13b0:	e9 f4       	brne	.+58     	; 0x13ec <TIMER1_u8Init+0x1f8>
			CLR_BIT(TCCR1B,TCCR1B_WGM13);
    13b2:	ae e4       	ldi	r26, 0x4E	; 78
    13b4:	b0 e0       	ldi	r27, 0x00	; 0
    13b6:	ee e4       	ldi	r30, 0x4E	; 78
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	80 81       	ld	r24, Z
    13bc:	8f 7e       	andi	r24, 0xEF	; 239
    13be:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,TCCR1B_WGM12);
    13c0:	ae e4       	ldi	r26, 0x4E	; 78
    13c2:	b0 e0       	ldi	r27, 0x00	; 0
    13c4:	ee e4       	ldi	r30, 0x4E	; 78
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z
    13ca:	88 60       	ori	r24, 0x08	; 8
    13cc:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM11);
    13ce:	af e4       	ldi	r26, 0x4F	; 79
    13d0:	b0 e0       	ldi	r27, 0x00	; 0
    13d2:	ef e4       	ldi	r30, 0x4F	; 79
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	80 81       	ld	r24, Z
    13d8:	82 60       	ori	r24, 0x02	; 2
    13da:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM10);
    13dc:	af e4       	ldi	r26, 0x4F	; 79
    13de:	b0 e0       	ldi	r27, 0x00	; 0
    13e0:	ef e4       	ldi	r30, 0x4F	; 79
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	80 81       	ld	r24, Z
    13e6:	8e 7f       	andi	r24, 0xFE	; 254
    13e8:	8c 93       	st	X, r24
    13ea:	12 c1       	rjmp	.+548    	; 0x1610 <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_FAST_PWM_10_BIT){
    13ec:	ea 81       	ldd	r30, Y+2	; 0x02
    13ee:	fb 81       	ldd	r31, Y+3	; 0x03
    13f0:	80 81       	ld	r24, Z
    13f2:	88 30       	cpi	r24, 0x08	; 8
    13f4:	e9 f4       	brne	.+58     	; 0x1430 <TIMER1_u8Init+0x23c>
			CLR_BIT(TCCR1B,TCCR1B_WGM13);
    13f6:	ae e4       	ldi	r26, 0x4E	; 78
    13f8:	b0 e0       	ldi	r27, 0x00	; 0
    13fa:	ee e4       	ldi	r30, 0x4E	; 78
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	8f 7e       	andi	r24, 0xEF	; 239
    1402:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,TCCR1B_WGM12);
    1404:	ae e4       	ldi	r26, 0x4E	; 78
    1406:	b0 e0       	ldi	r27, 0x00	; 0
    1408:	ee e4       	ldi	r30, 0x4E	; 78
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	80 81       	ld	r24, Z
    140e:	88 60       	ori	r24, 0x08	; 8
    1410:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM11);
    1412:	af e4       	ldi	r26, 0x4F	; 79
    1414:	b0 e0       	ldi	r27, 0x00	; 0
    1416:	ef e4       	ldi	r30, 0x4F	; 79
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	80 81       	ld	r24, Z
    141c:	82 60       	ori	r24, 0x02	; 2
    141e:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM10);
    1420:	af e4       	ldi	r26, 0x4F	; 79
    1422:	b0 e0       	ldi	r27, 0x00	; 0
    1424:	ef e4       	ldi	r30, 0x4F	; 79
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	80 81       	ld	r24, Z
    142a:	81 60       	ori	r24, 0x01	; 1
    142c:	8c 93       	st	X, r24
    142e:	f0 c0       	rjmp	.+480    	; 0x1610 <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_PHFC_PWM_CUSTOM_TOP){
    1430:	ea 81       	ldd	r30, Y+2	; 0x02
    1432:	fb 81       	ldd	r31, Y+3	; 0x03
    1434:	80 81       	ld	r24, Z
    1436:	89 30       	cpi	r24, 0x09	; 9
    1438:	e9 f4       	brne	.+58     	; 0x1474 <TIMER1_u8Init+0x280>
			SET_BIT(TCCR1B,TCCR1B_WGM13);
    143a:	ae e4       	ldi	r26, 0x4E	; 78
    143c:	b0 e0       	ldi	r27, 0x00	; 0
    143e:	ee e4       	ldi	r30, 0x4E	; 78
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	80 81       	ld	r24, Z
    1444:	80 61       	ori	r24, 0x10	; 16
    1446:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B,TCCR1B_WGM12);
    1448:	ae e4       	ldi	r26, 0x4E	; 78
    144a:	b0 e0       	ldi	r27, 0x00	; 0
    144c:	ee e4       	ldi	r30, 0x4E	; 78
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	80 81       	ld	r24, Z
    1452:	87 7f       	andi	r24, 0xF7	; 247
    1454:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM11);
    1456:	af e4       	ldi	r26, 0x4F	; 79
    1458:	b0 e0       	ldi	r27, 0x00	; 0
    145a:	ef e4       	ldi	r30, 0x4F	; 79
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	80 81       	ld	r24, Z
    1460:	8d 7f       	andi	r24, 0xFD	; 253
    1462:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM10);
    1464:	af e4       	ldi	r26, 0x4F	; 79
    1466:	b0 e0       	ldi	r27, 0x00	; 0
    1468:	ef e4       	ldi	r30, 0x4F	; 79
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	8e 7f       	andi	r24, 0xFE	; 254
    1470:	8c 93       	st	X, r24
    1472:	ce c0       	rjmp	.+412    	; 0x1610 <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_PHFC_PWM){
    1474:	ea 81       	ldd	r30, Y+2	; 0x02
    1476:	fb 81       	ldd	r31, Y+3	; 0x03
    1478:	80 81       	ld	r24, Z
    147a:	8a 30       	cpi	r24, 0x0A	; 10
    147c:	e9 f4       	brne	.+58     	; 0x14b8 <TIMER1_u8Init+0x2c4>
			SET_BIT(TCCR1B,TCCR1B_WGM13);
    147e:	ae e4       	ldi	r26, 0x4E	; 78
    1480:	b0 e0       	ldi	r27, 0x00	; 0
    1482:	ee e4       	ldi	r30, 0x4E	; 78
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	80 81       	ld	r24, Z
    1488:	80 61       	ori	r24, 0x10	; 16
    148a:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B,TCCR1B_WGM12);
    148c:	ae e4       	ldi	r26, 0x4E	; 78
    148e:	b0 e0       	ldi	r27, 0x00	; 0
    1490:	ee e4       	ldi	r30, 0x4E	; 78
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	80 81       	ld	r24, Z
    1496:	87 7f       	andi	r24, 0xF7	; 247
    1498:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM11);
    149a:	af e4       	ldi	r26, 0x4F	; 79
    149c:	b0 e0       	ldi	r27, 0x00	; 0
    149e:	ef e4       	ldi	r30, 0x4F	; 79
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	80 81       	ld	r24, Z
    14a4:	8d 7f       	andi	r24, 0xFD	; 253
    14a6:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM10);
    14a8:	af e4       	ldi	r26, 0x4F	; 79
    14aa:	b0 e0       	ldi	r27, 0x00	; 0
    14ac:	ef e4       	ldi	r30, 0x4F	; 79
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	81 60       	ori	r24, 0x01	; 1
    14b4:	8c 93       	st	X, r24
    14b6:	ac c0       	rjmp	.+344    	; 0x1610 <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_PHC_PWM_CUSTOM_TOP){
    14b8:	ea 81       	ldd	r30, Y+2	; 0x02
    14ba:	fb 81       	ldd	r31, Y+3	; 0x03
    14bc:	80 81       	ld	r24, Z
    14be:	8b 30       	cpi	r24, 0x0B	; 11
    14c0:	e9 f4       	brne	.+58     	; 0x14fc <TIMER1_u8Init+0x308>
			SET_BIT(TCCR1B,TCCR1B_WGM13);
    14c2:	ae e4       	ldi	r26, 0x4E	; 78
    14c4:	b0 e0       	ldi	r27, 0x00	; 0
    14c6:	ee e4       	ldi	r30, 0x4E	; 78
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	80 81       	ld	r24, Z
    14cc:	80 61       	ori	r24, 0x10	; 16
    14ce:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B,TCCR1B_WGM12);
    14d0:	ae e4       	ldi	r26, 0x4E	; 78
    14d2:	b0 e0       	ldi	r27, 0x00	; 0
    14d4:	ee e4       	ldi	r30, 0x4E	; 78
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	80 81       	ld	r24, Z
    14da:	87 7f       	andi	r24, 0xF7	; 247
    14dc:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM11);
    14de:	af e4       	ldi	r26, 0x4F	; 79
    14e0:	b0 e0       	ldi	r27, 0x00	; 0
    14e2:	ef e4       	ldi	r30, 0x4F	; 79
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	80 81       	ld	r24, Z
    14e8:	82 60       	ori	r24, 0x02	; 2
    14ea:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM10);
    14ec:	af e4       	ldi	r26, 0x4F	; 79
    14ee:	b0 e0       	ldi	r27, 0x00	; 0
    14f0:	ef e4       	ldi	r30, 0x4F	; 79
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	80 81       	ld	r24, Z
    14f6:	8e 7f       	andi	r24, 0xFE	; 254
    14f8:	8c 93       	st	X, r24
    14fa:	8a c0       	rjmp	.+276    	; 0x1610 <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_PHC_PWM){
    14fc:	ea 81       	ldd	r30, Y+2	; 0x02
    14fe:	fb 81       	ldd	r31, Y+3	; 0x03
    1500:	80 81       	ld	r24, Z
    1502:	8c 30       	cpi	r24, 0x0C	; 12
    1504:	e9 f4       	brne	.+58     	; 0x1540 <TIMER1_u8Init+0x34c>
			SET_BIT(TCCR1B,TCCR1B_WGM13);
    1506:	ae e4       	ldi	r26, 0x4E	; 78
    1508:	b0 e0       	ldi	r27, 0x00	; 0
    150a:	ee e4       	ldi	r30, 0x4E	; 78
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	80 81       	ld	r24, Z
    1510:	80 61       	ori	r24, 0x10	; 16
    1512:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B,TCCR1B_WGM12);
    1514:	ae e4       	ldi	r26, 0x4E	; 78
    1516:	b0 e0       	ldi	r27, 0x00	; 0
    1518:	ee e4       	ldi	r30, 0x4E	; 78
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	80 81       	ld	r24, Z
    151e:	87 7f       	andi	r24, 0xF7	; 247
    1520:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM11);
    1522:	af e4       	ldi	r26, 0x4F	; 79
    1524:	b0 e0       	ldi	r27, 0x00	; 0
    1526:	ef e4       	ldi	r30, 0x4F	; 79
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	82 60       	ori	r24, 0x02	; 2
    152e:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM10);
    1530:	af e4       	ldi	r26, 0x4F	; 79
    1532:	b0 e0       	ldi	r27, 0x00	; 0
    1534:	ef e4       	ldi	r30, 0x4F	; 79
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	80 81       	ld	r24, Z
    153a:	81 60       	ori	r24, 0x01	; 1
    153c:	8c 93       	st	X, r24
    153e:	68 c0       	rjmp	.+208    	; 0x1610 <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_CTC_CUSTOM_TOP){
    1540:	ea 81       	ldd	r30, Y+2	; 0x02
    1542:	fb 81       	ldd	r31, Y+3	; 0x03
    1544:	80 81       	ld	r24, Z
    1546:	8d 30       	cpi	r24, 0x0D	; 13
    1548:	e9 f4       	brne	.+58     	; 0x1584 <TIMER1_u8Init+0x390>
			SET_BIT(TCCR1B,TCCR1B_WGM13);
    154a:	ae e4       	ldi	r26, 0x4E	; 78
    154c:	b0 e0       	ldi	r27, 0x00	; 0
    154e:	ee e4       	ldi	r30, 0x4E	; 78
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	80 61       	ori	r24, 0x10	; 16
    1556:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,TCCR1B_WGM12);
    1558:	ae e4       	ldi	r26, 0x4E	; 78
    155a:	b0 e0       	ldi	r27, 0x00	; 0
    155c:	ee e4       	ldi	r30, 0x4E	; 78
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	80 81       	ld	r24, Z
    1562:	88 60       	ori	r24, 0x08	; 8
    1564:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM11);
    1566:	af e4       	ldi	r26, 0x4F	; 79
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	ef e4       	ldi	r30, 0x4F	; 79
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	80 81       	ld	r24, Z
    1570:	8d 7f       	andi	r24, 0xFD	; 253
    1572:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM10);
    1574:	af e4       	ldi	r26, 0x4F	; 79
    1576:	b0 e0       	ldi	r27, 0x00	; 0
    1578:	ef e4       	ldi	r30, 0x4F	; 79
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	80 81       	ld	r24, Z
    157e:	8e 7f       	andi	r24, 0xFE	; 254
    1580:	8c 93       	st	X, r24
    1582:	46 c0       	rjmp	.+140    	; 0x1610 <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_FAST_PWM_CUSTOM_TOP){
    1584:	ea 81       	ldd	r30, Y+2	; 0x02
    1586:	fb 81       	ldd	r31, Y+3	; 0x03
    1588:	80 81       	ld	r24, Z
    158a:	8e 30       	cpi	r24, 0x0E	; 14
    158c:	e9 f4       	brne	.+58     	; 0x15c8 <TIMER1_u8Init+0x3d4>
			SET_BIT(TCCR1B,TCCR1B_WGM13);
    158e:	ae e4       	ldi	r26, 0x4E	; 78
    1590:	b0 e0       	ldi	r27, 0x00	; 0
    1592:	ee e4       	ldi	r30, 0x4E	; 78
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	80 81       	ld	r24, Z
    1598:	80 61       	ori	r24, 0x10	; 16
    159a:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,TCCR1B_WGM12);
    159c:	ae e4       	ldi	r26, 0x4E	; 78
    159e:	b0 e0       	ldi	r27, 0x00	; 0
    15a0:	ee e4       	ldi	r30, 0x4E	; 78
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	80 81       	ld	r24, Z
    15a6:	88 60       	ori	r24, 0x08	; 8
    15a8:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM11);
    15aa:	af e4       	ldi	r26, 0x4F	; 79
    15ac:	b0 e0       	ldi	r27, 0x00	; 0
    15ae:	ef e4       	ldi	r30, 0x4F	; 79
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	80 81       	ld	r24, Z
    15b4:	82 60       	ori	r24, 0x02	; 2
    15b6:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM10);
    15b8:	af e4       	ldi	r26, 0x4F	; 79
    15ba:	b0 e0       	ldi	r27, 0x00	; 0
    15bc:	ef e4       	ldi	r30, 0x4F	; 79
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	80 81       	ld	r24, Z
    15c2:	8e 7f       	andi	r24, 0xFE	; 254
    15c4:	8c 93       	st	X, r24
    15c6:	24 c0       	rjmp	.+72     	; 0x1610 <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_FAST_PWM){
    15c8:	ea 81       	ldd	r30, Y+2	; 0x02
    15ca:	fb 81       	ldd	r31, Y+3	; 0x03
    15cc:	80 81       	ld	r24, Z
    15ce:	8f 30       	cpi	r24, 0x0F	; 15
    15d0:	e9 f4       	brne	.+58     	; 0x160c <TIMER1_u8Init+0x418>
			SET_BIT(TCCR1B,TCCR1B_WGM13);
    15d2:	ae e4       	ldi	r26, 0x4E	; 78
    15d4:	b0 e0       	ldi	r27, 0x00	; 0
    15d6:	ee e4       	ldi	r30, 0x4E	; 78
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	80 81       	ld	r24, Z
    15dc:	80 61       	ori	r24, 0x10	; 16
    15de:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,TCCR1B_WGM12);
    15e0:	ae e4       	ldi	r26, 0x4E	; 78
    15e2:	b0 e0       	ldi	r27, 0x00	; 0
    15e4:	ee e4       	ldi	r30, 0x4E	; 78
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	80 81       	ld	r24, Z
    15ea:	88 60       	ori	r24, 0x08	; 8
    15ec:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM11);
    15ee:	af e4       	ldi	r26, 0x4F	; 79
    15f0:	b0 e0       	ldi	r27, 0x00	; 0
    15f2:	ef e4       	ldi	r30, 0x4F	; 79
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	80 81       	ld	r24, Z
    15f8:	82 60       	ori	r24, 0x02	; 2
    15fa:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM10);
    15fc:	af e4       	ldi	r26, 0x4F	; 79
    15fe:	b0 e0       	ldi	r27, 0x00	; 0
    1600:	ef e4       	ldi	r30, 0x4F	; 79
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	80 81       	ld	r24, Z
    1606:	81 60       	ori	r24, 0x01	; 1
    1608:	8c 93       	st	X, r24
    160a:	02 c0       	rjmp	.+4      	; 0x1610 <TIMER1_u8Init+0x41c>
		}
		else{
			Local_u8ErrorState=NOK;
    160c:	81 e0       	ldi	r24, 0x01	; 1
    160e:	89 83       	std	Y+1, r24	; 0x01
		}
		//Set Match Compare Output Mode for both channel A and B
		TCCR1A&=T1_COMP_MATCH_OUT_MASK;
    1610:	af e4       	ldi	r26, 0x4F	; 79
    1612:	b0 e0       	ldi	r27, 0x00	; 0
    1614:	ef e4       	ldi	r30, 0x4F	; 79
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	8f 70       	andi	r24, 0x0F	; 15
    161c:	8c 93       	st	X, r24
		TCCR1A|=((Copy_psTimer->CompareMatchOutputMode_B)<<4);
    161e:	af e4       	ldi	r26, 0x4F	; 79
    1620:	b0 e0       	ldi	r27, 0x00	; 0
    1622:	ef e4       	ldi	r30, 0x4F	; 79
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	80 81       	ld	r24, Z
    1628:	28 2f       	mov	r18, r24
    162a:	ea 81       	ldd	r30, Y+2	; 0x02
    162c:	fb 81       	ldd	r31, Y+3	; 0x03
    162e:	83 81       	ldd	r24, Z+3	; 0x03
    1630:	88 2f       	mov	r24, r24
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	82 95       	swap	r24
    1636:	92 95       	swap	r25
    1638:	90 7f       	andi	r25, 0xF0	; 240
    163a:	98 27       	eor	r25, r24
    163c:	80 7f       	andi	r24, 0xF0	; 240
    163e:	98 27       	eor	r25, r24
    1640:	82 2b       	or	r24, r18
    1642:	8c 93       	st	X, r24
		TCCR1A|=((Copy_psTimer->CompareMatchOutputMode_A)<<6);
    1644:	af e4       	ldi	r26, 0x4F	; 79
    1646:	b0 e0       	ldi	r27, 0x00	; 0
    1648:	ef e4       	ldi	r30, 0x4F	; 79
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	80 81       	ld	r24, Z
    164e:	28 2f       	mov	r18, r24
    1650:	ea 81       	ldd	r30, Y+2	; 0x02
    1652:	fb 81       	ldd	r31, Y+3	; 0x03
    1654:	82 81       	ldd	r24, Z+2	; 0x02
    1656:	88 2f       	mov	r24, r24
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	00 24       	eor	r0, r0
    165c:	96 95       	lsr	r25
    165e:	87 95       	ror	r24
    1660:	07 94       	ror	r0
    1662:	96 95       	lsr	r25
    1664:	87 95       	ror	r24
    1666:	07 94       	ror	r0
    1668:	98 2f       	mov	r25, r24
    166a:	80 2d       	mov	r24, r0
    166c:	82 2b       	or	r24, r18
    166e:	8c 93       	st	X, r24
		//Initialize Interrupt Enable pins
		if(Copy_psTimer->CompareMatchInterrupt_A==INT_ENABLE){
    1670:	ea 81       	ldd	r30, Y+2	; 0x02
    1672:	fb 81       	ldd	r31, Y+3	; 0x03
    1674:	84 81       	ldd	r24, Z+4	; 0x04
    1676:	81 30       	cpi	r24, 0x01	; 1
    1678:	41 f4       	brne	.+16     	; 0x168a <TIMER1_u8Init+0x496>
			SET_BIT(TIMSK,TIMSK_OCIE1A);
    167a:	a9 e5       	ldi	r26, 0x59	; 89
    167c:	b0 e0       	ldi	r27, 0x00	; 0
    167e:	e9 e5       	ldi	r30, 0x59	; 89
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	80 81       	ld	r24, Z
    1684:	80 61       	ori	r24, 0x10	; 16
    1686:	8c 93       	st	X, r24
    1688:	0f c0       	rjmp	.+30     	; 0x16a8 <TIMER1_u8Init+0x4b4>
		}
		else if(Copy_psTimer->CompareMatchInterrupt_A==INT_DISABLE){
    168a:	ea 81       	ldd	r30, Y+2	; 0x02
    168c:	fb 81       	ldd	r31, Y+3	; 0x03
    168e:	84 81       	ldd	r24, Z+4	; 0x04
    1690:	82 30       	cpi	r24, 0x02	; 2
    1692:	41 f4       	brne	.+16     	; 0x16a4 <TIMER1_u8Init+0x4b0>
			CLR_BIT(TIMSK,TIMSK_OCIE1A);
    1694:	a9 e5       	ldi	r26, 0x59	; 89
    1696:	b0 e0       	ldi	r27, 0x00	; 0
    1698:	e9 e5       	ldi	r30, 0x59	; 89
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	80 81       	ld	r24, Z
    169e:	8f 7e       	andi	r24, 0xEF	; 239
    16a0:	8c 93       	st	X, r24
    16a2:	02 c0       	rjmp	.+4      	; 0x16a8 <TIMER1_u8Init+0x4b4>
		}
		else{
			Local_u8ErrorState=NOK;
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	89 83       	std	Y+1, r24	; 0x01
		}

		if(Copy_psTimer->CompareMatchInterrupt_B==INT_ENABLE){
    16a8:	ea 81       	ldd	r30, Y+2	; 0x02
    16aa:	fb 81       	ldd	r31, Y+3	; 0x03
    16ac:	85 81       	ldd	r24, Z+5	; 0x05
    16ae:	81 30       	cpi	r24, 0x01	; 1
    16b0:	41 f4       	brne	.+16     	; 0x16c2 <TIMER1_u8Init+0x4ce>
			SET_BIT(TIMSK,TIMSK_OCIE1B);
    16b2:	a9 e5       	ldi	r26, 0x59	; 89
    16b4:	b0 e0       	ldi	r27, 0x00	; 0
    16b6:	e9 e5       	ldi	r30, 0x59	; 89
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	80 81       	ld	r24, Z
    16bc:	88 60       	ori	r24, 0x08	; 8
    16be:	8c 93       	st	X, r24
    16c0:	0f c0       	rjmp	.+30     	; 0x16e0 <TIMER1_u8Init+0x4ec>
		}
		else if(Copy_psTimer->CompareMatchInterrupt_B==INT_DISABLE){
    16c2:	ea 81       	ldd	r30, Y+2	; 0x02
    16c4:	fb 81       	ldd	r31, Y+3	; 0x03
    16c6:	85 81       	ldd	r24, Z+5	; 0x05
    16c8:	82 30       	cpi	r24, 0x02	; 2
    16ca:	41 f4       	brne	.+16     	; 0x16dc <TIMER1_u8Init+0x4e8>
			CLR_BIT(TIMSK,TIMSK_OCIE1B);
    16cc:	a9 e5       	ldi	r26, 0x59	; 89
    16ce:	b0 e0       	ldi	r27, 0x00	; 0
    16d0:	e9 e5       	ldi	r30, 0x59	; 89
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	80 81       	ld	r24, Z
    16d6:	87 7f       	andi	r24, 0xF7	; 247
    16d8:	8c 93       	st	X, r24
    16da:	02 c0       	rjmp	.+4      	; 0x16e0 <TIMER1_u8Init+0x4ec>
		}
		else{
			Local_u8ErrorState=NOK;
    16dc:	81 e0       	ldi	r24, 0x01	; 1
    16de:	89 83       	std	Y+1, r24	; 0x01
		}


		if(Copy_psTimer->OverFlowInterrupt==INT_ENABLE){
    16e0:	ea 81       	ldd	r30, Y+2	; 0x02
    16e2:	fb 81       	ldd	r31, Y+3	; 0x03
    16e4:	86 81       	ldd	r24, Z+6	; 0x06
    16e6:	81 30       	cpi	r24, 0x01	; 1
    16e8:	41 f4       	brne	.+16     	; 0x16fa <TIMER1_u8Init+0x506>
			SET_BIT(TIMSK,TIMSK_TOIE1);
    16ea:	a9 e5       	ldi	r26, 0x59	; 89
    16ec:	b0 e0       	ldi	r27, 0x00	; 0
    16ee:	e9 e5       	ldi	r30, 0x59	; 89
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	80 81       	ld	r24, Z
    16f4:	84 60       	ori	r24, 0x04	; 4
    16f6:	8c 93       	st	X, r24
    16f8:	0f c0       	rjmp	.+30     	; 0x1718 <TIMER1_u8Init+0x524>
		}
		else if(Copy_psTimer->OverFlowInterrupt==INT_DISABLE){
    16fa:	ea 81       	ldd	r30, Y+2	; 0x02
    16fc:	fb 81       	ldd	r31, Y+3	; 0x03
    16fe:	86 81       	ldd	r24, Z+6	; 0x06
    1700:	82 30       	cpi	r24, 0x02	; 2
    1702:	41 f4       	brne	.+16     	; 0x1714 <TIMER1_u8Init+0x520>
			CLR_BIT(TIMSK,TIMSK_TOIE1);
    1704:	a9 e5       	ldi	r26, 0x59	; 89
    1706:	b0 e0       	ldi	r27, 0x00	; 0
    1708:	e9 e5       	ldi	r30, 0x59	; 89
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	80 81       	ld	r24, Z
    170e:	8b 7f       	andi	r24, 0xFB	; 251
    1710:	8c 93       	st	X, r24
    1712:	02 c0       	rjmp	.+4      	; 0x1718 <TIMER1_u8Init+0x524>
		}
		else{
			Local_u8ErrorState=NOK;
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	89 83       	std	Y+1, r24	; 0x01
		}

		if(Copy_psTimer->InputCapInterrupt==INT_ENABLE){
    1718:	ea 81       	ldd	r30, Y+2	; 0x02
    171a:	fb 81       	ldd	r31, Y+3	; 0x03
    171c:	87 81       	ldd	r24, Z+7	; 0x07
    171e:	81 30       	cpi	r24, 0x01	; 1
    1720:	41 f4       	brne	.+16     	; 0x1732 <TIMER1_u8Init+0x53e>
			SET_BIT(TIMSK,TIMSK_TICIE1);
    1722:	a9 e5       	ldi	r26, 0x59	; 89
    1724:	b0 e0       	ldi	r27, 0x00	; 0
    1726:	e9 e5       	ldi	r30, 0x59	; 89
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	80 81       	ld	r24, Z
    172c:	80 62       	ori	r24, 0x20	; 32
    172e:	8c 93       	st	X, r24
    1730:	0f c0       	rjmp	.+30     	; 0x1750 <TIMER1_u8Init+0x55c>
		}
		else if(Copy_psTimer->InputCapInterrupt==INT_DISABLE){
    1732:	ea 81       	ldd	r30, Y+2	; 0x02
    1734:	fb 81       	ldd	r31, Y+3	; 0x03
    1736:	87 81       	ldd	r24, Z+7	; 0x07
    1738:	82 30       	cpi	r24, 0x02	; 2
    173a:	41 f4       	brne	.+16     	; 0x174c <TIMER1_u8Init+0x558>
			CLR_BIT(TIMSK,TIMSK_TICIE1);
    173c:	a9 e5       	ldi	r26, 0x59	; 89
    173e:	b0 e0       	ldi	r27, 0x00	; 0
    1740:	e9 e5       	ldi	r30, 0x59	; 89
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	80 81       	ld	r24, Z
    1746:	8f 7d       	andi	r24, 0xDF	; 223
    1748:	8c 93       	st	X, r24
    174a:	02 c0       	rjmp	.+4      	; 0x1750 <TIMER1_u8Init+0x55c>
		}
		else{
			Local_u8ErrorState=NOK;
    174c:	81 e0       	ldi	r24, 0x01	; 1
    174e:	89 83       	std	Y+1, r24	; 0x01
		}

		//Initialize Prescaler
		TCCR1B&=PRESCALER_MASK;
    1750:	ae e4       	ldi	r26, 0x4E	; 78
    1752:	b0 e0       	ldi	r27, 0x00	; 0
    1754:	ee e4       	ldi	r30, 0x4E	; 78
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	80 81       	ld	r24, Z
    175a:	88 7f       	andi	r24, 0xF8	; 248
    175c:	8c 93       	st	X, r24
		TCCR1B|=Copy_psTimer->Prescaler;
    175e:	ae e4       	ldi	r26, 0x4E	; 78
    1760:	b0 e0       	ldi	r27, 0x00	; 0
    1762:	ee e4       	ldi	r30, 0x4E	; 78
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	90 81       	ld	r25, Z
    1768:	ea 81       	ldd	r30, Y+2	; 0x02
    176a:	fb 81       	ldd	r31, Y+3	; 0x03
    176c:	81 81       	ldd	r24, Z+1	; 0x01
    176e:	89 2b       	or	r24, r25
    1770:	8c 93       	st	X, r24
    1772:	02 c0       	rjmp	.+4      	; 0x1778 <TIMER1_u8Init+0x584>
	}
	else{
		Local_u8ErrorState=NULL_POINTER;
    1774:	82 e0       	ldi	r24, 0x02	; 2
    1776:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1778:	89 81       	ldd	r24, Y+1	; 0x01

}
    177a:	0f 90       	pop	r0
    177c:	0f 90       	pop	r0
    177e:	0f 90       	pop	r0
    1780:	cf 91       	pop	r28
    1782:	df 91       	pop	r29
    1784:	08 95       	ret

00001786 <TIMER1_voidSetTopValue>:


void TIMER1_voidSetTopValue(u16 Copy_u16Value){
    1786:	df 93       	push	r29
    1788:	cf 93       	push	r28
    178a:	00 d0       	rcall	.+0      	; 0x178c <TIMER1_voidSetTopValue+0x6>
    178c:	cd b7       	in	r28, 0x3d	; 61
    178e:	de b7       	in	r29, 0x3e	; 62
    1790:	9a 83       	std	Y+2, r25	; 0x02
    1792:	89 83       	std	Y+1, r24	; 0x01
	ICR1=Copy_u16Value;
    1794:	e6 e4       	ldi	r30, 0x46	; 70
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	89 81       	ldd	r24, Y+1	; 0x01
    179a:	9a 81       	ldd	r25, Y+2	; 0x02
    179c:	91 83       	std	Z+1, r25	; 0x01
    179e:	80 83       	st	Z, r24
}
    17a0:	0f 90       	pop	r0
    17a2:	0f 90       	pop	r0
    17a4:	cf 91       	pop	r28
    17a6:	df 91       	pop	r29
    17a8:	08 95       	ret

000017aa <TIMER_u8PWMGenerate>:

u8 TIMER_u8PWMGenerate(Timer1_t* Copy_psTimer,u8 Copy_u8ChannelID,u16 Copy_u16PeriodTime,u16 Copy_u16OnTime){
    17aa:	df 93       	push	r29
    17ac:	cf 93       	push	r28
    17ae:	cd b7       	in	r28, 0x3d	; 61
    17b0:	de b7       	in	r29, 0x3e	; 62
    17b2:	2a 97       	sbiw	r28, 0x0a	; 10
    17b4:	0f b6       	in	r0, 0x3f	; 63
    17b6:	f8 94       	cli
    17b8:	de bf       	out	0x3e, r29	; 62
    17ba:	0f be       	out	0x3f, r0	; 63
    17bc:	cd bf       	out	0x3d, r28	; 61
    17be:	9b 83       	std	Y+3, r25	; 0x03
    17c0:	8a 83       	std	Y+2, r24	; 0x02
    17c2:	6c 83       	std	Y+4, r22	; 0x04
    17c4:	5e 83       	std	Y+6, r21	; 0x06
    17c6:	4d 83       	std	Y+5, r20	; 0x05
    17c8:	38 87       	std	Y+8, r19	; 0x08
    17ca:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8ErrorState=OK;
    17cc:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_psTimer!=NULL){
    17ce:	8a 81       	ldd	r24, Y+2	; 0x02
    17d0:	9b 81       	ldd	r25, Y+3	; 0x03
    17d2:	00 97       	sbiw	r24, 0x00	; 0
    17d4:	09 f4       	brne	.+2      	; 0x17d8 <TIMER_u8PWMGenerate+0x2e>
    17d6:	8f c0       	rjmp	.+286    	; 0x18f6 <TIMER_u8PWMGenerate+0x14c>
		if((Copy_psTimer->WaveGenMode)==TIMER1_FAST_PWM_CUSTOM_TOP){
    17d8:	ea 81       	ldd	r30, Y+2	; 0x02
    17da:	fb 81       	ldd	r31, Y+3	; 0x03
    17dc:	80 81       	ld	r24, Z
    17de:	8e 30       	cpi	r24, 0x0E	; 14
    17e0:	09 f0       	breq	.+2      	; 0x17e4 <TIMER_u8PWMGenerate+0x3a>
    17e2:	86 c0       	rjmp	.+268    	; 0x18f0 <TIMER_u8PWMGenerate+0x146>

			switch(Copy_psTimer->Prescaler){
    17e4:	ea 81       	ldd	r30, Y+2	; 0x02
    17e6:	fb 81       	ldd	r31, Y+3	; 0x03
    17e8:	81 81       	ldd	r24, Z+1	; 0x01
    17ea:	28 2f       	mov	r18, r24
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	3a 87       	std	Y+10, r19	; 0x0a
    17f0:	29 87       	std	Y+9, r18	; 0x09
    17f2:	89 85       	ldd	r24, Y+9	; 0x09
    17f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    17f6:	83 30       	cpi	r24, 0x03	; 3
    17f8:	91 05       	cpc	r25, r1
    17fa:	79 f1       	breq	.+94     	; 0x185a <TIMER_u8PWMGenerate+0xb0>
    17fc:	29 85       	ldd	r18, Y+9	; 0x09
    17fe:	3a 85       	ldd	r19, Y+10	; 0x0a
    1800:	24 30       	cpi	r18, 0x04	; 4
    1802:	31 05       	cpc	r19, r1
    1804:	5c f4       	brge	.+22     	; 0x181c <TIMER_u8PWMGenerate+0x72>
    1806:	89 85       	ldd	r24, Y+9	; 0x09
    1808:	9a 85       	ldd	r25, Y+10	; 0x0a
    180a:	81 30       	cpi	r24, 0x01	; 1
    180c:	91 05       	cpc	r25, r1
    180e:	89 f0       	breq	.+34     	; 0x1832 <TIMER_u8PWMGenerate+0x88>
    1810:	29 85       	ldd	r18, Y+9	; 0x09
    1812:	3a 85       	ldd	r19, Y+10	; 0x0a
    1814:	22 30       	cpi	r18, 0x02	; 2
    1816:	31 05       	cpc	r19, r1
    1818:	c9 f0       	breq	.+50     	; 0x184c <TIMER_u8PWMGenerate+0xa2>
    181a:	47 c0       	rjmp	.+142    	; 0x18aa <TIMER_u8PWMGenerate+0x100>
    181c:	89 85       	ldd	r24, Y+9	; 0x09
    181e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1820:	84 30       	cpi	r24, 0x04	; 4
    1822:	91 05       	cpc	r25, r1
    1824:	39 f1       	breq	.+78     	; 0x1874 <TIMER_u8PWMGenerate+0xca>
    1826:	29 85       	ldd	r18, Y+9	; 0x09
    1828:	3a 85       	ldd	r19, Y+10	; 0x0a
    182a:	25 30       	cpi	r18, 0x05	; 5
    182c:	31 05       	cpc	r19, r1
    182e:	89 f1       	breq	.+98     	; 0x1892 <TIMER_u8PWMGenerate+0xe8>
    1830:	3c c0       	rjmp	.+120    	; 0x18aa <TIMER_u8PWMGenerate+0x100>
			case TIMER_DIV_BY_1    : ICR1 = Copy_u16PeriodTime*8   ; break;
    1832:	e6 e4       	ldi	r30, 0x46	; 70
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	8d 81       	ldd	r24, Y+5	; 0x05
    1838:	9e 81       	ldd	r25, Y+6	; 0x06
    183a:	88 0f       	add	r24, r24
    183c:	99 1f       	adc	r25, r25
    183e:	88 0f       	add	r24, r24
    1840:	99 1f       	adc	r25, r25
    1842:	88 0f       	add	r24, r24
    1844:	99 1f       	adc	r25, r25
    1846:	91 83       	std	Z+1, r25	; 0x01
    1848:	80 83       	st	Z, r24
    184a:	31 c0       	rjmp	.+98     	; 0x18ae <TIMER_u8PWMGenerate+0x104>
			case TIMER_DIV_BY_8    : ICR1 = Copy_u16PeriodTime     ; break;
    184c:	e6 e4       	ldi	r30, 0x46	; 70
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	8d 81       	ldd	r24, Y+5	; 0x05
    1852:	9e 81       	ldd	r25, Y+6	; 0x06
    1854:	91 83       	std	Z+1, r25	; 0x01
    1856:	80 83       	st	Z, r24
    1858:	2a c0       	rjmp	.+84     	; 0x18ae <TIMER_u8PWMGenerate+0x104>
			case TIMER_DIV_BY_64   : ICR1 = Copy_u16PeriodTime/8   ; break;
    185a:	e6 e4       	ldi	r30, 0x46	; 70
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	8d 81       	ldd	r24, Y+5	; 0x05
    1860:	9e 81       	ldd	r25, Y+6	; 0x06
    1862:	96 95       	lsr	r25
    1864:	87 95       	ror	r24
    1866:	96 95       	lsr	r25
    1868:	87 95       	ror	r24
    186a:	96 95       	lsr	r25
    186c:	87 95       	ror	r24
    186e:	91 83       	std	Z+1, r25	; 0x01
    1870:	80 83       	st	Z, r24
    1872:	1d c0       	rjmp	.+58     	; 0x18ae <TIMER_u8PWMGenerate+0x104>
			case TIMER_DIV_BY_256  : ICR1 = Copy_u16PeriodTime/32  ; break;
    1874:	e6 e4       	ldi	r30, 0x46	; 70
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	8d 81       	ldd	r24, Y+5	; 0x05
    187a:	9e 81       	ldd	r25, Y+6	; 0x06
    187c:	96 95       	lsr	r25
    187e:	87 95       	ror	r24
    1880:	92 95       	swap	r25
    1882:	82 95       	swap	r24
    1884:	8f 70       	andi	r24, 0x0F	; 15
    1886:	89 27       	eor	r24, r25
    1888:	9f 70       	andi	r25, 0x0F	; 15
    188a:	89 27       	eor	r24, r25
    188c:	91 83       	std	Z+1, r25	; 0x01
    188e:	80 83       	st	Z, r24
    1890:	0e c0       	rjmp	.+28     	; 0x18ae <TIMER_u8PWMGenerate+0x104>
			case TIMER_DIV_BY_1024 : ICR1 = Copy_u16PeriodTime/128 ; break;
    1892:	e6 e4       	ldi	r30, 0x46	; 70
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	8d 81       	ldd	r24, Y+5	; 0x05
    1898:	9e 81       	ldd	r25, Y+6	; 0x06
    189a:	88 0f       	add	r24, r24
    189c:	89 2f       	mov	r24, r25
    189e:	88 1f       	adc	r24, r24
    18a0:	99 0b       	sbc	r25, r25
    18a2:	91 95       	neg	r25
    18a4:	91 83       	std	Z+1, r25	; 0x01
    18a6:	80 83       	st	Z, r24
    18a8:	02 c0       	rjmp	.+4      	; 0x18ae <TIMER_u8PWMGenerate+0x104>
			default: Local_u8ErrorState=NOK;
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	89 83       	std	Y+1, r24	; 0x01
			}

			if(Copy_u16OnTime<=Copy_u16PeriodTime){
    18ae:	2f 81       	ldd	r18, Y+7	; 0x07
    18b0:	38 85       	ldd	r19, Y+8	; 0x08
    18b2:	8d 81       	ldd	r24, Y+5	; 0x05
    18b4:	9e 81       	ldd	r25, Y+6	; 0x06
    18b6:	82 17       	cp	r24, r18
    18b8:	93 07       	cpc	r25, r19
    18ba:	b8 f0       	brcs	.+46     	; 0x18ea <TIMER_u8PWMGenerate+0x140>
				if(Copy_u8ChannelID==CHANNEL_A){
    18bc:	8c 81       	ldd	r24, Y+4	; 0x04
    18be:	81 30       	cpi	r24, 0x01	; 1
    18c0:	39 f4       	brne	.+14     	; 0x18d0 <TIMER_u8PWMGenerate+0x126>
					OCR1A=Copy_u16OnTime;
    18c2:	ea e4       	ldi	r30, 0x4A	; 74
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	8f 81       	ldd	r24, Y+7	; 0x07
    18c8:	98 85       	ldd	r25, Y+8	; 0x08
    18ca:	91 83       	std	Z+1, r25	; 0x01
    18cc:	80 83       	st	Z, r24
    18ce:	15 c0       	rjmp	.+42     	; 0x18fa <TIMER_u8PWMGenerate+0x150>
				}
				else if(Copy_u8ChannelID==CHANNEL_B){
    18d0:	8c 81       	ldd	r24, Y+4	; 0x04
    18d2:	82 30       	cpi	r24, 0x02	; 2
    18d4:	39 f4       	brne	.+14     	; 0x18e4 <TIMER_u8PWMGenerate+0x13a>
					OCR1B=Copy_u16OnTime;
    18d6:	e8 e4       	ldi	r30, 0x48	; 72
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	8f 81       	ldd	r24, Y+7	; 0x07
    18dc:	98 85       	ldd	r25, Y+8	; 0x08
    18de:	91 83       	std	Z+1, r25	; 0x01
    18e0:	80 83       	st	Z, r24
    18e2:	0b c0       	rjmp	.+22     	; 0x18fa <TIMER_u8PWMGenerate+0x150>
				}
				else{
					Local_u8ErrorState=NOK;
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	89 83       	std	Y+1, r24	; 0x01
    18e8:	08 c0       	rjmp	.+16     	; 0x18fa <TIMER_u8PWMGenerate+0x150>
				}
			}
			else{
				Local_u8ErrorState=NOK;
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	89 83       	std	Y+1, r24	; 0x01
    18ee:	05 c0       	rjmp	.+10     	; 0x18fa <TIMER_u8PWMGenerate+0x150>

			}
		}
		else{
			Local_u8ErrorState=NOK;
    18f0:	81 e0       	ldi	r24, 0x01	; 1
    18f2:	89 83       	std	Y+1, r24	; 0x01
    18f4:	02 c0       	rjmp	.+4      	; 0x18fa <TIMER_u8PWMGenerate+0x150>
		}
	}
	else{
		Local_u8ErrorState=NULL_POINTER;
    18f6:	82 e0       	ldi	r24, 0x02	; 2
    18f8:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErrorState;
    18fa:	89 81       	ldd	r24, Y+1	; 0x01

}
    18fc:	2a 96       	adiw	r28, 0x0a	; 10
    18fe:	0f b6       	in	r0, 0x3f	; 63
    1900:	f8 94       	cli
    1902:	de bf       	out	0x3e, r29	; 62
    1904:	0f be       	out	0x3f, r0	; 63
    1906:	cd bf       	out	0x3d, r28	; 61
    1908:	cf 91       	pop	r28
    190a:	df 91       	pop	r29
    190c:	08 95       	ret

0000190e <TIMER2_u8Init>:


/********************************************************TIMER2**********************************************************
 ************************************************************************************************************************/

u8 TIMER2_u8Init(Timer_t* Copy_psTimer){
    190e:	df 93       	push	r29
    1910:	cf 93       	push	r28
    1912:	00 d0       	rcall	.+0      	; 0x1914 <TIMER2_u8Init+0x6>
    1914:	0f 92       	push	r0
    1916:	cd b7       	in	r28, 0x3d	; 61
    1918:	de b7       	in	r29, 0x3e	; 62
    191a:	9b 83       	std	Y+3, r25	; 0x03
    191c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
    191e:	19 82       	std	Y+1, r1	; 0x01
	//Initialize Wave Generation Mode
	if(Copy_psTimer!=NULL){
    1920:	8a 81       	ldd	r24, Y+2	; 0x02
    1922:	9b 81       	ldd	r25, Y+3	; 0x03
    1924:	00 97       	sbiw	r24, 0x00	; 0
    1926:	09 f4       	brne	.+2      	; 0x192a <TIMER2_u8Init+0x1c>
    1928:	b6 c0       	rjmp	.+364    	; 0x1a96 <TIMER2_u8Init+0x188>
		if(Copy_psTimer->WaveGenMode==TIMER_NORMAL){
    192a:	ea 81       	ldd	r30, Y+2	; 0x02
    192c:	fb 81       	ldd	r31, Y+3	; 0x03
    192e:	80 81       	ld	r24, Z
    1930:	81 30       	cpi	r24, 0x01	; 1
    1932:	79 f4       	brne	.+30     	; 0x1952 <TIMER2_u8Init+0x44>
			CLR_BIT(TCCR2,TCCR2_WGM21);
    1934:	a5 e4       	ldi	r26, 0x45	; 69
    1936:	b0 e0       	ldi	r27, 0x00	; 0
    1938:	e5 e4       	ldi	r30, 0x45	; 69
    193a:	f0 e0       	ldi	r31, 0x00	; 0
    193c:	80 81       	ld	r24, Z
    193e:	87 7f       	andi	r24, 0xF7	; 247
    1940:	8c 93       	st	X, r24
			CLR_BIT(TCCR2,TCCR2_WGM20);
    1942:	a5 e4       	ldi	r26, 0x45	; 69
    1944:	b0 e0       	ldi	r27, 0x00	; 0
    1946:	e5 e4       	ldi	r30, 0x45	; 69
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	80 81       	ld	r24, Z
    194c:	8f 7b       	andi	r24, 0xBF	; 191
    194e:	8c 93       	st	X, r24
    1950:	3e c0       	rjmp	.+124    	; 0x19ce <TIMER2_u8Init+0xc0>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER_PHC_PWM){
    1952:	ea 81       	ldd	r30, Y+2	; 0x02
    1954:	fb 81       	ldd	r31, Y+3	; 0x03
    1956:	80 81       	ld	r24, Z
    1958:	82 30       	cpi	r24, 0x02	; 2
    195a:	79 f4       	brne	.+30     	; 0x197a <TIMER2_u8Init+0x6c>
			CLR_BIT(TCCR2,TCCR2_WGM21);
    195c:	a5 e4       	ldi	r26, 0x45	; 69
    195e:	b0 e0       	ldi	r27, 0x00	; 0
    1960:	e5 e4       	ldi	r30, 0x45	; 69
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	80 81       	ld	r24, Z
    1966:	87 7f       	andi	r24, 0xF7	; 247
    1968:	8c 93       	st	X, r24
			SET_BIT(TCCR2,TCCR2_WGM20);
    196a:	a5 e4       	ldi	r26, 0x45	; 69
    196c:	b0 e0       	ldi	r27, 0x00	; 0
    196e:	e5 e4       	ldi	r30, 0x45	; 69
    1970:	f0 e0       	ldi	r31, 0x00	; 0
    1972:	80 81       	ld	r24, Z
    1974:	80 64       	ori	r24, 0x40	; 64
    1976:	8c 93       	st	X, r24
    1978:	2a c0       	rjmp	.+84     	; 0x19ce <TIMER2_u8Init+0xc0>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER_CTC){
    197a:	ea 81       	ldd	r30, Y+2	; 0x02
    197c:	fb 81       	ldd	r31, Y+3	; 0x03
    197e:	80 81       	ld	r24, Z
    1980:	83 30       	cpi	r24, 0x03	; 3
    1982:	79 f4       	brne	.+30     	; 0x19a2 <TIMER2_u8Init+0x94>
			SET_BIT(TCCR2,TCCR2_WGM21);
    1984:	a5 e4       	ldi	r26, 0x45	; 69
    1986:	b0 e0       	ldi	r27, 0x00	; 0
    1988:	e5 e4       	ldi	r30, 0x45	; 69
    198a:	f0 e0       	ldi	r31, 0x00	; 0
    198c:	80 81       	ld	r24, Z
    198e:	88 60       	ori	r24, 0x08	; 8
    1990:	8c 93       	st	X, r24
			CLR_BIT(TCCR2,TCCR2_WGM20);
    1992:	a5 e4       	ldi	r26, 0x45	; 69
    1994:	b0 e0       	ldi	r27, 0x00	; 0
    1996:	e5 e4       	ldi	r30, 0x45	; 69
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	80 81       	ld	r24, Z
    199c:	8f 7b       	andi	r24, 0xBF	; 191
    199e:	8c 93       	st	X, r24
    19a0:	16 c0       	rjmp	.+44     	; 0x19ce <TIMER2_u8Init+0xc0>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER_FAST_PWM){
    19a2:	ea 81       	ldd	r30, Y+2	; 0x02
    19a4:	fb 81       	ldd	r31, Y+3	; 0x03
    19a6:	80 81       	ld	r24, Z
    19a8:	84 30       	cpi	r24, 0x04	; 4
    19aa:	79 f4       	brne	.+30     	; 0x19ca <TIMER2_u8Init+0xbc>
			SET_BIT(TCCR2,TCCR2_WGM21);
    19ac:	a5 e4       	ldi	r26, 0x45	; 69
    19ae:	b0 e0       	ldi	r27, 0x00	; 0
    19b0:	e5 e4       	ldi	r30, 0x45	; 69
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	80 81       	ld	r24, Z
    19b6:	88 60       	ori	r24, 0x08	; 8
    19b8:	8c 93       	st	X, r24
			SET_BIT(TCCR2,TCCR2_WGM20);
    19ba:	a5 e4       	ldi	r26, 0x45	; 69
    19bc:	b0 e0       	ldi	r27, 0x00	; 0
    19be:	e5 e4       	ldi	r30, 0x45	; 69
    19c0:	f0 e0       	ldi	r31, 0x00	; 0
    19c2:	80 81       	ld	r24, Z
    19c4:	80 64       	ori	r24, 0x40	; 64
    19c6:	8c 93       	st	X, r24
    19c8:	02 c0       	rjmp	.+4      	; 0x19ce <TIMER2_u8Init+0xc0>
		}
		else{
			Local_u8ErrorState=NOK;
    19ca:	81 e0       	ldi	r24, 0x01	; 1
    19cc:	89 83       	std	Y+1, r24	; 0x01
		}
		//Initialize Compare Match Output Mode
		TCCR2&=COMP_MATCH_OUT_MASK;
    19ce:	a5 e4       	ldi	r26, 0x45	; 69
    19d0:	b0 e0       	ldi	r27, 0x00	; 0
    19d2:	e5 e4       	ldi	r30, 0x45	; 69
    19d4:	f0 e0       	ldi	r31, 0x00	; 0
    19d6:	80 81       	ld	r24, Z
    19d8:	8f 7c       	andi	r24, 0xCF	; 207
    19da:	8c 93       	st	X, r24
		TCCR2|=((Copy_psTimer->CompareMatchOutputMode)<<4);
    19dc:	a5 e4       	ldi	r26, 0x45	; 69
    19de:	b0 e0       	ldi	r27, 0x00	; 0
    19e0:	e5 e4       	ldi	r30, 0x45	; 69
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	80 81       	ld	r24, Z
    19e6:	28 2f       	mov	r18, r24
    19e8:	ea 81       	ldd	r30, Y+2	; 0x02
    19ea:	fb 81       	ldd	r31, Y+3	; 0x03
    19ec:	82 81       	ldd	r24, Z+2	; 0x02
    19ee:	88 2f       	mov	r24, r24
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	82 95       	swap	r24
    19f4:	92 95       	swap	r25
    19f6:	90 7f       	andi	r25, 0xF0	; 240
    19f8:	98 27       	eor	r25, r24
    19fa:	80 7f       	andi	r24, 0xF0	; 240
    19fc:	98 27       	eor	r25, r24
    19fe:	82 2b       	or	r24, r18
    1a00:	8c 93       	st	X, r24
		//Initialize Interrupt Enable pins
		if(Copy_psTimer->CompareMatchInterrupt==INT_ENABLE){
    1a02:	ea 81       	ldd	r30, Y+2	; 0x02
    1a04:	fb 81       	ldd	r31, Y+3	; 0x03
    1a06:	83 81       	ldd	r24, Z+3	; 0x03
    1a08:	81 30       	cpi	r24, 0x01	; 1
    1a0a:	41 f4       	brne	.+16     	; 0x1a1c <TIMER2_u8Init+0x10e>
			SET_BIT(TIMSK,TIMSK_OCIE2);
    1a0c:	a9 e5       	ldi	r26, 0x59	; 89
    1a0e:	b0 e0       	ldi	r27, 0x00	; 0
    1a10:	e9 e5       	ldi	r30, 0x59	; 89
    1a12:	f0 e0       	ldi	r31, 0x00	; 0
    1a14:	80 81       	ld	r24, Z
    1a16:	80 68       	ori	r24, 0x80	; 128
    1a18:	8c 93       	st	X, r24
    1a1a:	0f c0       	rjmp	.+30     	; 0x1a3a <TIMER2_u8Init+0x12c>
		}
		else if(Copy_psTimer->CompareMatchInterrupt==INT_DISABLE){
    1a1c:	ea 81       	ldd	r30, Y+2	; 0x02
    1a1e:	fb 81       	ldd	r31, Y+3	; 0x03
    1a20:	83 81       	ldd	r24, Z+3	; 0x03
    1a22:	82 30       	cpi	r24, 0x02	; 2
    1a24:	41 f4       	brne	.+16     	; 0x1a36 <TIMER2_u8Init+0x128>
			CLR_BIT(TIMSK,TIMSK_OCIE2);
    1a26:	a9 e5       	ldi	r26, 0x59	; 89
    1a28:	b0 e0       	ldi	r27, 0x00	; 0
    1a2a:	e9 e5       	ldi	r30, 0x59	; 89
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	80 81       	ld	r24, Z
    1a30:	8f 77       	andi	r24, 0x7F	; 127
    1a32:	8c 93       	st	X, r24
    1a34:	02 c0       	rjmp	.+4      	; 0x1a3a <TIMER2_u8Init+0x12c>
		}
		else{
			Local_u8ErrorState=NOK;
    1a36:	81 e0       	ldi	r24, 0x01	; 1
    1a38:	89 83       	std	Y+1, r24	; 0x01
		}

		if(Copy_psTimer->OverFlowInterrupt==INT_ENABLE){
    1a3a:	ea 81       	ldd	r30, Y+2	; 0x02
    1a3c:	fb 81       	ldd	r31, Y+3	; 0x03
    1a3e:	84 81       	ldd	r24, Z+4	; 0x04
    1a40:	81 30       	cpi	r24, 0x01	; 1
    1a42:	41 f4       	brne	.+16     	; 0x1a54 <TIMER2_u8Init+0x146>
			SET_BIT(TIMSK,TIMSK_TOIE2);
    1a44:	a9 e5       	ldi	r26, 0x59	; 89
    1a46:	b0 e0       	ldi	r27, 0x00	; 0
    1a48:	e9 e5       	ldi	r30, 0x59	; 89
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	80 81       	ld	r24, Z
    1a4e:	80 64       	ori	r24, 0x40	; 64
    1a50:	8c 93       	st	X, r24
    1a52:	0f c0       	rjmp	.+30     	; 0x1a72 <TIMER2_u8Init+0x164>
		}
		else if(Copy_psTimer->OverFlowInterrupt==INT_DISABLE){
    1a54:	ea 81       	ldd	r30, Y+2	; 0x02
    1a56:	fb 81       	ldd	r31, Y+3	; 0x03
    1a58:	84 81       	ldd	r24, Z+4	; 0x04
    1a5a:	82 30       	cpi	r24, 0x02	; 2
    1a5c:	41 f4       	brne	.+16     	; 0x1a6e <TIMER2_u8Init+0x160>
			CLR_BIT(TIMSK,TIMSK_TOIE2);
    1a5e:	a9 e5       	ldi	r26, 0x59	; 89
    1a60:	b0 e0       	ldi	r27, 0x00	; 0
    1a62:	e9 e5       	ldi	r30, 0x59	; 89
    1a64:	f0 e0       	ldi	r31, 0x00	; 0
    1a66:	80 81       	ld	r24, Z
    1a68:	8f 7b       	andi	r24, 0xBF	; 191
    1a6a:	8c 93       	st	X, r24
    1a6c:	02 c0       	rjmp	.+4      	; 0x1a72 <TIMER2_u8Init+0x164>
		}
		else{
			Local_u8ErrorState=NOK;
    1a6e:	81 e0       	ldi	r24, 0x01	; 1
    1a70:	89 83       	std	Y+1, r24	; 0x01
		}

		//Initialize Prescaler
		TCCR2&=PRESCALER_MASK;
    1a72:	a5 e4       	ldi	r26, 0x45	; 69
    1a74:	b0 e0       	ldi	r27, 0x00	; 0
    1a76:	e5 e4       	ldi	r30, 0x45	; 69
    1a78:	f0 e0       	ldi	r31, 0x00	; 0
    1a7a:	80 81       	ld	r24, Z
    1a7c:	88 7f       	andi	r24, 0xF8	; 248
    1a7e:	8c 93       	st	X, r24
		TCCR2|=Copy_psTimer->Prescaler;
    1a80:	a5 e4       	ldi	r26, 0x45	; 69
    1a82:	b0 e0       	ldi	r27, 0x00	; 0
    1a84:	e5 e4       	ldi	r30, 0x45	; 69
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	90 81       	ld	r25, Z
    1a8a:	ea 81       	ldd	r30, Y+2	; 0x02
    1a8c:	fb 81       	ldd	r31, Y+3	; 0x03
    1a8e:	81 81       	ldd	r24, Z+1	; 0x01
    1a90:	89 2b       	or	r24, r25
    1a92:	8c 93       	st	X, r24
    1a94:	02 c0       	rjmp	.+4      	; 0x1a9a <TIMER2_u8Init+0x18c>
	}
	else{
		Local_u8ErrorState=NULL_POINTER;
    1a96:	82 e0       	ldi	r24, 0x02	; 2
    1a98:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1a9a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a9c:	0f 90       	pop	r0
    1a9e:	0f 90       	pop	r0
    1aa0:	0f 90       	pop	r0
    1aa2:	cf 91       	pop	r28
    1aa4:	df 91       	pop	r29
    1aa6:	08 95       	ret

00001aa8 <TIMER2_delay_ms>:

u8 TIMER2_delay_ms(Timer_t* Copy_psTimer,u16 Copy_u16Time){
    1aa8:	df 93       	push	r29
    1aaa:	cf 93       	push	r28
    1aac:	cd b7       	in	r28, 0x3d	; 61
    1aae:	de b7       	in	r29, 0x3e	; 62
    1ab0:	6a 97       	sbiw	r28, 0x1a	; 26
    1ab2:	0f b6       	in	r0, 0x3f	; 63
    1ab4:	f8 94       	cli
    1ab6:	de bf       	out	0x3e, r29	; 62
    1ab8:	0f be       	out	0x3f, r0	; 63
    1aba:	cd bf       	out	0x3d, r28	; 61
    1abc:	9b 8b       	std	Y+19, r25	; 0x13
    1abe:	8a 8b       	std	Y+18, r24	; 0x12
    1ac0:	7d 8b       	std	Y+21, r23	; 0x15
    1ac2:	6c 8b       	std	Y+20, r22	; 0x14
	u8 Local_u8ErrorState=OK,Local_u8Break=1; u16 Local_u16Counter=0;u32 Local_u32usTime,Local_u32CompMatchCount;
    1ac4:	1c 86       	std	Y+12, r1	; 0x0c
    1ac6:	81 e0       	ldi	r24, 0x01	; 1
    1ac8:	8b 87       	std	Y+11, r24	; 0x0b
    1aca:	1a 86       	std	Y+10, r1	; 0x0a
    1acc:	19 86       	std	Y+9, r1	; 0x09
	if(Copy_psTimer!=NULL){
    1ace:	8a 89       	ldd	r24, Y+18	; 0x12
    1ad0:	9b 89       	ldd	r25, Y+19	; 0x13
    1ad2:	00 97       	sbiw	r24, 0x00	; 0
    1ad4:	09 f4       	brne	.+2      	; 0x1ad8 <TIMER2_delay_ms+0x30>
    1ad6:	82 c0       	rjmp	.+260    	; 0x1bdc <TIMER2_delay_ms+0x134>
		Timer_t Timer ={TIMER_CTC,TIMER_DIV_BY_8,TIMER_DISCONNECT,INT_DISABLE,INT_DISABLE};
    1ad8:	ce 01       	movw	r24, r28
    1ada:	0d 96       	adiw	r24, 0x0d	; 13
    1adc:	9f 8b       	std	Y+23, r25	; 0x17
    1ade:	8e 8b       	std	Y+22, r24	; 0x16
    1ae0:	ea e6       	ldi	r30, 0x6A	; 106
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	f9 8f       	std	Y+25, r31	; 0x19
    1ae6:	e8 8f       	std	Y+24, r30	; 0x18
    1ae8:	f5 e0       	ldi	r31, 0x05	; 5
    1aea:	fa 8f       	std	Y+26, r31	; 0x1a
    1aec:	e8 8d       	ldd	r30, Y+24	; 0x18
    1aee:	f9 8d       	ldd	r31, Y+25	; 0x19
    1af0:	00 80       	ld	r0, Z
    1af2:	88 8d       	ldd	r24, Y+24	; 0x18
    1af4:	99 8d       	ldd	r25, Y+25	; 0x19
    1af6:	01 96       	adiw	r24, 0x01	; 1
    1af8:	99 8f       	std	Y+25, r25	; 0x19
    1afa:	88 8f       	std	Y+24, r24	; 0x18
    1afc:	ee 89       	ldd	r30, Y+22	; 0x16
    1afe:	ff 89       	ldd	r31, Y+23	; 0x17
    1b00:	00 82       	st	Z, r0
    1b02:	8e 89       	ldd	r24, Y+22	; 0x16
    1b04:	9f 89       	ldd	r25, Y+23	; 0x17
    1b06:	01 96       	adiw	r24, 0x01	; 1
    1b08:	9f 8b       	std	Y+23, r25	; 0x17
    1b0a:	8e 8b       	std	Y+22, r24	; 0x16
    1b0c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1b0e:	91 50       	subi	r25, 0x01	; 1
    1b10:	9a 8f       	std	Y+26, r25	; 0x1a
    1b12:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1b14:	ee 23       	and	r30, r30
    1b16:	51 f7       	brne	.-44     	; 0x1aec <TIMER2_delay_ms+0x44>
		TIMER2_u8Init(&Timer);
    1b18:	ce 01       	movw	r24, r28
    1b1a:	0d 96       	adiw	r24, 0x0d	; 13
    1b1c:	0e 94 87 0c 	call	0x190e	; 0x190e <TIMER2_u8Init>
		TIMER_u8SetCompMatch(TIMER2,250);
    1b20:	83 e0       	ldi	r24, 0x03	; 3
    1b22:	6a ef       	ldi	r22, 0xFA	; 250
    1b24:	70 e0       	ldi	r23, 0x00	; 0
    1b26:	0e 94 6d 07 	call	0xeda	; 0xeda <TIMER_u8SetCompMatch>
		Local_u32usTime=(u32)Copy_u16Time*1000UL;
    1b2a:	8c 89       	ldd	r24, Y+20	; 0x14
    1b2c:	9d 89       	ldd	r25, Y+21	; 0x15
    1b2e:	cc 01       	movw	r24, r24
    1b30:	a0 e0       	ldi	r26, 0x00	; 0
    1b32:	b0 e0       	ldi	r27, 0x00	; 0
    1b34:	28 ee       	ldi	r18, 0xE8	; 232
    1b36:	33 e0       	ldi	r19, 0x03	; 3
    1b38:	40 e0       	ldi	r20, 0x00	; 0
    1b3a:	50 e0       	ldi	r21, 0x00	; 0
    1b3c:	bc 01       	movw	r22, r24
    1b3e:	cd 01       	movw	r24, r26
    1b40:	0e 94 a0 10 	call	0x2140	; 0x2140 <__mulsi3>
    1b44:	dc 01       	movw	r26, r24
    1b46:	cb 01       	movw	r24, r22
    1b48:	8d 83       	std	Y+5, r24	; 0x05
    1b4a:	9e 83       	std	Y+6, r25	; 0x06
    1b4c:	af 83       	std	Y+7, r26	; 0x07
    1b4e:	b8 87       	std	Y+8, r27	; 0x08
		Local_u32CompMatchCount=Local_u32usTime/250;
    1b50:	8d 81       	ldd	r24, Y+5	; 0x05
    1b52:	9e 81       	ldd	r25, Y+6	; 0x06
    1b54:	af 81       	ldd	r26, Y+7	; 0x07
    1b56:	b8 85       	ldd	r27, Y+8	; 0x08
    1b58:	2a ef       	ldi	r18, 0xFA	; 250
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	40 e0       	ldi	r20, 0x00	; 0
    1b5e:	50 e0       	ldi	r21, 0x00	; 0
    1b60:	bc 01       	movw	r22, r24
    1b62:	cd 01       	movw	r24, r26
    1b64:	0e 94 bf 10 	call	0x217e	; 0x217e <__udivmodsi4>
    1b68:	da 01       	movw	r26, r20
    1b6a:	c9 01       	movw	r24, r18
    1b6c:	89 83       	std	Y+1, r24	; 0x01
    1b6e:	9a 83       	std	Y+2, r25	; 0x02
    1b70:	ab 83       	std	Y+3, r26	; 0x03
    1b72:	bc 83       	std	Y+4, r27	; 0x04
    1b74:	2b c0       	rjmp	.+86     	; 0x1bcc <TIMER2_delay_ms+0x124>
		while(Local_u8Break==1){
			if(GET_BIT(TIFR,TIFR_OCF2)==1){
    1b76:	e8 e5       	ldi	r30, 0x58	; 88
    1b78:	f0 e0       	ldi	r31, 0x00	; 0
    1b7a:	80 81       	ld	r24, Z
    1b7c:	88 1f       	adc	r24, r24
    1b7e:	88 27       	eor	r24, r24
    1b80:	88 1f       	adc	r24, r24
    1b82:	81 30       	cpi	r24, 0x01	; 1
    1b84:	19 f5       	brne	.+70     	; 0x1bcc <TIMER2_delay_ms+0x124>
				if(Local_u16Counter==Local_u32CompMatchCount){
    1b86:	89 85       	ldd	r24, Y+9	; 0x09
    1b88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b8a:	9c 01       	movw	r18, r24
    1b8c:	40 e0       	ldi	r20, 0x00	; 0
    1b8e:	50 e0       	ldi	r21, 0x00	; 0
    1b90:	89 81       	ldd	r24, Y+1	; 0x01
    1b92:	9a 81       	ldd	r25, Y+2	; 0x02
    1b94:	ab 81       	ldd	r26, Y+3	; 0x03
    1b96:	bc 81       	ldd	r27, Y+4	; 0x04
    1b98:	28 17       	cp	r18, r24
    1b9a:	39 07       	cpc	r19, r25
    1b9c:	4a 07       	cpc	r20, r26
    1b9e:	5b 07       	cpc	r21, r27
    1ba0:	49 f4       	brne	.+18     	; 0x1bb4 <TIMER2_delay_ms+0x10c>
					Local_u8Break=0;
    1ba2:	1b 86       	std	Y+11, r1	; 0x0b
					SET_BIT(TIFR,TIFR_OCF2);
    1ba4:	a8 e5       	ldi	r26, 0x58	; 88
    1ba6:	b0 e0       	ldi	r27, 0x00	; 0
    1ba8:	e8 e5       	ldi	r30, 0x58	; 88
    1baa:	f0 e0       	ldi	r31, 0x00	; 0
    1bac:	80 81       	ld	r24, Z
    1bae:	80 68       	ori	r24, 0x80	; 128
    1bb0:	8c 93       	st	X, r24
    1bb2:	0c c0       	rjmp	.+24     	; 0x1bcc <TIMER2_delay_ms+0x124>
				}
				else{
					Local_u16Counter++;
    1bb4:	89 85       	ldd	r24, Y+9	; 0x09
    1bb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bb8:	01 96       	adiw	r24, 0x01	; 1
    1bba:	9a 87       	std	Y+10, r25	; 0x0a
    1bbc:	89 87       	std	Y+9, r24	; 0x09
					SET_BIT(TIFR,TIFR_OCF2);
    1bbe:	a8 e5       	ldi	r26, 0x58	; 88
    1bc0:	b0 e0       	ldi	r27, 0x00	; 0
    1bc2:	e8 e5       	ldi	r30, 0x58	; 88
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	80 81       	ld	r24, Z
    1bc8:	80 68       	ori	r24, 0x80	; 128
    1bca:	8c 93       	st	X, r24
		Timer_t Timer ={TIMER_CTC,TIMER_DIV_BY_8,TIMER_DISCONNECT,INT_DISABLE,INT_DISABLE};
		TIMER2_u8Init(&Timer);
		TIMER_u8SetCompMatch(TIMER2,250);
		Local_u32usTime=(u32)Copy_u16Time*1000UL;
		Local_u32CompMatchCount=Local_u32usTime/250;
		while(Local_u8Break==1){
    1bcc:	8b 85       	ldd	r24, Y+11	; 0x0b
    1bce:	81 30       	cpi	r24, 0x01	; 1
    1bd0:	91 f2       	breq	.-92     	; 0x1b76 <TIMER2_delay_ms+0xce>
					Local_u16Counter++;
					SET_BIT(TIFR,TIFR_OCF2);
				}
			}
		}
		TIMER2_u8Init(Copy_psTimer);
    1bd2:	8a 89       	ldd	r24, Y+18	; 0x12
    1bd4:	9b 89       	ldd	r25, Y+19	; 0x13
    1bd6:	0e 94 87 0c 	call	0x190e	; 0x190e <TIMER2_u8Init>
    1bda:	02 c0       	rjmp	.+4      	; 0x1be0 <TIMER2_delay_ms+0x138>

	}
	else{
		Local_u8ErrorState=NULL_POINTER;
    1bdc:	82 e0       	ldi	r24, 0x02	; 2
    1bde:	8c 87       	std	Y+12, r24	; 0x0c
	}
	return Local_u8ErrorState;
    1be0:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    1be2:	6a 96       	adiw	r28, 0x1a	; 26
    1be4:	0f b6       	in	r0, 0x3f	; 63
    1be6:	f8 94       	cli
    1be8:	de bf       	out	0x3e, r29	; 62
    1bea:	0f be       	out	0x3f, r0	; 63
    1bec:	cd bf       	out	0x3d, r28	; 61
    1bee:	cf 91       	pop	r28
    1bf0:	df 91       	pop	r29
    1bf2:	08 95       	ret

00001bf4 <TIMER_u8SetCallBack>:


/********************************************************ISRs************************************************************
 ************************************************************************************************************************/

u8 TIMER_u8SetCallBack(u8 Copy_u8InterruptID,void(*Copy_pvCallBackFunc)(void)){
    1bf4:	df 93       	push	r29
    1bf6:	cf 93       	push	r28
    1bf8:	00 d0       	rcall	.+0      	; 0x1bfa <TIMER_u8SetCallBack+0x6>
    1bfa:	00 d0       	rcall	.+0      	; 0x1bfc <TIMER_u8SetCallBack+0x8>
    1bfc:	00 d0       	rcall	.+0      	; 0x1bfe <TIMER_u8SetCallBack+0xa>
    1bfe:	cd b7       	in	r28, 0x3d	; 61
    1c00:	de b7       	in	r29, 0x3e	; 62
    1c02:	8a 83       	std	Y+2, r24	; 0x02
    1c04:	7c 83       	std	Y+4, r23	; 0x04
    1c06:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=OK;
    1c08:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvCallBackFunc!=NULL){
    1c0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c0e:	00 97       	sbiw	r24, 0x00	; 0
    1c10:	09 f4       	brne	.+2      	; 0x1c14 <TIMER_u8SetCallBack+0x20>
    1c12:	70 c0       	rjmp	.+224    	; 0x1cf4 <TIMER_u8SetCallBack+0x100>
		switch(Copy_u8InterruptID){
    1c14:	8a 81       	ldd	r24, Y+2	; 0x02
    1c16:	28 2f       	mov	r18, r24
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	3e 83       	std	Y+6, r19	; 0x06
    1c1c:	2d 83       	std	Y+5, r18	; 0x05
    1c1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c20:	9e 81       	ldd	r25, Y+6	; 0x06
    1c22:	84 30       	cpi	r24, 0x04	; 4
    1c24:	91 05       	cpc	r25, r1
    1c26:	09 f4       	brne	.+2      	; 0x1c2a <TIMER_u8SetCallBack+0x36>
    1c28:	3f c0       	rjmp	.+126    	; 0x1ca8 <TIMER_u8SetCallBack+0xb4>
    1c2a:	2d 81       	ldd	r18, Y+5	; 0x05
    1c2c:	3e 81       	ldd	r19, Y+6	; 0x06
    1c2e:	25 30       	cpi	r18, 0x05	; 5
    1c30:	31 05       	cpc	r19, r1
    1c32:	84 f4       	brge	.+32     	; 0x1c54 <TIMER_u8SetCallBack+0x60>
    1c34:	8d 81       	ldd	r24, Y+5	; 0x05
    1c36:	9e 81       	ldd	r25, Y+6	; 0x06
    1c38:	82 30       	cpi	r24, 0x02	; 2
    1c3a:	91 05       	cpc	r25, r1
    1c3c:	39 f1       	breq	.+78     	; 0x1c8c <TIMER_u8SetCallBack+0x98>
    1c3e:	2d 81       	ldd	r18, Y+5	; 0x05
    1c40:	3e 81       	ldd	r19, Y+6	; 0x06
    1c42:	23 30       	cpi	r18, 0x03	; 3
    1c44:	31 05       	cpc	r19, r1
    1c46:	4c f5       	brge	.+82     	; 0x1c9a <TIMER_u8SetCallBack+0xa6>
    1c48:	8d 81       	ldd	r24, Y+5	; 0x05
    1c4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c4c:	81 30       	cpi	r24, 0x01	; 1
    1c4e:	91 05       	cpc	r25, r1
    1c50:	b1 f0       	breq	.+44     	; 0x1c7e <TIMER_u8SetCallBack+0x8a>
    1c52:	4d c0       	rjmp	.+154    	; 0x1cee <TIMER_u8SetCallBack+0xfa>
    1c54:	2d 81       	ldd	r18, Y+5	; 0x05
    1c56:	3e 81       	ldd	r19, Y+6	; 0x06
    1c58:	26 30       	cpi	r18, 0x06	; 6
    1c5a:	31 05       	cpc	r19, r1
    1c5c:	99 f1       	breq	.+102    	; 0x1cc4 <TIMER_u8SetCallBack+0xd0>
    1c5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c60:	9e 81       	ldd	r25, Y+6	; 0x06
    1c62:	86 30       	cpi	r24, 0x06	; 6
    1c64:	91 05       	cpc	r25, r1
    1c66:	3c f1       	brlt	.+78     	; 0x1cb6 <TIMER_u8SetCallBack+0xc2>
    1c68:	2d 81       	ldd	r18, Y+5	; 0x05
    1c6a:	3e 81       	ldd	r19, Y+6	; 0x06
    1c6c:	27 30       	cpi	r18, 0x07	; 7
    1c6e:	31 05       	cpc	r19, r1
    1c70:	81 f1       	breq	.+96     	; 0x1cd2 <TIMER_u8SetCallBack+0xde>
    1c72:	8d 81       	ldd	r24, Y+5	; 0x05
    1c74:	9e 81       	ldd	r25, Y+6	; 0x06
    1c76:	88 30       	cpi	r24, 0x08	; 8
    1c78:	91 05       	cpc	r25, r1
    1c7a:	91 f1       	breq	.+100    	; 0x1ce0 <TIMER_u8SetCallBack+0xec>
    1c7c:	38 c0       	rjmp	.+112    	; 0x1cee <TIMER_u8SetCallBack+0xfa>
		case TIMER0_OVF  : TIMER0_pvOVFCallBackFunc   = Copy_pvCallBackFunc; break;
    1c7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c80:	9c 81       	ldd	r25, Y+4	; 0x04
    1c82:	90 93 7e 00 	sts	0x007E, r25
    1c86:	80 93 7d 00 	sts	0x007D, r24
    1c8a:	36 c0       	rjmp	.+108    	; 0x1cf8 <TIMER_u8SetCallBack+0x104>
		case TIMER0_COMP : TIMER0_pvCOMPCallBackFunc  = Copy_pvCallBackFunc; break;
    1c8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c90:	90 93 80 00 	sts	0x0080, r25
    1c94:	80 93 7f 00 	sts	0x007F, r24
    1c98:	2f c0       	rjmp	.+94     	; 0x1cf8 <TIMER_u8SetCallBack+0x104>
		case TIMER1_OVF  : TIMER1_pvOVFCallBackFunc   = Copy_pvCallBackFunc; break;
    1c9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c9e:	90 93 82 00 	sts	0x0082, r25
    1ca2:	80 93 81 00 	sts	0x0081, r24
    1ca6:	28 c0       	rjmp	.+80     	; 0x1cf8 <TIMER_u8SetCallBack+0x104>
		case TIMER1_CAPT : TIMER1_pvCAPTCallBackFunc  = Copy_pvCallBackFunc; break;
    1ca8:	8b 81       	ldd	r24, Y+3	; 0x03
    1caa:	9c 81       	ldd	r25, Y+4	; 0x04
    1cac:	90 93 84 00 	sts	0x0084, r25
    1cb0:	80 93 83 00 	sts	0x0083, r24
    1cb4:	21 c0       	rjmp	.+66     	; 0x1cf8 <TIMER_u8SetCallBack+0x104>
		case TIMER1A_COMP: TIMER1A_pvCOMPCallBackFunc = Copy_pvCallBackFunc; break;
    1cb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cba:	90 93 86 00 	sts	0x0086, r25
    1cbe:	80 93 85 00 	sts	0x0085, r24
    1cc2:	1a c0       	rjmp	.+52     	; 0x1cf8 <TIMER_u8SetCallBack+0x104>
		case TIMER1B_COMP: TIMER1B_pvCOMPCallBackFunc = Copy_pvCallBackFunc; break;
    1cc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc8:	90 93 88 00 	sts	0x0088, r25
    1ccc:	80 93 87 00 	sts	0x0087, r24
    1cd0:	13 c0       	rjmp	.+38     	; 0x1cf8 <TIMER_u8SetCallBack+0x104>
		case TIMER2_OVF	 : TIMER2_pvOVFCallBackFunc   = Copy_pvCallBackFunc; break;
    1cd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd4:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd6:	90 93 8a 00 	sts	0x008A, r25
    1cda:	80 93 89 00 	sts	0x0089, r24
    1cde:	0c c0       	rjmp	.+24     	; 0x1cf8 <TIMER_u8SetCallBack+0x104>
		case TIMER2_COMP : TIMER2_pvCOMPCallBackFunc  = Copy_pvCallBackFunc; break;
    1ce0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce4:	90 93 8c 00 	sts	0x008C, r25
    1ce8:	80 93 8b 00 	sts	0x008B, r24
    1cec:	05 c0       	rjmp	.+10     	; 0x1cf8 <TIMER_u8SetCallBack+0x104>
		default: Local_u8ErrorState=NOK;
    1cee:	81 e0       	ldi	r24, 0x01	; 1
    1cf0:	89 83       	std	Y+1, r24	; 0x01
    1cf2:	02 c0       	rjmp	.+4      	; 0x1cf8 <TIMER_u8SetCallBack+0x104>
		}
	}
	else{
		Local_u8ErrorState=NULL_POINTER;
    1cf4:	82 e0       	ldi	r24, 0x02	; 2
    1cf6:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1cf8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cfa:	26 96       	adiw	r28, 0x06	; 6
    1cfc:	0f b6       	in	r0, 0x3f	; 63
    1cfe:	f8 94       	cli
    1d00:	de bf       	out	0x3e, r29	; 62
    1d02:	0f be       	out	0x3f, r0	; 63
    1d04:	cd bf       	out	0x3d, r28	; 61
    1d06:	cf 91       	pop	r28
    1d08:	df 91       	pop	r29
    1d0a:	08 95       	ret

00001d0c <__vector_4>:



//TIMER2 Compare Match ISR
void __vector_4(void)  __attribute__((signal));
void __vector_4(void){
    1d0c:	1f 92       	push	r1
    1d0e:	0f 92       	push	r0
    1d10:	0f b6       	in	r0, 0x3f	; 63
    1d12:	0f 92       	push	r0
    1d14:	11 24       	eor	r1, r1
    1d16:	2f 93       	push	r18
    1d18:	3f 93       	push	r19
    1d1a:	4f 93       	push	r20
    1d1c:	5f 93       	push	r21
    1d1e:	6f 93       	push	r22
    1d20:	7f 93       	push	r23
    1d22:	8f 93       	push	r24
    1d24:	9f 93       	push	r25
    1d26:	af 93       	push	r26
    1d28:	bf 93       	push	r27
    1d2a:	ef 93       	push	r30
    1d2c:	ff 93       	push	r31
    1d2e:	df 93       	push	r29
    1d30:	cf 93       	push	r28
    1d32:	cd b7       	in	r28, 0x3d	; 61
    1d34:	de b7       	in	r29, 0x3e	; 62
	if(TIMER2_pvCOMPCallBackFunc!=NULL){
    1d36:	80 91 8b 00 	lds	r24, 0x008B
    1d3a:	90 91 8c 00 	lds	r25, 0x008C
    1d3e:	00 97       	sbiw	r24, 0x00	; 0
    1d40:	29 f0       	breq	.+10     	; 0x1d4c <__vector_4+0x40>
		TIMER2_pvCOMPCallBackFunc();
    1d42:	e0 91 8b 00 	lds	r30, 0x008B
    1d46:	f0 91 8c 00 	lds	r31, 0x008C
    1d4a:	09 95       	icall
	}
}
    1d4c:	cf 91       	pop	r28
    1d4e:	df 91       	pop	r29
    1d50:	ff 91       	pop	r31
    1d52:	ef 91       	pop	r30
    1d54:	bf 91       	pop	r27
    1d56:	af 91       	pop	r26
    1d58:	9f 91       	pop	r25
    1d5a:	8f 91       	pop	r24
    1d5c:	7f 91       	pop	r23
    1d5e:	6f 91       	pop	r22
    1d60:	5f 91       	pop	r21
    1d62:	4f 91       	pop	r20
    1d64:	3f 91       	pop	r19
    1d66:	2f 91       	pop	r18
    1d68:	0f 90       	pop	r0
    1d6a:	0f be       	out	0x3f, r0	; 63
    1d6c:	0f 90       	pop	r0
    1d6e:	1f 90       	pop	r1
    1d70:	18 95       	reti

00001d72 <__vector_5>:

//TIMER2 Overflow ISR
void __vector_5(void)  __attribute__((signal));
void __vector_5(void){
    1d72:	1f 92       	push	r1
    1d74:	0f 92       	push	r0
    1d76:	0f b6       	in	r0, 0x3f	; 63
    1d78:	0f 92       	push	r0
    1d7a:	11 24       	eor	r1, r1
    1d7c:	2f 93       	push	r18
    1d7e:	3f 93       	push	r19
    1d80:	4f 93       	push	r20
    1d82:	5f 93       	push	r21
    1d84:	6f 93       	push	r22
    1d86:	7f 93       	push	r23
    1d88:	8f 93       	push	r24
    1d8a:	9f 93       	push	r25
    1d8c:	af 93       	push	r26
    1d8e:	bf 93       	push	r27
    1d90:	ef 93       	push	r30
    1d92:	ff 93       	push	r31
    1d94:	df 93       	push	r29
    1d96:	cf 93       	push	r28
    1d98:	cd b7       	in	r28, 0x3d	; 61
    1d9a:	de b7       	in	r29, 0x3e	; 62
	if(TIMER2_pvOVFCallBackFunc!=NULL){
    1d9c:	80 91 89 00 	lds	r24, 0x0089
    1da0:	90 91 8a 00 	lds	r25, 0x008A
    1da4:	00 97       	sbiw	r24, 0x00	; 0
    1da6:	29 f0       	breq	.+10     	; 0x1db2 <__vector_5+0x40>
		TIMER2_pvOVFCallBackFunc();
    1da8:	e0 91 89 00 	lds	r30, 0x0089
    1dac:	f0 91 8a 00 	lds	r31, 0x008A
    1db0:	09 95       	icall
	}
}
    1db2:	cf 91       	pop	r28
    1db4:	df 91       	pop	r29
    1db6:	ff 91       	pop	r31
    1db8:	ef 91       	pop	r30
    1dba:	bf 91       	pop	r27
    1dbc:	af 91       	pop	r26
    1dbe:	9f 91       	pop	r25
    1dc0:	8f 91       	pop	r24
    1dc2:	7f 91       	pop	r23
    1dc4:	6f 91       	pop	r22
    1dc6:	5f 91       	pop	r21
    1dc8:	4f 91       	pop	r20
    1dca:	3f 91       	pop	r19
    1dcc:	2f 91       	pop	r18
    1dce:	0f 90       	pop	r0
    1dd0:	0f be       	out	0x3f, r0	; 63
    1dd2:	0f 90       	pop	r0
    1dd4:	1f 90       	pop	r1
    1dd6:	18 95       	reti

00001dd8 <__vector_6>:

//TIMER1 Capture Event ISR
void __vector_6(void)  __attribute__((signal));
void __vector_6(void){
    1dd8:	1f 92       	push	r1
    1dda:	0f 92       	push	r0
    1ddc:	0f b6       	in	r0, 0x3f	; 63
    1dde:	0f 92       	push	r0
    1de0:	11 24       	eor	r1, r1
    1de2:	2f 93       	push	r18
    1de4:	3f 93       	push	r19
    1de6:	4f 93       	push	r20
    1de8:	5f 93       	push	r21
    1dea:	6f 93       	push	r22
    1dec:	7f 93       	push	r23
    1dee:	8f 93       	push	r24
    1df0:	9f 93       	push	r25
    1df2:	af 93       	push	r26
    1df4:	bf 93       	push	r27
    1df6:	ef 93       	push	r30
    1df8:	ff 93       	push	r31
    1dfa:	df 93       	push	r29
    1dfc:	cf 93       	push	r28
    1dfe:	cd b7       	in	r28, 0x3d	; 61
    1e00:	de b7       	in	r29, 0x3e	; 62
	if(TIMER1_pvCAPTCallBackFunc!=NULL){
    1e02:	80 91 83 00 	lds	r24, 0x0083
    1e06:	90 91 84 00 	lds	r25, 0x0084
    1e0a:	00 97       	sbiw	r24, 0x00	; 0
    1e0c:	29 f0       	breq	.+10     	; 0x1e18 <__vector_6+0x40>
		TIMER1_pvCAPTCallBackFunc();
    1e0e:	e0 91 83 00 	lds	r30, 0x0083
    1e12:	f0 91 84 00 	lds	r31, 0x0084
    1e16:	09 95       	icall
	}
}
    1e18:	cf 91       	pop	r28
    1e1a:	df 91       	pop	r29
    1e1c:	ff 91       	pop	r31
    1e1e:	ef 91       	pop	r30
    1e20:	bf 91       	pop	r27
    1e22:	af 91       	pop	r26
    1e24:	9f 91       	pop	r25
    1e26:	8f 91       	pop	r24
    1e28:	7f 91       	pop	r23
    1e2a:	6f 91       	pop	r22
    1e2c:	5f 91       	pop	r21
    1e2e:	4f 91       	pop	r20
    1e30:	3f 91       	pop	r19
    1e32:	2f 91       	pop	r18
    1e34:	0f 90       	pop	r0
    1e36:	0f be       	out	0x3f, r0	; 63
    1e38:	0f 90       	pop	r0
    1e3a:	1f 90       	pop	r1
    1e3c:	18 95       	reti

00001e3e <__vector_7>:


//TIMER1 Compare Match A ISR
void __vector_7(void)  __attribute__((signal));
void __vector_7(void){
    1e3e:	1f 92       	push	r1
    1e40:	0f 92       	push	r0
    1e42:	0f b6       	in	r0, 0x3f	; 63
    1e44:	0f 92       	push	r0
    1e46:	11 24       	eor	r1, r1
    1e48:	2f 93       	push	r18
    1e4a:	3f 93       	push	r19
    1e4c:	4f 93       	push	r20
    1e4e:	5f 93       	push	r21
    1e50:	6f 93       	push	r22
    1e52:	7f 93       	push	r23
    1e54:	8f 93       	push	r24
    1e56:	9f 93       	push	r25
    1e58:	af 93       	push	r26
    1e5a:	bf 93       	push	r27
    1e5c:	ef 93       	push	r30
    1e5e:	ff 93       	push	r31
    1e60:	df 93       	push	r29
    1e62:	cf 93       	push	r28
    1e64:	cd b7       	in	r28, 0x3d	; 61
    1e66:	de b7       	in	r29, 0x3e	; 62
	if(TIMER1A_pvCOMPCallBackFunc!=NULL){
    1e68:	80 91 85 00 	lds	r24, 0x0085
    1e6c:	90 91 86 00 	lds	r25, 0x0086
    1e70:	00 97       	sbiw	r24, 0x00	; 0
    1e72:	29 f0       	breq	.+10     	; 0x1e7e <__vector_7+0x40>
		TIMER1A_pvCOMPCallBackFunc();
    1e74:	e0 91 85 00 	lds	r30, 0x0085
    1e78:	f0 91 86 00 	lds	r31, 0x0086
    1e7c:	09 95       	icall
	}
}
    1e7e:	cf 91       	pop	r28
    1e80:	df 91       	pop	r29
    1e82:	ff 91       	pop	r31
    1e84:	ef 91       	pop	r30
    1e86:	bf 91       	pop	r27
    1e88:	af 91       	pop	r26
    1e8a:	9f 91       	pop	r25
    1e8c:	8f 91       	pop	r24
    1e8e:	7f 91       	pop	r23
    1e90:	6f 91       	pop	r22
    1e92:	5f 91       	pop	r21
    1e94:	4f 91       	pop	r20
    1e96:	3f 91       	pop	r19
    1e98:	2f 91       	pop	r18
    1e9a:	0f 90       	pop	r0
    1e9c:	0f be       	out	0x3f, r0	; 63
    1e9e:	0f 90       	pop	r0
    1ea0:	1f 90       	pop	r1
    1ea2:	18 95       	reti

00001ea4 <__vector_8>:

//TIMER1 Compare Match B ISR
void __vector_8(void)  __attribute__((signal));
void __vector_8(void){
    1ea4:	1f 92       	push	r1
    1ea6:	0f 92       	push	r0
    1ea8:	0f b6       	in	r0, 0x3f	; 63
    1eaa:	0f 92       	push	r0
    1eac:	11 24       	eor	r1, r1
    1eae:	2f 93       	push	r18
    1eb0:	3f 93       	push	r19
    1eb2:	4f 93       	push	r20
    1eb4:	5f 93       	push	r21
    1eb6:	6f 93       	push	r22
    1eb8:	7f 93       	push	r23
    1eba:	8f 93       	push	r24
    1ebc:	9f 93       	push	r25
    1ebe:	af 93       	push	r26
    1ec0:	bf 93       	push	r27
    1ec2:	ef 93       	push	r30
    1ec4:	ff 93       	push	r31
    1ec6:	df 93       	push	r29
    1ec8:	cf 93       	push	r28
    1eca:	cd b7       	in	r28, 0x3d	; 61
    1ecc:	de b7       	in	r29, 0x3e	; 62
	if(TIMER1B_pvCOMPCallBackFunc!=NULL){
    1ece:	80 91 87 00 	lds	r24, 0x0087
    1ed2:	90 91 88 00 	lds	r25, 0x0088
    1ed6:	00 97       	sbiw	r24, 0x00	; 0
    1ed8:	29 f0       	breq	.+10     	; 0x1ee4 <__vector_8+0x40>
		TIMER1B_pvCOMPCallBackFunc();
    1eda:	e0 91 87 00 	lds	r30, 0x0087
    1ede:	f0 91 88 00 	lds	r31, 0x0088
    1ee2:	09 95       	icall
	}
}
    1ee4:	cf 91       	pop	r28
    1ee6:	df 91       	pop	r29
    1ee8:	ff 91       	pop	r31
    1eea:	ef 91       	pop	r30
    1eec:	bf 91       	pop	r27
    1eee:	af 91       	pop	r26
    1ef0:	9f 91       	pop	r25
    1ef2:	8f 91       	pop	r24
    1ef4:	7f 91       	pop	r23
    1ef6:	6f 91       	pop	r22
    1ef8:	5f 91       	pop	r21
    1efa:	4f 91       	pop	r20
    1efc:	3f 91       	pop	r19
    1efe:	2f 91       	pop	r18
    1f00:	0f 90       	pop	r0
    1f02:	0f be       	out	0x3f, r0	; 63
    1f04:	0f 90       	pop	r0
    1f06:	1f 90       	pop	r1
    1f08:	18 95       	reti

00001f0a <__vector_9>:

//TIMER1 Overflow ISR
void __vector_9(void)  __attribute__((signal));
void __vector_9(void){
    1f0a:	1f 92       	push	r1
    1f0c:	0f 92       	push	r0
    1f0e:	0f b6       	in	r0, 0x3f	; 63
    1f10:	0f 92       	push	r0
    1f12:	11 24       	eor	r1, r1
    1f14:	2f 93       	push	r18
    1f16:	3f 93       	push	r19
    1f18:	4f 93       	push	r20
    1f1a:	5f 93       	push	r21
    1f1c:	6f 93       	push	r22
    1f1e:	7f 93       	push	r23
    1f20:	8f 93       	push	r24
    1f22:	9f 93       	push	r25
    1f24:	af 93       	push	r26
    1f26:	bf 93       	push	r27
    1f28:	ef 93       	push	r30
    1f2a:	ff 93       	push	r31
    1f2c:	df 93       	push	r29
    1f2e:	cf 93       	push	r28
    1f30:	cd b7       	in	r28, 0x3d	; 61
    1f32:	de b7       	in	r29, 0x3e	; 62
	if(TIMER1_pvOVFCallBackFunc!=NULL){
    1f34:	80 91 81 00 	lds	r24, 0x0081
    1f38:	90 91 82 00 	lds	r25, 0x0082
    1f3c:	00 97       	sbiw	r24, 0x00	; 0
    1f3e:	29 f0       	breq	.+10     	; 0x1f4a <__vector_9+0x40>
		TIMER1_pvOVFCallBackFunc();
    1f40:	e0 91 81 00 	lds	r30, 0x0081
    1f44:	f0 91 82 00 	lds	r31, 0x0082
    1f48:	09 95       	icall
	}
}
    1f4a:	cf 91       	pop	r28
    1f4c:	df 91       	pop	r29
    1f4e:	ff 91       	pop	r31
    1f50:	ef 91       	pop	r30
    1f52:	bf 91       	pop	r27
    1f54:	af 91       	pop	r26
    1f56:	9f 91       	pop	r25
    1f58:	8f 91       	pop	r24
    1f5a:	7f 91       	pop	r23
    1f5c:	6f 91       	pop	r22
    1f5e:	5f 91       	pop	r21
    1f60:	4f 91       	pop	r20
    1f62:	3f 91       	pop	r19
    1f64:	2f 91       	pop	r18
    1f66:	0f 90       	pop	r0
    1f68:	0f be       	out	0x3f, r0	; 63
    1f6a:	0f 90       	pop	r0
    1f6c:	1f 90       	pop	r1
    1f6e:	18 95       	reti

00001f70 <__vector_10>:

//TIMER0 Compare Match ISR
void __vector_10(void)  __attribute__((signal));
void __vector_10(void){
    1f70:	1f 92       	push	r1
    1f72:	0f 92       	push	r0
    1f74:	0f b6       	in	r0, 0x3f	; 63
    1f76:	0f 92       	push	r0
    1f78:	11 24       	eor	r1, r1
    1f7a:	2f 93       	push	r18
    1f7c:	3f 93       	push	r19
    1f7e:	4f 93       	push	r20
    1f80:	5f 93       	push	r21
    1f82:	6f 93       	push	r22
    1f84:	7f 93       	push	r23
    1f86:	8f 93       	push	r24
    1f88:	9f 93       	push	r25
    1f8a:	af 93       	push	r26
    1f8c:	bf 93       	push	r27
    1f8e:	ef 93       	push	r30
    1f90:	ff 93       	push	r31
    1f92:	df 93       	push	r29
    1f94:	cf 93       	push	r28
    1f96:	cd b7       	in	r28, 0x3d	; 61
    1f98:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_pvCOMPCallBackFunc!=NULL){
    1f9a:	80 91 7f 00 	lds	r24, 0x007F
    1f9e:	90 91 80 00 	lds	r25, 0x0080
    1fa2:	00 97       	sbiw	r24, 0x00	; 0
    1fa4:	29 f0       	breq	.+10     	; 0x1fb0 <__vector_10+0x40>
		TIMER0_pvCOMPCallBackFunc();
    1fa6:	e0 91 7f 00 	lds	r30, 0x007F
    1faa:	f0 91 80 00 	lds	r31, 0x0080
    1fae:	09 95       	icall
	}
}
    1fb0:	cf 91       	pop	r28
    1fb2:	df 91       	pop	r29
    1fb4:	ff 91       	pop	r31
    1fb6:	ef 91       	pop	r30
    1fb8:	bf 91       	pop	r27
    1fba:	af 91       	pop	r26
    1fbc:	9f 91       	pop	r25
    1fbe:	8f 91       	pop	r24
    1fc0:	7f 91       	pop	r23
    1fc2:	6f 91       	pop	r22
    1fc4:	5f 91       	pop	r21
    1fc6:	4f 91       	pop	r20
    1fc8:	3f 91       	pop	r19
    1fca:	2f 91       	pop	r18
    1fcc:	0f 90       	pop	r0
    1fce:	0f be       	out	0x3f, r0	; 63
    1fd0:	0f 90       	pop	r0
    1fd2:	1f 90       	pop	r1
    1fd4:	18 95       	reti

00001fd6 <__vector_11>:

//TIMER0 Overflow ISR
void __vector_11(void)  __attribute__((signal));
void __vector_11(void){
    1fd6:	1f 92       	push	r1
    1fd8:	0f 92       	push	r0
    1fda:	0f b6       	in	r0, 0x3f	; 63
    1fdc:	0f 92       	push	r0
    1fde:	11 24       	eor	r1, r1
    1fe0:	2f 93       	push	r18
    1fe2:	3f 93       	push	r19
    1fe4:	4f 93       	push	r20
    1fe6:	5f 93       	push	r21
    1fe8:	6f 93       	push	r22
    1fea:	7f 93       	push	r23
    1fec:	8f 93       	push	r24
    1fee:	9f 93       	push	r25
    1ff0:	af 93       	push	r26
    1ff2:	bf 93       	push	r27
    1ff4:	ef 93       	push	r30
    1ff6:	ff 93       	push	r31
    1ff8:	df 93       	push	r29
    1ffa:	cf 93       	push	r28
    1ffc:	cd b7       	in	r28, 0x3d	; 61
    1ffe:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_pvOVFCallBackFunc!=NULL){
    2000:	80 91 7d 00 	lds	r24, 0x007D
    2004:	90 91 7e 00 	lds	r25, 0x007E
    2008:	00 97       	sbiw	r24, 0x00	; 0
    200a:	29 f0       	breq	.+10     	; 0x2016 <__vector_11+0x40>
		TIMER0_pvOVFCallBackFunc();
    200c:	e0 91 7d 00 	lds	r30, 0x007D
    2010:	f0 91 7e 00 	lds	r31, 0x007E
    2014:	09 95       	icall
	}
}
    2016:	cf 91       	pop	r28
    2018:	df 91       	pop	r29
    201a:	ff 91       	pop	r31
    201c:	ef 91       	pop	r30
    201e:	bf 91       	pop	r27
    2020:	af 91       	pop	r26
    2022:	9f 91       	pop	r25
    2024:	8f 91       	pop	r24
    2026:	7f 91       	pop	r23
    2028:	6f 91       	pop	r22
    202a:	5f 91       	pop	r21
    202c:	4f 91       	pop	r20
    202e:	3f 91       	pop	r19
    2030:	2f 91       	pop	r18
    2032:	0f 90       	pop	r0
    2034:	0f be       	out	0x3f, r0	; 63
    2036:	0f 90       	pop	r0
    2038:	1f 90       	pop	r1
    203a:	18 95       	reti

0000203c <main>:

#include "SSD_interface.h"

void PWM(void);

void main(){
    203c:	df 93       	push	r29
    203e:	cf 93       	push	r28
    2040:	cd b7       	in	r28, 0x3d	; 61
    2042:	de b7       	in	r29, 0x3e	; 62
    2044:	2a 97       	sbiw	r28, 0x0a	; 10
    2046:	0f b6       	in	r0, 0x3f	; 63
    2048:	f8 94       	cli
    204a:	de bf       	out	0x3e, r29	; 62
    204c:	0f be       	out	0x3f, r0	; 63
    204e:	cd bf       	out	0x3d, r28	; 61
	Timer_t Timer0 = {TIMER_CTC,TIMER_DIV_BY_64,TIMER_DISCONNECT,INT_ENABLE,INT_DISABLE};
    2050:	ce 01       	movw	r24, r28
    2052:	01 96       	adiw	r24, 0x01	; 1
    2054:	9f 83       	std	Y+7, r25	; 0x07
    2056:	8e 83       	std	Y+6, r24	; 0x06
    2058:	ef e6       	ldi	r30, 0x6F	; 111
    205a:	f0 e0       	ldi	r31, 0x00	; 0
    205c:	f9 87       	std	Y+9, r31	; 0x09
    205e:	e8 87       	std	Y+8, r30	; 0x08
    2060:	f5 e0       	ldi	r31, 0x05	; 5
    2062:	fa 87       	std	Y+10, r31	; 0x0a
    2064:	e8 85       	ldd	r30, Y+8	; 0x08
    2066:	f9 85       	ldd	r31, Y+9	; 0x09
    2068:	00 80       	ld	r0, Z
    206a:	88 85       	ldd	r24, Y+8	; 0x08
    206c:	99 85       	ldd	r25, Y+9	; 0x09
    206e:	01 96       	adiw	r24, 0x01	; 1
    2070:	99 87       	std	Y+9, r25	; 0x09
    2072:	88 87       	std	Y+8, r24	; 0x08
    2074:	ee 81       	ldd	r30, Y+6	; 0x06
    2076:	ff 81       	ldd	r31, Y+7	; 0x07
    2078:	00 82       	st	Z, r0
    207a:	8e 81       	ldd	r24, Y+6	; 0x06
    207c:	9f 81       	ldd	r25, Y+7	; 0x07
    207e:	01 96       	adiw	r24, 0x01	; 1
    2080:	9f 83       	std	Y+7, r25	; 0x07
    2082:	8e 83       	std	Y+6, r24	; 0x06
    2084:	9a 85       	ldd	r25, Y+10	; 0x0a
    2086:	91 50       	subi	r25, 0x01	; 1
    2088:	9a 87       	std	Y+10, r25	; 0x0a
    208a:	ea 85       	ldd	r30, Y+10	; 0x0a
    208c:	ee 23       	and	r30, r30
    208e:	51 f7       	brne	.-44     	; 0x2064 <main+0x28>
	PORT_voidInit();
    2090:	0e 94 1d 06 	call	0xc3a	; 0xc3a <PORT_voidInit>
	GIE_voidEnable();
    2094:	0e 94 30 05 	call	0xa60	; 0xa60 <GIE_voidEnable>
	TIMER0_u8Init(&Timer0);
    2098:	ce 01       	movw	r24, r28
    209a:	01 96       	adiw	r24, 0x01	; 1
    209c:	0e 94 2d 08 	call	0x105a	; 0x105a <TIMER0_u8Init>
	TIMER_u8SetCompMatch(TIMER0,125);
    20a0:	80 e0       	ldi	r24, 0x00	; 0
    20a2:	6d e7       	ldi	r22, 0x7D	; 125
    20a4:	70 e0       	ldi	r23, 0x00	; 0
    20a6:	0e 94 6d 07 	call	0xeda	; 0xeda <TIMER_u8SetCompMatch>
	TIMER_u8SetCallBack(TIMER0_COMP,&PWM);
    20aa:	2c e5       	ldi	r18, 0x5C	; 92
    20ac:	30 e1       	ldi	r19, 0x10	; 16
    20ae:	82 e0       	ldi	r24, 0x02	; 2
    20b0:	b9 01       	movw	r22, r18
    20b2:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <TIMER_u8SetCallBack>
    20b6:	ff cf       	rjmp	.-2      	; 0x20b6 <main+0x7a>

000020b8 <PWM>:
	while(1){

	}
}

void PWM(void){
    20b8:	df 93       	push	r29
    20ba:	cf 93       	push	r28
    20bc:	cd b7       	in	r28, 0x3d	; 61
    20be:	de b7       	in	r29, 0x3e	; 62
	static u8 Local_u8Counter=0;
	Local_u8Counter++;
    20c0:	80 91 8d 00 	lds	r24, 0x008D
    20c4:	8f 5f       	subi	r24, 0xFF	; 255
    20c6:	80 93 8d 00 	sts	0x008D, r24
	if(Local_u8Counter==1){
    20ca:	80 91 8d 00 	lds	r24, 0x008D
    20ce:	81 30       	cpi	r24, 0x01	; 1
    20d0:	59 f4       	brne	.+22     	; 0x20e8 <PWM+0x30>
		DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN7,DIO_u8PIN_LOW);
    20d2:	82 e0       	ldi	r24, 0x02	; 2
    20d4:	67 e0       	ldi	r22, 0x07	; 7
    20d6:	40 e0       	ldi	r20, 0x00	; 0
    20d8:	0e 94 61 02 	call	0x4c2	; 0x4c2 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN4,DIO_u8PIN_HIGH);
    20dc:	82 e0       	ldi	r24, 0x02	; 2
    20de:	64 e0       	ldi	r22, 0x04	; 4
    20e0:	41 e0       	ldi	r20, 0x01	; 1
    20e2:	0e 94 61 02 	call	0x4c2	; 0x4c2 <DIO_u8SetPinValue>
    20e6:	29 c0       	rjmp	.+82     	; 0x213a <PWM+0x82>
	}
	else if(Local_u8Counter==5){
    20e8:	80 91 8d 00 	lds	r24, 0x008D
    20ec:	85 30       	cpi	r24, 0x05	; 5
    20ee:	31 f4       	brne	.+12     	; 0x20fc <PWM+0x44>
		DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN6,DIO_u8PIN_LOW);
    20f0:	82 e0       	ldi	r24, 0x02	; 2
    20f2:	66 e0       	ldi	r22, 0x06	; 6
    20f4:	40 e0       	ldi	r20, 0x00	; 0
    20f6:	0e 94 61 02 	call	0x4c2	; 0x4c2 <DIO_u8SetPinValue>
    20fa:	1f c0       	rjmp	.+62     	; 0x213a <PWM+0x82>
	}
	else if(Local_u8Counter==15){
    20fc:	80 91 8d 00 	lds	r24, 0x008D
    2100:	8f 30       	cpi	r24, 0x0F	; 15
    2102:	31 f4       	brne	.+12     	; 0x2110 <PWM+0x58>
		DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN5,DIO_u8PIN_LOW);
    2104:	82 e0       	ldi	r24, 0x02	; 2
    2106:	65 e0       	ldi	r22, 0x05	; 5
    2108:	40 e0       	ldi	r20, 0x00	; 0
    210a:	0e 94 61 02 	call	0x4c2	; 0x4c2 <DIO_u8SetPinValue>
    210e:	15 c0       	rjmp	.+42     	; 0x213a <PWM+0x82>
	}
	else if(Local_u8Counter==20){
    2110:	80 91 8d 00 	lds	r24, 0x008D
    2114:	84 31       	cpi	r24, 0x14	; 20
    2116:	89 f4       	brne	.+34     	; 0x213a <PWM+0x82>
		DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN7,DIO_u8PIN_HIGH);
    2118:	82 e0       	ldi	r24, 0x02	; 2
    211a:	67 e0       	ldi	r22, 0x07	; 7
    211c:	41 e0       	ldi	r20, 0x01	; 1
    211e:	0e 94 61 02 	call	0x4c2	; 0x4c2 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN6,DIO_u8PIN_HIGH);
    2122:	82 e0       	ldi	r24, 0x02	; 2
    2124:	66 e0       	ldi	r22, 0x06	; 6
    2126:	41 e0       	ldi	r20, 0x01	; 1
    2128:	0e 94 61 02 	call	0x4c2	; 0x4c2 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN5,DIO_u8PIN_HIGH);
    212c:	82 e0       	ldi	r24, 0x02	; 2
    212e:	65 e0       	ldi	r22, 0x05	; 5
    2130:	41 e0       	ldi	r20, 0x01	; 1
    2132:	0e 94 61 02 	call	0x4c2	; 0x4c2 <DIO_u8SetPinValue>
		Local_u8Counter=0;
    2136:	10 92 8d 00 	sts	0x008D, r1
	}

}
    213a:	cf 91       	pop	r28
    213c:	df 91       	pop	r29
    213e:	08 95       	ret

00002140 <__mulsi3>:
    2140:	62 9f       	mul	r22, r18
    2142:	d0 01       	movw	r26, r0
    2144:	73 9f       	mul	r23, r19
    2146:	f0 01       	movw	r30, r0
    2148:	82 9f       	mul	r24, r18
    214a:	e0 0d       	add	r30, r0
    214c:	f1 1d       	adc	r31, r1
    214e:	64 9f       	mul	r22, r20
    2150:	e0 0d       	add	r30, r0
    2152:	f1 1d       	adc	r31, r1
    2154:	92 9f       	mul	r25, r18
    2156:	f0 0d       	add	r31, r0
    2158:	83 9f       	mul	r24, r19
    215a:	f0 0d       	add	r31, r0
    215c:	74 9f       	mul	r23, r20
    215e:	f0 0d       	add	r31, r0
    2160:	65 9f       	mul	r22, r21
    2162:	f0 0d       	add	r31, r0
    2164:	99 27       	eor	r25, r25
    2166:	72 9f       	mul	r23, r18
    2168:	b0 0d       	add	r27, r0
    216a:	e1 1d       	adc	r30, r1
    216c:	f9 1f       	adc	r31, r25
    216e:	63 9f       	mul	r22, r19
    2170:	b0 0d       	add	r27, r0
    2172:	e1 1d       	adc	r30, r1
    2174:	f9 1f       	adc	r31, r25
    2176:	bd 01       	movw	r22, r26
    2178:	cf 01       	movw	r24, r30
    217a:	11 24       	eor	r1, r1
    217c:	08 95       	ret

0000217e <__udivmodsi4>:
    217e:	a1 e2       	ldi	r26, 0x21	; 33
    2180:	1a 2e       	mov	r1, r26
    2182:	aa 1b       	sub	r26, r26
    2184:	bb 1b       	sub	r27, r27
    2186:	fd 01       	movw	r30, r26
    2188:	0d c0       	rjmp	.+26     	; 0x21a4 <__udivmodsi4_ep>

0000218a <__udivmodsi4_loop>:
    218a:	aa 1f       	adc	r26, r26
    218c:	bb 1f       	adc	r27, r27
    218e:	ee 1f       	adc	r30, r30
    2190:	ff 1f       	adc	r31, r31
    2192:	a2 17       	cp	r26, r18
    2194:	b3 07       	cpc	r27, r19
    2196:	e4 07       	cpc	r30, r20
    2198:	f5 07       	cpc	r31, r21
    219a:	20 f0       	brcs	.+8      	; 0x21a4 <__udivmodsi4_ep>
    219c:	a2 1b       	sub	r26, r18
    219e:	b3 0b       	sbc	r27, r19
    21a0:	e4 0b       	sbc	r30, r20
    21a2:	f5 0b       	sbc	r31, r21

000021a4 <__udivmodsi4_ep>:
    21a4:	66 1f       	adc	r22, r22
    21a6:	77 1f       	adc	r23, r23
    21a8:	88 1f       	adc	r24, r24
    21aa:	99 1f       	adc	r25, r25
    21ac:	1a 94       	dec	r1
    21ae:	69 f7       	brne	.-38     	; 0x218a <__udivmodsi4_loop>
    21b0:	60 95       	com	r22
    21b2:	70 95       	com	r23
    21b4:	80 95       	com	r24
    21b6:	90 95       	com	r25
    21b8:	9b 01       	movw	r18, r22
    21ba:	ac 01       	movw	r20, r24
    21bc:	bd 01       	movw	r22, r26
    21be:	cf 01       	movw	r24, r30
    21c0:	08 95       	ret

000021c2 <__divmodsi4>:
    21c2:	97 fb       	bst	r25, 7
    21c4:	09 2e       	mov	r0, r25
    21c6:	05 26       	eor	r0, r21
    21c8:	0e d0       	rcall	.+28     	; 0x21e6 <__divmodsi4_neg1>
    21ca:	57 fd       	sbrc	r21, 7
    21cc:	04 d0       	rcall	.+8      	; 0x21d6 <__divmodsi4_neg2>
    21ce:	d7 df       	rcall	.-82     	; 0x217e <__udivmodsi4>
    21d0:	0a d0       	rcall	.+20     	; 0x21e6 <__divmodsi4_neg1>
    21d2:	00 1c       	adc	r0, r0
    21d4:	38 f4       	brcc	.+14     	; 0x21e4 <__divmodsi4_exit>

000021d6 <__divmodsi4_neg2>:
    21d6:	50 95       	com	r21
    21d8:	40 95       	com	r20
    21da:	30 95       	com	r19
    21dc:	21 95       	neg	r18
    21de:	3f 4f       	sbci	r19, 0xFF	; 255
    21e0:	4f 4f       	sbci	r20, 0xFF	; 255
    21e2:	5f 4f       	sbci	r21, 0xFF	; 255

000021e4 <__divmodsi4_exit>:
    21e4:	08 95       	ret

000021e6 <__divmodsi4_neg1>:
    21e6:	f6 f7       	brtc	.-4      	; 0x21e4 <__divmodsi4_exit>
    21e8:	90 95       	com	r25
    21ea:	80 95       	com	r24
    21ec:	70 95       	com	r23
    21ee:	61 95       	neg	r22
    21f0:	7f 4f       	sbci	r23, 0xFF	; 255
    21f2:	8f 4f       	sbci	r24, 0xFF	; 255
    21f4:	9f 4f       	sbci	r25, 0xFF	; 255
    21f6:	08 95       	ret

000021f8 <_exit>:
    21f8:	f8 94       	cli

000021fa <__stop_program>:
    21fa:	ff cf       	rjmp	.-2      	; 0x21fa <__stop_program>
