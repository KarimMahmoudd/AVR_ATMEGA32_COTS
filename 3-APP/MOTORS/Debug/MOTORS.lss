
MOTORS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002876  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b4  00800060  00002876  000028ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002604  00000000  00000000  000029a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000ed6  00000000  00000000  00004fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00005e7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00005fba  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  0000612a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00007d73  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00008c5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00009a0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00009b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00009df9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a5c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e7       	ldi	r30, 0x76	; 118
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 31       	cpi	r26, 0x14	; 20
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 b5 10 	call	0x216a	; 0x216a <main>
      7a:	0c 94 39 14 	jmp	0x2872	; 0x2872 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 02 14 	jmp	0x2804	; 0x2804 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a3 ef       	ldi	r26, 0xF3	; 243
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 1e 14 	jmp	0x283c	; 0x283c <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 0e 14 	jmp	0x281c	; 0x281c <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 2a 14 	jmp	0x2854	; 0x2854 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 0e 14 	jmp	0x281c	; 0x281c <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 2a 14 	jmp	0x2854	; 0x2854 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 02 14 	jmp	0x2804	; 0x2804 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	83 ef       	ldi	r24, 0xF3	; 243
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 1e 14 	jmp	0x283c	; 0x283c <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 0e 14 	jmp	0x281c	; 0x281c <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 2a 14 	jmp	0x2854	; 0x2854 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 0e 14 	jmp	0x281c	; 0x281c <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 2a 14 	jmp	0x2854	; 0x2854 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 0e 14 	jmp	0x281c	; 0x281c <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 2a 14 	jmp	0x2854	; 0x2854 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 12 14 	jmp	0x2824	; 0x2824 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 2e 14 	jmp	0x285c	; 0x285c <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <CLCD_voidSendCommand>:
#include "CLCD_private.h"
#include "CLCD_config.h"



void CLCD_voidSendCommand(u8 Copy_u8Command){
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	2f 97       	sbiw	r28, 0x0f	; 15
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	8f 87       	std	Y+15, r24	; 0x0f
	/*set RS pin to low for command*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	40 e0       	ldi	r20, 0x00	; 0
     b52:	0e 94 06 09 	call	0x120c	; 0x120c <DIO_u8SetPinValue>
	/*set RW pin to low for write*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
     b56:	83 e0       	ldi	r24, 0x03	; 3
     b58:	66 e0       	ldi	r22, 0x06	; 6
     b5a:	40 e0       	ldi	r20, 0x00	; 0
     b5c:	0e 94 06 09 	call	0x120c	; 0x120c <DIO_u8SetPinValue>
	/*set data port to command*/
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Command);
     b60:	82 e0       	ldi	r24, 0x02	; 2
     b62:	6f 85       	ldd	r22, Y+15	; 0x0f
     b64:	0e 94 18 0a 	call	0x1430	; 0x1430 <DIO_u8SetPortValue>
	/*send enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     b68:	83 e0       	ldi	r24, 0x03	; 3
     b6a:	65 e0       	ldi	r22, 0x05	; 5
     b6c:	41 e0       	ldi	r20, 0x01	; 1
     b6e:	0e 94 06 09 	call	0x120c	; 0x120c <DIO_u8SetPinValue>
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	a0 e0       	ldi	r26, 0x00	; 0
     b78:	b0 e4       	ldi	r27, 0x40	; 64
     b7a:	8b 87       	std	Y+11, r24	; 0x0b
     b7c:	9c 87       	std	Y+12, r25	; 0x0c
     b7e:	ad 87       	std	Y+13, r26	; 0x0d
     b80:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b82:	6b 85       	ldd	r22, Y+11	; 0x0b
     b84:	7c 85       	ldd	r23, Y+12	; 0x0c
     b86:	8d 85       	ldd	r24, Y+13	; 0x0d
     b88:	9e 85       	ldd	r25, Y+14	; 0x0e
     b8a:	20 e0       	ldi	r18, 0x00	; 0
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	4a ef       	ldi	r20, 0xFA	; 250
     b90:	54 e4       	ldi	r21, 0x44	; 68
     b92:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     b96:	dc 01       	movw	r26, r24
     b98:	cb 01       	movw	r24, r22
     b9a:	8f 83       	std	Y+7, r24	; 0x07
     b9c:	98 87       	std	Y+8, r25	; 0x08
     b9e:	a9 87       	std	Y+9, r26	; 0x09
     ba0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ba2:	6f 81       	ldd	r22, Y+7	; 0x07
     ba4:	78 85       	ldd	r23, Y+8	; 0x08
     ba6:	89 85       	ldd	r24, Y+9	; 0x09
     ba8:	9a 85       	ldd	r25, Y+10	; 0x0a
     baa:	20 e0       	ldi	r18, 0x00	; 0
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	40 e8       	ldi	r20, 0x80	; 128
     bb0:	5f e3       	ldi	r21, 0x3F	; 63
     bb2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     bb6:	88 23       	and	r24, r24
     bb8:	2c f4       	brge	.+10     	; 0xbc4 <CLCD_voidSendCommand+0x8e>
		__ticks = 1;
     bba:	81 e0       	ldi	r24, 0x01	; 1
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	9e 83       	std	Y+6, r25	; 0x06
     bc0:	8d 83       	std	Y+5, r24	; 0x05
     bc2:	3f c0       	rjmp	.+126    	; 0xc42 <CLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
     bc4:	6f 81       	ldd	r22, Y+7	; 0x07
     bc6:	78 85       	ldd	r23, Y+8	; 0x08
     bc8:	89 85       	ldd	r24, Y+9	; 0x09
     bca:	9a 85       	ldd	r25, Y+10	; 0x0a
     bcc:	20 e0       	ldi	r18, 0x00	; 0
     bce:	3f ef       	ldi	r19, 0xFF	; 255
     bd0:	4f e7       	ldi	r20, 0x7F	; 127
     bd2:	57 e4       	ldi	r21, 0x47	; 71
     bd4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     bd8:	18 16       	cp	r1, r24
     bda:	4c f5       	brge	.+82     	; 0xc2e <CLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bdc:	6b 85       	ldd	r22, Y+11	; 0x0b
     bde:	7c 85       	ldd	r23, Y+12	; 0x0c
     be0:	8d 85       	ldd	r24, Y+13	; 0x0d
     be2:	9e 85       	ldd	r25, Y+14	; 0x0e
     be4:	20 e0       	ldi	r18, 0x00	; 0
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	40 e2       	ldi	r20, 0x20	; 32
     bea:	51 e4       	ldi	r21, 0x41	; 65
     bec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     bf0:	dc 01       	movw	r26, r24
     bf2:	cb 01       	movw	r24, r22
     bf4:	bc 01       	movw	r22, r24
     bf6:	cd 01       	movw	r24, r26
     bf8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     bfc:	dc 01       	movw	r26, r24
     bfe:	cb 01       	movw	r24, r22
     c00:	9e 83       	std	Y+6, r25	; 0x06
     c02:	8d 83       	std	Y+5, r24	; 0x05
     c04:	0f c0       	rjmp	.+30     	; 0xc24 <CLCD_voidSendCommand+0xee>
     c06:	88 ec       	ldi	r24, 0xC8	; 200
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	9c 83       	std	Y+4, r25	; 0x04
     c0c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c0e:	8b 81       	ldd	r24, Y+3	; 0x03
     c10:	9c 81       	ldd	r25, Y+4	; 0x04
     c12:	01 97       	sbiw	r24, 0x01	; 1
     c14:	f1 f7       	brne	.-4      	; 0xc12 <CLCD_voidSendCommand+0xdc>
     c16:	9c 83       	std	Y+4, r25	; 0x04
     c18:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c1a:	8d 81       	ldd	r24, Y+5	; 0x05
     c1c:	9e 81       	ldd	r25, Y+6	; 0x06
     c1e:	01 97       	sbiw	r24, 0x01	; 1
     c20:	9e 83       	std	Y+6, r25	; 0x06
     c22:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c24:	8d 81       	ldd	r24, Y+5	; 0x05
     c26:	9e 81       	ldd	r25, Y+6	; 0x06
     c28:	00 97       	sbiw	r24, 0x00	; 0
     c2a:	69 f7       	brne	.-38     	; 0xc06 <CLCD_voidSendCommand+0xd0>
     c2c:	14 c0       	rjmp	.+40     	; 0xc56 <CLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c2e:	6f 81       	ldd	r22, Y+7	; 0x07
     c30:	78 85       	ldd	r23, Y+8	; 0x08
     c32:	89 85       	ldd	r24, Y+9	; 0x09
     c34:	9a 85       	ldd	r25, Y+10	; 0x0a
     c36:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c3a:	dc 01       	movw	r26, r24
     c3c:	cb 01       	movw	r24, r22
     c3e:	9e 83       	std	Y+6, r25	; 0x06
     c40:	8d 83       	std	Y+5, r24	; 0x05
     c42:	8d 81       	ldd	r24, Y+5	; 0x05
     c44:	9e 81       	ldd	r25, Y+6	; 0x06
     c46:	9a 83       	std	Y+2, r25	; 0x02
     c48:	89 83       	std	Y+1, r24	; 0x01
     c4a:	89 81       	ldd	r24, Y+1	; 0x01
     c4c:	9a 81       	ldd	r25, Y+2	; 0x02
     c4e:	01 97       	sbiw	r24, 0x01	; 1
     c50:	f1 f7       	brne	.-4      	; 0xc4e <CLCD_voidSendCommand+0x118>
     c52:	9a 83       	std	Y+2, r25	; 0x02
     c54:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
     c56:	83 e0       	ldi	r24, 0x03	; 3
     c58:	65 e0       	ldi	r22, 0x05	; 5
     c5a:	40 e0       	ldi	r20, 0x00	; 0
     c5c:	0e 94 06 09 	call	0x120c	; 0x120c <DIO_u8SetPinValue>
}
     c60:	2f 96       	adiw	r28, 0x0f	; 15
     c62:	0f b6       	in	r0, 0x3f	; 63
     c64:	f8 94       	cli
     c66:	de bf       	out	0x3e, r29	; 62
     c68:	0f be       	out	0x3f, r0	; 63
     c6a:	cd bf       	out	0x3d, r28	; 61
     c6c:	cf 91       	pop	r28
     c6e:	df 91       	pop	r29
     c70:	08 95       	ret

00000c72 <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data){
     c72:	df 93       	push	r29
     c74:	cf 93       	push	r28
     c76:	cd b7       	in	r28, 0x3d	; 61
     c78:	de b7       	in	r29, 0x3e	; 62
     c7a:	2f 97       	sbiw	r28, 0x0f	; 15
     c7c:	0f b6       	in	r0, 0x3f	; 63
     c7e:	f8 94       	cli
     c80:	de bf       	out	0x3e, r29	; 62
     c82:	0f be       	out	0x3f, r0	; 63
     c84:	cd bf       	out	0x3d, r28	; 61
     c86:	8f 87       	std	Y+15, r24	; 0x0f
	/*set RS pin to high for data*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
     c88:	83 e0       	ldi	r24, 0x03	; 3
     c8a:	67 e0       	ldi	r22, 0x07	; 7
     c8c:	41 e0       	ldi	r20, 0x01	; 1
     c8e:	0e 94 06 09 	call	0x120c	; 0x120c <DIO_u8SetPinValue>
	/*set RW pin to low for write*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
     c92:	83 e0       	ldi	r24, 0x03	; 3
     c94:	66 e0       	ldi	r22, 0x06	; 6
     c96:	40 e0       	ldi	r20, 0x00	; 0
     c98:	0e 94 06 09 	call	0x120c	; 0x120c <DIO_u8SetPinValue>
	/*set data port to data*/
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Data);
     c9c:	82 e0       	ldi	r24, 0x02	; 2
     c9e:	6f 85       	ldd	r22, Y+15	; 0x0f
     ca0:	0e 94 18 0a 	call	0x1430	; 0x1430 <DIO_u8SetPortValue>
	/*send enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     ca4:	83 e0       	ldi	r24, 0x03	; 3
     ca6:	65 e0       	ldi	r22, 0x05	; 5
     ca8:	41 e0       	ldi	r20, 0x01	; 1
     caa:	0e 94 06 09 	call	0x120c	; 0x120c <DIO_u8SetPinValue>
     cae:	80 e0       	ldi	r24, 0x00	; 0
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	a0 e0       	ldi	r26, 0x00	; 0
     cb4:	b0 e4       	ldi	r27, 0x40	; 64
     cb6:	8b 87       	std	Y+11, r24	; 0x0b
     cb8:	9c 87       	std	Y+12, r25	; 0x0c
     cba:	ad 87       	std	Y+13, r26	; 0x0d
     cbc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cbe:	6b 85       	ldd	r22, Y+11	; 0x0b
     cc0:	7c 85       	ldd	r23, Y+12	; 0x0c
     cc2:	8d 85       	ldd	r24, Y+13	; 0x0d
     cc4:	9e 85       	ldd	r25, Y+14	; 0x0e
     cc6:	20 e0       	ldi	r18, 0x00	; 0
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	4a ef       	ldi	r20, 0xFA	; 250
     ccc:	54 e4       	ldi	r21, 0x44	; 68
     cce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     cd2:	dc 01       	movw	r26, r24
     cd4:	cb 01       	movw	r24, r22
     cd6:	8f 83       	std	Y+7, r24	; 0x07
     cd8:	98 87       	std	Y+8, r25	; 0x08
     cda:	a9 87       	std	Y+9, r26	; 0x09
     cdc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cde:	6f 81       	ldd	r22, Y+7	; 0x07
     ce0:	78 85       	ldd	r23, Y+8	; 0x08
     ce2:	89 85       	ldd	r24, Y+9	; 0x09
     ce4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ce6:	20 e0       	ldi	r18, 0x00	; 0
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	40 e8       	ldi	r20, 0x80	; 128
     cec:	5f e3       	ldi	r21, 0x3F	; 63
     cee:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     cf2:	88 23       	and	r24, r24
     cf4:	2c f4       	brge	.+10     	; 0xd00 <CLCD_voidSendData+0x8e>
		__ticks = 1;
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	9e 83       	std	Y+6, r25	; 0x06
     cfc:	8d 83       	std	Y+5, r24	; 0x05
     cfe:	3f c0       	rjmp	.+126    	; 0xd7e <CLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
     d00:	6f 81       	ldd	r22, Y+7	; 0x07
     d02:	78 85       	ldd	r23, Y+8	; 0x08
     d04:	89 85       	ldd	r24, Y+9	; 0x09
     d06:	9a 85       	ldd	r25, Y+10	; 0x0a
     d08:	20 e0       	ldi	r18, 0x00	; 0
     d0a:	3f ef       	ldi	r19, 0xFF	; 255
     d0c:	4f e7       	ldi	r20, 0x7F	; 127
     d0e:	57 e4       	ldi	r21, 0x47	; 71
     d10:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     d14:	18 16       	cp	r1, r24
     d16:	4c f5       	brge	.+82     	; 0xd6a <CLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d18:	6b 85       	ldd	r22, Y+11	; 0x0b
     d1a:	7c 85       	ldd	r23, Y+12	; 0x0c
     d1c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d1e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d20:	20 e0       	ldi	r18, 0x00	; 0
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	40 e2       	ldi	r20, 0x20	; 32
     d26:	51 e4       	ldi	r21, 0x41	; 65
     d28:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d2c:	dc 01       	movw	r26, r24
     d2e:	cb 01       	movw	r24, r22
     d30:	bc 01       	movw	r22, r24
     d32:	cd 01       	movw	r24, r26
     d34:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d38:	dc 01       	movw	r26, r24
     d3a:	cb 01       	movw	r24, r22
     d3c:	9e 83       	std	Y+6, r25	; 0x06
     d3e:	8d 83       	std	Y+5, r24	; 0x05
     d40:	0f c0       	rjmp	.+30     	; 0xd60 <CLCD_voidSendData+0xee>
     d42:	88 ec       	ldi	r24, 0xC8	; 200
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	9c 83       	std	Y+4, r25	; 0x04
     d48:	8b 83       	std	Y+3, r24	; 0x03
     d4a:	8b 81       	ldd	r24, Y+3	; 0x03
     d4c:	9c 81       	ldd	r25, Y+4	; 0x04
     d4e:	01 97       	sbiw	r24, 0x01	; 1
     d50:	f1 f7       	brne	.-4      	; 0xd4e <CLCD_voidSendData+0xdc>
     d52:	9c 83       	std	Y+4, r25	; 0x04
     d54:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d56:	8d 81       	ldd	r24, Y+5	; 0x05
     d58:	9e 81       	ldd	r25, Y+6	; 0x06
     d5a:	01 97       	sbiw	r24, 0x01	; 1
     d5c:	9e 83       	std	Y+6, r25	; 0x06
     d5e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d60:	8d 81       	ldd	r24, Y+5	; 0x05
     d62:	9e 81       	ldd	r25, Y+6	; 0x06
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	69 f7       	brne	.-38     	; 0xd42 <CLCD_voidSendData+0xd0>
     d68:	14 c0       	rjmp	.+40     	; 0xd92 <CLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d6a:	6f 81       	ldd	r22, Y+7	; 0x07
     d6c:	78 85       	ldd	r23, Y+8	; 0x08
     d6e:	89 85       	ldd	r24, Y+9	; 0x09
     d70:	9a 85       	ldd	r25, Y+10	; 0x0a
     d72:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d76:	dc 01       	movw	r26, r24
     d78:	cb 01       	movw	r24, r22
     d7a:	9e 83       	std	Y+6, r25	; 0x06
     d7c:	8d 83       	std	Y+5, r24	; 0x05
     d7e:	8d 81       	ldd	r24, Y+5	; 0x05
     d80:	9e 81       	ldd	r25, Y+6	; 0x06
     d82:	9a 83       	std	Y+2, r25	; 0x02
     d84:	89 83       	std	Y+1, r24	; 0x01
     d86:	89 81       	ldd	r24, Y+1	; 0x01
     d88:	9a 81       	ldd	r25, Y+2	; 0x02
     d8a:	01 97       	sbiw	r24, 0x01	; 1
     d8c:	f1 f7       	brne	.-4      	; 0xd8a <CLCD_voidSendData+0x118>
     d8e:	9a 83       	std	Y+2, r25	; 0x02
     d90:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
     d92:	83 e0       	ldi	r24, 0x03	; 3
     d94:	65 e0       	ldi	r22, 0x05	; 5
     d96:	40 e0       	ldi	r20, 0x00	; 0
     d98:	0e 94 06 09 	call	0x120c	; 0x120c <DIO_u8SetPinValue>
}
     d9c:	2f 96       	adiw	r28, 0x0f	; 15
     d9e:	0f b6       	in	r0, 0x3f	; 63
     da0:	f8 94       	cli
     da2:	de bf       	out	0x3e, r29	; 62
     da4:	0f be       	out	0x3f, r0	; 63
     da6:	cd bf       	out	0x3d, r28	; 61
     da8:	cf 91       	pop	r28
     daa:	df 91       	pop	r29
     dac:	08 95       	ret

00000dae <CLCD_voidSendString>:
void CLCD_voidSendString(const char* Copy_pcString){
     dae:	df 93       	push	r29
     db0:	cf 93       	push	r28
     db2:	00 d0       	rcall	.+0      	; 0xdb4 <CLCD_voidSendString+0x6>
     db4:	cd b7       	in	r28, 0x3d	; 61
     db6:	de b7       	in	r29, 0x3e	; 62
     db8:	9a 83       	std	Y+2, r25	; 0x02
     dba:	89 83       	std	Y+1, r24	; 0x01
     dbc:	0a c0       	rjmp	.+20     	; 0xdd2 <CLCD_voidSendString+0x24>
	while(*Copy_pcString != '\0'){
		CLCD_voidSendData(*Copy_pcString);
     dbe:	e9 81       	ldd	r30, Y+1	; 0x01
     dc0:	fa 81       	ldd	r31, Y+2	; 0x02
     dc2:	80 81       	ld	r24, Z
     dc4:	0e 94 39 06 	call	0xc72	; 0xc72 <CLCD_voidSendData>
		Copy_pcString++;
     dc8:	89 81       	ldd	r24, Y+1	; 0x01
     dca:	9a 81       	ldd	r25, Y+2	; 0x02
     dcc:	01 96       	adiw	r24, 0x01	; 1
     dce:	9a 83       	std	Y+2, r25	; 0x02
     dd0:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
}
void CLCD_voidSendString(const char* Copy_pcString){
	while(*Copy_pcString != '\0'){
     dd2:	e9 81       	ldd	r30, Y+1	; 0x01
     dd4:	fa 81       	ldd	r31, Y+2	; 0x02
     dd6:	80 81       	ld	r24, Z
     dd8:	88 23       	and	r24, r24
     dda:	89 f7       	brne	.-30     	; 0xdbe <CLCD_voidSendString+0x10>
		CLCD_voidSendData(*Copy_pcString);
		Copy_pcString++;
	}
}
     ddc:	0f 90       	pop	r0
     dde:	0f 90       	pop	r0
     de0:	cf 91       	pop	r28
     de2:	df 91       	pop	r29
     de4:	08 95       	ret

00000de6 <CLCD_voidInit>:
void CLCD_voidInit(void){
     de6:	df 93       	push	r29
     de8:	cf 93       	push	r28
     dea:	cd b7       	in	r28, 0x3d	; 61
     dec:	de b7       	in	r29, 0x3e	; 62
     dee:	2e 97       	sbiw	r28, 0x0e	; 14
     df0:	0f b6       	in	r0, 0x3f	; 63
     df2:	f8 94       	cli
     df4:	de bf       	out	0x3e, r29	; 62
     df6:	0f be       	out	0x3f, r0	; 63
     df8:	cd bf       	out	0x3d, r28	; 61
     dfa:	80 e0       	ldi	r24, 0x00	; 0
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	a0 e2       	ldi	r26, 0x20	; 32
     e00:	b2 e4       	ldi	r27, 0x42	; 66
     e02:	8b 87       	std	Y+11, r24	; 0x0b
     e04:	9c 87       	std	Y+12, r25	; 0x0c
     e06:	ad 87       	std	Y+13, r26	; 0x0d
     e08:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e0a:	6b 85       	ldd	r22, Y+11	; 0x0b
     e0c:	7c 85       	ldd	r23, Y+12	; 0x0c
     e0e:	8d 85       	ldd	r24, Y+13	; 0x0d
     e10:	9e 85       	ldd	r25, Y+14	; 0x0e
     e12:	20 e0       	ldi	r18, 0x00	; 0
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	4a ef       	ldi	r20, 0xFA	; 250
     e18:	54 e4       	ldi	r21, 0x44	; 68
     e1a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e1e:	dc 01       	movw	r26, r24
     e20:	cb 01       	movw	r24, r22
     e22:	8f 83       	std	Y+7, r24	; 0x07
     e24:	98 87       	std	Y+8, r25	; 0x08
     e26:	a9 87       	std	Y+9, r26	; 0x09
     e28:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e2a:	6f 81       	ldd	r22, Y+7	; 0x07
     e2c:	78 85       	ldd	r23, Y+8	; 0x08
     e2e:	89 85       	ldd	r24, Y+9	; 0x09
     e30:	9a 85       	ldd	r25, Y+10	; 0x0a
     e32:	20 e0       	ldi	r18, 0x00	; 0
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	40 e8       	ldi	r20, 0x80	; 128
     e38:	5f e3       	ldi	r21, 0x3F	; 63
     e3a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     e3e:	88 23       	and	r24, r24
     e40:	2c f4       	brge	.+10     	; 0xe4c <CLCD_voidInit+0x66>
		__ticks = 1;
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	9e 83       	std	Y+6, r25	; 0x06
     e48:	8d 83       	std	Y+5, r24	; 0x05
     e4a:	3f c0       	rjmp	.+126    	; 0xeca <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
     e4c:	6f 81       	ldd	r22, Y+7	; 0x07
     e4e:	78 85       	ldd	r23, Y+8	; 0x08
     e50:	89 85       	ldd	r24, Y+9	; 0x09
     e52:	9a 85       	ldd	r25, Y+10	; 0x0a
     e54:	20 e0       	ldi	r18, 0x00	; 0
     e56:	3f ef       	ldi	r19, 0xFF	; 255
     e58:	4f e7       	ldi	r20, 0x7F	; 127
     e5a:	57 e4       	ldi	r21, 0x47	; 71
     e5c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     e60:	18 16       	cp	r1, r24
     e62:	4c f5       	brge	.+82     	; 0xeb6 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e64:	6b 85       	ldd	r22, Y+11	; 0x0b
     e66:	7c 85       	ldd	r23, Y+12	; 0x0c
     e68:	8d 85       	ldd	r24, Y+13	; 0x0d
     e6a:	9e 85       	ldd	r25, Y+14	; 0x0e
     e6c:	20 e0       	ldi	r18, 0x00	; 0
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	40 e2       	ldi	r20, 0x20	; 32
     e72:	51 e4       	ldi	r21, 0x41	; 65
     e74:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e78:	dc 01       	movw	r26, r24
     e7a:	cb 01       	movw	r24, r22
     e7c:	bc 01       	movw	r22, r24
     e7e:	cd 01       	movw	r24, r26
     e80:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e84:	dc 01       	movw	r26, r24
     e86:	cb 01       	movw	r24, r22
     e88:	9e 83       	std	Y+6, r25	; 0x06
     e8a:	8d 83       	std	Y+5, r24	; 0x05
     e8c:	0f c0       	rjmp	.+30     	; 0xeac <CLCD_voidInit+0xc6>
     e8e:	88 ec       	ldi	r24, 0xC8	; 200
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	9c 83       	std	Y+4, r25	; 0x04
     e94:	8b 83       	std	Y+3, r24	; 0x03
     e96:	8b 81       	ldd	r24, Y+3	; 0x03
     e98:	9c 81       	ldd	r25, Y+4	; 0x04
     e9a:	01 97       	sbiw	r24, 0x01	; 1
     e9c:	f1 f7       	brne	.-4      	; 0xe9a <CLCD_voidInit+0xb4>
     e9e:	9c 83       	std	Y+4, r25	; 0x04
     ea0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ea2:	8d 81       	ldd	r24, Y+5	; 0x05
     ea4:	9e 81       	ldd	r25, Y+6	; 0x06
     ea6:	01 97       	sbiw	r24, 0x01	; 1
     ea8:	9e 83       	std	Y+6, r25	; 0x06
     eaa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eac:	8d 81       	ldd	r24, Y+5	; 0x05
     eae:	9e 81       	ldd	r25, Y+6	; 0x06
     eb0:	00 97       	sbiw	r24, 0x00	; 0
     eb2:	69 f7       	brne	.-38     	; 0xe8e <CLCD_voidInit+0xa8>
     eb4:	14 c0       	rjmp	.+40     	; 0xede <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     eb6:	6f 81       	ldd	r22, Y+7	; 0x07
     eb8:	78 85       	ldd	r23, Y+8	; 0x08
     eba:	89 85       	ldd	r24, Y+9	; 0x09
     ebc:	9a 85       	ldd	r25, Y+10	; 0x0a
     ebe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     ec2:	dc 01       	movw	r26, r24
     ec4:	cb 01       	movw	r24, r22
     ec6:	9e 83       	std	Y+6, r25	; 0x06
     ec8:	8d 83       	std	Y+5, r24	; 0x05
     eca:	8d 81       	ldd	r24, Y+5	; 0x05
     ecc:	9e 81       	ldd	r25, Y+6	; 0x06
     ece:	9a 83       	std	Y+2, r25	; 0x02
     ed0:	89 83       	std	Y+1, r24	; 0x01
     ed2:	89 81       	ldd	r24, Y+1	; 0x01
     ed4:	9a 81       	ldd	r25, Y+2	; 0x02
     ed6:	01 97       	sbiw	r24, 0x01	; 1
     ed8:	f1 f7       	brne	.-4      	; 0xed6 <CLCD_voidInit+0xf0>
     eda:	9a 83       	std	Y+2, r25	; 0x02
     edc:	89 83       	std	Y+1, r24	; 0x01
	/*wait for more than 30 ms*/
	_delay_ms(40);
	/*Function Set Command: 2 lines, 5*8 Font Size*/
	CLCD_voidSendCommand(0b00111000);
     ede:	88 e3       	ldi	r24, 0x38	; 56
     ee0:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>
	/*Display control on off: enable display disable cursor no blinking cursor*/
	CLCD_voidSendCommand(0b00001100);
     ee4:	8c e0       	ldi	r24, 0x0C	; 12
     ee6:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>
	/*clear display*/
	CLCD_voidSendCommand(1);
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>


}
     ef0:	2e 96       	adiw	r28, 0x0e	; 14
     ef2:	0f b6       	in	r0, 0x3f	; 63
     ef4:	f8 94       	cli
     ef6:	de bf       	out	0x3e, r29	; 62
     ef8:	0f be       	out	0x3f, r0	; 63
     efa:	cd bf       	out	0x3d, r28	; 61
     efc:	cf 91       	pop	r28
     efe:	df 91       	pop	r29
     f00:	08 95       	ret

00000f02 <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(u8 Copy_u8XPos,u8 Copy_u8YPos){
     f02:	df 93       	push	r29
     f04:	cf 93       	push	r28
     f06:	00 d0       	rcall	.+0      	; 0xf08 <CLCD_voidGoToXY+0x6>
     f08:	0f 92       	push	r0
     f0a:	cd b7       	in	r28, 0x3d	; 61
     f0c:	de b7       	in	r29, 0x3e	; 62
     f0e:	8a 83       	std	Y+2, r24	; 0x02
     f10:	6b 83       	std	Y+3, r22	; 0x03
	/*converting the position into an address*/
	u8 Local_u8Adress;
	if(Copy_u8XPos==0){
     f12:	8a 81       	ldd	r24, Y+2	; 0x02
     f14:	88 23       	and	r24, r24
     f16:	19 f4       	brne	.+6      	; 0xf1e <CLCD_voidGoToXY+0x1c>
		Local_u8Adress = Copy_u8YPos;
     f18:	8b 81       	ldd	r24, Y+3	; 0x03
     f1a:	89 83       	std	Y+1, r24	; 0x01
     f1c:	06 c0       	rjmp	.+12     	; 0xf2a <CLCD_voidGoToXY+0x28>
	}
	else if(Copy_u8XPos==1){
     f1e:	8a 81       	ldd	r24, Y+2	; 0x02
     f20:	81 30       	cpi	r24, 0x01	; 1
     f22:	19 f4       	brne	.+6      	; 0xf2a <CLCD_voidGoToXY+0x28>
		Local_u8Adress = Copy_u8YPos+0x40;
     f24:	8b 81       	ldd	r24, Y+3	; 0x03
     f26:	80 5c       	subi	r24, 0xC0	; 192
     f28:	89 83       	std	Y+1, r24	; 0x01
	}
	/*setting the 7th bit so we can send the set ddram address command*/
	SET_BIT(Local_u8Adress,7);
     f2a:	89 81       	ldd	r24, Y+1	; 0x01
     f2c:	80 68       	ori	r24, 0x80	; 128
     f2e:	89 83       	std	Y+1, r24	; 0x01
	CLCD_voidSendCommand(Local_u8Adress);
     f30:	89 81       	ldd	r24, Y+1	; 0x01
     f32:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>
}
     f36:	0f 90       	pop	r0
     f38:	0f 90       	pop	r0
     f3a:	0f 90       	pop	r0
     f3c:	cf 91       	pop	r28
     f3e:	df 91       	pop	r29
     f40:	08 95       	ret

00000f42 <CLCD_voidWriteSpecialCharacter>:

void CLCD_voidWriteSpecialCharacter(u8* Copy_pu8Arr,u8 Copy_u8PatternNumber){
     f42:	df 93       	push	r29
     f44:	cf 93       	push	r28
     f46:	00 d0       	rcall	.+0      	; 0xf48 <CLCD_voidWriteSpecialCharacter+0x6>
     f48:	00 d0       	rcall	.+0      	; 0xf4a <CLCD_voidWriteSpecialCharacter+0x8>
     f4a:	0f 92       	push	r0
     f4c:	cd b7       	in	r28, 0x3d	; 61
     f4e:	de b7       	in	r29, 0x3e	; 62
     f50:	9c 83       	std	Y+4, r25	; 0x04
     f52:	8b 83       	std	Y+3, r24	; 0x03
     f54:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8Iterator;
	/*calculate CGRAM address of block 8 bytes*/
	u8 Local_u8CGRAMAdress = Copy_u8PatternNumber*8;
     f56:	8d 81       	ldd	r24, Y+5	; 0x05
     f58:	88 2f       	mov	r24, r24
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	88 0f       	add	r24, r24
     f5e:	99 1f       	adc	r25, r25
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	88 0f       	add	r24, r24
     f66:	99 1f       	adc	r25, r25
     f68:	89 83       	std	Y+1, r24	; 0x01
	/*set bit 6 for command and set the CGRAM address command*/
	SET_BIT(Local_u8CGRAMAdress,6);
     f6a:	89 81       	ldd	r24, Y+1	; 0x01
     f6c:	80 64       	ori	r24, 0x40	; 64
     f6e:	89 83       	std	Y+1, r24	; 0x01
	CLCD_voidSendCommand(Local_u8CGRAMAdress);
     f70:	89 81       	ldd	r24, Y+1	; 0x01
     f72:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>
	/*write the pattern on CGRAM*/
	for(Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++){
     f76:	1a 82       	std	Y+2, r1	; 0x02
     f78:	0e c0       	rjmp	.+28     	; 0xf96 <CLCD_voidWriteSpecialCharacter+0x54>
		CLCD_voidSendData(Copy_pu8Arr[Local_u8Iterator]);
     f7a:	8a 81       	ldd	r24, Y+2	; 0x02
     f7c:	28 2f       	mov	r18, r24
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	8b 81       	ldd	r24, Y+3	; 0x03
     f82:	9c 81       	ldd	r25, Y+4	; 0x04
     f84:	fc 01       	movw	r30, r24
     f86:	e2 0f       	add	r30, r18
     f88:	f3 1f       	adc	r31, r19
     f8a:	80 81       	ld	r24, Z
     f8c:	0e 94 39 06 	call	0xc72	; 0xc72 <CLCD_voidSendData>
	u8 Local_u8CGRAMAdress = Copy_u8PatternNumber*8;
	/*set bit 6 for command and set the CGRAM address command*/
	SET_BIT(Local_u8CGRAMAdress,6);
	CLCD_voidSendCommand(Local_u8CGRAMAdress);
	/*write the pattern on CGRAM*/
	for(Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++){
     f90:	8a 81       	ldd	r24, Y+2	; 0x02
     f92:	8f 5f       	subi	r24, 0xFF	; 255
     f94:	8a 83       	std	Y+2, r24	; 0x02
     f96:	8a 81       	ldd	r24, Y+2	; 0x02
     f98:	88 30       	cpi	r24, 0x08	; 8
     f9a:	78 f3       	brcs	.-34     	; 0xf7a <CLCD_voidWriteSpecialCharacter+0x38>
		CLCD_voidSendData(Copy_pu8Arr[Local_u8Iterator]);
	}
}
     f9c:	0f 90       	pop	r0
     f9e:	0f 90       	pop	r0
     fa0:	0f 90       	pop	r0
     fa2:	0f 90       	pop	r0
     fa4:	0f 90       	pop	r0
     fa6:	cf 91       	pop	r28
     fa8:	df 91       	pop	r29
     faa:	08 95       	ret

00000fac <CLCD_voidSendSpecialCharacter>:
void CLCD_voidSendSpecialCharacter(u8 Copy_u8PatternNumber,u8 Copy_u8XPos,u8 Copy_u8YPos){
     fac:	df 93       	push	r29
     fae:	cf 93       	push	r28
     fb0:	00 d0       	rcall	.+0      	; 0xfb2 <CLCD_voidSendSpecialCharacter+0x6>
     fb2:	0f 92       	push	r0
     fb4:	cd b7       	in	r28, 0x3d	; 61
     fb6:	de b7       	in	r29, 0x3e	; 62
     fb8:	89 83       	std	Y+1, r24	; 0x01
     fba:	6a 83       	std	Y+2, r22	; 0x02
     fbc:	4b 83       	std	Y+3, r20	; 0x03
	/*go back to ddram to display pattern and send pattern by choosing battern blovk*/
	CLCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
     fbe:	8a 81       	ldd	r24, Y+2	; 0x02
     fc0:	6b 81       	ldd	r22, Y+3	; 0x03
     fc2:	0e 94 81 07 	call	0xf02	; 0xf02 <CLCD_voidGoToXY>
	CLCD_voidSendData(Copy_u8PatternNumber);
     fc6:	89 81       	ldd	r24, Y+1	; 0x01
     fc8:	0e 94 39 06 	call	0xc72	; 0xc72 <CLCD_voidSendData>
}
     fcc:	0f 90       	pop	r0
     fce:	0f 90       	pop	r0
     fd0:	0f 90       	pop	r0
     fd2:	cf 91       	pop	r28
     fd4:	df 91       	pop	r29
     fd6:	08 95       	ret

00000fd8 <CLCD_voidSendNumber>:


void CLCD_voidSendNumber(u32 Copy_u32Number){
     fd8:	df 93       	push	r29
     fda:	cf 93       	push	r28
     fdc:	cd b7       	in	r28, 0x3d	; 61
     fde:	de b7       	in	r29, 0x3e	; 62
     fe0:	2b 97       	sbiw	r28, 0x0b	; 11
     fe2:	0f b6       	in	r0, 0x3f	; 63
     fe4:	f8 94       	cli
     fe6:	de bf       	out	0x3e, r29	; 62
     fe8:	0f be       	out	0x3f, r0	; 63
     fea:	cd bf       	out	0x3d, r28	; 61
     fec:	68 87       	std	Y+8, r22	; 0x08
     fee:	79 87       	std	Y+9, r23	; 0x09
     ff0:	8a 87       	std	Y+10, r24	; 0x0a
     ff2:	9b 87       	std	Y+11, r25	; 0x0b
	/*set local variables to know the number of digits and the digit to print*/
	u8 Local_u8Quotient=1;
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	8f 83       	std	Y+7, r24	; 0x07
	u8 Local_u8NumOfDigits=0;
     ff8:	1e 82       	std	Y+6, r1	; 0x06
     ffa:	1b c0       	rjmp	.+54     	; 0x1032 <CLCD_voidSendNumber+0x5a>
    u8 Local_u8Digit;
    /*calculating the number of digits in the number*/
	while(Local_u8Quotient!=0){
		Local_u8Quotient = Copy_u32Number/CLCD_u32Power(10,++Local_u8NumOfDigits);
     ffc:	8e 81       	ldd	r24, Y+6	; 0x06
     ffe:	8f 5f       	subi	r24, 0xFF	; 255
    1000:	8e 83       	std	Y+6, r24	; 0x06
    1002:	8e 81       	ldd	r24, Y+6	; 0x06
    1004:	28 2f       	mov	r18, r24
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	40 e0       	ldi	r20, 0x00	; 0
    100a:	50 e0       	ldi	r21, 0x00	; 0
    100c:	6a e0       	ldi	r22, 0x0A	; 10
    100e:	70 e0       	ldi	r23, 0x00	; 0
    1010:	80 e0       	ldi	r24, 0x00	; 0
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <CLCD_u32Power>
    1018:	9b 01       	movw	r18, r22
    101a:	ac 01       	movw	r20, r24
    101c:	88 85       	ldd	r24, Y+8	; 0x08
    101e:	99 85       	ldd	r25, Y+9	; 0x09
    1020:	aa 85       	ldd	r26, Y+10	; 0x0a
    1022:	bb 85       	ldd	r27, Y+11	; 0x0b
    1024:	bc 01       	movw	r22, r24
    1026:	cd 01       	movw	r24, r26
    1028:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <__udivmodsi4>
    102c:	da 01       	movw	r26, r20
    102e:	c9 01       	movw	r24, r18
    1030:	8f 83       	std	Y+7, r24	; 0x07
	/*set local variables to know the number of digits and the digit to print*/
	u8 Local_u8Quotient=1;
	u8 Local_u8NumOfDigits=0;
    u8 Local_u8Digit;
    /*calculating the number of digits in the number*/
	while(Local_u8Quotient!=0){
    1032:	8f 81       	ldd	r24, Y+7	; 0x07
    1034:	88 23       	and	r24, r24
    1036:	11 f7       	brne	.-60     	; 0xffc <CLCD_voidSendNumber+0x24>
		Local_u8Quotient = Copy_u32Number/CLCD_u32Power(10,++Local_u8NumOfDigits);
	}
	/*separating each digit then sending then sending them separately to the CLCD*/
	for(s32 Local_u8Power =Local_u8NumOfDigits-1;Local_u8Power>=0;Local_u8Power--){
    1038:	8e 81       	ldd	r24, Y+6	; 0x06
    103a:	88 2f       	mov	r24, r24
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	01 97       	sbiw	r24, 0x01	; 1
    1040:	aa 27       	eor	r26, r26
    1042:	97 fd       	sbrc	r25, 7
    1044:	a0 95       	com	r26
    1046:	ba 2f       	mov	r27, r26
    1048:	89 83       	std	Y+1, r24	; 0x01
    104a:	9a 83       	std	Y+2, r25	; 0x02
    104c:	ab 83       	std	Y+3, r26	; 0x03
    104e:	bc 83       	std	Y+4, r27	; 0x04
    1050:	42 c0       	rjmp	.+132    	; 0x10d6 <CLCD_voidSendNumber+0xfe>
	        Local_u8Digit=Copy_u32Number/CLCD_u32Power(10,Local_u8Power);
    1052:	29 81       	ldd	r18, Y+1	; 0x01
    1054:	3a 81       	ldd	r19, Y+2	; 0x02
    1056:	4b 81       	ldd	r20, Y+3	; 0x03
    1058:	5c 81       	ldd	r21, Y+4	; 0x04
    105a:	6a e0       	ldi	r22, 0x0A	; 10
    105c:	70 e0       	ldi	r23, 0x00	; 0
    105e:	80 e0       	ldi	r24, 0x00	; 0
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <CLCD_u32Power>
    1066:	9b 01       	movw	r18, r22
    1068:	ac 01       	movw	r20, r24
    106a:	88 85       	ldd	r24, Y+8	; 0x08
    106c:	99 85       	ldd	r25, Y+9	; 0x09
    106e:	aa 85       	ldd	r26, Y+10	; 0x0a
    1070:	bb 85       	ldd	r27, Y+11	; 0x0b
    1072:	bc 01       	movw	r22, r24
    1074:	cd 01       	movw	r24, r26
    1076:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <__udivmodsi4>
    107a:	da 01       	movw	r26, r20
    107c:	c9 01       	movw	r24, r18
    107e:	8d 83       	std	Y+5, r24	; 0x05
	        Copy_u32Number %= CLCD_u32Power(10,Local_u8Power);
    1080:	29 81       	ldd	r18, Y+1	; 0x01
    1082:	3a 81       	ldd	r19, Y+2	; 0x02
    1084:	4b 81       	ldd	r20, Y+3	; 0x03
    1086:	5c 81       	ldd	r21, Y+4	; 0x04
    1088:	6a e0       	ldi	r22, 0x0A	; 10
    108a:	70 e0       	ldi	r23, 0x00	; 0
    108c:	80 e0       	ldi	r24, 0x00	; 0
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <CLCD_u32Power>
    1094:	9b 01       	movw	r18, r22
    1096:	ac 01       	movw	r20, r24
    1098:	88 85       	ldd	r24, Y+8	; 0x08
    109a:	99 85       	ldd	r25, Y+9	; 0x09
    109c:	aa 85       	ldd	r26, Y+10	; 0x0a
    109e:	bb 85       	ldd	r27, Y+11	; 0x0b
    10a0:	bc 01       	movw	r22, r24
    10a2:	cd 01       	movw	r24, r26
    10a4:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <__udivmodsi4>
    10a8:	dc 01       	movw	r26, r24
    10aa:	cb 01       	movw	r24, r22
    10ac:	88 87       	std	Y+8, r24	; 0x08
    10ae:	99 87       	std	Y+9, r25	; 0x09
    10b0:	aa 87       	std	Y+10, r26	; 0x0a
    10b2:	bb 87       	std	Y+11, r27	; 0x0b
	        Local_u8Digit+=48;
    10b4:	8d 81       	ldd	r24, Y+5	; 0x05
    10b6:	80 5d       	subi	r24, 0xD0	; 208
    10b8:	8d 83       	std	Y+5, r24	; 0x05
	        CLCD_voidSendData(Local_u8Digit);
    10ba:	8d 81       	ldd	r24, Y+5	; 0x05
    10bc:	0e 94 39 06 	call	0xc72	; 0xc72 <CLCD_voidSendData>
    /*calculating the number of digits in the number*/
	while(Local_u8Quotient!=0){
		Local_u8Quotient = Copy_u32Number/CLCD_u32Power(10,++Local_u8NumOfDigits);
	}
	/*separating each digit then sending then sending them separately to the CLCD*/
	for(s32 Local_u8Power =Local_u8NumOfDigits-1;Local_u8Power>=0;Local_u8Power--){
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	9a 81       	ldd	r25, Y+2	; 0x02
    10c4:	ab 81       	ldd	r26, Y+3	; 0x03
    10c6:	bc 81       	ldd	r27, Y+4	; 0x04
    10c8:	01 97       	sbiw	r24, 0x01	; 1
    10ca:	a1 09       	sbc	r26, r1
    10cc:	b1 09       	sbc	r27, r1
    10ce:	89 83       	std	Y+1, r24	; 0x01
    10d0:	9a 83       	std	Y+2, r25	; 0x02
    10d2:	ab 83       	std	Y+3, r26	; 0x03
    10d4:	bc 83       	std	Y+4, r27	; 0x04
    10d6:	89 81       	ldd	r24, Y+1	; 0x01
    10d8:	9a 81       	ldd	r25, Y+2	; 0x02
    10da:	ab 81       	ldd	r26, Y+3	; 0x03
    10dc:	bc 81       	ldd	r27, Y+4	; 0x04
    10de:	bb 23       	and	r27, r27
    10e0:	0c f0       	brlt	.+2      	; 0x10e4 <CLCD_voidSendNumber+0x10c>
    10e2:	b7 cf       	rjmp	.-146    	; 0x1052 <CLCD_voidSendNumber+0x7a>
	        Local_u8Digit=Copy_u32Number/CLCD_u32Power(10,Local_u8Power);
	        Copy_u32Number %= CLCD_u32Power(10,Local_u8Power);
	        Local_u8Digit+=48;
	        CLCD_voidSendData(Local_u8Digit);
	    }
}
    10e4:	2b 96       	adiw	r28, 0x0b	; 11
    10e6:	0f b6       	in	r0, 0x3f	; 63
    10e8:	f8 94       	cli
    10ea:	de bf       	out	0x3e, r29	; 62
    10ec:	0f be       	out	0x3f, r0	; 63
    10ee:	cd bf       	out	0x3d, r28	; 61
    10f0:	cf 91       	pop	r28
    10f2:	df 91       	pop	r29
    10f4:	08 95       	ret

000010f6 <CLCD_u32Power>:

u32 CLCD_u32Power(u32 Copy_u32Base,s32 Copy_u32Exponent){
    10f6:	df 93       	push	r29
    10f8:	cf 93       	push	r28
    10fa:	cd b7       	in	r28, 0x3d	; 61
    10fc:	de b7       	in	r29, 0x3e	; 62
    10fe:	60 97       	sbiw	r28, 0x10	; 16
    1100:	0f b6       	in	r0, 0x3f	; 63
    1102:	f8 94       	cli
    1104:	de bf       	out	0x3e, r29	; 62
    1106:	0f be       	out	0x3f, r0	; 63
    1108:	cd bf       	out	0x3d, r28	; 61
    110a:	69 87       	std	Y+9, r22	; 0x09
    110c:	7a 87       	std	Y+10, r23	; 0x0a
    110e:	8b 87       	std	Y+11, r24	; 0x0b
    1110:	9c 87       	std	Y+12, r25	; 0x0c
    1112:	2d 87       	std	Y+13, r18	; 0x0d
    1114:	3e 87       	std	Y+14, r19	; 0x0e
    1116:	4f 87       	std	Y+15, r20	; 0x0f
    1118:	58 8b       	std	Y+16, r21	; 0x10
	u32 Local_u32Result=1;
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	a0 e0       	ldi	r26, 0x00	; 0
    1120:	b0 e0       	ldi	r27, 0x00	; 0
    1122:	8d 83       	std	Y+5, r24	; 0x05
    1124:	9e 83       	std	Y+6, r25	; 0x06
    1126:	af 83       	std	Y+7, r26	; 0x07
    1128:	b8 87       	std	Y+8, r27	; 0x08
	for(u32 i=0;i<Copy_u32Exponent;i++){
    112a:	19 82       	std	Y+1, r1	; 0x01
    112c:	1a 82       	std	Y+2, r1	; 0x02
    112e:	1b 82       	std	Y+3, r1	; 0x03
    1130:	1c 82       	std	Y+4, r1	; 0x04
    1132:	1d c0       	rjmp	.+58     	; 0x116e <CLCD_u32Power+0x78>
		Local_u32Result*=Copy_u32Base;
    1134:	8d 81       	ldd	r24, Y+5	; 0x05
    1136:	9e 81       	ldd	r25, Y+6	; 0x06
    1138:	af 81       	ldd	r26, Y+7	; 0x07
    113a:	b8 85       	ldd	r27, Y+8	; 0x08
    113c:	29 85       	ldd	r18, Y+9	; 0x09
    113e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1140:	4b 85       	ldd	r20, Y+11	; 0x0b
    1142:	5c 85       	ldd	r21, Y+12	; 0x0c
    1144:	bc 01       	movw	r22, r24
    1146:	cd 01       	movw	r24, r26
    1148:	0e 94 c1 13 	call	0x2782	; 0x2782 <__mulsi3>
    114c:	dc 01       	movw	r26, r24
    114e:	cb 01       	movw	r24, r22
    1150:	8d 83       	std	Y+5, r24	; 0x05
    1152:	9e 83       	std	Y+6, r25	; 0x06
    1154:	af 83       	std	Y+7, r26	; 0x07
    1156:	b8 87       	std	Y+8, r27	; 0x08
	    }
}

u32 CLCD_u32Power(u32 Copy_u32Base,s32 Copy_u32Exponent){
	u32 Local_u32Result=1;
	for(u32 i=0;i<Copy_u32Exponent;i++){
    1158:	89 81       	ldd	r24, Y+1	; 0x01
    115a:	9a 81       	ldd	r25, Y+2	; 0x02
    115c:	ab 81       	ldd	r26, Y+3	; 0x03
    115e:	bc 81       	ldd	r27, Y+4	; 0x04
    1160:	01 96       	adiw	r24, 0x01	; 1
    1162:	a1 1d       	adc	r26, r1
    1164:	b1 1d       	adc	r27, r1
    1166:	89 83       	std	Y+1, r24	; 0x01
    1168:	9a 83       	std	Y+2, r25	; 0x02
    116a:	ab 83       	std	Y+3, r26	; 0x03
    116c:	bc 83       	std	Y+4, r27	; 0x04
    116e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1170:	3e 85       	ldd	r19, Y+14	; 0x0e
    1172:	4f 85       	ldd	r20, Y+15	; 0x0f
    1174:	58 89       	ldd	r21, Y+16	; 0x10
    1176:	89 81       	ldd	r24, Y+1	; 0x01
    1178:	9a 81       	ldd	r25, Y+2	; 0x02
    117a:	ab 81       	ldd	r26, Y+3	; 0x03
    117c:	bc 81       	ldd	r27, Y+4	; 0x04
    117e:	82 17       	cp	r24, r18
    1180:	93 07       	cpc	r25, r19
    1182:	a4 07       	cpc	r26, r20
    1184:	b5 07       	cpc	r27, r21
    1186:	b0 f2       	brcs	.-84     	; 0x1134 <CLCD_u32Power+0x3e>
		Local_u32Result*=Copy_u32Base;
	}
	return Local_u32Result;
    1188:	8d 81       	ldd	r24, Y+5	; 0x05
    118a:	9e 81       	ldd	r25, Y+6	; 0x06
    118c:	af 81       	ldd	r26, Y+7	; 0x07
    118e:	b8 85       	ldd	r27, Y+8	; 0x08
}
    1190:	bc 01       	movw	r22, r24
    1192:	cd 01       	movw	r24, r26
    1194:	60 96       	adiw	r28, 0x10	; 16
    1196:	0f b6       	in	r0, 0x3f	; 63
    1198:	f8 94       	cli
    119a:	de bf       	out	0x3e, r29	; 62
    119c:	0f be       	out	0x3f, r0	; 63
    119e:	cd bf       	out	0x3d, r28	; 61
    11a0:	cf 91       	pop	r28
    11a2:	df 91       	pop	r29
    11a4:	08 95       	ret

000011a6 <DCM_voidRotateClockwise>:

#include "DCM_config.h"
#include "DCM_private.h"
#include "DCM_Interface.h"

void DCM_voidRotateClockwise(){
    11a6:	df 93       	push	r29
    11a8:	cf 93       	push	r28
    11aa:	cd b7       	in	r28, 0x3d	; 61
    11ac:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(DCM_PORT,DCM_CTR_CLKWISE_PIN,DIO_u8PIN_LOW);
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	64 e0       	ldi	r22, 0x04	; 4
    11b2:	40 e0       	ldi	r20, 0x00	; 0
    11b4:	0e 94 06 09 	call	0x120c	; 0x120c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DCM_PORT,DCM_CLKWISE_PIN,DIO_u8PIN_HIGH);
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	65 e0       	ldi	r22, 0x05	; 5
    11bc:	41 e0       	ldi	r20, 0x01	; 1
    11be:	0e 94 06 09 	call	0x120c	; 0x120c <DIO_u8SetPinValue>
}
    11c2:	cf 91       	pop	r28
    11c4:	df 91       	pop	r29
    11c6:	08 95       	ret

000011c8 <DCM_voidRotateCounterClockwise>:
void DCM_voidRotateCounterClockwise(){
    11c8:	df 93       	push	r29
    11ca:	cf 93       	push	r28
    11cc:	cd b7       	in	r28, 0x3d	; 61
    11ce:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(DCM_PORT,DCM_CLKWISE_PIN,DIO_u8PIN_LOW);
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	65 e0       	ldi	r22, 0x05	; 5
    11d4:	40 e0       	ldi	r20, 0x00	; 0
    11d6:	0e 94 06 09 	call	0x120c	; 0x120c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DCM_PORT,DCM_CTR_CLKWISE_PIN,DIO_u8PIN_HIGH);
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	64 e0       	ldi	r22, 0x04	; 4
    11de:	41 e0       	ldi	r20, 0x01	; 1
    11e0:	0e 94 06 09 	call	0x120c	; 0x120c <DIO_u8SetPinValue>
}
    11e4:	cf 91       	pop	r28
    11e6:	df 91       	pop	r29
    11e8:	08 95       	ret

000011ea <DCM_voidStop>:

void DCM_voidStop(){
    11ea:	df 93       	push	r29
    11ec:	cf 93       	push	r28
    11ee:	cd b7       	in	r28, 0x3d	; 61
    11f0:	de b7       	in	r29, 0x3e	; 62
		DIO_u8SetPinValue(DCM_PORT,DCM_CLKWISE_PIN,DIO_u8PIN_LOW);
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	65 e0       	ldi	r22, 0x05	; 5
    11f6:	40 e0       	ldi	r20, 0x00	; 0
    11f8:	0e 94 06 09 	call	0x120c	; 0x120c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DCM_PORT,DCM_CTR_CLKWISE_PIN,DIO_u8PIN_LOW);
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	64 e0       	ldi	r22, 0x04	; 4
    1200:	40 e0       	ldi	r20, 0x00	; 0
    1202:	0e 94 06 09 	call	0x120c	; 0x120c <DIO_u8SetPinValue>
    1206:	cf 91       	pop	r28
    1208:	df 91       	pop	r29
    120a:	08 95       	ret

0000120c <DIO_u8SetPinValue>:
#include "DIO_private.h"
#include "DIO_config.h"



u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value){
    120c:	df 93       	push	r29
    120e:	cf 93       	push	r28
    1210:	cd b7       	in	r28, 0x3d	; 61
    1212:	de b7       	in	r29, 0x3e	; 62
    1214:	28 97       	sbiw	r28, 0x08	; 8
    1216:	0f b6       	in	r0, 0x3f	; 63
    1218:	f8 94       	cli
    121a:	de bf       	out	0x3e, r29	; 62
    121c:	0f be       	out	0x3f, r0	; 63
    121e:	cd bf       	out	0x3d, r28	; 61
    1220:	8a 83       	std	Y+2, r24	; 0x02
    1222:	6b 83       	std	Y+3, r22	; 0x03
    1224:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    1226:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin <= DIO_u8PIN7){
    1228:	8b 81       	ldd	r24, Y+3	; 0x03
    122a:	88 30       	cpi	r24, 0x08	; 8
    122c:	08 f0       	brcs	.+2      	; 0x1230 <DIO_u8SetPinValue+0x24>
    122e:	f4 c0       	rjmp	.+488    	; 0x1418 <DIO_u8SetPinValue+0x20c>
		if(Copy_u8Value == DIO_u8PIN_LOW){
    1230:	8c 81       	ldd	r24, Y+4	; 0x04
    1232:	88 23       	and	r24, r24
    1234:	09 f0       	breq	.+2      	; 0x1238 <DIO_u8SetPinValue+0x2c>
    1236:	77 c0       	rjmp	.+238    	; 0x1326 <DIO_u8SetPinValue+0x11a>
			switch(Copy_u8Port){
    1238:	8a 81       	ldd	r24, Y+2	; 0x02
    123a:	28 2f       	mov	r18, r24
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	38 87       	std	Y+8, r19	; 0x08
    1240:	2f 83       	std	Y+7, r18	; 0x07
    1242:	8f 81       	ldd	r24, Y+7	; 0x07
    1244:	98 85       	ldd	r25, Y+8	; 0x08
    1246:	81 30       	cpi	r24, 0x01	; 1
    1248:	91 05       	cpc	r25, r1
    124a:	59 f1       	breq	.+86     	; 0x12a2 <DIO_u8SetPinValue+0x96>
    124c:	2f 81       	ldd	r18, Y+7	; 0x07
    124e:	38 85       	ldd	r19, Y+8	; 0x08
    1250:	22 30       	cpi	r18, 0x02	; 2
    1252:	31 05       	cpc	r19, r1
    1254:	2c f4       	brge	.+10     	; 0x1260 <DIO_u8SetPinValue+0x54>
    1256:	8f 81       	ldd	r24, Y+7	; 0x07
    1258:	98 85       	ldd	r25, Y+8	; 0x08
    125a:	00 97       	sbiw	r24, 0x00	; 0
    125c:	69 f0       	breq	.+26     	; 0x1278 <DIO_u8SetPinValue+0x6c>
    125e:	60 c0       	rjmp	.+192    	; 0x1320 <DIO_u8SetPinValue+0x114>
    1260:	2f 81       	ldd	r18, Y+7	; 0x07
    1262:	38 85       	ldd	r19, Y+8	; 0x08
    1264:	22 30       	cpi	r18, 0x02	; 2
    1266:	31 05       	cpc	r19, r1
    1268:	89 f1       	breq	.+98     	; 0x12cc <DIO_u8SetPinValue+0xc0>
    126a:	8f 81       	ldd	r24, Y+7	; 0x07
    126c:	98 85       	ldd	r25, Y+8	; 0x08
    126e:	83 30       	cpi	r24, 0x03	; 3
    1270:	91 05       	cpc	r25, r1
    1272:	09 f4       	brne	.+2      	; 0x1276 <DIO_u8SetPinValue+0x6a>
    1274:	40 c0       	rjmp	.+128    	; 0x12f6 <DIO_u8SetPinValue+0xea>
    1276:	54 c0       	rjmp	.+168    	; 0x1320 <DIO_u8SetPinValue+0x114>
			case DIO_u8PORTA : CLR_BIT(PORTA,Copy_u8Pin); break;
    1278:	ab e3       	ldi	r26, 0x3B	; 59
    127a:	b0 e0       	ldi	r27, 0x00	; 0
    127c:	eb e3       	ldi	r30, 0x3B	; 59
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 81       	ld	r24, Z
    1282:	48 2f       	mov	r20, r24
    1284:	8b 81       	ldd	r24, Y+3	; 0x03
    1286:	28 2f       	mov	r18, r24
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	02 2e       	mov	r0, r18
    1290:	02 c0       	rjmp	.+4      	; 0x1296 <DIO_u8SetPinValue+0x8a>
    1292:	88 0f       	add	r24, r24
    1294:	99 1f       	adc	r25, r25
    1296:	0a 94       	dec	r0
    1298:	e2 f7       	brpl	.-8      	; 0x1292 <DIO_u8SetPinValue+0x86>
    129a:	80 95       	com	r24
    129c:	84 23       	and	r24, r20
    129e:	8c 93       	st	X, r24
    12a0:	bd c0       	rjmp	.+378    	; 0x141c <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB : CLR_BIT(PORTB,Copy_u8Pin); break;
    12a2:	a8 e3       	ldi	r26, 0x38	; 56
    12a4:	b0 e0       	ldi	r27, 0x00	; 0
    12a6:	e8 e3       	ldi	r30, 0x38	; 56
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	48 2f       	mov	r20, r24
    12ae:	8b 81       	ldd	r24, Y+3	; 0x03
    12b0:	28 2f       	mov	r18, r24
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	02 2e       	mov	r0, r18
    12ba:	02 c0       	rjmp	.+4      	; 0x12c0 <DIO_u8SetPinValue+0xb4>
    12bc:	88 0f       	add	r24, r24
    12be:	99 1f       	adc	r25, r25
    12c0:	0a 94       	dec	r0
    12c2:	e2 f7       	brpl	.-8      	; 0x12bc <DIO_u8SetPinValue+0xb0>
    12c4:	80 95       	com	r24
    12c6:	84 23       	and	r24, r20
    12c8:	8c 93       	st	X, r24
    12ca:	a8 c0       	rjmp	.+336    	; 0x141c <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC : CLR_BIT(PORTC,Copy_u8Pin); break;
    12cc:	a5 e3       	ldi	r26, 0x35	; 53
    12ce:	b0 e0       	ldi	r27, 0x00	; 0
    12d0:	e5 e3       	ldi	r30, 0x35	; 53
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	48 2f       	mov	r20, r24
    12d8:	8b 81       	ldd	r24, Y+3	; 0x03
    12da:	28 2f       	mov	r18, r24
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	02 2e       	mov	r0, r18
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <DIO_u8SetPinValue+0xde>
    12e6:	88 0f       	add	r24, r24
    12e8:	99 1f       	adc	r25, r25
    12ea:	0a 94       	dec	r0
    12ec:	e2 f7       	brpl	.-8      	; 0x12e6 <DIO_u8SetPinValue+0xda>
    12ee:	80 95       	com	r24
    12f0:	84 23       	and	r24, r20
    12f2:	8c 93       	st	X, r24
    12f4:	93 c0       	rjmp	.+294    	; 0x141c <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD : CLR_BIT(PORTD,Copy_u8Pin); break;
    12f6:	a2 e3       	ldi	r26, 0x32	; 50
    12f8:	b0 e0       	ldi	r27, 0x00	; 0
    12fa:	e2 e3       	ldi	r30, 0x32	; 50
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	80 81       	ld	r24, Z
    1300:	48 2f       	mov	r20, r24
    1302:	8b 81       	ldd	r24, Y+3	; 0x03
    1304:	28 2f       	mov	r18, r24
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	02 2e       	mov	r0, r18
    130e:	02 c0       	rjmp	.+4      	; 0x1314 <DIO_u8SetPinValue+0x108>
    1310:	88 0f       	add	r24, r24
    1312:	99 1f       	adc	r25, r25
    1314:	0a 94       	dec	r0
    1316:	e2 f7       	brpl	.-8      	; 0x1310 <DIO_u8SetPinValue+0x104>
    1318:	80 95       	com	r24
    131a:	84 23       	and	r24, r20
    131c:	8c 93       	st	X, r24
    131e:	7e c0       	rjmp	.+252    	; 0x141c <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1;
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	89 83       	std	Y+1, r24	; 0x01
    1324:	7b c0       	rjmp	.+246    	; 0x141c <DIO_u8SetPinValue+0x210>
			}
		}
		else if(Copy_u8Value == DIO_u8PIN_HIGH){
    1326:	8c 81       	ldd	r24, Y+4	; 0x04
    1328:	81 30       	cpi	r24, 0x01	; 1
    132a:	09 f0       	breq	.+2      	; 0x132e <DIO_u8SetPinValue+0x122>
    132c:	72 c0       	rjmp	.+228    	; 0x1412 <DIO_u8SetPinValue+0x206>
			switch(Copy_u8Port){
    132e:	8a 81       	ldd	r24, Y+2	; 0x02
    1330:	28 2f       	mov	r18, r24
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	3e 83       	std	Y+6, r19	; 0x06
    1336:	2d 83       	std	Y+5, r18	; 0x05
    1338:	8d 81       	ldd	r24, Y+5	; 0x05
    133a:	9e 81       	ldd	r25, Y+6	; 0x06
    133c:	81 30       	cpi	r24, 0x01	; 1
    133e:	91 05       	cpc	r25, r1
    1340:	49 f1       	breq	.+82     	; 0x1394 <DIO_u8SetPinValue+0x188>
    1342:	2d 81       	ldd	r18, Y+5	; 0x05
    1344:	3e 81       	ldd	r19, Y+6	; 0x06
    1346:	22 30       	cpi	r18, 0x02	; 2
    1348:	31 05       	cpc	r19, r1
    134a:	2c f4       	brge	.+10     	; 0x1356 <DIO_u8SetPinValue+0x14a>
    134c:	8d 81       	ldd	r24, Y+5	; 0x05
    134e:	9e 81       	ldd	r25, Y+6	; 0x06
    1350:	00 97       	sbiw	r24, 0x00	; 0
    1352:	61 f0       	breq	.+24     	; 0x136c <DIO_u8SetPinValue+0x160>
    1354:	5b c0       	rjmp	.+182    	; 0x140c <DIO_u8SetPinValue+0x200>
    1356:	2d 81       	ldd	r18, Y+5	; 0x05
    1358:	3e 81       	ldd	r19, Y+6	; 0x06
    135a:	22 30       	cpi	r18, 0x02	; 2
    135c:	31 05       	cpc	r19, r1
    135e:	71 f1       	breq	.+92     	; 0x13bc <DIO_u8SetPinValue+0x1b0>
    1360:	8d 81       	ldd	r24, Y+5	; 0x05
    1362:	9e 81       	ldd	r25, Y+6	; 0x06
    1364:	83 30       	cpi	r24, 0x03	; 3
    1366:	91 05       	cpc	r25, r1
    1368:	e9 f1       	breq	.+122    	; 0x13e4 <DIO_u8SetPinValue+0x1d8>
    136a:	50 c0       	rjmp	.+160    	; 0x140c <DIO_u8SetPinValue+0x200>
			case DIO_u8PORTA : SET_BIT(PORTA,Copy_u8Pin); break;
    136c:	ab e3       	ldi	r26, 0x3B	; 59
    136e:	b0 e0       	ldi	r27, 0x00	; 0
    1370:	eb e3       	ldi	r30, 0x3B	; 59
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	80 81       	ld	r24, Z
    1376:	48 2f       	mov	r20, r24
    1378:	8b 81       	ldd	r24, Y+3	; 0x03
    137a:	28 2f       	mov	r18, r24
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	02 2e       	mov	r0, r18
    1384:	02 c0       	rjmp	.+4      	; 0x138a <DIO_u8SetPinValue+0x17e>
    1386:	88 0f       	add	r24, r24
    1388:	99 1f       	adc	r25, r25
    138a:	0a 94       	dec	r0
    138c:	e2 f7       	brpl	.-8      	; 0x1386 <DIO_u8SetPinValue+0x17a>
    138e:	84 2b       	or	r24, r20
    1390:	8c 93       	st	X, r24
    1392:	44 c0       	rjmp	.+136    	; 0x141c <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB : SET_BIT(PORTB,Copy_u8Pin); break;
    1394:	a8 e3       	ldi	r26, 0x38	; 56
    1396:	b0 e0       	ldi	r27, 0x00	; 0
    1398:	e8 e3       	ldi	r30, 0x38	; 56
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	80 81       	ld	r24, Z
    139e:	48 2f       	mov	r20, r24
    13a0:	8b 81       	ldd	r24, Y+3	; 0x03
    13a2:	28 2f       	mov	r18, r24
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	81 e0       	ldi	r24, 0x01	; 1
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	02 2e       	mov	r0, r18
    13ac:	02 c0       	rjmp	.+4      	; 0x13b2 <DIO_u8SetPinValue+0x1a6>
    13ae:	88 0f       	add	r24, r24
    13b0:	99 1f       	adc	r25, r25
    13b2:	0a 94       	dec	r0
    13b4:	e2 f7       	brpl	.-8      	; 0x13ae <DIO_u8SetPinValue+0x1a2>
    13b6:	84 2b       	or	r24, r20
    13b8:	8c 93       	st	X, r24
    13ba:	30 c0       	rjmp	.+96     	; 0x141c <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC : SET_BIT(PORTC,Copy_u8Pin); break;
    13bc:	a5 e3       	ldi	r26, 0x35	; 53
    13be:	b0 e0       	ldi	r27, 0x00	; 0
    13c0:	e5 e3       	ldi	r30, 0x35	; 53
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	80 81       	ld	r24, Z
    13c6:	48 2f       	mov	r20, r24
    13c8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ca:	28 2f       	mov	r18, r24
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	81 e0       	ldi	r24, 0x01	; 1
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	02 2e       	mov	r0, r18
    13d4:	02 c0       	rjmp	.+4      	; 0x13da <DIO_u8SetPinValue+0x1ce>
    13d6:	88 0f       	add	r24, r24
    13d8:	99 1f       	adc	r25, r25
    13da:	0a 94       	dec	r0
    13dc:	e2 f7       	brpl	.-8      	; 0x13d6 <DIO_u8SetPinValue+0x1ca>
    13de:	84 2b       	or	r24, r20
    13e0:	8c 93       	st	X, r24
    13e2:	1c c0       	rjmp	.+56     	; 0x141c <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD : SET_BIT(PORTD,Copy_u8Pin); break;
    13e4:	a2 e3       	ldi	r26, 0x32	; 50
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	e2 e3       	ldi	r30, 0x32	; 50
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	48 2f       	mov	r20, r24
    13f0:	8b 81       	ldd	r24, Y+3	; 0x03
    13f2:	28 2f       	mov	r18, r24
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	81 e0       	ldi	r24, 0x01	; 1
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	02 2e       	mov	r0, r18
    13fc:	02 c0       	rjmp	.+4      	; 0x1402 <DIO_u8SetPinValue+0x1f6>
    13fe:	88 0f       	add	r24, r24
    1400:	99 1f       	adc	r25, r25
    1402:	0a 94       	dec	r0
    1404:	e2 f7       	brpl	.-8      	; 0x13fe <DIO_u8SetPinValue+0x1f2>
    1406:	84 2b       	or	r24, r20
    1408:	8c 93       	st	X, r24
    140a:	08 c0       	rjmp	.+16     	; 0x141c <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1;
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	89 83       	std	Y+1, r24	; 0x01
    1410:	05 c0       	rjmp	.+10     	; 0x141c <DIO_u8SetPinValue+0x210>
			}
		}
		else{
			Local_u8ErrorState=1;
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	89 83       	std	Y+1, r24	; 0x01
    1416:	02 c0       	rjmp	.+4      	; 0x141c <DIO_u8SetPinValue+0x210>
		}
	}
	else{
		Local_u8ErrorState=1;
    1418:	81 e0       	ldi	r24, 0x01	; 1
    141a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState ;
    141c:	89 81       	ldd	r24, Y+1	; 0x01
}
    141e:	28 96       	adiw	r28, 0x08	; 8
    1420:	0f b6       	in	r0, 0x3f	; 63
    1422:	f8 94       	cli
    1424:	de bf       	out	0x3e, r29	; 62
    1426:	0f be       	out	0x3f, r0	; 63
    1428:	cd bf       	out	0x3d, r28	; 61
    142a:	cf 91       	pop	r28
    142c:	df 91       	pop	r29
    142e:	08 95       	ret

00001430 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8Port,u8 Copy_u8Value){
    1430:	df 93       	push	r29
    1432:	cf 93       	push	r28
    1434:	00 d0       	rcall	.+0      	; 0x1436 <DIO_u8SetPortValue+0x6>
    1436:	00 d0       	rcall	.+0      	; 0x1438 <DIO_u8SetPortValue+0x8>
    1438:	0f 92       	push	r0
    143a:	cd b7       	in	r28, 0x3d	; 61
    143c:	de b7       	in	r29, 0x3e	; 62
    143e:	8a 83       	std	Y+2, r24	; 0x02
    1440:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    1442:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8Port)
    1444:	8a 81       	ldd	r24, Y+2	; 0x02
    1446:	28 2f       	mov	r18, r24
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	3d 83       	std	Y+5, r19	; 0x05
    144c:	2c 83       	std	Y+4, r18	; 0x04
    144e:	8c 81       	ldd	r24, Y+4	; 0x04
    1450:	9d 81       	ldd	r25, Y+5	; 0x05
    1452:	81 30       	cpi	r24, 0x01	; 1
    1454:	91 05       	cpc	r25, r1
    1456:	d1 f0       	breq	.+52     	; 0x148c <DIO_u8SetPortValue+0x5c>
    1458:	2c 81       	ldd	r18, Y+4	; 0x04
    145a:	3d 81       	ldd	r19, Y+5	; 0x05
    145c:	22 30       	cpi	r18, 0x02	; 2
    145e:	31 05       	cpc	r19, r1
    1460:	2c f4       	brge	.+10     	; 0x146c <DIO_u8SetPortValue+0x3c>
    1462:	8c 81       	ldd	r24, Y+4	; 0x04
    1464:	9d 81       	ldd	r25, Y+5	; 0x05
    1466:	00 97       	sbiw	r24, 0x00	; 0
    1468:	61 f0       	breq	.+24     	; 0x1482 <DIO_u8SetPortValue+0x52>
    146a:	1f c0       	rjmp	.+62     	; 0x14aa <DIO_u8SetPortValue+0x7a>
    146c:	2c 81       	ldd	r18, Y+4	; 0x04
    146e:	3d 81       	ldd	r19, Y+5	; 0x05
    1470:	22 30       	cpi	r18, 0x02	; 2
    1472:	31 05       	cpc	r19, r1
    1474:	81 f0       	breq	.+32     	; 0x1496 <DIO_u8SetPortValue+0x66>
    1476:	8c 81       	ldd	r24, Y+4	; 0x04
    1478:	9d 81       	ldd	r25, Y+5	; 0x05
    147a:	83 30       	cpi	r24, 0x03	; 3
    147c:	91 05       	cpc	r25, r1
    147e:	81 f0       	breq	.+32     	; 0x14a0 <DIO_u8SetPortValue+0x70>
    1480:	14 c0       	rjmp	.+40     	; 0x14aa <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA: PORTA=Copy_u8Value; break;
    1482:	eb e3       	ldi	r30, 0x3B	; 59
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	8b 81       	ldd	r24, Y+3	; 0x03
    1488:	80 83       	st	Z, r24
    148a:	11 c0       	rjmp	.+34     	; 0x14ae <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB: PORTB=Copy_u8Value; break;
    148c:	e8 e3       	ldi	r30, 0x38	; 56
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	8b 81       	ldd	r24, Y+3	; 0x03
    1492:	80 83       	st	Z, r24
    1494:	0c c0       	rjmp	.+24     	; 0x14ae <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC: PORTC=Copy_u8Value; break;
    1496:	e5 e3       	ldi	r30, 0x35	; 53
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	8b 81       	ldd	r24, Y+3	; 0x03
    149c:	80 83       	st	Z, r24
    149e:	07 c0       	rjmp	.+14     	; 0x14ae <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD: PORTD=Copy_u8Value; break;
    14a0:	e2 e3       	ldi	r30, 0x32	; 50
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	8b 81       	ldd	r24, Y+3	; 0x03
    14a6:	80 83       	st	Z, r24
    14a8:	02 c0       	rjmp	.+4      	; 0x14ae <DIO_u8SetPortValue+0x7e>
	default: Local_u8ErrorState=1 ;
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState ;
    14ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    14b0:	0f 90       	pop	r0
    14b2:	0f 90       	pop	r0
    14b4:	0f 90       	pop	r0
    14b6:	0f 90       	pop	r0
    14b8:	0f 90       	pop	r0
    14ba:	cf 91       	pop	r28
    14bc:	df 91       	pop	r29
    14be:	08 95       	ret

000014c0 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin, u8* Copy_pu8Value){
    14c0:	df 93       	push	r29
    14c2:	cf 93       	push	r28
    14c4:	cd b7       	in	r28, 0x3d	; 61
    14c6:	de b7       	in	r29, 0x3e	; 62
    14c8:	27 97       	sbiw	r28, 0x07	; 7
    14ca:	0f b6       	in	r0, 0x3f	; 63
    14cc:	f8 94       	cli
    14ce:	de bf       	out	0x3e, r29	; 62
    14d0:	0f be       	out	0x3f, r0	; 63
    14d2:	cd bf       	out	0x3d, r28	; 61
    14d4:	8a 83       	std	Y+2, r24	; 0x02
    14d6:	6b 83       	std	Y+3, r22	; 0x03
    14d8:	5d 83       	std	Y+5, r21	; 0x05
    14da:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    14dc:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_pu8Value != NULL) && (Copy_u8Pin <= DIO_u8PIN7)){
    14de:	8c 81       	ldd	r24, Y+4	; 0x04
    14e0:	9d 81       	ldd	r25, Y+5	; 0x05
    14e2:	00 97       	sbiw	r24, 0x00	; 0
    14e4:	09 f4       	brne	.+2      	; 0x14e8 <DIO_u8GetPinValue+0x28>
    14e6:	78 c0       	rjmp	.+240    	; 0x15d8 <DIO_u8GetPinValue+0x118>
    14e8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ea:	88 30       	cpi	r24, 0x08	; 8
    14ec:	08 f0       	brcs	.+2      	; 0x14f0 <DIO_u8GetPinValue+0x30>
    14ee:	74 c0       	rjmp	.+232    	; 0x15d8 <DIO_u8GetPinValue+0x118>
		switch (Copy_u8Port){
    14f0:	8a 81       	ldd	r24, Y+2	; 0x02
    14f2:	28 2f       	mov	r18, r24
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	3f 83       	std	Y+7, r19	; 0x07
    14f8:	2e 83       	std	Y+6, r18	; 0x06
    14fa:	4e 81       	ldd	r20, Y+6	; 0x06
    14fc:	5f 81       	ldd	r21, Y+7	; 0x07
    14fe:	41 30       	cpi	r20, 0x01	; 1
    1500:	51 05       	cpc	r21, r1
    1502:	59 f1       	breq	.+86     	; 0x155a <DIO_u8GetPinValue+0x9a>
    1504:	8e 81       	ldd	r24, Y+6	; 0x06
    1506:	9f 81       	ldd	r25, Y+7	; 0x07
    1508:	82 30       	cpi	r24, 0x02	; 2
    150a:	91 05       	cpc	r25, r1
    150c:	34 f4       	brge	.+12     	; 0x151a <DIO_u8GetPinValue+0x5a>
    150e:	2e 81       	ldd	r18, Y+6	; 0x06
    1510:	3f 81       	ldd	r19, Y+7	; 0x07
    1512:	21 15       	cp	r18, r1
    1514:	31 05       	cpc	r19, r1
    1516:	69 f0       	breq	.+26     	; 0x1532 <DIO_u8GetPinValue+0x72>
    1518:	5c c0       	rjmp	.+184    	; 0x15d2 <DIO_u8GetPinValue+0x112>
    151a:	4e 81       	ldd	r20, Y+6	; 0x06
    151c:	5f 81       	ldd	r21, Y+7	; 0x07
    151e:	42 30       	cpi	r20, 0x02	; 2
    1520:	51 05       	cpc	r21, r1
    1522:	79 f1       	breq	.+94     	; 0x1582 <DIO_u8GetPinValue+0xc2>
    1524:	8e 81       	ldd	r24, Y+6	; 0x06
    1526:	9f 81       	ldd	r25, Y+7	; 0x07
    1528:	83 30       	cpi	r24, 0x03	; 3
    152a:	91 05       	cpc	r25, r1
    152c:	09 f4       	brne	.+2      	; 0x1530 <DIO_u8GetPinValue+0x70>
    152e:	3d c0       	rjmp	.+122    	; 0x15aa <DIO_u8GetPinValue+0xea>
    1530:	50 c0       	rjmp	.+160    	; 0x15d2 <DIO_u8GetPinValue+0x112>
		case DIO_u8PORTA: *Copy_pu8Value = GET_BIT(PINA,Copy_u8Pin); break;
    1532:	e9 e3       	ldi	r30, 0x39	; 57
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	80 81       	ld	r24, Z
    1538:	28 2f       	mov	r18, r24
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	8b 81       	ldd	r24, Y+3	; 0x03
    153e:	88 2f       	mov	r24, r24
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	a9 01       	movw	r20, r18
    1544:	02 c0       	rjmp	.+4      	; 0x154a <DIO_u8GetPinValue+0x8a>
    1546:	55 95       	asr	r21
    1548:	47 95       	ror	r20
    154a:	8a 95       	dec	r24
    154c:	e2 f7       	brpl	.-8      	; 0x1546 <DIO_u8GetPinValue+0x86>
    154e:	ca 01       	movw	r24, r20
    1550:	81 70       	andi	r24, 0x01	; 1
    1552:	ec 81       	ldd	r30, Y+4	; 0x04
    1554:	fd 81       	ldd	r31, Y+5	; 0x05
    1556:	80 83       	st	Z, r24
    1558:	41 c0       	rjmp	.+130    	; 0x15dc <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTB: *Copy_pu8Value = GET_BIT(PINB,Copy_u8Pin); break;
    155a:	e6 e3       	ldi	r30, 0x36	; 54
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	80 81       	ld	r24, Z
    1560:	28 2f       	mov	r18, r24
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	8b 81       	ldd	r24, Y+3	; 0x03
    1566:	88 2f       	mov	r24, r24
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	a9 01       	movw	r20, r18
    156c:	02 c0       	rjmp	.+4      	; 0x1572 <DIO_u8GetPinValue+0xb2>
    156e:	55 95       	asr	r21
    1570:	47 95       	ror	r20
    1572:	8a 95       	dec	r24
    1574:	e2 f7       	brpl	.-8      	; 0x156e <DIO_u8GetPinValue+0xae>
    1576:	ca 01       	movw	r24, r20
    1578:	81 70       	andi	r24, 0x01	; 1
    157a:	ec 81       	ldd	r30, Y+4	; 0x04
    157c:	fd 81       	ldd	r31, Y+5	; 0x05
    157e:	80 83       	st	Z, r24
    1580:	2d c0       	rjmp	.+90     	; 0x15dc <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTC: *Copy_pu8Value = GET_BIT(PINC,Copy_u8Pin); break;
    1582:	e3 e3       	ldi	r30, 0x33	; 51
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	80 81       	ld	r24, Z
    1588:	28 2f       	mov	r18, r24
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	8b 81       	ldd	r24, Y+3	; 0x03
    158e:	88 2f       	mov	r24, r24
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	a9 01       	movw	r20, r18
    1594:	02 c0       	rjmp	.+4      	; 0x159a <DIO_u8GetPinValue+0xda>
    1596:	55 95       	asr	r21
    1598:	47 95       	ror	r20
    159a:	8a 95       	dec	r24
    159c:	e2 f7       	brpl	.-8      	; 0x1596 <DIO_u8GetPinValue+0xd6>
    159e:	ca 01       	movw	r24, r20
    15a0:	81 70       	andi	r24, 0x01	; 1
    15a2:	ec 81       	ldd	r30, Y+4	; 0x04
    15a4:	fd 81       	ldd	r31, Y+5	; 0x05
    15a6:	80 83       	st	Z, r24
    15a8:	19 c0       	rjmp	.+50     	; 0x15dc <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTD: *Copy_pu8Value = GET_BIT(PIND,Copy_u8Pin); break;
    15aa:	e0 e3       	ldi	r30, 0x30	; 48
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	80 81       	ld	r24, Z
    15b0:	28 2f       	mov	r18, r24
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	8b 81       	ldd	r24, Y+3	; 0x03
    15b6:	88 2f       	mov	r24, r24
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	a9 01       	movw	r20, r18
    15bc:	02 c0       	rjmp	.+4      	; 0x15c2 <DIO_u8GetPinValue+0x102>
    15be:	55 95       	asr	r21
    15c0:	47 95       	ror	r20
    15c2:	8a 95       	dec	r24
    15c4:	e2 f7       	brpl	.-8      	; 0x15be <DIO_u8GetPinValue+0xfe>
    15c6:	ca 01       	movw	r24, r20
    15c8:	81 70       	andi	r24, 0x01	; 1
    15ca:	ec 81       	ldd	r30, Y+4	; 0x04
    15cc:	fd 81       	ldd	r31, Y+5	; 0x05
    15ce:	80 83       	st	Z, r24
    15d0:	05 c0       	rjmp	.+10     	; 0x15dc <DIO_u8GetPinValue+0x11c>
		default:Local_u8ErrorState=1 ;
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	89 83       	std	Y+1, r24	; 0x01
    15d6:	02 c0       	rjmp	.+4      	; 0x15dc <DIO_u8GetPinValue+0x11c>
		}
	}
	else{
		Local_u8ErrorState=1;
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState ;
    15dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    15de:	27 96       	adiw	r28, 0x07	; 7
    15e0:	0f b6       	in	r0, 0x3f	; 63
    15e2:	f8 94       	cli
    15e4:	de bf       	out	0x3e, r29	; 62
    15e6:	0f be       	out	0x3f, r0	; 63
    15e8:	cd bf       	out	0x3d, r28	; 61
    15ea:	cf 91       	pop	r28
    15ec:	df 91       	pop	r29
    15ee:	08 95       	ret

000015f0 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8Port,u8* Copy_pu8Value){
    15f0:	df 93       	push	r29
    15f2:	cf 93       	push	r28
    15f4:	00 d0       	rcall	.+0      	; 0x15f6 <DIO_u8GetPortValue+0x6>
    15f6:	00 d0       	rcall	.+0      	; 0x15f8 <DIO_u8GetPortValue+0x8>
    15f8:	00 d0       	rcall	.+0      	; 0x15fa <DIO_u8GetPortValue+0xa>
    15fa:	cd b7       	in	r28, 0x3d	; 61
    15fc:	de b7       	in	r29, 0x3e	; 62
    15fe:	8a 83       	std	Y+2, r24	; 0x02
    1600:	7c 83       	std	Y+4, r23	; 0x04
    1602:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    1604:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8Port)
    1606:	8a 81       	ldd	r24, Y+2	; 0x02
    1608:	28 2f       	mov	r18, r24
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	3e 83       	std	Y+6, r19	; 0x06
    160e:	2d 83       	std	Y+5, r18	; 0x05
    1610:	8d 81       	ldd	r24, Y+5	; 0x05
    1612:	9e 81       	ldd	r25, Y+6	; 0x06
    1614:	81 30       	cpi	r24, 0x01	; 1
    1616:	91 05       	cpc	r25, r1
    1618:	e1 f0       	breq	.+56     	; 0x1652 <DIO_u8GetPortValue+0x62>
    161a:	2d 81       	ldd	r18, Y+5	; 0x05
    161c:	3e 81       	ldd	r19, Y+6	; 0x06
    161e:	22 30       	cpi	r18, 0x02	; 2
    1620:	31 05       	cpc	r19, r1
    1622:	2c f4       	brge	.+10     	; 0x162e <DIO_u8GetPortValue+0x3e>
    1624:	8d 81       	ldd	r24, Y+5	; 0x05
    1626:	9e 81       	ldd	r25, Y+6	; 0x06
    1628:	00 97       	sbiw	r24, 0x00	; 0
    162a:	61 f0       	breq	.+24     	; 0x1644 <DIO_u8GetPortValue+0x54>
    162c:	27 c0       	rjmp	.+78     	; 0x167c <DIO_u8GetPortValue+0x8c>
    162e:	2d 81       	ldd	r18, Y+5	; 0x05
    1630:	3e 81       	ldd	r19, Y+6	; 0x06
    1632:	22 30       	cpi	r18, 0x02	; 2
    1634:	31 05       	cpc	r19, r1
    1636:	a1 f0       	breq	.+40     	; 0x1660 <DIO_u8GetPortValue+0x70>
    1638:	8d 81       	ldd	r24, Y+5	; 0x05
    163a:	9e 81       	ldd	r25, Y+6	; 0x06
    163c:	83 30       	cpi	r24, 0x03	; 3
    163e:	91 05       	cpc	r25, r1
    1640:	b1 f0       	breq	.+44     	; 0x166e <DIO_u8GetPortValue+0x7e>
    1642:	1c c0       	rjmp	.+56     	; 0x167c <DIO_u8GetPortValue+0x8c>
	{
	case DIO_u8PORTA: *Copy_pu8Value = PINA; break;
    1644:	e9 e3       	ldi	r30, 0x39	; 57
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	80 81       	ld	r24, Z
    164a:	eb 81       	ldd	r30, Y+3	; 0x03
    164c:	fc 81       	ldd	r31, Y+4	; 0x04
    164e:	80 83       	st	Z, r24
    1650:	17 c0       	rjmp	.+46     	; 0x1680 <DIO_u8GetPortValue+0x90>
	case DIO_u8PORTB: *Copy_pu8Value = PINB; break;
    1652:	e6 e3       	ldi	r30, 0x36	; 54
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	80 81       	ld	r24, Z
    1658:	eb 81       	ldd	r30, Y+3	; 0x03
    165a:	fc 81       	ldd	r31, Y+4	; 0x04
    165c:	80 83       	st	Z, r24
    165e:	10 c0       	rjmp	.+32     	; 0x1680 <DIO_u8GetPortValue+0x90>
	case DIO_u8PORTC: *Copy_pu8Value = PINC; break;
    1660:	e3 e3       	ldi	r30, 0x33	; 51
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	80 81       	ld	r24, Z
    1666:	eb 81       	ldd	r30, Y+3	; 0x03
    1668:	fc 81       	ldd	r31, Y+4	; 0x04
    166a:	80 83       	st	Z, r24
    166c:	09 c0       	rjmp	.+18     	; 0x1680 <DIO_u8GetPortValue+0x90>
	case DIO_u8PORTD: *Copy_pu8Value = PIND; break;
    166e:	e0 e3       	ldi	r30, 0x30	; 48
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	80 81       	ld	r24, Z
    1674:	eb 81       	ldd	r30, Y+3	; 0x03
    1676:	fc 81       	ldd	r31, Y+4	; 0x04
    1678:	80 83       	st	Z, r24
    167a:	02 c0       	rjmp	.+4      	; 0x1680 <DIO_u8GetPortValue+0x90>
	default: Local_u8ErrorState=1 ;
    167c:	81 e0       	ldi	r24, 0x01	; 1
    167e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1680:	89 81       	ldd	r24, Y+1	; 0x01
}
    1682:	26 96       	adiw	r28, 0x06	; 6
    1684:	0f b6       	in	r0, 0x3f	; 63
    1686:	f8 94       	cli
    1688:	de bf       	out	0x3e, r29	; 62
    168a:	0f be       	out	0x3f, r0	; 63
    168c:	cd bf       	out	0x3d, r28	; 61
    168e:	cf 91       	pop	r28
    1690:	df 91       	pop	r29
    1692:	08 95       	ret

00001694 <KPD_u8GetPressedKey>:
#include "KPD_config.h"
#include "KPD_interface.h"
#include "KPD_private.h"

u8 KPD_u8GetPressedKey(void)
{
    1694:	df 93       	push	r29
    1696:	cf 93       	push	r28
    1698:	00 d0       	rcall	.+0      	; 0x169a <KPD_u8GetPressedKey+0x6>
    169a:	00 d0       	rcall	.+0      	; 0x169c <KPD_u8GetPressedKey+0x8>
    169c:	0f 92       	push	r0
    169e:	cd b7       	in	r28, 0x3d	; 61
    16a0:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8PressedKey = KPD_NO_PRESSED_KEY, Local_u8ColumnIdx,Local_u8RowIdx,Local_u8PinState;
    16a2:	8f ef       	ldi	r24, 0xFF	; 255
    16a4:	8b 83       	std	Y+3, r24	; 0x03
	static u8 Local_u8KPDArr[ROW_NUM][COLUMN_NUM] = KPD_ARR_VAL;
	static u8 Local_u8ColumnArr[COLUMN_NUM] ={KPD_COLUMN0_PIN,KPD_COLUMN1_PIN,KPD_COLUMN2_PIN,KPD_COLUMN3_PIN};
	static u8 Local_u8RowArr[ROW_NUM] = {KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};

	for(Local_u8ColumnIdx=0;Local_u8ColumnIdx<COLUMN_NUM;Local_u8ColumnIdx++)
    16a6:	1a 82       	std	Y+2, r1	; 0x02
    16a8:	5e c0       	rjmp	.+188    	; 0x1766 <KPD_u8GetPressedKey+0xd2>
	{
		//Activate Current Column
		DIO_u8SetPinValue(KPD_PORT,Local_u8ColumnArr[Local_u8ColumnIdx],DIO_u8PIN_LOW);
    16aa:	8a 81       	ldd	r24, Y+2	; 0x02
    16ac:	88 2f       	mov	r24, r24
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	fc 01       	movw	r30, r24
    16b2:	e1 50       	subi	r30, 0x01	; 1
    16b4:	ff 4f       	sbci	r31, 0xFF	; 255
    16b6:	90 81       	ld	r25, Z
    16b8:	80 e0       	ldi	r24, 0x00	; 0
    16ba:	69 2f       	mov	r22, r25
    16bc:	40 e0       	ldi	r20, 0x00	; 0
    16be:	0e 94 06 09 	call	0x120c	; 0x120c <DIO_u8SetPinValue>
		for(Local_u8RowIdx=0;Local_u8RowIdx<ROW_NUM;Local_u8RowIdx++)
    16c2:	19 82       	std	Y+1, r1	; 0x01
    16c4:	3d c0       	rjmp	.+122    	; 0x1740 <KPD_u8GetPressedKey+0xac>
		{
			//Read the current Row
			DIO_u8GetPinValue(KPD_PORT,Local_u8RowArr[Local_u8RowIdx],&Local_u8PinState);
    16c6:	89 81       	ldd	r24, Y+1	; 0x01
    16c8:	88 2f       	mov	r24, r24
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	fc 01       	movw	r30, r24
    16ce:	e5 50       	subi	r30, 0x05	; 5
    16d0:	ff 4f       	sbci	r31, 0xFF	; 255
    16d2:	90 81       	ld	r25, Z
    16d4:	9e 01       	movw	r18, r28
    16d6:	2c 5f       	subi	r18, 0xFC	; 252
    16d8:	3f 4f       	sbci	r19, 0xFF	; 255
    16da:	80 e0       	ldi	r24, 0x00	; 0
    16dc:	69 2f       	mov	r22, r25
    16de:	a9 01       	movw	r20, r18
    16e0:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <DIO_u8GetPinValue>
			//check if switch is pressed
			if(DIO_u8PIN_LOW==Local_u8PinState)
    16e4:	8c 81       	ldd	r24, Y+4	; 0x04
    16e6:	88 23       	and	r24, r24
    16e8:	41 f5       	brne	.+80     	; 0x173a <KPD_u8GetPressedKey+0xa6>
			{
				Local_u8PressedKey= Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumnIdx];
    16ea:	89 81       	ldd	r24, Y+1	; 0x01
    16ec:	48 2f       	mov	r20, r24
    16ee:	50 e0       	ldi	r21, 0x00	; 0
    16f0:	8a 81       	ldd	r24, Y+2	; 0x02
    16f2:	28 2f       	mov	r18, r24
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	ca 01       	movw	r24, r20
    16f8:	88 0f       	add	r24, r24
    16fa:	99 1f       	adc	r25, r25
    16fc:	88 0f       	add	r24, r24
    16fe:	99 1f       	adc	r25, r25
    1700:	82 0f       	add	r24, r18
    1702:	93 1f       	adc	r25, r19
    1704:	fc 01       	movw	r30, r24
    1706:	ed 5f       	subi	r30, 0xFD	; 253
    1708:	fe 4f       	sbci	r31, 0xFE	; 254
    170a:	80 81       	ld	r24, Z
    170c:	8b 83       	std	Y+3, r24	; 0x03
    170e:	0f c0       	rjmp	.+30     	; 0x172e <KPD_u8GetPressedKey+0x9a>
				//polling(busy waiting until the key is released
				while(DIO_u8PIN_LOW==Local_u8PinState)
				{
					DIO_u8GetPinValue(KPD_PORT,Local_u8RowArr[Local_u8RowIdx],&Local_u8PinState);
    1710:	89 81       	ldd	r24, Y+1	; 0x01
    1712:	88 2f       	mov	r24, r24
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	fc 01       	movw	r30, r24
    1718:	e5 50       	subi	r30, 0x05	; 5
    171a:	ff 4f       	sbci	r31, 0xFF	; 255
    171c:	90 81       	ld	r25, Z
    171e:	9e 01       	movw	r18, r28
    1720:	2c 5f       	subi	r18, 0xFC	; 252
    1722:	3f 4f       	sbci	r19, 0xFF	; 255
    1724:	80 e0       	ldi	r24, 0x00	; 0
    1726:	69 2f       	mov	r22, r25
    1728:	a9 01       	movw	r20, r18
    172a:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <DIO_u8GetPinValue>
			//check if switch is pressed
			if(DIO_u8PIN_LOW==Local_u8PinState)
			{
				Local_u8PressedKey= Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumnIdx];
				//polling(busy waiting until the key is released
				while(DIO_u8PIN_LOW==Local_u8PinState)
    172e:	8c 81       	ldd	r24, Y+4	; 0x04
    1730:	88 23       	and	r24, r24
    1732:	71 f3       	breq	.-36     	; 0x1710 <KPD_u8GetPressedKey+0x7c>
				{
					DIO_u8GetPinValue(KPD_PORT,Local_u8RowArr[Local_u8RowIdx],&Local_u8PinState);
				}
				return Local_u8PressedKey;
    1734:	8b 81       	ldd	r24, Y+3	; 0x03
    1736:	8d 83       	std	Y+5, r24	; 0x05
    1738:	1c c0       	rjmp	.+56     	; 0x1772 <KPD_u8GetPressedKey+0xde>

	for(Local_u8ColumnIdx=0;Local_u8ColumnIdx<COLUMN_NUM;Local_u8ColumnIdx++)
	{
		//Activate Current Column
		DIO_u8SetPinValue(KPD_PORT,Local_u8ColumnArr[Local_u8ColumnIdx],DIO_u8PIN_LOW);
		for(Local_u8RowIdx=0;Local_u8RowIdx<ROW_NUM;Local_u8RowIdx++)
    173a:	89 81       	ldd	r24, Y+1	; 0x01
    173c:	8f 5f       	subi	r24, 0xFF	; 255
    173e:	89 83       	std	Y+1, r24	; 0x01
    1740:	89 81       	ldd	r24, Y+1	; 0x01
    1742:	84 30       	cpi	r24, 0x04	; 4
    1744:	08 f4       	brcc	.+2      	; 0x1748 <KPD_u8GetPressedKey+0xb4>
    1746:	bf cf       	rjmp	.-130    	; 0x16c6 <KPD_u8GetPressedKey+0x32>
				}
				return Local_u8PressedKey;
			}
		}
		//Activate Current Column
		DIO_u8SetPinValue(KPD_PORT,Local_u8ColumnArr[Local_u8ColumnIdx],DIO_u8PIN_HIGH);
    1748:	8a 81       	ldd	r24, Y+2	; 0x02
    174a:	88 2f       	mov	r24, r24
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	fc 01       	movw	r30, r24
    1750:	e1 50       	subi	r30, 0x01	; 1
    1752:	ff 4f       	sbci	r31, 0xFF	; 255
    1754:	90 81       	ld	r25, Z
    1756:	80 e0       	ldi	r24, 0x00	; 0
    1758:	69 2f       	mov	r22, r25
    175a:	41 e0       	ldi	r20, 0x01	; 1
    175c:	0e 94 06 09 	call	0x120c	; 0x120c <DIO_u8SetPinValue>
	u8 Local_u8PressedKey = KPD_NO_PRESSED_KEY, Local_u8ColumnIdx,Local_u8RowIdx,Local_u8PinState;
	static u8 Local_u8KPDArr[ROW_NUM][COLUMN_NUM] = KPD_ARR_VAL;
	static u8 Local_u8ColumnArr[COLUMN_NUM] ={KPD_COLUMN0_PIN,KPD_COLUMN1_PIN,KPD_COLUMN2_PIN,KPD_COLUMN3_PIN};
	static u8 Local_u8RowArr[ROW_NUM] = {KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};

	for(Local_u8ColumnIdx=0;Local_u8ColumnIdx<COLUMN_NUM;Local_u8ColumnIdx++)
    1760:	8a 81       	ldd	r24, Y+2	; 0x02
    1762:	8f 5f       	subi	r24, 0xFF	; 255
    1764:	8a 83       	std	Y+2, r24	; 0x02
    1766:	8a 81       	ldd	r24, Y+2	; 0x02
    1768:	84 30       	cpi	r24, 0x04	; 4
    176a:	08 f4       	brcc	.+2      	; 0x176e <KPD_u8GetPressedKey+0xda>
    176c:	9e cf       	rjmp	.-196    	; 0x16aa <KPD_u8GetPressedKey+0x16>
		}
		//Activate Current Column
		DIO_u8SetPinValue(KPD_PORT,Local_u8ColumnArr[Local_u8ColumnIdx],DIO_u8PIN_HIGH);
	}

	return Local_u8PressedKey;
    176e:	8b 81       	ldd	r24, Y+3	; 0x03
    1770:	8d 83       	std	Y+5, r24	; 0x05
    1772:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1774:	0f 90       	pop	r0
    1776:	0f 90       	pop	r0
    1778:	0f 90       	pop	r0
    177a:	0f 90       	pop	r0
    177c:	0f 90       	pop	r0
    177e:	cf 91       	pop	r28
    1780:	df 91       	pop	r29
    1782:	08 95       	ret

00001784 <PORT_voidInit>:
#include "PORT_config.h"
#include "PORT_private.h"
#include "PORT_interface.h"
#include "PORT_register.h"

void PORT_voidInit(){
    1784:	df 93       	push	r29
    1786:	cf 93       	push	r28
    1788:	cd b7       	in	r28, 0x3d	; 61
    178a:	de b7       	in	r29, 0x3e	; 62
    DDRA=PORTA_DIR;
    178c:	ea e3       	ldi	r30, 0x3A	; 58
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	8f e0       	ldi	r24, 0x0F	; 15
    1792:	80 83       	st	Z, r24
    DDRB=PORTB_DIR;
    1794:	e7 e3       	ldi	r30, 0x37	; 55
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	8f e3       	ldi	r24, 0x3F	; 63
    179a:	80 83       	st	Z, r24
    DDRC=PORTC_DIR;
    179c:	e4 e3       	ldi	r30, 0x34	; 52
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	8f ef       	ldi	r24, 0xFF	; 255
    17a2:	80 83       	st	Z, r24
    DDRD=PORTD_DIR;
    17a4:	e1 e3       	ldi	r30, 0x31	; 49
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	80 ee       	ldi	r24, 0xE0	; 224
    17aa:	80 83       	st	Z, r24
    
    PORTA=PORTA_INIT_VAL;
    17ac:	eb e3       	ldi	r30, 0x3B	; 59
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	8f ef       	ldi	r24, 0xFF	; 255
    17b2:	80 83       	st	Z, r24
    PORTB=PORTB_INIT_VAL;
    17b4:	e8 e3       	ldi	r30, 0x38	; 56
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	10 82       	st	Z, r1
    PORTC=PORTC_INIT_VAL;
    17ba:	e5 e3       	ldi	r30, 0x35	; 53
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	10 82       	st	Z, r1
    PORTD=PORTD_INIT_VAL;
    17c0:	e2 e3       	ldi	r30, 0x32	; 50
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	10 82       	st	Z, r1
}
    17c6:	cf 91       	pop	r28
    17c8:	df 91       	pop	r29
    17ca:	08 95       	ret

000017cc <STPR_voidRotateClockwise>:

#include "STPR_config.h"
#include "STPR_private.h"
#include "STPR_Interface.h"

void STPR_voidRotateClockwise(){
    17cc:	df 93       	push	r29
    17ce:	cf 93       	push	r28
    17d0:	cd b7       	in	r28, 0x3d	; 61
    17d2:	de b7       	in	r29, 0x3e	; 62
    17d4:	e8 97       	sbiw	r28, 0x38	; 56
    17d6:	0f b6       	in	r0, 0x3f	; 63
    17d8:	f8 94       	cli
    17da:	de bf       	out	0x3e, r29	; 62
    17dc:	0f be       	out	0x3f, r0	; 63
    17de:	cd bf       	out	0x3d, r28	; 61
	DIO_u8SetPinValue(STPR_PORT,STPR_COIL_BLUE,DIO_u8PIN_LOW);
    17e0:	81 e0       	ldi	r24, 0x01	; 1
    17e2:	60 e0       	ldi	r22, 0x00	; 0
    17e4:	40 e0       	ldi	r20, 0x00	; 0
    17e6:	0e 94 06 09 	call	0x120c	; 0x120c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STPR_PORT,STPR_COIL_PINK,DIO_u8PIN_LOW);
    17ea:	81 e0       	ldi	r24, 0x01	; 1
    17ec:	61 e0       	ldi	r22, 0x01	; 1
    17ee:	40 e0       	ldi	r20, 0x00	; 0
    17f0:	0e 94 06 09 	call	0x120c	; 0x120c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STPR_PORT,STPR_COIL_YELLOW,DIO_u8PIN_LOW);
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	62 e0       	ldi	r22, 0x02	; 2
    17f8:	40 e0       	ldi	r20, 0x00	; 0
    17fa:	0e 94 06 09 	call	0x120c	; 0x120c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STPR_PORT,STPR_COIL_ORANGE,DIO_u8PIN_HIGH);
    17fe:	81 e0       	ldi	r24, 0x01	; 1
    1800:	63 e0       	ldi	r22, 0x03	; 3
    1802:	41 e0       	ldi	r20, 0x01	; 1
    1804:	0e 94 06 09 	call	0x120c	; 0x120c <DIO_u8SetPinValue>
    1808:	80 e0       	ldi	r24, 0x00	; 0
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	a0 e0       	ldi	r26, 0x00	; 0
    180e:	b0 e4       	ldi	r27, 0x40	; 64
    1810:	8d ab       	std	Y+53, r24	; 0x35
    1812:	9e ab       	std	Y+54, r25	; 0x36
    1814:	af ab       	std	Y+55, r26	; 0x37
    1816:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1818:	6d a9       	ldd	r22, Y+53	; 0x35
    181a:	7e a9       	ldd	r23, Y+54	; 0x36
    181c:	8f a9       	ldd	r24, Y+55	; 0x37
    181e:	98 ad       	ldd	r25, Y+56	; 0x38
    1820:	20 e0       	ldi	r18, 0x00	; 0
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	4a ef       	ldi	r20, 0xFA	; 250
    1826:	54 e4       	ldi	r21, 0x44	; 68
    1828:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    182c:	dc 01       	movw	r26, r24
    182e:	cb 01       	movw	r24, r22
    1830:	89 ab       	std	Y+49, r24	; 0x31
    1832:	9a ab       	std	Y+50, r25	; 0x32
    1834:	ab ab       	std	Y+51, r26	; 0x33
    1836:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1838:	69 a9       	ldd	r22, Y+49	; 0x31
    183a:	7a a9       	ldd	r23, Y+50	; 0x32
    183c:	8b a9       	ldd	r24, Y+51	; 0x33
    183e:	9c a9       	ldd	r25, Y+52	; 0x34
    1840:	20 e0       	ldi	r18, 0x00	; 0
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	40 e8       	ldi	r20, 0x80	; 128
    1846:	5f e3       	ldi	r21, 0x3F	; 63
    1848:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    184c:	88 23       	and	r24, r24
    184e:	2c f4       	brge	.+10     	; 0x185a <STPR_voidRotateClockwise+0x8e>
		__ticks = 1;
    1850:	81 e0       	ldi	r24, 0x01	; 1
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	98 ab       	std	Y+48, r25	; 0x30
    1856:	8f a7       	std	Y+47, r24	; 0x2f
    1858:	3f c0       	rjmp	.+126    	; 0x18d8 <STPR_voidRotateClockwise+0x10c>
	else if (__tmp > 65535)
    185a:	69 a9       	ldd	r22, Y+49	; 0x31
    185c:	7a a9       	ldd	r23, Y+50	; 0x32
    185e:	8b a9       	ldd	r24, Y+51	; 0x33
    1860:	9c a9       	ldd	r25, Y+52	; 0x34
    1862:	20 e0       	ldi	r18, 0x00	; 0
    1864:	3f ef       	ldi	r19, 0xFF	; 255
    1866:	4f e7       	ldi	r20, 0x7F	; 127
    1868:	57 e4       	ldi	r21, 0x47	; 71
    186a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    186e:	18 16       	cp	r1, r24
    1870:	4c f5       	brge	.+82     	; 0x18c4 <STPR_voidRotateClockwise+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1872:	6d a9       	ldd	r22, Y+53	; 0x35
    1874:	7e a9       	ldd	r23, Y+54	; 0x36
    1876:	8f a9       	ldd	r24, Y+55	; 0x37
    1878:	98 ad       	ldd	r25, Y+56	; 0x38
    187a:	20 e0       	ldi	r18, 0x00	; 0
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	40 e2       	ldi	r20, 0x20	; 32
    1880:	51 e4       	ldi	r21, 0x41	; 65
    1882:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1886:	dc 01       	movw	r26, r24
    1888:	cb 01       	movw	r24, r22
    188a:	bc 01       	movw	r22, r24
    188c:	cd 01       	movw	r24, r26
    188e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1892:	dc 01       	movw	r26, r24
    1894:	cb 01       	movw	r24, r22
    1896:	98 ab       	std	Y+48, r25	; 0x30
    1898:	8f a7       	std	Y+47, r24	; 0x2f
    189a:	0f c0       	rjmp	.+30     	; 0x18ba <STPR_voidRotateClockwise+0xee>
    189c:	88 ec       	ldi	r24, 0xC8	; 200
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	9e a7       	std	Y+46, r25	; 0x2e
    18a2:	8d a7       	std	Y+45, r24	; 0x2d
    18a4:	8d a5       	ldd	r24, Y+45	; 0x2d
    18a6:	9e a5       	ldd	r25, Y+46	; 0x2e
    18a8:	01 97       	sbiw	r24, 0x01	; 1
    18aa:	f1 f7       	brne	.-4      	; 0x18a8 <STPR_voidRotateClockwise+0xdc>
    18ac:	9e a7       	std	Y+46, r25	; 0x2e
    18ae:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    18b2:	98 a9       	ldd	r25, Y+48	; 0x30
    18b4:	01 97       	sbiw	r24, 0x01	; 1
    18b6:	98 ab       	std	Y+48, r25	; 0x30
    18b8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    18bc:	98 a9       	ldd	r25, Y+48	; 0x30
    18be:	00 97       	sbiw	r24, 0x00	; 0
    18c0:	69 f7       	brne	.-38     	; 0x189c <STPR_voidRotateClockwise+0xd0>
    18c2:	14 c0       	rjmp	.+40     	; 0x18ec <STPR_voidRotateClockwise+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18c4:	69 a9       	ldd	r22, Y+49	; 0x31
    18c6:	7a a9       	ldd	r23, Y+50	; 0x32
    18c8:	8b a9       	ldd	r24, Y+51	; 0x33
    18ca:	9c a9       	ldd	r25, Y+52	; 0x34
    18cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18d0:	dc 01       	movw	r26, r24
    18d2:	cb 01       	movw	r24, r22
    18d4:	98 ab       	std	Y+48, r25	; 0x30
    18d6:	8f a7       	std	Y+47, r24	; 0x2f
    18d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    18da:	98 a9       	ldd	r25, Y+48	; 0x30
    18dc:	9c a7       	std	Y+44, r25	; 0x2c
    18de:	8b a7       	std	Y+43, r24	; 0x2b
    18e0:	8b a5       	ldd	r24, Y+43	; 0x2b
    18e2:	9c a5       	ldd	r25, Y+44	; 0x2c
    18e4:	01 97       	sbiw	r24, 0x01	; 1
    18e6:	f1 f7       	brne	.-4      	; 0x18e4 <STPR_voidRotateClockwise+0x118>
    18e8:	9c a7       	std	Y+44, r25	; 0x2c
    18ea:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	DIO_u8SetPinValue(STPR_PORT,STPR_COIL_BLUE,DIO_u8PIN_LOW);
    18ec:	81 e0       	ldi	r24, 0x01	; 1
    18ee:	60 e0       	ldi	r22, 0x00	; 0
    18f0:	40 e0       	ldi	r20, 0x00	; 0
    18f2:	0e 94 06 09 	call	0x120c	; 0x120c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STPR_PORT,STPR_COIL_PINK,DIO_u8PIN_LOW);
    18f6:	81 e0       	ldi	r24, 0x01	; 1
    18f8:	61 e0       	ldi	r22, 0x01	; 1
    18fa:	40 e0       	ldi	r20, 0x00	; 0
    18fc:	0e 94 06 09 	call	0x120c	; 0x120c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STPR_PORT,STPR_COIL_YELLOW,DIO_u8PIN_HIGH);
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	62 e0       	ldi	r22, 0x02	; 2
    1904:	41 e0       	ldi	r20, 0x01	; 1
    1906:	0e 94 06 09 	call	0x120c	; 0x120c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STPR_PORT,STPR_COIL_ORANGE,DIO_u8PIN_LOW);
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	63 e0       	ldi	r22, 0x03	; 3
    190e:	40 e0       	ldi	r20, 0x00	; 0
    1910:	0e 94 06 09 	call	0x120c	; 0x120c <DIO_u8SetPinValue>
    1914:	80 e0       	ldi	r24, 0x00	; 0
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	a0 e0       	ldi	r26, 0x00	; 0
    191a:	b0 e4       	ldi	r27, 0x40	; 64
    191c:	8f a3       	std	Y+39, r24	; 0x27
    191e:	98 a7       	std	Y+40, r25	; 0x28
    1920:	a9 a7       	std	Y+41, r26	; 0x29
    1922:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1924:	6f a1       	ldd	r22, Y+39	; 0x27
    1926:	78 a5       	ldd	r23, Y+40	; 0x28
    1928:	89 a5       	ldd	r24, Y+41	; 0x29
    192a:	9a a5       	ldd	r25, Y+42	; 0x2a
    192c:	20 e0       	ldi	r18, 0x00	; 0
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	4a ef       	ldi	r20, 0xFA	; 250
    1932:	54 e4       	ldi	r21, 0x44	; 68
    1934:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1938:	dc 01       	movw	r26, r24
    193a:	cb 01       	movw	r24, r22
    193c:	8b a3       	std	Y+35, r24	; 0x23
    193e:	9c a3       	std	Y+36, r25	; 0x24
    1940:	ad a3       	std	Y+37, r26	; 0x25
    1942:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1944:	6b a1       	ldd	r22, Y+35	; 0x23
    1946:	7c a1       	ldd	r23, Y+36	; 0x24
    1948:	8d a1       	ldd	r24, Y+37	; 0x25
    194a:	9e a1       	ldd	r25, Y+38	; 0x26
    194c:	20 e0       	ldi	r18, 0x00	; 0
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	40 e8       	ldi	r20, 0x80	; 128
    1952:	5f e3       	ldi	r21, 0x3F	; 63
    1954:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1958:	88 23       	and	r24, r24
    195a:	2c f4       	brge	.+10     	; 0x1966 <STPR_voidRotateClockwise+0x19a>
		__ticks = 1;
    195c:	81 e0       	ldi	r24, 0x01	; 1
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	9a a3       	std	Y+34, r25	; 0x22
    1962:	89 a3       	std	Y+33, r24	; 0x21
    1964:	3f c0       	rjmp	.+126    	; 0x19e4 <STPR_voidRotateClockwise+0x218>
	else if (__tmp > 65535)
    1966:	6b a1       	ldd	r22, Y+35	; 0x23
    1968:	7c a1       	ldd	r23, Y+36	; 0x24
    196a:	8d a1       	ldd	r24, Y+37	; 0x25
    196c:	9e a1       	ldd	r25, Y+38	; 0x26
    196e:	20 e0       	ldi	r18, 0x00	; 0
    1970:	3f ef       	ldi	r19, 0xFF	; 255
    1972:	4f e7       	ldi	r20, 0x7F	; 127
    1974:	57 e4       	ldi	r21, 0x47	; 71
    1976:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    197a:	18 16       	cp	r1, r24
    197c:	4c f5       	brge	.+82     	; 0x19d0 <STPR_voidRotateClockwise+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    197e:	6f a1       	ldd	r22, Y+39	; 0x27
    1980:	78 a5       	ldd	r23, Y+40	; 0x28
    1982:	89 a5       	ldd	r24, Y+41	; 0x29
    1984:	9a a5       	ldd	r25, Y+42	; 0x2a
    1986:	20 e0       	ldi	r18, 0x00	; 0
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	40 e2       	ldi	r20, 0x20	; 32
    198c:	51 e4       	ldi	r21, 0x41	; 65
    198e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1992:	dc 01       	movw	r26, r24
    1994:	cb 01       	movw	r24, r22
    1996:	bc 01       	movw	r22, r24
    1998:	cd 01       	movw	r24, r26
    199a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    199e:	dc 01       	movw	r26, r24
    19a0:	cb 01       	movw	r24, r22
    19a2:	9a a3       	std	Y+34, r25	; 0x22
    19a4:	89 a3       	std	Y+33, r24	; 0x21
    19a6:	0f c0       	rjmp	.+30     	; 0x19c6 <STPR_voidRotateClockwise+0x1fa>
    19a8:	88 ec       	ldi	r24, 0xC8	; 200
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	98 a3       	std	Y+32, r25	; 0x20
    19ae:	8f 8f       	std	Y+31, r24	; 0x1f
    19b0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    19b2:	98 a1       	ldd	r25, Y+32	; 0x20
    19b4:	01 97       	sbiw	r24, 0x01	; 1
    19b6:	f1 f7       	brne	.-4      	; 0x19b4 <STPR_voidRotateClockwise+0x1e8>
    19b8:	98 a3       	std	Y+32, r25	; 0x20
    19ba:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19bc:	89 a1       	ldd	r24, Y+33	; 0x21
    19be:	9a a1       	ldd	r25, Y+34	; 0x22
    19c0:	01 97       	sbiw	r24, 0x01	; 1
    19c2:	9a a3       	std	Y+34, r25	; 0x22
    19c4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19c6:	89 a1       	ldd	r24, Y+33	; 0x21
    19c8:	9a a1       	ldd	r25, Y+34	; 0x22
    19ca:	00 97       	sbiw	r24, 0x00	; 0
    19cc:	69 f7       	brne	.-38     	; 0x19a8 <STPR_voidRotateClockwise+0x1dc>
    19ce:	14 c0       	rjmp	.+40     	; 0x19f8 <STPR_voidRotateClockwise+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19d0:	6b a1       	ldd	r22, Y+35	; 0x23
    19d2:	7c a1       	ldd	r23, Y+36	; 0x24
    19d4:	8d a1       	ldd	r24, Y+37	; 0x25
    19d6:	9e a1       	ldd	r25, Y+38	; 0x26
    19d8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19dc:	dc 01       	movw	r26, r24
    19de:	cb 01       	movw	r24, r22
    19e0:	9a a3       	std	Y+34, r25	; 0x22
    19e2:	89 a3       	std	Y+33, r24	; 0x21
    19e4:	89 a1       	ldd	r24, Y+33	; 0x21
    19e6:	9a a1       	ldd	r25, Y+34	; 0x22
    19e8:	9e 8f       	std	Y+30, r25	; 0x1e
    19ea:	8d 8f       	std	Y+29, r24	; 0x1d
    19ec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19ee:	9e 8d       	ldd	r25, Y+30	; 0x1e
    19f0:	01 97       	sbiw	r24, 0x01	; 1
    19f2:	f1 f7       	brne	.-4      	; 0x19f0 <STPR_voidRotateClockwise+0x224>
    19f4:	9e 8f       	std	Y+30, r25	; 0x1e
    19f6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	DIO_u8SetPinValue(STPR_PORT,STPR_COIL_BLUE,DIO_u8PIN_LOW);
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	60 e0       	ldi	r22, 0x00	; 0
    19fc:	40 e0       	ldi	r20, 0x00	; 0
    19fe:	0e 94 06 09 	call	0x120c	; 0x120c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STPR_PORT,STPR_COIL_PINK,DIO_u8PIN_HIGH);
    1a02:	81 e0       	ldi	r24, 0x01	; 1
    1a04:	61 e0       	ldi	r22, 0x01	; 1
    1a06:	41 e0       	ldi	r20, 0x01	; 1
    1a08:	0e 94 06 09 	call	0x120c	; 0x120c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STPR_PORT,STPR_COIL_YELLOW,DIO_u8PIN_LOW);
    1a0c:	81 e0       	ldi	r24, 0x01	; 1
    1a0e:	62 e0       	ldi	r22, 0x02	; 2
    1a10:	40 e0       	ldi	r20, 0x00	; 0
    1a12:	0e 94 06 09 	call	0x120c	; 0x120c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STPR_PORT,STPR_COIL_ORANGE,DIO_u8PIN_LOW);
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	63 e0       	ldi	r22, 0x03	; 3
    1a1a:	40 e0       	ldi	r20, 0x00	; 0
    1a1c:	0e 94 06 09 	call	0x120c	; 0x120c <DIO_u8SetPinValue>
    1a20:	80 e0       	ldi	r24, 0x00	; 0
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	a0 e0       	ldi	r26, 0x00	; 0
    1a26:	b0 e4       	ldi	r27, 0x40	; 64
    1a28:	89 8f       	std	Y+25, r24	; 0x19
    1a2a:	9a 8f       	std	Y+26, r25	; 0x1a
    1a2c:	ab 8f       	std	Y+27, r26	; 0x1b
    1a2e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a30:	69 8d       	ldd	r22, Y+25	; 0x19
    1a32:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a34:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a36:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a38:	20 e0       	ldi	r18, 0x00	; 0
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	4a ef       	ldi	r20, 0xFA	; 250
    1a3e:	54 e4       	ldi	r21, 0x44	; 68
    1a40:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a44:	dc 01       	movw	r26, r24
    1a46:	cb 01       	movw	r24, r22
    1a48:	8d 8b       	std	Y+21, r24	; 0x15
    1a4a:	9e 8b       	std	Y+22, r25	; 0x16
    1a4c:	af 8b       	std	Y+23, r26	; 0x17
    1a4e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a50:	6d 89       	ldd	r22, Y+21	; 0x15
    1a52:	7e 89       	ldd	r23, Y+22	; 0x16
    1a54:	8f 89       	ldd	r24, Y+23	; 0x17
    1a56:	98 8d       	ldd	r25, Y+24	; 0x18
    1a58:	20 e0       	ldi	r18, 0x00	; 0
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	40 e8       	ldi	r20, 0x80	; 128
    1a5e:	5f e3       	ldi	r21, 0x3F	; 63
    1a60:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a64:	88 23       	and	r24, r24
    1a66:	2c f4       	brge	.+10     	; 0x1a72 <STPR_voidRotateClockwise+0x2a6>
		__ticks = 1;
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	9c 8b       	std	Y+20, r25	; 0x14
    1a6e:	8b 8b       	std	Y+19, r24	; 0x13
    1a70:	3f c0       	rjmp	.+126    	; 0x1af0 <STPR_voidRotateClockwise+0x324>
	else if (__tmp > 65535)
    1a72:	6d 89       	ldd	r22, Y+21	; 0x15
    1a74:	7e 89       	ldd	r23, Y+22	; 0x16
    1a76:	8f 89       	ldd	r24, Y+23	; 0x17
    1a78:	98 8d       	ldd	r25, Y+24	; 0x18
    1a7a:	20 e0       	ldi	r18, 0x00	; 0
    1a7c:	3f ef       	ldi	r19, 0xFF	; 255
    1a7e:	4f e7       	ldi	r20, 0x7F	; 127
    1a80:	57 e4       	ldi	r21, 0x47	; 71
    1a82:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a86:	18 16       	cp	r1, r24
    1a88:	4c f5       	brge	.+82     	; 0x1adc <STPR_voidRotateClockwise+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a8a:	69 8d       	ldd	r22, Y+25	; 0x19
    1a8c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a8e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a90:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a92:	20 e0       	ldi	r18, 0x00	; 0
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	40 e2       	ldi	r20, 0x20	; 32
    1a98:	51 e4       	ldi	r21, 0x41	; 65
    1a9a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a9e:	dc 01       	movw	r26, r24
    1aa0:	cb 01       	movw	r24, r22
    1aa2:	bc 01       	movw	r22, r24
    1aa4:	cd 01       	movw	r24, r26
    1aa6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1aaa:	dc 01       	movw	r26, r24
    1aac:	cb 01       	movw	r24, r22
    1aae:	9c 8b       	std	Y+20, r25	; 0x14
    1ab0:	8b 8b       	std	Y+19, r24	; 0x13
    1ab2:	0f c0       	rjmp	.+30     	; 0x1ad2 <STPR_voidRotateClockwise+0x306>
    1ab4:	88 ec       	ldi	r24, 0xC8	; 200
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	9a 8b       	std	Y+18, r25	; 0x12
    1aba:	89 8b       	std	Y+17, r24	; 0x11
    1abc:	89 89       	ldd	r24, Y+17	; 0x11
    1abe:	9a 89       	ldd	r25, Y+18	; 0x12
    1ac0:	01 97       	sbiw	r24, 0x01	; 1
    1ac2:	f1 f7       	brne	.-4      	; 0x1ac0 <STPR_voidRotateClockwise+0x2f4>
    1ac4:	9a 8b       	std	Y+18, r25	; 0x12
    1ac6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ac8:	8b 89       	ldd	r24, Y+19	; 0x13
    1aca:	9c 89       	ldd	r25, Y+20	; 0x14
    1acc:	01 97       	sbiw	r24, 0x01	; 1
    1ace:	9c 8b       	std	Y+20, r25	; 0x14
    1ad0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ad2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ad4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ad6:	00 97       	sbiw	r24, 0x00	; 0
    1ad8:	69 f7       	brne	.-38     	; 0x1ab4 <STPR_voidRotateClockwise+0x2e8>
    1ada:	14 c0       	rjmp	.+40     	; 0x1b04 <STPR_voidRotateClockwise+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1adc:	6d 89       	ldd	r22, Y+21	; 0x15
    1ade:	7e 89       	ldd	r23, Y+22	; 0x16
    1ae0:	8f 89       	ldd	r24, Y+23	; 0x17
    1ae2:	98 8d       	ldd	r25, Y+24	; 0x18
    1ae4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ae8:	dc 01       	movw	r26, r24
    1aea:	cb 01       	movw	r24, r22
    1aec:	9c 8b       	std	Y+20, r25	; 0x14
    1aee:	8b 8b       	std	Y+19, r24	; 0x13
    1af0:	8b 89       	ldd	r24, Y+19	; 0x13
    1af2:	9c 89       	ldd	r25, Y+20	; 0x14
    1af4:	98 8b       	std	Y+16, r25	; 0x10
    1af6:	8f 87       	std	Y+15, r24	; 0x0f
    1af8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1afa:	98 89       	ldd	r25, Y+16	; 0x10
    1afc:	01 97       	sbiw	r24, 0x01	; 1
    1afe:	f1 f7       	brne	.-4      	; 0x1afc <STPR_voidRotateClockwise+0x330>
    1b00:	98 8b       	std	Y+16, r25	; 0x10
    1b02:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinValue(STPR_PORT,STPR_COIL_BLUE,DIO_u8PIN_HIGH);
    1b04:	81 e0       	ldi	r24, 0x01	; 1
    1b06:	60 e0       	ldi	r22, 0x00	; 0
    1b08:	41 e0       	ldi	r20, 0x01	; 1
    1b0a:	0e 94 06 09 	call	0x120c	; 0x120c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STPR_PORT,STPR_COIL_PINK,DIO_u8PIN_LOW);
    1b0e:	81 e0       	ldi	r24, 0x01	; 1
    1b10:	61 e0       	ldi	r22, 0x01	; 1
    1b12:	40 e0       	ldi	r20, 0x00	; 0
    1b14:	0e 94 06 09 	call	0x120c	; 0x120c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STPR_PORT,STPR_COIL_YELLOW,DIO_u8PIN_LOW);
    1b18:	81 e0       	ldi	r24, 0x01	; 1
    1b1a:	62 e0       	ldi	r22, 0x02	; 2
    1b1c:	40 e0       	ldi	r20, 0x00	; 0
    1b1e:	0e 94 06 09 	call	0x120c	; 0x120c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STPR_PORT,STPR_COIL_ORANGE,DIO_u8PIN_LOW);
    1b22:	81 e0       	ldi	r24, 0x01	; 1
    1b24:	63 e0       	ldi	r22, 0x03	; 3
    1b26:	40 e0       	ldi	r20, 0x00	; 0
    1b28:	0e 94 06 09 	call	0x120c	; 0x120c <DIO_u8SetPinValue>
    1b2c:	80 e0       	ldi	r24, 0x00	; 0
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	a0 e0       	ldi	r26, 0x00	; 0
    1b32:	b0 e4       	ldi	r27, 0x40	; 64
    1b34:	8b 87       	std	Y+11, r24	; 0x0b
    1b36:	9c 87       	std	Y+12, r25	; 0x0c
    1b38:	ad 87       	std	Y+13, r26	; 0x0d
    1b3a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b40:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b42:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b44:	20 e0       	ldi	r18, 0x00	; 0
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	4a ef       	ldi	r20, 0xFA	; 250
    1b4a:	54 e4       	ldi	r21, 0x44	; 68
    1b4c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b50:	dc 01       	movw	r26, r24
    1b52:	cb 01       	movw	r24, r22
    1b54:	8f 83       	std	Y+7, r24	; 0x07
    1b56:	98 87       	std	Y+8, r25	; 0x08
    1b58:	a9 87       	std	Y+9, r26	; 0x09
    1b5a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b5c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b5e:	78 85       	ldd	r23, Y+8	; 0x08
    1b60:	89 85       	ldd	r24, Y+9	; 0x09
    1b62:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b64:	20 e0       	ldi	r18, 0x00	; 0
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	40 e8       	ldi	r20, 0x80	; 128
    1b6a:	5f e3       	ldi	r21, 0x3F	; 63
    1b6c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b70:	88 23       	and	r24, r24
    1b72:	2c f4       	brge	.+10     	; 0x1b7e <STPR_voidRotateClockwise+0x3b2>
		__ticks = 1;
    1b74:	81 e0       	ldi	r24, 0x01	; 1
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	9e 83       	std	Y+6, r25	; 0x06
    1b7a:	8d 83       	std	Y+5, r24	; 0x05
    1b7c:	3f c0       	rjmp	.+126    	; 0x1bfc <STPR_voidRotateClockwise+0x430>
	else if (__tmp > 65535)
    1b7e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b80:	78 85       	ldd	r23, Y+8	; 0x08
    1b82:	89 85       	ldd	r24, Y+9	; 0x09
    1b84:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b86:	20 e0       	ldi	r18, 0x00	; 0
    1b88:	3f ef       	ldi	r19, 0xFF	; 255
    1b8a:	4f e7       	ldi	r20, 0x7F	; 127
    1b8c:	57 e4       	ldi	r21, 0x47	; 71
    1b8e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b92:	18 16       	cp	r1, r24
    1b94:	4c f5       	brge	.+82     	; 0x1be8 <STPR_voidRotateClockwise+0x41c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b96:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b98:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b9e:	20 e0       	ldi	r18, 0x00	; 0
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	40 e2       	ldi	r20, 0x20	; 32
    1ba4:	51 e4       	ldi	r21, 0x41	; 65
    1ba6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1baa:	dc 01       	movw	r26, r24
    1bac:	cb 01       	movw	r24, r22
    1bae:	bc 01       	movw	r22, r24
    1bb0:	cd 01       	movw	r24, r26
    1bb2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bb6:	dc 01       	movw	r26, r24
    1bb8:	cb 01       	movw	r24, r22
    1bba:	9e 83       	std	Y+6, r25	; 0x06
    1bbc:	8d 83       	std	Y+5, r24	; 0x05
    1bbe:	0f c0       	rjmp	.+30     	; 0x1bde <STPR_voidRotateClockwise+0x412>
    1bc0:	88 ec       	ldi	r24, 0xC8	; 200
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	9c 83       	std	Y+4, r25	; 0x04
    1bc6:	8b 83       	std	Y+3, r24	; 0x03
    1bc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bca:	9c 81       	ldd	r25, Y+4	; 0x04
    1bcc:	01 97       	sbiw	r24, 0x01	; 1
    1bce:	f1 f7       	brne	.-4      	; 0x1bcc <STPR_voidRotateClockwise+0x400>
    1bd0:	9c 83       	std	Y+4, r25	; 0x04
    1bd2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bd4:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd6:	9e 81       	ldd	r25, Y+6	; 0x06
    1bd8:	01 97       	sbiw	r24, 0x01	; 1
    1bda:	9e 83       	std	Y+6, r25	; 0x06
    1bdc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bde:	8d 81       	ldd	r24, Y+5	; 0x05
    1be0:	9e 81       	ldd	r25, Y+6	; 0x06
    1be2:	00 97       	sbiw	r24, 0x00	; 0
    1be4:	69 f7       	brne	.-38     	; 0x1bc0 <STPR_voidRotateClockwise+0x3f4>
    1be6:	14 c0       	rjmp	.+40     	; 0x1c10 <STPR_voidRotateClockwise+0x444>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1be8:	6f 81       	ldd	r22, Y+7	; 0x07
    1bea:	78 85       	ldd	r23, Y+8	; 0x08
    1bec:	89 85       	ldd	r24, Y+9	; 0x09
    1bee:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bf0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bf4:	dc 01       	movw	r26, r24
    1bf6:	cb 01       	movw	r24, r22
    1bf8:	9e 83       	std	Y+6, r25	; 0x06
    1bfa:	8d 83       	std	Y+5, r24	; 0x05
    1bfc:	8d 81       	ldd	r24, Y+5	; 0x05
    1bfe:	9e 81       	ldd	r25, Y+6	; 0x06
    1c00:	9a 83       	std	Y+2, r25	; 0x02
    1c02:	89 83       	std	Y+1, r24	; 0x01
    1c04:	89 81       	ldd	r24, Y+1	; 0x01
    1c06:	9a 81       	ldd	r25, Y+2	; 0x02
    1c08:	01 97       	sbiw	r24, 0x01	; 1
    1c0a:	f1 f7       	brne	.-4      	; 0x1c08 <STPR_voidRotateClockwise+0x43c>
    1c0c:	9a 83       	std	Y+2, r25	; 0x02
    1c0e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1c10:	e8 96       	adiw	r28, 0x38	; 56
    1c12:	0f b6       	in	r0, 0x3f	; 63
    1c14:	f8 94       	cli
    1c16:	de bf       	out	0x3e, r29	; 62
    1c18:	0f be       	out	0x3f, r0	; 63
    1c1a:	cd bf       	out	0x3d, r28	; 61
    1c1c:	cf 91       	pop	r28
    1c1e:	df 91       	pop	r29
    1c20:	08 95       	ret

00001c22 <STPR_voidRotateCounterClockwise>:
void STPR_voidRotateCounterClockwise(){
    1c22:	df 93       	push	r29
    1c24:	cf 93       	push	r28
    1c26:	cd b7       	in	r28, 0x3d	; 61
    1c28:	de b7       	in	r29, 0x3e	; 62
    1c2a:	e8 97       	sbiw	r28, 0x38	; 56
    1c2c:	0f b6       	in	r0, 0x3f	; 63
    1c2e:	f8 94       	cli
    1c30:	de bf       	out	0x3e, r29	; 62
    1c32:	0f be       	out	0x3f, r0	; 63
    1c34:	cd bf       	out	0x3d, r28	; 61
	DIO_u8SetPinValue(STPR_PORT,STPR_COIL_BLUE,DIO_u8PIN_HIGH);
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	60 e0       	ldi	r22, 0x00	; 0
    1c3a:	41 e0       	ldi	r20, 0x01	; 1
    1c3c:	0e 94 06 09 	call	0x120c	; 0x120c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STPR_PORT,STPR_COIL_PINK,DIO_u8PIN_LOW);
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	61 e0       	ldi	r22, 0x01	; 1
    1c44:	40 e0       	ldi	r20, 0x00	; 0
    1c46:	0e 94 06 09 	call	0x120c	; 0x120c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STPR_PORT,STPR_COIL_YELLOW,DIO_u8PIN_LOW);
    1c4a:	81 e0       	ldi	r24, 0x01	; 1
    1c4c:	62 e0       	ldi	r22, 0x02	; 2
    1c4e:	40 e0       	ldi	r20, 0x00	; 0
    1c50:	0e 94 06 09 	call	0x120c	; 0x120c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STPR_PORT,STPR_COIL_ORANGE,DIO_u8PIN_LOW);
    1c54:	81 e0       	ldi	r24, 0x01	; 1
    1c56:	63 e0       	ldi	r22, 0x03	; 3
    1c58:	40 e0       	ldi	r20, 0x00	; 0
    1c5a:	0e 94 06 09 	call	0x120c	; 0x120c <DIO_u8SetPinValue>
    1c5e:	80 e0       	ldi	r24, 0x00	; 0
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	a0 e0       	ldi	r26, 0x00	; 0
    1c64:	b0 e4       	ldi	r27, 0x40	; 64
    1c66:	8d ab       	std	Y+53, r24	; 0x35
    1c68:	9e ab       	std	Y+54, r25	; 0x36
    1c6a:	af ab       	std	Y+55, r26	; 0x37
    1c6c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c6e:	6d a9       	ldd	r22, Y+53	; 0x35
    1c70:	7e a9       	ldd	r23, Y+54	; 0x36
    1c72:	8f a9       	ldd	r24, Y+55	; 0x37
    1c74:	98 ad       	ldd	r25, Y+56	; 0x38
    1c76:	20 e0       	ldi	r18, 0x00	; 0
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	4a ef       	ldi	r20, 0xFA	; 250
    1c7c:	54 e4       	ldi	r21, 0x44	; 68
    1c7e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c82:	dc 01       	movw	r26, r24
    1c84:	cb 01       	movw	r24, r22
    1c86:	89 ab       	std	Y+49, r24	; 0x31
    1c88:	9a ab       	std	Y+50, r25	; 0x32
    1c8a:	ab ab       	std	Y+51, r26	; 0x33
    1c8c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c8e:	69 a9       	ldd	r22, Y+49	; 0x31
    1c90:	7a a9       	ldd	r23, Y+50	; 0x32
    1c92:	8b a9       	ldd	r24, Y+51	; 0x33
    1c94:	9c a9       	ldd	r25, Y+52	; 0x34
    1c96:	20 e0       	ldi	r18, 0x00	; 0
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	40 e8       	ldi	r20, 0x80	; 128
    1c9c:	5f e3       	ldi	r21, 0x3F	; 63
    1c9e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ca2:	88 23       	and	r24, r24
    1ca4:	2c f4       	brge	.+10     	; 0x1cb0 <STPR_voidRotateCounterClockwise+0x8e>
		__ticks = 1;
    1ca6:	81 e0       	ldi	r24, 0x01	; 1
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	98 ab       	std	Y+48, r25	; 0x30
    1cac:	8f a7       	std	Y+47, r24	; 0x2f
    1cae:	3f c0       	rjmp	.+126    	; 0x1d2e <STPR_voidRotateCounterClockwise+0x10c>
	else if (__tmp > 65535)
    1cb0:	69 a9       	ldd	r22, Y+49	; 0x31
    1cb2:	7a a9       	ldd	r23, Y+50	; 0x32
    1cb4:	8b a9       	ldd	r24, Y+51	; 0x33
    1cb6:	9c a9       	ldd	r25, Y+52	; 0x34
    1cb8:	20 e0       	ldi	r18, 0x00	; 0
    1cba:	3f ef       	ldi	r19, 0xFF	; 255
    1cbc:	4f e7       	ldi	r20, 0x7F	; 127
    1cbe:	57 e4       	ldi	r21, 0x47	; 71
    1cc0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1cc4:	18 16       	cp	r1, r24
    1cc6:	4c f5       	brge	.+82     	; 0x1d1a <STPR_voidRotateCounterClockwise+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cc8:	6d a9       	ldd	r22, Y+53	; 0x35
    1cca:	7e a9       	ldd	r23, Y+54	; 0x36
    1ccc:	8f a9       	ldd	r24, Y+55	; 0x37
    1cce:	98 ad       	ldd	r25, Y+56	; 0x38
    1cd0:	20 e0       	ldi	r18, 0x00	; 0
    1cd2:	30 e0       	ldi	r19, 0x00	; 0
    1cd4:	40 e2       	ldi	r20, 0x20	; 32
    1cd6:	51 e4       	ldi	r21, 0x41	; 65
    1cd8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cdc:	dc 01       	movw	r26, r24
    1cde:	cb 01       	movw	r24, r22
    1ce0:	bc 01       	movw	r22, r24
    1ce2:	cd 01       	movw	r24, r26
    1ce4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ce8:	dc 01       	movw	r26, r24
    1cea:	cb 01       	movw	r24, r22
    1cec:	98 ab       	std	Y+48, r25	; 0x30
    1cee:	8f a7       	std	Y+47, r24	; 0x2f
    1cf0:	0f c0       	rjmp	.+30     	; 0x1d10 <STPR_voidRotateCounterClockwise+0xee>
    1cf2:	88 ec       	ldi	r24, 0xC8	; 200
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	9e a7       	std	Y+46, r25	; 0x2e
    1cf8:	8d a7       	std	Y+45, r24	; 0x2d
    1cfa:	8d a5       	ldd	r24, Y+45	; 0x2d
    1cfc:	9e a5       	ldd	r25, Y+46	; 0x2e
    1cfe:	01 97       	sbiw	r24, 0x01	; 1
    1d00:	f1 f7       	brne	.-4      	; 0x1cfe <STPR_voidRotateCounterClockwise+0xdc>
    1d02:	9e a7       	std	Y+46, r25	; 0x2e
    1d04:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d06:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d08:	98 a9       	ldd	r25, Y+48	; 0x30
    1d0a:	01 97       	sbiw	r24, 0x01	; 1
    1d0c:	98 ab       	std	Y+48, r25	; 0x30
    1d0e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d10:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d12:	98 a9       	ldd	r25, Y+48	; 0x30
    1d14:	00 97       	sbiw	r24, 0x00	; 0
    1d16:	69 f7       	brne	.-38     	; 0x1cf2 <STPR_voidRotateCounterClockwise+0xd0>
    1d18:	14 c0       	rjmp	.+40     	; 0x1d42 <STPR_voidRotateCounterClockwise+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d1a:	69 a9       	ldd	r22, Y+49	; 0x31
    1d1c:	7a a9       	ldd	r23, Y+50	; 0x32
    1d1e:	8b a9       	ldd	r24, Y+51	; 0x33
    1d20:	9c a9       	ldd	r25, Y+52	; 0x34
    1d22:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d26:	dc 01       	movw	r26, r24
    1d28:	cb 01       	movw	r24, r22
    1d2a:	98 ab       	std	Y+48, r25	; 0x30
    1d2c:	8f a7       	std	Y+47, r24	; 0x2f
    1d2e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d30:	98 a9       	ldd	r25, Y+48	; 0x30
    1d32:	9c a7       	std	Y+44, r25	; 0x2c
    1d34:	8b a7       	std	Y+43, r24	; 0x2b
    1d36:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d38:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d3a:	01 97       	sbiw	r24, 0x01	; 1
    1d3c:	f1 f7       	brne	.-4      	; 0x1d3a <STPR_voidRotateCounterClockwise+0x118>
    1d3e:	9c a7       	std	Y+44, r25	; 0x2c
    1d40:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	DIO_u8SetPinValue(STPR_PORT,STPR_COIL_BLUE,DIO_u8PIN_LOW);
    1d42:	81 e0       	ldi	r24, 0x01	; 1
    1d44:	60 e0       	ldi	r22, 0x00	; 0
    1d46:	40 e0       	ldi	r20, 0x00	; 0
    1d48:	0e 94 06 09 	call	0x120c	; 0x120c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STPR_PORT,STPR_COIL_PINK,DIO_u8PIN_HIGH);
    1d4c:	81 e0       	ldi	r24, 0x01	; 1
    1d4e:	61 e0       	ldi	r22, 0x01	; 1
    1d50:	41 e0       	ldi	r20, 0x01	; 1
    1d52:	0e 94 06 09 	call	0x120c	; 0x120c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STPR_PORT,STPR_COIL_YELLOW,DIO_u8PIN_LOW);
    1d56:	81 e0       	ldi	r24, 0x01	; 1
    1d58:	62 e0       	ldi	r22, 0x02	; 2
    1d5a:	40 e0       	ldi	r20, 0x00	; 0
    1d5c:	0e 94 06 09 	call	0x120c	; 0x120c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STPR_PORT,STPR_COIL_ORANGE,DIO_u8PIN_LOW);
    1d60:	81 e0       	ldi	r24, 0x01	; 1
    1d62:	63 e0       	ldi	r22, 0x03	; 3
    1d64:	40 e0       	ldi	r20, 0x00	; 0
    1d66:	0e 94 06 09 	call	0x120c	; 0x120c <DIO_u8SetPinValue>
    1d6a:	80 e0       	ldi	r24, 0x00	; 0
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	a0 e0       	ldi	r26, 0x00	; 0
    1d70:	b0 e4       	ldi	r27, 0x40	; 64
    1d72:	8f a3       	std	Y+39, r24	; 0x27
    1d74:	98 a7       	std	Y+40, r25	; 0x28
    1d76:	a9 a7       	std	Y+41, r26	; 0x29
    1d78:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d7a:	6f a1       	ldd	r22, Y+39	; 0x27
    1d7c:	78 a5       	ldd	r23, Y+40	; 0x28
    1d7e:	89 a5       	ldd	r24, Y+41	; 0x29
    1d80:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d82:	20 e0       	ldi	r18, 0x00	; 0
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	4a ef       	ldi	r20, 0xFA	; 250
    1d88:	54 e4       	ldi	r21, 0x44	; 68
    1d8a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d8e:	dc 01       	movw	r26, r24
    1d90:	cb 01       	movw	r24, r22
    1d92:	8b a3       	std	Y+35, r24	; 0x23
    1d94:	9c a3       	std	Y+36, r25	; 0x24
    1d96:	ad a3       	std	Y+37, r26	; 0x25
    1d98:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d9a:	6b a1       	ldd	r22, Y+35	; 0x23
    1d9c:	7c a1       	ldd	r23, Y+36	; 0x24
    1d9e:	8d a1       	ldd	r24, Y+37	; 0x25
    1da0:	9e a1       	ldd	r25, Y+38	; 0x26
    1da2:	20 e0       	ldi	r18, 0x00	; 0
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	40 e8       	ldi	r20, 0x80	; 128
    1da8:	5f e3       	ldi	r21, 0x3F	; 63
    1daa:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1dae:	88 23       	and	r24, r24
    1db0:	2c f4       	brge	.+10     	; 0x1dbc <STPR_voidRotateCounterClockwise+0x19a>
		__ticks = 1;
    1db2:	81 e0       	ldi	r24, 0x01	; 1
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	9a a3       	std	Y+34, r25	; 0x22
    1db8:	89 a3       	std	Y+33, r24	; 0x21
    1dba:	3f c0       	rjmp	.+126    	; 0x1e3a <STPR_voidRotateCounterClockwise+0x218>
	else if (__tmp > 65535)
    1dbc:	6b a1       	ldd	r22, Y+35	; 0x23
    1dbe:	7c a1       	ldd	r23, Y+36	; 0x24
    1dc0:	8d a1       	ldd	r24, Y+37	; 0x25
    1dc2:	9e a1       	ldd	r25, Y+38	; 0x26
    1dc4:	20 e0       	ldi	r18, 0x00	; 0
    1dc6:	3f ef       	ldi	r19, 0xFF	; 255
    1dc8:	4f e7       	ldi	r20, 0x7F	; 127
    1dca:	57 e4       	ldi	r21, 0x47	; 71
    1dcc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1dd0:	18 16       	cp	r1, r24
    1dd2:	4c f5       	brge	.+82     	; 0x1e26 <STPR_voidRotateCounterClockwise+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dd4:	6f a1       	ldd	r22, Y+39	; 0x27
    1dd6:	78 a5       	ldd	r23, Y+40	; 0x28
    1dd8:	89 a5       	ldd	r24, Y+41	; 0x29
    1dda:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ddc:	20 e0       	ldi	r18, 0x00	; 0
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	40 e2       	ldi	r20, 0x20	; 32
    1de2:	51 e4       	ldi	r21, 0x41	; 65
    1de4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1de8:	dc 01       	movw	r26, r24
    1dea:	cb 01       	movw	r24, r22
    1dec:	bc 01       	movw	r22, r24
    1dee:	cd 01       	movw	r24, r26
    1df0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1df4:	dc 01       	movw	r26, r24
    1df6:	cb 01       	movw	r24, r22
    1df8:	9a a3       	std	Y+34, r25	; 0x22
    1dfa:	89 a3       	std	Y+33, r24	; 0x21
    1dfc:	0f c0       	rjmp	.+30     	; 0x1e1c <STPR_voidRotateCounterClockwise+0x1fa>
    1dfe:	88 ec       	ldi	r24, 0xC8	; 200
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	98 a3       	std	Y+32, r25	; 0x20
    1e04:	8f 8f       	std	Y+31, r24	; 0x1f
    1e06:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e08:	98 a1       	ldd	r25, Y+32	; 0x20
    1e0a:	01 97       	sbiw	r24, 0x01	; 1
    1e0c:	f1 f7       	brne	.-4      	; 0x1e0a <STPR_voidRotateCounterClockwise+0x1e8>
    1e0e:	98 a3       	std	Y+32, r25	; 0x20
    1e10:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e12:	89 a1       	ldd	r24, Y+33	; 0x21
    1e14:	9a a1       	ldd	r25, Y+34	; 0x22
    1e16:	01 97       	sbiw	r24, 0x01	; 1
    1e18:	9a a3       	std	Y+34, r25	; 0x22
    1e1a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e1c:	89 a1       	ldd	r24, Y+33	; 0x21
    1e1e:	9a a1       	ldd	r25, Y+34	; 0x22
    1e20:	00 97       	sbiw	r24, 0x00	; 0
    1e22:	69 f7       	brne	.-38     	; 0x1dfe <STPR_voidRotateCounterClockwise+0x1dc>
    1e24:	14 c0       	rjmp	.+40     	; 0x1e4e <STPR_voidRotateCounterClockwise+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e26:	6b a1       	ldd	r22, Y+35	; 0x23
    1e28:	7c a1       	ldd	r23, Y+36	; 0x24
    1e2a:	8d a1       	ldd	r24, Y+37	; 0x25
    1e2c:	9e a1       	ldd	r25, Y+38	; 0x26
    1e2e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e32:	dc 01       	movw	r26, r24
    1e34:	cb 01       	movw	r24, r22
    1e36:	9a a3       	std	Y+34, r25	; 0x22
    1e38:	89 a3       	std	Y+33, r24	; 0x21
    1e3a:	89 a1       	ldd	r24, Y+33	; 0x21
    1e3c:	9a a1       	ldd	r25, Y+34	; 0x22
    1e3e:	9e 8f       	std	Y+30, r25	; 0x1e
    1e40:	8d 8f       	std	Y+29, r24	; 0x1d
    1e42:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e44:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e46:	01 97       	sbiw	r24, 0x01	; 1
    1e48:	f1 f7       	brne	.-4      	; 0x1e46 <STPR_voidRotateCounterClockwise+0x224>
    1e4a:	9e 8f       	std	Y+30, r25	; 0x1e
    1e4c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	DIO_u8SetPinValue(STPR_PORT,STPR_COIL_BLUE,DIO_u8PIN_LOW);
    1e4e:	81 e0       	ldi	r24, 0x01	; 1
    1e50:	60 e0       	ldi	r22, 0x00	; 0
    1e52:	40 e0       	ldi	r20, 0x00	; 0
    1e54:	0e 94 06 09 	call	0x120c	; 0x120c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STPR_PORT,STPR_COIL_PINK,DIO_u8PIN_LOW);
    1e58:	81 e0       	ldi	r24, 0x01	; 1
    1e5a:	61 e0       	ldi	r22, 0x01	; 1
    1e5c:	40 e0       	ldi	r20, 0x00	; 0
    1e5e:	0e 94 06 09 	call	0x120c	; 0x120c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STPR_PORT,STPR_COIL_YELLOW,DIO_u8PIN_HIGH);
    1e62:	81 e0       	ldi	r24, 0x01	; 1
    1e64:	62 e0       	ldi	r22, 0x02	; 2
    1e66:	41 e0       	ldi	r20, 0x01	; 1
    1e68:	0e 94 06 09 	call	0x120c	; 0x120c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STPR_PORT,STPR_COIL_ORANGE,DIO_u8PIN_LOW);
    1e6c:	81 e0       	ldi	r24, 0x01	; 1
    1e6e:	63 e0       	ldi	r22, 0x03	; 3
    1e70:	40 e0       	ldi	r20, 0x00	; 0
    1e72:	0e 94 06 09 	call	0x120c	; 0x120c <DIO_u8SetPinValue>
    1e76:	80 e0       	ldi	r24, 0x00	; 0
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	a0 e0       	ldi	r26, 0x00	; 0
    1e7c:	b0 e4       	ldi	r27, 0x40	; 64
    1e7e:	89 8f       	std	Y+25, r24	; 0x19
    1e80:	9a 8f       	std	Y+26, r25	; 0x1a
    1e82:	ab 8f       	std	Y+27, r26	; 0x1b
    1e84:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e86:	69 8d       	ldd	r22, Y+25	; 0x19
    1e88:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e8a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e8c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e8e:	20 e0       	ldi	r18, 0x00	; 0
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	4a ef       	ldi	r20, 0xFA	; 250
    1e94:	54 e4       	ldi	r21, 0x44	; 68
    1e96:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e9a:	dc 01       	movw	r26, r24
    1e9c:	cb 01       	movw	r24, r22
    1e9e:	8d 8b       	std	Y+21, r24	; 0x15
    1ea0:	9e 8b       	std	Y+22, r25	; 0x16
    1ea2:	af 8b       	std	Y+23, r26	; 0x17
    1ea4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ea6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ea8:	7e 89       	ldd	r23, Y+22	; 0x16
    1eaa:	8f 89       	ldd	r24, Y+23	; 0x17
    1eac:	98 8d       	ldd	r25, Y+24	; 0x18
    1eae:	20 e0       	ldi	r18, 0x00	; 0
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	40 e8       	ldi	r20, 0x80	; 128
    1eb4:	5f e3       	ldi	r21, 0x3F	; 63
    1eb6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1eba:	88 23       	and	r24, r24
    1ebc:	2c f4       	brge	.+10     	; 0x1ec8 <STPR_voidRotateCounterClockwise+0x2a6>
		__ticks = 1;
    1ebe:	81 e0       	ldi	r24, 0x01	; 1
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	9c 8b       	std	Y+20, r25	; 0x14
    1ec4:	8b 8b       	std	Y+19, r24	; 0x13
    1ec6:	3f c0       	rjmp	.+126    	; 0x1f46 <STPR_voidRotateCounterClockwise+0x324>
	else if (__tmp > 65535)
    1ec8:	6d 89       	ldd	r22, Y+21	; 0x15
    1eca:	7e 89       	ldd	r23, Y+22	; 0x16
    1ecc:	8f 89       	ldd	r24, Y+23	; 0x17
    1ece:	98 8d       	ldd	r25, Y+24	; 0x18
    1ed0:	20 e0       	ldi	r18, 0x00	; 0
    1ed2:	3f ef       	ldi	r19, 0xFF	; 255
    1ed4:	4f e7       	ldi	r20, 0x7F	; 127
    1ed6:	57 e4       	ldi	r21, 0x47	; 71
    1ed8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1edc:	18 16       	cp	r1, r24
    1ede:	4c f5       	brge	.+82     	; 0x1f32 <STPR_voidRotateCounterClockwise+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ee0:	69 8d       	ldd	r22, Y+25	; 0x19
    1ee2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ee4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ee6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ee8:	20 e0       	ldi	r18, 0x00	; 0
    1eea:	30 e0       	ldi	r19, 0x00	; 0
    1eec:	40 e2       	ldi	r20, 0x20	; 32
    1eee:	51 e4       	ldi	r21, 0x41	; 65
    1ef0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ef4:	dc 01       	movw	r26, r24
    1ef6:	cb 01       	movw	r24, r22
    1ef8:	bc 01       	movw	r22, r24
    1efa:	cd 01       	movw	r24, r26
    1efc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f00:	dc 01       	movw	r26, r24
    1f02:	cb 01       	movw	r24, r22
    1f04:	9c 8b       	std	Y+20, r25	; 0x14
    1f06:	8b 8b       	std	Y+19, r24	; 0x13
    1f08:	0f c0       	rjmp	.+30     	; 0x1f28 <STPR_voidRotateCounterClockwise+0x306>
    1f0a:	88 ec       	ldi	r24, 0xC8	; 200
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	9a 8b       	std	Y+18, r25	; 0x12
    1f10:	89 8b       	std	Y+17, r24	; 0x11
    1f12:	89 89       	ldd	r24, Y+17	; 0x11
    1f14:	9a 89       	ldd	r25, Y+18	; 0x12
    1f16:	01 97       	sbiw	r24, 0x01	; 1
    1f18:	f1 f7       	brne	.-4      	; 0x1f16 <STPR_voidRotateCounterClockwise+0x2f4>
    1f1a:	9a 8b       	std	Y+18, r25	; 0x12
    1f1c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f1e:	8b 89       	ldd	r24, Y+19	; 0x13
    1f20:	9c 89       	ldd	r25, Y+20	; 0x14
    1f22:	01 97       	sbiw	r24, 0x01	; 1
    1f24:	9c 8b       	std	Y+20, r25	; 0x14
    1f26:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f28:	8b 89       	ldd	r24, Y+19	; 0x13
    1f2a:	9c 89       	ldd	r25, Y+20	; 0x14
    1f2c:	00 97       	sbiw	r24, 0x00	; 0
    1f2e:	69 f7       	brne	.-38     	; 0x1f0a <STPR_voidRotateCounterClockwise+0x2e8>
    1f30:	14 c0       	rjmp	.+40     	; 0x1f5a <STPR_voidRotateCounterClockwise+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f32:	6d 89       	ldd	r22, Y+21	; 0x15
    1f34:	7e 89       	ldd	r23, Y+22	; 0x16
    1f36:	8f 89       	ldd	r24, Y+23	; 0x17
    1f38:	98 8d       	ldd	r25, Y+24	; 0x18
    1f3a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f3e:	dc 01       	movw	r26, r24
    1f40:	cb 01       	movw	r24, r22
    1f42:	9c 8b       	std	Y+20, r25	; 0x14
    1f44:	8b 8b       	std	Y+19, r24	; 0x13
    1f46:	8b 89       	ldd	r24, Y+19	; 0x13
    1f48:	9c 89       	ldd	r25, Y+20	; 0x14
    1f4a:	98 8b       	std	Y+16, r25	; 0x10
    1f4c:	8f 87       	std	Y+15, r24	; 0x0f
    1f4e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f50:	98 89       	ldd	r25, Y+16	; 0x10
    1f52:	01 97       	sbiw	r24, 0x01	; 1
    1f54:	f1 f7       	brne	.-4      	; 0x1f52 <STPR_voidRotateCounterClockwise+0x330>
    1f56:	98 8b       	std	Y+16, r25	; 0x10
    1f58:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinValue(STPR_PORT,STPR_COIL_BLUE,DIO_u8PIN_LOW);
    1f5a:	81 e0       	ldi	r24, 0x01	; 1
    1f5c:	60 e0       	ldi	r22, 0x00	; 0
    1f5e:	40 e0       	ldi	r20, 0x00	; 0
    1f60:	0e 94 06 09 	call	0x120c	; 0x120c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STPR_PORT,STPR_COIL_PINK,DIO_u8PIN_LOW);
    1f64:	81 e0       	ldi	r24, 0x01	; 1
    1f66:	61 e0       	ldi	r22, 0x01	; 1
    1f68:	40 e0       	ldi	r20, 0x00	; 0
    1f6a:	0e 94 06 09 	call	0x120c	; 0x120c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STPR_PORT,STPR_COIL_YELLOW,DIO_u8PIN_LOW);
    1f6e:	81 e0       	ldi	r24, 0x01	; 1
    1f70:	62 e0       	ldi	r22, 0x02	; 2
    1f72:	40 e0       	ldi	r20, 0x00	; 0
    1f74:	0e 94 06 09 	call	0x120c	; 0x120c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STPR_PORT,STPR_COIL_ORANGE,DIO_u8PIN_HIGH);
    1f78:	81 e0       	ldi	r24, 0x01	; 1
    1f7a:	63 e0       	ldi	r22, 0x03	; 3
    1f7c:	41 e0       	ldi	r20, 0x01	; 1
    1f7e:	0e 94 06 09 	call	0x120c	; 0x120c <DIO_u8SetPinValue>
    1f82:	80 e0       	ldi	r24, 0x00	; 0
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	a0 e0       	ldi	r26, 0x00	; 0
    1f88:	b0 e4       	ldi	r27, 0x40	; 64
    1f8a:	8b 87       	std	Y+11, r24	; 0x0b
    1f8c:	9c 87       	std	Y+12, r25	; 0x0c
    1f8e:	ad 87       	std	Y+13, r26	; 0x0d
    1f90:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f92:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f94:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f96:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f98:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f9a:	20 e0       	ldi	r18, 0x00	; 0
    1f9c:	30 e0       	ldi	r19, 0x00	; 0
    1f9e:	4a ef       	ldi	r20, 0xFA	; 250
    1fa0:	54 e4       	ldi	r21, 0x44	; 68
    1fa2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fa6:	dc 01       	movw	r26, r24
    1fa8:	cb 01       	movw	r24, r22
    1faa:	8f 83       	std	Y+7, r24	; 0x07
    1fac:	98 87       	std	Y+8, r25	; 0x08
    1fae:	a9 87       	std	Y+9, r26	; 0x09
    1fb0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fb2:	6f 81       	ldd	r22, Y+7	; 0x07
    1fb4:	78 85       	ldd	r23, Y+8	; 0x08
    1fb6:	89 85       	ldd	r24, Y+9	; 0x09
    1fb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fba:	20 e0       	ldi	r18, 0x00	; 0
    1fbc:	30 e0       	ldi	r19, 0x00	; 0
    1fbe:	40 e8       	ldi	r20, 0x80	; 128
    1fc0:	5f e3       	ldi	r21, 0x3F	; 63
    1fc2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1fc6:	88 23       	and	r24, r24
    1fc8:	2c f4       	brge	.+10     	; 0x1fd4 <STPR_voidRotateCounterClockwise+0x3b2>
		__ticks = 1;
    1fca:	81 e0       	ldi	r24, 0x01	; 1
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	9e 83       	std	Y+6, r25	; 0x06
    1fd0:	8d 83       	std	Y+5, r24	; 0x05
    1fd2:	3f c0       	rjmp	.+126    	; 0x2052 <STPR_voidRotateCounterClockwise+0x430>
	else if (__tmp > 65535)
    1fd4:	6f 81       	ldd	r22, Y+7	; 0x07
    1fd6:	78 85       	ldd	r23, Y+8	; 0x08
    1fd8:	89 85       	ldd	r24, Y+9	; 0x09
    1fda:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fdc:	20 e0       	ldi	r18, 0x00	; 0
    1fde:	3f ef       	ldi	r19, 0xFF	; 255
    1fe0:	4f e7       	ldi	r20, 0x7F	; 127
    1fe2:	57 e4       	ldi	r21, 0x47	; 71
    1fe4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1fe8:	18 16       	cp	r1, r24
    1fea:	4c f5       	brge	.+82     	; 0x203e <STPR_voidRotateCounterClockwise+0x41c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fec:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fee:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ff0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ff2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ff4:	20 e0       	ldi	r18, 0x00	; 0
    1ff6:	30 e0       	ldi	r19, 0x00	; 0
    1ff8:	40 e2       	ldi	r20, 0x20	; 32
    1ffa:	51 e4       	ldi	r21, 0x41	; 65
    1ffc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2000:	dc 01       	movw	r26, r24
    2002:	cb 01       	movw	r24, r22
    2004:	bc 01       	movw	r22, r24
    2006:	cd 01       	movw	r24, r26
    2008:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    200c:	dc 01       	movw	r26, r24
    200e:	cb 01       	movw	r24, r22
    2010:	9e 83       	std	Y+6, r25	; 0x06
    2012:	8d 83       	std	Y+5, r24	; 0x05
    2014:	0f c0       	rjmp	.+30     	; 0x2034 <STPR_voidRotateCounterClockwise+0x412>
    2016:	88 ec       	ldi	r24, 0xC8	; 200
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	9c 83       	std	Y+4, r25	; 0x04
    201c:	8b 83       	std	Y+3, r24	; 0x03
    201e:	8b 81       	ldd	r24, Y+3	; 0x03
    2020:	9c 81       	ldd	r25, Y+4	; 0x04
    2022:	01 97       	sbiw	r24, 0x01	; 1
    2024:	f1 f7       	brne	.-4      	; 0x2022 <STPR_voidRotateCounterClockwise+0x400>
    2026:	9c 83       	std	Y+4, r25	; 0x04
    2028:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    202a:	8d 81       	ldd	r24, Y+5	; 0x05
    202c:	9e 81       	ldd	r25, Y+6	; 0x06
    202e:	01 97       	sbiw	r24, 0x01	; 1
    2030:	9e 83       	std	Y+6, r25	; 0x06
    2032:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2034:	8d 81       	ldd	r24, Y+5	; 0x05
    2036:	9e 81       	ldd	r25, Y+6	; 0x06
    2038:	00 97       	sbiw	r24, 0x00	; 0
    203a:	69 f7       	brne	.-38     	; 0x2016 <STPR_voidRotateCounterClockwise+0x3f4>
    203c:	14 c0       	rjmp	.+40     	; 0x2066 <STPR_voidRotateCounterClockwise+0x444>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    203e:	6f 81       	ldd	r22, Y+7	; 0x07
    2040:	78 85       	ldd	r23, Y+8	; 0x08
    2042:	89 85       	ldd	r24, Y+9	; 0x09
    2044:	9a 85       	ldd	r25, Y+10	; 0x0a
    2046:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    204a:	dc 01       	movw	r26, r24
    204c:	cb 01       	movw	r24, r22
    204e:	9e 83       	std	Y+6, r25	; 0x06
    2050:	8d 83       	std	Y+5, r24	; 0x05
    2052:	8d 81       	ldd	r24, Y+5	; 0x05
    2054:	9e 81       	ldd	r25, Y+6	; 0x06
    2056:	9a 83       	std	Y+2, r25	; 0x02
    2058:	89 83       	std	Y+1, r24	; 0x01
    205a:	89 81       	ldd	r24, Y+1	; 0x01
    205c:	9a 81       	ldd	r25, Y+2	; 0x02
    205e:	01 97       	sbiw	r24, 0x01	; 1
    2060:	f1 f7       	brne	.-4      	; 0x205e <STPR_voidRotateCounterClockwise+0x43c>
    2062:	9a 83       	std	Y+2, r25	; 0x02
    2064:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2066:	e8 96       	adiw	r28, 0x38	; 56
    2068:	0f b6       	in	r0, 0x3f	; 63
    206a:	f8 94       	cli
    206c:	de bf       	out	0x3e, r29	; 62
    206e:	0f be       	out	0x3f, r0	; 63
    2070:	cd bf       	out	0x3d, r28	; 61
    2072:	cf 91       	pop	r28
    2074:	df 91       	pop	r29
    2076:	08 95       	ret

00002078 <STPR_voidRotateAngle>:
void STPR_voidRotateAngle(u8 Copy_u8Direction, u32 Copy_u8Angle){
    2078:	df 93       	push	r29
    207a:	cf 93       	push	r28
    207c:	cd b7       	in	r28, 0x3d	; 61
    207e:	de b7       	in	r29, 0x3e	; 62
    2080:	61 97       	sbiw	r28, 0x11	; 17
    2082:	0f b6       	in	r0, 0x3f	; 63
    2084:	f8 94       	cli
    2086:	de bf       	out	0x3e, r29	; 62
    2088:	0f be       	out	0x3f, r0	; 63
    208a:	cd bf       	out	0x3d, r28	; 61
    208c:	8d 87       	std	Y+13, r24	; 0x0d
    208e:	4e 87       	std	Y+14, r20	; 0x0e
    2090:	5f 87       	std	Y+15, r21	; 0x0f
    2092:	68 8b       	std	Y+16, r22	; 0x10
    2094:	79 8b       	std	Y+17, r23	; 0x11
	u32 Local_u8Iterations=((Copy_u8Angle*10)/7);
    2096:	8e 85       	ldd	r24, Y+14	; 0x0e
    2098:	9f 85       	ldd	r25, Y+15	; 0x0f
    209a:	a8 89       	ldd	r26, Y+16	; 0x10
    209c:	b9 89       	ldd	r27, Y+17	; 0x11
    209e:	2a e0       	ldi	r18, 0x0A	; 10
    20a0:	30 e0       	ldi	r19, 0x00	; 0
    20a2:	40 e0       	ldi	r20, 0x00	; 0
    20a4:	50 e0       	ldi	r21, 0x00	; 0
    20a6:	bc 01       	movw	r22, r24
    20a8:	cd 01       	movw	r24, r26
    20aa:	0e 94 c1 13 	call	0x2782	; 0x2782 <__mulsi3>
    20ae:	dc 01       	movw	r26, r24
    20b0:	cb 01       	movw	r24, r22
    20b2:	27 e0       	ldi	r18, 0x07	; 7
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	40 e0       	ldi	r20, 0x00	; 0
    20b8:	50 e0       	ldi	r21, 0x00	; 0
    20ba:	bc 01       	movw	r22, r24
    20bc:	cd 01       	movw	r24, r26
    20be:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <__udivmodsi4>
    20c2:	da 01       	movw	r26, r20
    20c4:	c9 01       	movw	r24, r18
    20c6:	89 87       	std	Y+9, r24	; 0x09
    20c8:	9a 87       	std	Y+10, r25	; 0x0a
    20ca:	ab 87       	std	Y+11, r26	; 0x0b
    20cc:	bc 87       	std	Y+12, r27	; 0x0c
	if(Copy_u8Direction==STPR_CLOCKWISE){
    20ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    20d0:	88 23       	and	r24, r24
    20d2:	01 f5       	brne	.+64     	; 0x2114 <STPR_voidRotateAngle+0x9c>
		for(u32 Local_u8Iterator=0;Local_u8Iterator<Local_u8Iterations;Local_u8Iterator++){
    20d4:	1d 82       	std	Y+5, r1	; 0x05
    20d6:	1e 82       	std	Y+6, r1	; 0x06
    20d8:	1f 82       	std	Y+7, r1	; 0x07
    20da:	18 86       	std	Y+8, r1	; 0x08
    20dc:	0d c0       	rjmp	.+26     	; 0x20f8 <STPR_voidRotateAngle+0x80>
			STPR_voidRotateClockwise();
    20de:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <STPR_voidRotateClockwise>
	_delay_ms(2);
}
void STPR_voidRotateAngle(u8 Copy_u8Direction, u32 Copy_u8Angle){
	u32 Local_u8Iterations=((Copy_u8Angle*10)/7);
	if(Copy_u8Direction==STPR_CLOCKWISE){
		for(u32 Local_u8Iterator=0;Local_u8Iterator<Local_u8Iterations;Local_u8Iterator++){
    20e2:	8d 81       	ldd	r24, Y+5	; 0x05
    20e4:	9e 81       	ldd	r25, Y+6	; 0x06
    20e6:	af 81       	ldd	r26, Y+7	; 0x07
    20e8:	b8 85       	ldd	r27, Y+8	; 0x08
    20ea:	01 96       	adiw	r24, 0x01	; 1
    20ec:	a1 1d       	adc	r26, r1
    20ee:	b1 1d       	adc	r27, r1
    20f0:	8d 83       	std	Y+5, r24	; 0x05
    20f2:	9e 83       	std	Y+6, r25	; 0x06
    20f4:	af 83       	std	Y+7, r26	; 0x07
    20f6:	b8 87       	std	Y+8, r27	; 0x08
    20f8:	2d 81       	ldd	r18, Y+5	; 0x05
    20fa:	3e 81       	ldd	r19, Y+6	; 0x06
    20fc:	4f 81       	ldd	r20, Y+7	; 0x07
    20fe:	58 85       	ldd	r21, Y+8	; 0x08
    2100:	89 85       	ldd	r24, Y+9	; 0x09
    2102:	9a 85       	ldd	r25, Y+10	; 0x0a
    2104:	ab 85       	ldd	r26, Y+11	; 0x0b
    2106:	bc 85       	ldd	r27, Y+12	; 0x0c
    2108:	28 17       	cp	r18, r24
    210a:	39 07       	cpc	r19, r25
    210c:	4a 07       	cpc	r20, r26
    210e:	5b 07       	cpc	r21, r27
    2110:	30 f3       	brcs	.-52     	; 0x20de <STPR_voidRotateAngle+0x66>
    2112:	22 c0       	rjmp	.+68     	; 0x2158 <STPR_voidRotateAngle+0xe0>
			STPR_voidRotateClockwise();
		}
	}
	else if(Copy_u8Direction==STPR_COUNTER_CLOCKWISE){
    2114:	8d 85       	ldd	r24, Y+13	; 0x0d
    2116:	81 30       	cpi	r24, 0x01	; 1
    2118:	f9 f4       	brne	.+62     	; 0x2158 <STPR_voidRotateAngle+0xe0>
		for(u32 Local_u8Iterator=0;Local_u8Iterator<Local_u8Iterations;Local_u8Iterator++){
    211a:	19 82       	std	Y+1, r1	; 0x01
    211c:	1a 82       	std	Y+2, r1	; 0x02
    211e:	1b 82       	std	Y+3, r1	; 0x03
    2120:	1c 82       	std	Y+4, r1	; 0x04
    2122:	0d c0       	rjmp	.+26     	; 0x213e <STPR_voidRotateAngle+0xc6>
			STPR_voidRotateCounterClockwise();
    2124:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <STPR_voidRotateCounterClockwise>
		for(u32 Local_u8Iterator=0;Local_u8Iterator<Local_u8Iterations;Local_u8Iterator++){
			STPR_voidRotateClockwise();
		}
	}
	else if(Copy_u8Direction==STPR_COUNTER_CLOCKWISE){
		for(u32 Local_u8Iterator=0;Local_u8Iterator<Local_u8Iterations;Local_u8Iterator++){
    2128:	89 81       	ldd	r24, Y+1	; 0x01
    212a:	9a 81       	ldd	r25, Y+2	; 0x02
    212c:	ab 81       	ldd	r26, Y+3	; 0x03
    212e:	bc 81       	ldd	r27, Y+4	; 0x04
    2130:	01 96       	adiw	r24, 0x01	; 1
    2132:	a1 1d       	adc	r26, r1
    2134:	b1 1d       	adc	r27, r1
    2136:	89 83       	std	Y+1, r24	; 0x01
    2138:	9a 83       	std	Y+2, r25	; 0x02
    213a:	ab 83       	std	Y+3, r26	; 0x03
    213c:	bc 83       	std	Y+4, r27	; 0x04
    213e:	29 81       	ldd	r18, Y+1	; 0x01
    2140:	3a 81       	ldd	r19, Y+2	; 0x02
    2142:	4b 81       	ldd	r20, Y+3	; 0x03
    2144:	5c 81       	ldd	r21, Y+4	; 0x04
    2146:	89 85       	ldd	r24, Y+9	; 0x09
    2148:	9a 85       	ldd	r25, Y+10	; 0x0a
    214a:	ab 85       	ldd	r26, Y+11	; 0x0b
    214c:	bc 85       	ldd	r27, Y+12	; 0x0c
    214e:	28 17       	cp	r18, r24
    2150:	39 07       	cpc	r19, r25
    2152:	4a 07       	cpc	r20, r26
    2154:	5b 07       	cpc	r21, r27
    2156:	30 f3       	brcs	.-52     	; 0x2124 <STPR_voidRotateAngle+0xac>
			STPR_voidRotateCounterClockwise();
		}
	}
}
    2158:	61 96       	adiw	r28, 0x11	; 17
    215a:	0f b6       	in	r0, 0x3f	; 63
    215c:	f8 94       	cli
    215e:	de bf       	out	0x3e, r29	; 62
    2160:	0f be       	out	0x3f, r0	; 63
    2162:	cd bf       	out	0x3d, r28	; 61
    2164:	cf 91       	pop	r28
    2166:	df 91       	pop	r29
    2168:	08 95       	ret

0000216a <main>:
void ShowMainMenu();
void ShowRotateMenu();
void ReadKey(u8* Copy_pu8Key);
u32 u32Power(u32 Copy_u32Base,s32 Copy_u32Exponent);

void main(){
    216a:	ef 92       	push	r14
    216c:	ff 92       	push	r15
    216e:	0f 93       	push	r16
    2170:	1f 93       	push	r17
    2172:	df 93       	push	r29
    2174:	cf 93       	push	r28
    2176:	cd b7       	in	r28, 0x3d	; 61
    2178:	de b7       	in	r29, 0x3e	; 62
    217a:	69 97       	sbiw	r28, 0x19	; 25
    217c:	0f b6       	in	r0, 0x3f	; 63
    217e:	f8 94       	cli
    2180:	de bf       	out	0x3e, r29	; 62
    2182:	0f be       	out	0x3f, r0	; 63
    2184:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8Key,Local_u8AngleArr[3],Local_u8AngleIterator;u16 Local_u8Angle;
	PORT_voidInit();
    2186:	0e 94 c2 0b 	call	0x1784	; 0x1784 <PORT_voidInit>
	CLCD_voidInit();
    218a:	0e 94 f3 06 	call	0xde6	; 0xde6 <CLCD_voidInit>
	ShowMainMenu();
    218e:	0e 94 9a 12 	call	0x2534	; 0x2534 <ShowMainMenu>

	while(1){
		ReadKey(&Local_u8Key);
    2192:	ce 01       	movw	r24, r28
    2194:	46 96       	adiw	r24, 0x16	; 22
    2196:	0e 94 53 13 	call	0x26a6	; 0x26a6 <ReadKey>
		if(Local_u8Key==1){
    219a:	8e 89       	ldd	r24, Y+22	; 0x16
    219c:	81 30       	cpi	r24, 0x01	; 1
    219e:	49 f5       	brne	.+82     	; 0x21f2 <main+0x88>
			ShowRotateMenu();
    21a0:	0e 94 3d 13 	call	0x267a	; 0x267a <ShowRotateMenu>
			ReadKey(&Local_u8Key);
    21a4:	ce 01       	movw	r24, r28
    21a6:	46 96       	adiw	r24, 0x16	; 22
    21a8:	0e 94 53 13 	call	0x26a6	; 0x26a6 <ReadKey>
			if(Local_u8Key==1){
    21ac:	8e 89       	ldd	r24, Y+22	; 0x16
    21ae:	81 30       	cpi	r24, 0x01	; 1
    21b0:	19 f4       	brne	.+6      	; 0x21b8 <main+0x4e>
				DCM_voidRotateClockwise();
    21b2:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <DCM_voidRotateClockwise>
    21b6:	05 c0       	rjmp	.+10     	; 0x21c2 <main+0x58>
			}
			else if(Local_u8Key==2){
    21b8:	8e 89       	ldd	r24, Y+22	; 0x16
    21ba:	82 30       	cpi	r24, 0x02	; 2
    21bc:	11 f4       	brne	.+4      	; 0x21c2 <main+0x58>
				DCM_voidRotateCounterClockwise();
    21be:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <DCM_voidRotateCounterClockwise>
			}
			CLCD_voidSendCommand(1);
    21c2:	81 e0       	ldi	r24, 0x01	; 1
    21c4:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>
			CLCD_voidSendString("Press Any Key");
    21c8:	80 e6       	ldi	r24, 0x60	; 96
    21ca:	90 e0       	ldi	r25, 0x00	; 0
    21cc:	0e 94 d7 06 	call	0xdae	; 0xdae <CLCD_voidSendString>
			CLCD_voidGoToXY(1,0);
    21d0:	81 e0       	ldi	r24, 0x01	; 1
    21d2:	60 e0       	ldi	r22, 0x00	; 0
    21d4:	0e 94 81 07 	call	0xf02	; 0xf02 <CLCD_voidGoToXY>
			CLCD_voidSendString("To Stop");
    21d8:	8e e6       	ldi	r24, 0x6E	; 110
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	0e 94 d7 06 	call	0xdae	; 0xdae <CLCD_voidSendString>
			ReadKey(&Local_u8Key);
    21e0:	ce 01       	movw	r24, r28
    21e2:	46 96       	adiw	r24, 0x16	; 22
    21e4:	0e 94 53 13 	call	0x26a6	; 0x26a6 <ReadKey>
			DCM_voidStop();
    21e8:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DCM_voidStop>
			ShowMainMenu();
    21ec:	0e 94 9a 12 	call	0x2534	; 0x2534 <ShowMainMenu>
    21f0:	d0 cf       	rjmp	.-96     	; 0x2192 <main+0x28>
		}
		else if(Local_u8Key==2){
    21f2:	8e 89       	ldd	r24, Y+22	; 0x16
    21f4:	82 30       	cpi	r24, 0x02	; 2
    21f6:	09 f0       	breq	.+2      	; 0x21fa <main+0x90>
    21f8:	14 c1       	rjmp	.+552    	; 0x2422 <main+0x2b8>
			ShowRotateMenu();
    21fa:	0e 94 3d 13 	call	0x267a	; 0x267a <ShowRotateMenu>
			ReadKey(&Local_u8Key);
    21fe:	ce 01       	movw	r24, r28
    2200:	46 96       	adiw	r24, 0x16	; 22
    2202:	0e 94 53 13 	call	0x26a6	; 0x26a6 <ReadKey>
			if (Local_u8Key==1){
    2206:	8e 89       	ldd	r24, Y+22	; 0x16
    2208:	81 30       	cpi	r24, 0x01	; 1
    220a:	09 f0       	breq	.+2      	; 0x220e <main+0xa4>
    220c:	83 c0       	rjmp	.+262    	; 0x2314 <main+0x1aa>
				CLCD_voidSendCommand(1);
    220e:	81 e0       	ldi	r24, 0x01	; 1
    2210:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>
				CLCD_voidSendString("Angle:");
    2214:	86 e7       	ldi	r24, 0x76	; 118
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	0e 94 d7 06 	call	0xdae	; 0xdae <CLCD_voidSendString>
				Local_u8AngleIterator=0;
    221c:	1d 8a       	std	Y+21, r1	; 0x15
				do{
					ReadKey(&Local_u8Key);
    221e:	ce 01       	movw	r24, r28
    2220:	46 96       	adiw	r24, 0x16	; 22
    2222:	0e 94 53 13 	call	0x26a6	; 0x26a6 <ReadKey>
					if(Local_u8Key!='e'){
    2226:	8e 89       	ldd	r24, Y+22	; 0x16
    2228:	85 36       	cpi	r24, 0x65	; 101
    222a:	b1 f0       	breq	.+44     	; 0x2258 <main+0xee>
						Local_u8AngleArr[Local_u8AngleIterator]=Local_u8Key;
    222c:	8d 89       	ldd	r24, Y+21	; 0x15
    222e:	28 2f       	mov	r18, r24
    2230:	30 e0       	ldi	r19, 0x00	; 0
    2232:	4e 89       	ldd	r20, Y+22	; 0x16
    2234:	ce 01       	movw	r24, r28
    2236:	47 96       	adiw	r24, 0x17	; 23
    2238:	fc 01       	movw	r30, r24
    223a:	e2 0f       	add	r30, r18
    223c:	f3 1f       	adc	r31, r19
    223e:	40 83       	st	Z, r20
						CLCD_voidSendNumber(Local_u8Key);
    2240:	8e 89       	ldd	r24, Y+22	; 0x16
    2242:	88 2f       	mov	r24, r24
    2244:	90 e0       	ldi	r25, 0x00	; 0
    2246:	a0 e0       	ldi	r26, 0x00	; 0
    2248:	b0 e0       	ldi	r27, 0x00	; 0
    224a:	bc 01       	movw	r22, r24
    224c:	cd 01       	movw	r24, r26
    224e:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <CLCD_voidSendNumber>
						Local_u8AngleIterator++;
    2252:	8d 89       	ldd	r24, Y+21	; 0x15
    2254:	8f 5f       	subi	r24, 0xFF	; 255
    2256:	8d 8b       	std	Y+21, r24	; 0x15
					}
				}while(Local_u8Key!='e');
    2258:	8e 89       	ldd	r24, Y+22	; 0x16
    225a:	85 36       	cpi	r24, 0x65	; 101
    225c:	01 f7       	brne	.-64     	; 0x221e <main+0xb4>
				Local_u8Angle=0;
    225e:	1c 8a       	std	Y+20, r1	; 0x14
    2260:	1b 8a       	std	Y+19, r1	; 0x13
				for(u8 Local_u8Iterator=0;Local_u8Iterator<Local_u8AngleIterator;Local_u8Iterator++){
    2262:	1a 8a       	std	Y+18, r1	; 0x12
    2264:	35 c0       	rjmp	.+106    	; 0x22d0 <main+0x166>

					Local_u8Angle+=(u32Power(10,Local_u8AngleIterator-Local_u8Iterator-1))*Local_u8AngleArr[Local_u8Iterator];
    2266:	8d 89       	ldd	r24, Y+21	; 0x15
    2268:	28 2f       	mov	r18, r24
    226a:	30 e0       	ldi	r19, 0x00	; 0
    226c:	8a 89       	ldd	r24, Y+18	; 0x12
    226e:	88 2f       	mov	r24, r24
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	a9 01       	movw	r20, r18
    2274:	48 1b       	sub	r20, r24
    2276:	59 0b       	sbc	r21, r25
    2278:	ca 01       	movw	r24, r20
    227a:	01 97       	sbiw	r24, 0x01	; 1
    227c:	9c 01       	movw	r18, r24
    227e:	44 27       	eor	r20, r20
    2280:	37 fd       	sbrc	r19, 7
    2282:	40 95       	com	r20
    2284:	54 2f       	mov	r21, r20
    2286:	6a e0       	ldi	r22, 0x0A	; 10
    2288:	70 e0       	ldi	r23, 0x00	; 0
    228a:	80 e0       	ldi	r24, 0x00	; 0
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	0e 94 69 13 	call	0x26d2	; 0x26d2 <u32Power>
    2292:	7b 01       	movw	r14, r22
    2294:	8c 01       	movw	r16, r24
    2296:	8a 89       	ldd	r24, Y+18	; 0x12
    2298:	28 2f       	mov	r18, r24
    229a:	30 e0       	ldi	r19, 0x00	; 0
    229c:	ce 01       	movw	r24, r28
    229e:	47 96       	adiw	r24, 0x17	; 23
    22a0:	fc 01       	movw	r30, r24
    22a2:	e2 0f       	add	r30, r18
    22a4:	f3 1f       	adc	r31, r19
    22a6:	80 81       	ld	r24, Z
    22a8:	28 2f       	mov	r18, r24
    22aa:	30 e0       	ldi	r19, 0x00	; 0
    22ac:	40 e0       	ldi	r20, 0x00	; 0
    22ae:	50 e0       	ldi	r21, 0x00	; 0
    22b0:	c8 01       	movw	r24, r16
    22b2:	b7 01       	movw	r22, r14
    22b4:	0e 94 c1 13 	call	0x2782	; 0x2782 <__mulsi3>
    22b8:	dc 01       	movw	r26, r24
    22ba:	cb 01       	movw	r24, r22
    22bc:	9c 01       	movw	r18, r24
    22be:	8b 89       	ldd	r24, Y+19	; 0x13
    22c0:	9c 89       	ldd	r25, Y+20	; 0x14
    22c2:	82 0f       	add	r24, r18
    22c4:	93 1f       	adc	r25, r19
    22c6:	9c 8b       	std	Y+20, r25	; 0x14
    22c8:	8b 8b       	std	Y+19, r24	; 0x13
						CLCD_voidSendNumber(Local_u8Key);
						Local_u8AngleIterator++;
					}
				}while(Local_u8Key!='e');
				Local_u8Angle=0;
				for(u8 Local_u8Iterator=0;Local_u8Iterator<Local_u8AngleIterator;Local_u8Iterator++){
    22ca:	8a 89       	ldd	r24, Y+18	; 0x12
    22cc:	8f 5f       	subi	r24, 0xFF	; 255
    22ce:	8a 8b       	std	Y+18, r24	; 0x12
    22d0:	9a 89       	ldd	r25, Y+18	; 0x12
    22d2:	8d 89       	ldd	r24, Y+21	; 0x15
    22d4:	98 17       	cp	r25, r24
    22d6:	38 f2       	brcs	.-114    	; 0x2266 <main+0xfc>

					Local_u8Angle+=(u32Power(10,Local_u8AngleIterator-Local_u8Iterator-1))*Local_u8AngleArr[Local_u8Iterator];
				}
				STPR_voidRotateAngle(STPR_CLOCKWISE,Local_u8Angle);
    22d8:	8b 89       	ldd	r24, Y+19	; 0x13
    22da:	9c 89       	ldd	r25, Y+20	; 0x14
    22dc:	9c 01       	movw	r18, r24
    22de:	40 e0       	ldi	r20, 0x00	; 0
    22e0:	50 e0       	ldi	r21, 0x00	; 0
    22e2:	80 e0       	ldi	r24, 0x00	; 0
    22e4:	ba 01       	movw	r22, r20
    22e6:	a9 01       	movw	r20, r18
    22e8:	0e 94 3c 10 	call	0x2078	; 0x2078 <STPR_voidRotateAngle>
				for(u8 Local_u8Iterator=0;Local_u8Iterator<3;Local_u8Iterator++){
    22ec:	19 8a       	std	Y+17, r1	; 0x11
    22ee:	0c c0       	rjmp	.+24     	; 0x2308 <main+0x19e>
					Local_u8AngleArr[Local_u8Iterator]=0;
    22f0:	89 89       	ldd	r24, Y+17	; 0x11
    22f2:	28 2f       	mov	r18, r24
    22f4:	30 e0       	ldi	r19, 0x00	; 0
    22f6:	ce 01       	movw	r24, r28
    22f8:	47 96       	adiw	r24, 0x17	; 23
    22fa:	fc 01       	movw	r30, r24
    22fc:	e2 0f       	add	r30, r18
    22fe:	f3 1f       	adc	r31, r19
    2300:	10 82       	st	Z, r1
				for(u8 Local_u8Iterator=0;Local_u8Iterator<Local_u8AngleIterator;Local_u8Iterator++){

					Local_u8Angle+=(u32Power(10,Local_u8AngleIterator-Local_u8Iterator-1))*Local_u8AngleArr[Local_u8Iterator];
				}
				STPR_voidRotateAngle(STPR_CLOCKWISE,Local_u8Angle);
				for(u8 Local_u8Iterator=0;Local_u8Iterator<3;Local_u8Iterator++){
    2302:	89 89       	ldd	r24, Y+17	; 0x11
    2304:	8f 5f       	subi	r24, 0xFF	; 255
    2306:	89 8b       	std	Y+17, r24	; 0x11
    2308:	89 89       	ldd	r24, Y+17	; 0x11
    230a:	83 30       	cpi	r24, 0x03	; 3
    230c:	88 f3       	brcs	.-30     	; 0x22f0 <main+0x186>
					Local_u8AngleArr[Local_u8Iterator]=0;
				}
				ShowMainMenu();
    230e:	0e 94 9a 12 	call	0x2534	; 0x2534 <ShowMainMenu>
    2312:	3f cf       	rjmp	.-386    	; 0x2192 <main+0x28>
			}
			else if(Local_u8Key==2){
    2314:	8e 89       	ldd	r24, Y+22	; 0x16
    2316:	82 30       	cpi	r24, 0x02	; 2
    2318:	09 f0       	breq	.+2      	; 0x231c <main+0x1b2>
    231a:	3b cf       	rjmp	.-394    	; 0x2192 <main+0x28>
				CLCD_voidSendCommand(1);
    231c:	81 e0       	ldi	r24, 0x01	; 1
    231e:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>
				CLCD_voidSendString("Angle:");
    2322:	86 e7       	ldi	r24, 0x76	; 118
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	0e 94 d7 06 	call	0xdae	; 0xdae <CLCD_voidSendString>
				Local_u8AngleIterator=0;
    232a:	1d 8a       	std	Y+21, r1	; 0x15
				do{
					ReadKey(&Local_u8Key);
    232c:	ce 01       	movw	r24, r28
    232e:	46 96       	adiw	r24, 0x16	; 22
    2330:	0e 94 53 13 	call	0x26a6	; 0x26a6 <ReadKey>
					if(Local_u8Key!='e'){
    2334:	8e 89       	ldd	r24, Y+22	; 0x16
    2336:	85 36       	cpi	r24, 0x65	; 101
    2338:	b1 f0       	breq	.+44     	; 0x2366 <main+0x1fc>
						Local_u8AngleArr[Local_u8AngleIterator]=Local_u8Key;
    233a:	8d 89       	ldd	r24, Y+21	; 0x15
    233c:	28 2f       	mov	r18, r24
    233e:	30 e0       	ldi	r19, 0x00	; 0
    2340:	4e 89       	ldd	r20, Y+22	; 0x16
    2342:	ce 01       	movw	r24, r28
    2344:	47 96       	adiw	r24, 0x17	; 23
    2346:	fc 01       	movw	r30, r24
    2348:	e2 0f       	add	r30, r18
    234a:	f3 1f       	adc	r31, r19
    234c:	40 83       	st	Z, r20
						CLCD_voidSendNumber(Local_u8Key);
    234e:	8e 89       	ldd	r24, Y+22	; 0x16
    2350:	88 2f       	mov	r24, r24
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	a0 e0       	ldi	r26, 0x00	; 0
    2356:	b0 e0       	ldi	r27, 0x00	; 0
    2358:	bc 01       	movw	r22, r24
    235a:	cd 01       	movw	r24, r26
    235c:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <CLCD_voidSendNumber>
						Local_u8AngleIterator++;
    2360:	8d 89       	ldd	r24, Y+21	; 0x15
    2362:	8f 5f       	subi	r24, 0xFF	; 255
    2364:	8d 8b       	std	Y+21, r24	; 0x15
					}
				}while(Local_u8Key!='e');
    2366:	8e 89       	ldd	r24, Y+22	; 0x16
    2368:	85 36       	cpi	r24, 0x65	; 101
    236a:	01 f7       	brne	.-64     	; 0x232c <main+0x1c2>
				Local_u8Angle=0;
    236c:	1c 8a       	std	Y+20, r1	; 0x14
    236e:	1b 8a       	std	Y+19, r1	; 0x13
				for(u8 Local_u8Iterator=0;Local_u8Iterator<Local_u8AngleIterator;Local_u8Iterator++){
    2370:	18 8a       	std	Y+16, r1	; 0x10
    2372:	35 c0       	rjmp	.+106    	; 0x23de <main+0x274>
					Local_u8Angle+=(u32Power(10,Local_u8AngleIterator-Local_u8Iterator-1))*Local_u8AngleArr[Local_u8Iterator];
    2374:	8d 89       	ldd	r24, Y+21	; 0x15
    2376:	28 2f       	mov	r18, r24
    2378:	30 e0       	ldi	r19, 0x00	; 0
    237a:	88 89       	ldd	r24, Y+16	; 0x10
    237c:	88 2f       	mov	r24, r24
    237e:	90 e0       	ldi	r25, 0x00	; 0
    2380:	a9 01       	movw	r20, r18
    2382:	48 1b       	sub	r20, r24
    2384:	59 0b       	sbc	r21, r25
    2386:	ca 01       	movw	r24, r20
    2388:	01 97       	sbiw	r24, 0x01	; 1
    238a:	9c 01       	movw	r18, r24
    238c:	44 27       	eor	r20, r20
    238e:	37 fd       	sbrc	r19, 7
    2390:	40 95       	com	r20
    2392:	54 2f       	mov	r21, r20
    2394:	6a e0       	ldi	r22, 0x0A	; 10
    2396:	70 e0       	ldi	r23, 0x00	; 0
    2398:	80 e0       	ldi	r24, 0x00	; 0
    239a:	90 e0       	ldi	r25, 0x00	; 0
    239c:	0e 94 69 13 	call	0x26d2	; 0x26d2 <u32Power>
    23a0:	7b 01       	movw	r14, r22
    23a2:	8c 01       	movw	r16, r24
    23a4:	88 89       	ldd	r24, Y+16	; 0x10
    23a6:	28 2f       	mov	r18, r24
    23a8:	30 e0       	ldi	r19, 0x00	; 0
    23aa:	ce 01       	movw	r24, r28
    23ac:	47 96       	adiw	r24, 0x17	; 23
    23ae:	fc 01       	movw	r30, r24
    23b0:	e2 0f       	add	r30, r18
    23b2:	f3 1f       	adc	r31, r19
    23b4:	80 81       	ld	r24, Z
    23b6:	28 2f       	mov	r18, r24
    23b8:	30 e0       	ldi	r19, 0x00	; 0
    23ba:	40 e0       	ldi	r20, 0x00	; 0
    23bc:	50 e0       	ldi	r21, 0x00	; 0
    23be:	c8 01       	movw	r24, r16
    23c0:	b7 01       	movw	r22, r14
    23c2:	0e 94 c1 13 	call	0x2782	; 0x2782 <__mulsi3>
    23c6:	dc 01       	movw	r26, r24
    23c8:	cb 01       	movw	r24, r22
    23ca:	9c 01       	movw	r18, r24
    23cc:	8b 89       	ldd	r24, Y+19	; 0x13
    23ce:	9c 89       	ldd	r25, Y+20	; 0x14
    23d0:	82 0f       	add	r24, r18
    23d2:	93 1f       	adc	r25, r19
    23d4:	9c 8b       	std	Y+20, r25	; 0x14
    23d6:	8b 8b       	std	Y+19, r24	; 0x13
						CLCD_voidSendNumber(Local_u8Key);
						Local_u8AngleIterator++;
					}
				}while(Local_u8Key!='e');
				Local_u8Angle=0;
				for(u8 Local_u8Iterator=0;Local_u8Iterator<Local_u8AngleIterator;Local_u8Iterator++){
    23d8:	88 89       	ldd	r24, Y+16	; 0x10
    23da:	8f 5f       	subi	r24, 0xFF	; 255
    23dc:	88 8b       	std	Y+16, r24	; 0x10
    23de:	98 89       	ldd	r25, Y+16	; 0x10
    23e0:	8d 89       	ldd	r24, Y+21	; 0x15
    23e2:	98 17       	cp	r25, r24
    23e4:	38 f2       	brcs	.-114    	; 0x2374 <main+0x20a>
					Local_u8Angle+=(u32Power(10,Local_u8AngleIterator-Local_u8Iterator-1))*Local_u8AngleArr[Local_u8Iterator];
				}
				STPR_voidRotateAngle(STPR_COUNTER_CLOCKWISE,Local_u8Angle);
    23e6:	8b 89       	ldd	r24, Y+19	; 0x13
    23e8:	9c 89       	ldd	r25, Y+20	; 0x14
    23ea:	9c 01       	movw	r18, r24
    23ec:	40 e0       	ldi	r20, 0x00	; 0
    23ee:	50 e0       	ldi	r21, 0x00	; 0
    23f0:	81 e0       	ldi	r24, 0x01	; 1
    23f2:	ba 01       	movw	r22, r20
    23f4:	a9 01       	movw	r20, r18
    23f6:	0e 94 3c 10 	call	0x2078	; 0x2078 <STPR_voidRotateAngle>
				for(u8 Local_u8Iterator=0;Local_u8Iterator<3;Local_u8Iterator++){
    23fa:	1f 86       	std	Y+15, r1	; 0x0f
    23fc:	0c c0       	rjmp	.+24     	; 0x2416 <main+0x2ac>
					Local_u8AngleArr[Local_u8Iterator]=0;
    23fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2400:	28 2f       	mov	r18, r24
    2402:	30 e0       	ldi	r19, 0x00	; 0
    2404:	ce 01       	movw	r24, r28
    2406:	47 96       	adiw	r24, 0x17	; 23
    2408:	fc 01       	movw	r30, r24
    240a:	e2 0f       	add	r30, r18
    240c:	f3 1f       	adc	r31, r19
    240e:	10 82       	st	Z, r1
				Local_u8Angle=0;
				for(u8 Local_u8Iterator=0;Local_u8Iterator<Local_u8AngleIterator;Local_u8Iterator++){
					Local_u8Angle+=(u32Power(10,Local_u8AngleIterator-Local_u8Iterator-1))*Local_u8AngleArr[Local_u8Iterator];
				}
				STPR_voidRotateAngle(STPR_COUNTER_CLOCKWISE,Local_u8Angle);
				for(u8 Local_u8Iterator=0;Local_u8Iterator<3;Local_u8Iterator++){
    2410:	8f 85       	ldd	r24, Y+15	; 0x0f
    2412:	8f 5f       	subi	r24, 0xFF	; 255
    2414:	8f 87       	std	Y+15, r24	; 0x0f
    2416:	8f 85       	ldd	r24, Y+15	; 0x0f
    2418:	83 30       	cpi	r24, 0x03	; 3
    241a:	88 f3       	brcs	.-30     	; 0x23fe <main+0x294>
					Local_u8AngleArr[Local_u8Iterator]=0;
				}
				ShowMainMenu();
    241c:	0e 94 9a 12 	call	0x2534	; 0x2534 <ShowMainMenu>
    2420:	b8 ce       	rjmp	.-656    	; 0x2192 <main+0x28>
			}
		}
		else if(Local_u8Key==3){
    2422:	8e 89       	ldd	r24, Y+22	; 0x16
    2424:	83 30       	cpi	r24, 0x03	; 3
    2426:	09 f0       	breq	.+2      	; 0x242a <main+0x2c0>
    2428:	b4 ce       	rjmp	.-664    	; 0x2192 <main+0x28>
			CLCD_voidSendCommand(1);
    242a:	81 e0       	ldi	r24, 0x01	; 1
    242c:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>
			CLCD_voidSendString("Thank you for");
    2430:	8d e7       	ldi	r24, 0x7D	; 125
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	0e 94 d7 06 	call	0xdae	; 0xdae <CLCD_voidSendString>
			CLCD_voidGoToXY(1,0);
    2438:	81 e0       	ldi	r24, 0x01	; 1
    243a:	60 e0       	ldi	r22, 0x00	; 0
    243c:	0e 94 81 07 	call	0xf02	; 0xf02 <CLCD_voidGoToXY>
			CLCD_voidSendString("using the app");
    2440:	8b e8       	ldi	r24, 0x8B	; 139
    2442:	90 e0       	ldi	r25, 0x00	; 0
    2444:	0e 94 d7 06 	call	0xdae	; 0xdae <CLCD_voidSendString>
    2448:	80 e0       	ldi	r24, 0x00	; 0
    244a:	90 e0       	ldi	r25, 0x00	; 0
    244c:	aa ef       	ldi	r26, 0xFA	; 250
    244e:	b4 e4       	ldi	r27, 0x44	; 68
    2450:	8b 87       	std	Y+11, r24	; 0x0b
    2452:	9c 87       	std	Y+12, r25	; 0x0c
    2454:	ad 87       	std	Y+13, r26	; 0x0d
    2456:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2458:	6b 85       	ldd	r22, Y+11	; 0x0b
    245a:	7c 85       	ldd	r23, Y+12	; 0x0c
    245c:	8d 85       	ldd	r24, Y+13	; 0x0d
    245e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2460:	20 e0       	ldi	r18, 0x00	; 0
    2462:	30 e0       	ldi	r19, 0x00	; 0
    2464:	4a ef       	ldi	r20, 0xFA	; 250
    2466:	54 e4       	ldi	r21, 0x44	; 68
    2468:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    246c:	dc 01       	movw	r26, r24
    246e:	cb 01       	movw	r24, r22
    2470:	8f 83       	std	Y+7, r24	; 0x07
    2472:	98 87       	std	Y+8, r25	; 0x08
    2474:	a9 87       	std	Y+9, r26	; 0x09
    2476:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2478:	6f 81       	ldd	r22, Y+7	; 0x07
    247a:	78 85       	ldd	r23, Y+8	; 0x08
    247c:	89 85       	ldd	r24, Y+9	; 0x09
    247e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2480:	20 e0       	ldi	r18, 0x00	; 0
    2482:	30 e0       	ldi	r19, 0x00	; 0
    2484:	40 e8       	ldi	r20, 0x80	; 128
    2486:	5f e3       	ldi	r21, 0x3F	; 63
    2488:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    248c:	88 23       	and	r24, r24
    248e:	2c f4       	brge	.+10     	; 0x249a <main+0x330>
		__ticks = 1;
    2490:	81 e0       	ldi	r24, 0x01	; 1
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	9e 83       	std	Y+6, r25	; 0x06
    2496:	8d 83       	std	Y+5, r24	; 0x05
    2498:	3f c0       	rjmp	.+126    	; 0x2518 <main+0x3ae>
	else if (__tmp > 65535)
    249a:	6f 81       	ldd	r22, Y+7	; 0x07
    249c:	78 85       	ldd	r23, Y+8	; 0x08
    249e:	89 85       	ldd	r24, Y+9	; 0x09
    24a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    24a2:	20 e0       	ldi	r18, 0x00	; 0
    24a4:	3f ef       	ldi	r19, 0xFF	; 255
    24a6:	4f e7       	ldi	r20, 0x7F	; 127
    24a8:	57 e4       	ldi	r21, 0x47	; 71
    24aa:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    24ae:	18 16       	cp	r1, r24
    24b0:	4c f5       	brge	.+82     	; 0x2504 <main+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    24b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    24b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    24b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    24ba:	20 e0       	ldi	r18, 0x00	; 0
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	40 e2       	ldi	r20, 0x20	; 32
    24c0:	51 e4       	ldi	r21, 0x41	; 65
    24c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24c6:	dc 01       	movw	r26, r24
    24c8:	cb 01       	movw	r24, r22
    24ca:	bc 01       	movw	r22, r24
    24cc:	cd 01       	movw	r24, r26
    24ce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24d2:	dc 01       	movw	r26, r24
    24d4:	cb 01       	movw	r24, r22
    24d6:	9e 83       	std	Y+6, r25	; 0x06
    24d8:	8d 83       	std	Y+5, r24	; 0x05
    24da:	0f c0       	rjmp	.+30     	; 0x24fa <main+0x390>
    24dc:	88 ec       	ldi	r24, 0xC8	; 200
    24de:	90 e0       	ldi	r25, 0x00	; 0
    24e0:	9c 83       	std	Y+4, r25	; 0x04
    24e2:	8b 83       	std	Y+3, r24	; 0x03
    24e4:	8b 81       	ldd	r24, Y+3	; 0x03
    24e6:	9c 81       	ldd	r25, Y+4	; 0x04
    24e8:	01 97       	sbiw	r24, 0x01	; 1
    24ea:	f1 f7       	brne	.-4      	; 0x24e8 <main+0x37e>
    24ec:	9c 83       	std	Y+4, r25	; 0x04
    24ee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24f0:	8d 81       	ldd	r24, Y+5	; 0x05
    24f2:	9e 81       	ldd	r25, Y+6	; 0x06
    24f4:	01 97       	sbiw	r24, 0x01	; 1
    24f6:	9e 83       	std	Y+6, r25	; 0x06
    24f8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24fa:	8d 81       	ldd	r24, Y+5	; 0x05
    24fc:	9e 81       	ldd	r25, Y+6	; 0x06
    24fe:	00 97       	sbiw	r24, 0x00	; 0
    2500:	69 f7       	brne	.-38     	; 0x24dc <main+0x372>
    2502:	14 c0       	rjmp	.+40     	; 0x252c <main+0x3c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2504:	6f 81       	ldd	r22, Y+7	; 0x07
    2506:	78 85       	ldd	r23, Y+8	; 0x08
    2508:	89 85       	ldd	r24, Y+9	; 0x09
    250a:	9a 85       	ldd	r25, Y+10	; 0x0a
    250c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2510:	dc 01       	movw	r26, r24
    2512:	cb 01       	movw	r24, r22
    2514:	9e 83       	std	Y+6, r25	; 0x06
    2516:	8d 83       	std	Y+5, r24	; 0x05
    2518:	8d 81       	ldd	r24, Y+5	; 0x05
    251a:	9e 81       	ldd	r25, Y+6	; 0x06
    251c:	9a 83       	std	Y+2, r25	; 0x02
    251e:	89 83       	std	Y+1, r24	; 0x01
    2520:	89 81       	ldd	r24, Y+1	; 0x01
    2522:	9a 81       	ldd	r25, Y+2	; 0x02
    2524:	01 97       	sbiw	r24, 0x01	; 1
    2526:	f1 f7       	brne	.-4      	; 0x2524 <main+0x3ba>
    2528:	9a 83       	std	Y+2, r25	; 0x02
    252a:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(2000);
			CLCD_voidSendCommand(1);
    252c:	81 e0       	ldi	r24, 0x01	; 1
    252e:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>
    2532:	2f ce       	rjmp	.-930    	; 0x2192 <main+0x28>

00002534 <ShowMainMenu>:
		}
	}
}

void ShowMainMenu(){
    2534:	df 93       	push	r29
    2536:	cf 93       	push	r28
    2538:	cd b7       	in	r28, 0x3d	; 61
    253a:	de b7       	in	r29, 0x3e	; 62
    253c:	2e 97       	sbiw	r28, 0x0e	; 14
    253e:	0f b6       	in	r0, 0x3f	; 63
    2540:	f8 94       	cli
    2542:	de bf       	out	0x3e, r29	; 62
    2544:	0f be       	out	0x3f, r0	; 63
    2546:	cd bf       	out	0x3d, r28	; 61
	CLCD_voidSendCommand(1);
    2548:	81 e0       	ldi	r24, 0x01	; 1
    254a:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>
	CLCD_voidSendString("Welcome to motor");
    254e:	89 e9       	ldi	r24, 0x99	; 153
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	0e 94 d7 06 	call	0xdae	; 0xdae <CLCD_voidSendString>
	CLCD_voidGoToXY(1,0);
    2556:	81 e0       	ldi	r24, 0x01	; 1
    2558:	60 e0       	ldi	r22, 0x00	; 0
    255a:	0e 94 81 07 	call	0xf02	; 0xf02 <CLCD_voidGoToXY>
	CLCD_voidSendString("Dashboard App");
    255e:	8a ea       	ldi	r24, 0xAA	; 170
    2560:	90 e0       	ldi	r25, 0x00	; 0
    2562:	0e 94 d7 06 	call	0xdae	; 0xdae <CLCD_voidSendString>
    2566:	80 e0       	ldi	r24, 0x00	; 0
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	aa e7       	ldi	r26, 0x7A	; 122
    256c:	b5 e4       	ldi	r27, 0x45	; 69
    256e:	8b 87       	std	Y+11, r24	; 0x0b
    2570:	9c 87       	std	Y+12, r25	; 0x0c
    2572:	ad 87       	std	Y+13, r26	; 0x0d
    2574:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2576:	6b 85       	ldd	r22, Y+11	; 0x0b
    2578:	7c 85       	ldd	r23, Y+12	; 0x0c
    257a:	8d 85       	ldd	r24, Y+13	; 0x0d
    257c:	9e 85       	ldd	r25, Y+14	; 0x0e
    257e:	20 e0       	ldi	r18, 0x00	; 0
    2580:	30 e0       	ldi	r19, 0x00	; 0
    2582:	4a ef       	ldi	r20, 0xFA	; 250
    2584:	54 e4       	ldi	r21, 0x44	; 68
    2586:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    258a:	dc 01       	movw	r26, r24
    258c:	cb 01       	movw	r24, r22
    258e:	8f 83       	std	Y+7, r24	; 0x07
    2590:	98 87       	std	Y+8, r25	; 0x08
    2592:	a9 87       	std	Y+9, r26	; 0x09
    2594:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2596:	6f 81       	ldd	r22, Y+7	; 0x07
    2598:	78 85       	ldd	r23, Y+8	; 0x08
    259a:	89 85       	ldd	r24, Y+9	; 0x09
    259c:	9a 85       	ldd	r25, Y+10	; 0x0a
    259e:	20 e0       	ldi	r18, 0x00	; 0
    25a0:	30 e0       	ldi	r19, 0x00	; 0
    25a2:	40 e8       	ldi	r20, 0x80	; 128
    25a4:	5f e3       	ldi	r21, 0x3F	; 63
    25a6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    25aa:	88 23       	and	r24, r24
    25ac:	2c f4       	brge	.+10     	; 0x25b8 <ShowMainMenu+0x84>
		__ticks = 1;
    25ae:	81 e0       	ldi	r24, 0x01	; 1
    25b0:	90 e0       	ldi	r25, 0x00	; 0
    25b2:	9e 83       	std	Y+6, r25	; 0x06
    25b4:	8d 83       	std	Y+5, r24	; 0x05
    25b6:	3f c0       	rjmp	.+126    	; 0x2636 <ShowMainMenu+0x102>
	else if (__tmp > 65535)
    25b8:	6f 81       	ldd	r22, Y+7	; 0x07
    25ba:	78 85       	ldd	r23, Y+8	; 0x08
    25bc:	89 85       	ldd	r24, Y+9	; 0x09
    25be:	9a 85       	ldd	r25, Y+10	; 0x0a
    25c0:	20 e0       	ldi	r18, 0x00	; 0
    25c2:	3f ef       	ldi	r19, 0xFF	; 255
    25c4:	4f e7       	ldi	r20, 0x7F	; 127
    25c6:	57 e4       	ldi	r21, 0x47	; 71
    25c8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    25cc:	18 16       	cp	r1, r24
    25ce:	4c f5       	brge	.+82     	; 0x2622 <ShowMainMenu+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    25d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    25d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    25d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    25d8:	20 e0       	ldi	r18, 0x00	; 0
    25da:	30 e0       	ldi	r19, 0x00	; 0
    25dc:	40 e2       	ldi	r20, 0x20	; 32
    25de:	51 e4       	ldi	r21, 0x41	; 65
    25e0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25e4:	dc 01       	movw	r26, r24
    25e6:	cb 01       	movw	r24, r22
    25e8:	bc 01       	movw	r22, r24
    25ea:	cd 01       	movw	r24, r26
    25ec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25f0:	dc 01       	movw	r26, r24
    25f2:	cb 01       	movw	r24, r22
    25f4:	9e 83       	std	Y+6, r25	; 0x06
    25f6:	8d 83       	std	Y+5, r24	; 0x05
    25f8:	0f c0       	rjmp	.+30     	; 0x2618 <ShowMainMenu+0xe4>
    25fa:	88 ec       	ldi	r24, 0xC8	; 200
    25fc:	90 e0       	ldi	r25, 0x00	; 0
    25fe:	9c 83       	std	Y+4, r25	; 0x04
    2600:	8b 83       	std	Y+3, r24	; 0x03
    2602:	8b 81       	ldd	r24, Y+3	; 0x03
    2604:	9c 81       	ldd	r25, Y+4	; 0x04
    2606:	01 97       	sbiw	r24, 0x01	; 1
    2608:	f1 f7       	brne	.-4      	; 0x2606 <ShowMainMenu+0xd2>
    260a:	9c 83       	std	Y+4, r25	; 0x04
    260c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    260e:	8d 81       	ldd	r24, Y+5	; 0x05
    2610:	9e 81       	ldd	r25, Y+6	; 0x06
    2612:	01 97       	sbiw	r24, 0x01	; 1
    2614:	9e 83       	std	Y+6, r25	; 0x06
    2616:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2618:	8d 81       	ldd	r24, Y+5	; 0x05
    261a:	9e 81       	ldd	r25, Y+6	; 0x06
    261c:	00 97       	sbiw	r24, 0x00	; 0
    261e:	69 f7       	brne	.-38     	; 0x25fa <ShowMainMenu+0xc6>
    2620:	14 c0       	rjmp	.+40     	; 0x264a <ShowMainMenu+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2622:	6f 81       	ldd	r22, Y+7	; 0x07
    2624:	78 85       	ldd	r23, Y+8	; 0x08
    2626:	89 85       	ldd	r24, Y+9	; 0x09
    2628:	9a 85       	ldd	r25, Y+10	; 0x0a
    262a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    262e:	dc 01       	movw	r26, r24
    2630:	cb 01       	movw	r24, r22
    2632:	9e 83       	std	Y+6, r25	; 0x06
    2634:	8d 83       	std	Y+5, r24	; 0x05
    2636:	8d 81       	ldd	r24, Y+5	; 0x05
    2638:	9e 81       	ldd	r25, Y+6	; 0x06
    263a:	9a 83       	std	Y+2, r25	; 0x02
    263c:	89 83       	std	Y+1, r24	; 0x01
    263e:	89 81       	ldd	r24, Y+1	; 0x01
    2640:	9a 81       	ldd	r25, Y+2	; 0x02
    2642:	01 97       	sbiw	r24, 0x01	; 1
    2644:	f1 f7       	brne	.-4      	; 0x2642 <ShowMainMenu+0x10e>
    2646:	9a 83       	std	Y+2, r25	; 0x02
    2648:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(4000);
	CLCD_voidSendCommand(1);
    264a:	81 e0       	ldi	r24, 0x01	; 1
    264c:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>
	CLCD_voidSendString("for DC Motor>1");
    2650:	88 eb       	ldi	r24, 0xB8	; 184
    2652:	90 e0       	ldi	r25, 0x00	; 0
    2654:	0e 94 d7 06 	call	0xdae	; 0xdae <CLCD_voidSendString>
	CLCD_voidGoToXY(1,0);
    2658:	81 e0       	ldi	r24, 0x01	; 1
    265a:	60 e0       	ldi	r22, 0x00	; 0
    265c:	0e 94 81 07 	call	0xf02	; 0xf02 <CLCD_voidGoToXY>
	CLCD_voidSendString("Stepper>2 Exit>3");
    2660:	87 ec       	ldi	r24, 0xC7	; 199
    2662:	90 e0       	ldi	r25, 0x00	; 0
    2664:	0e 94 d7 06 	call	0xdae	; 0xdae <CLCD_voidSendString>
}
    2668:	2e 96       	adiw	r28, 0x0e	; 14
    266a:	0f b6       	in	r0, 0x3f	; 63
    266c:	f8 94       	cli
    266e:	de bf       	out	0x3e, r29	; 62
    2670:	0f be       	out	0x3f, r0	; 63
    2672:	cd bf       	out	0x3d, r28	; 61
    2674:	cf 91       	pop	r28
    2676:	df 91       	pop	r29
    2678:	08 95       	ret

0000267a <ShowRotateMenu>:

void ShowRotateMenu(){
    267a:	df 93       	push	r29
    267c:	cf 93       	push	r28
    267e:	cd b7       	in	r28, 0x3d	; 61
    2680:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSendCommand(1);
    2682:	81 e0       	ldi	r24, 0x01	; 1
    2684:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>
	CLCD_voidSendString("Rotate CW->1");
    2688:	88 ed       	ldi	r24, 0xD8	; 216
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	0e 94 d7 06 	call	0xdae	; 0xdae <CLCD_voidSendString>
	CLCD_voidGoToXY(1,0);
    2690:	81 e0       	ldi	r24, 0x01	; 1
    2692:	60 e0       	ldi	r22, 0x00	; 0
    2694:	0e 94 81 07 	call	0xf02	; 0xf02 <CLCD_voidGoToXY>
	CLCD_voidSendString("Rotate CCW->2");
    2698:	85 ee       	ldi	r24, 0xE5	; 229
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	0e 94 d7 06 	call	0xdae	; 0xdae <CLCD_voidSendString>
}
    26a0:	cf 91       	pop	r28
    26a2:	df 91       	pop	r29
    26a4:	08 95       	ret

000026a6 <ReadKey>:

void ReadKey(u8* Copy_pu8Key){
    26a6:	df 93       	push	r29
    26a8:	cf 93       	push	r28
    26aa:	00 d0       	rcall	.+0      	; 0x26ac <ReadKey+0x6>
    26ac:	cd b7       	in	r28, 0x3d	; 61
    26ae:	de b7       	in	r29, 0x3e	; 62
    26b0:	9a 83       	std	Y+2, r25	; 0x02
    26b2:	89 83       	std	Y+1, r24	; 0x01
	do{
		*Copy_pu8Key=KPD_u8GetPressedKey();
    26b4:	0e 94 4a 0b 	call	0x1694	; 0x1694 <KPD_u8GetPressedKey>
    26b8:	e9 81       	ldd	r30, Y+1	; 0x01
    26ba:	fa 81       	ldd	r31, Y+2	; 0x02
    26bc:	80 83       	st	Z, r24
	}while(*Copy_pu8Key==0xff);
    26be:	e9 81       	ldd	r30, Y+1	; 0x01
    26c0:	fa 81       	ldd	r31, Y+2	; 0x02
    26c2:	80 81       	ld	r24, Z
    26c4:	8f 3f       	cpi	r24, 0xFF	; 255
    26c6:	b1 f3       	breq	.-20     	; 0x26b4 <ReadKey+0xe>
}
    26c8:	0f 90       	pop	r0
    26ca:	0f 90       	pop	r0
    26cc:	cf 91       	pop	r28
    26ce:	df 91       	pop	r29
    26d0:	08 95       	ret

000026d2 <u32Power>:

u32 u32Power(u32 Copy_u32Base,s32 Copy_u32Exponent){
    26d2:	df 93       	push	r29
    26d4:	cf 93       	push	r28
    26d6:	cd b7       	in	r28, 0x3d	; 61
    26d8:	de b7       	in	r29, 0x3e	; 62
    26da:	60 97       	sbiw	r28, 0x10	; 16
    26dc:	0f b6       	in	r0, 0x3f	; 63
    26de:	f8 94       	cli
    26e0:	de bf       	out	0x3e, r29	; 62
    26e2:	0f be       	out	0x3f, r0	; 63
    26e4:	cd bf       	out	0x3d, r28	; 61
    26e6:	69 87       	std	Y+9, r22	; 0x09
    26e8:	7a 87       	std	Y+10, r23	; 0x0a
    26ea:	8b 87       	std	Y+11, r24	; 0x0b
    26ec:	9c 87       	std	Y+12, r25	; 0x0c
    26ee:	2d 87       	std	Y+13, r18	; 0x0d
    26f0:	3e 87       	std	Y+14, r19	; 0x0e
    26f2:	4f 87       	std	Y+15, r20	; 0x0f
    26f4:	58 8b       	std	Y+16, r21	; 0x10
	u32 Local_u32Result=1;
    26f6:	81 e0       	ldi	r24, 0x01	; 1
    26f8:	90 e0       	ldi	r25, 0x00	; 0
    26fa:	a0 e0       	ldi	r26, 0x00	; 0
    26fc:	b0 e0       	ldi	r27, 0x00	; 0
    26fe:	8d 83       	std	Y+5, r24	; 0x05
    2700:	9e 83       	std	Y+6, r25	; 0x06
    2702:	af 83       	std	Y+7, r26	; 0x07
    2704:	b8 87       	std	Y+8, r27	; 0x08
	for(u32 i=0;i<Copy_u32Exponent;i++){
    2706:	19 82       	std	Y+1, r1	; 0x01
    2708:	1a 82       	std	Y+2, r1	; 0x02
    270a:	1b 82       	std	Y+3, r1	; 0x03
    270c:	1c 82       	std	Y+4, r1	; 0x04
    270e:	1d c0       	rjmp	.+58     	; 0x274a <u32Power+0x78>
		Local_u32Result*=Copy_u32Base;
    2710:	8d 81       	ldd	r24, Y+5	; 0x05
    2712:	9e 81       	ldd	r25, Y+6	; 0x06
    2714:	af 81       	ldd	r26, Y+7	; 0x07
    2716:	b8 85       	ldd	r27, Y+8	; 0x08
    2718:	29 85       	ldd	r18, Y+9	; 0x09
    271a:	3a 85       	ldd	r19, Y+10	; 0x0a
    271c:	4b 85       	ldd	r20, Y+11	; 0x0b
    271e:	5c 85       	ldd	r21, Y+12	; 0x0c
    2720:	bc 01       	movw	r22, r24
    2722:	cd 01       	movw	r24, r26
    2724:	0e 94 c1 13 	call	0x2782	; 0x2782 <__mulsi3>
    2728:	dc 01       	movw	r26, r24
    272a:	cb 01       	movw	r24, r22
    272c:	8d 83       	std	Y+5, r24	; 0x05
    272e:	9e 83       	std	Y+6, r25	; 0x06
    2730:	af 83       	std	Y+7, r26	; 0x07
    2732:	b8 87       	std	Y+8, r27	; 0x08
	}while(*Copy_pu8Key==0xff);
}

u32 u32Power(u32 Copy_u32Base,s32 Copy_u32Exponent){
	u32 Local_u32Result=1;
	for(u32 i=0;i<Copy_u32Exponent;i++){
    2734:	89 81       	ldd	r24, Y+1	; 0x01
    2736:	9a 81       	ldd	r25, Y+2	; 0x02
    2738:	ab 81       	ldd	r26, Y+3	; 0x03
    273a:	bc 81       	ldd	r27, Y+4	; 0x04
    273c:	01 96       	adiw	r24, 0x01	; 1
    273e:	a1 1d       	adc	r26, r1
    2740:	b1 1d       	adc	r27, r1
    2742:	89 83       	std	Y+1, r24	; 0x01
    2744:	9a 83       	std	Y+2, r25	; 0x02
    2746:	ab 83       	std	Y+3, r26	; 0x03
    2748:	bc 83       	std	Y+4, r27	; 0x04
    274a:	2d 85       	ldd	r18, Y+13	; 0x0d
    274c:	3e 85       	ldd	r19, Y+14	; 0x0e
    274e:	4f 85       	ldd	r20, Y+15	; 0x0f
    2750:	58 89       	ldd	r21, Y+16	; 0x10
    2752:	89 81       	ldd	r24, Y+1	; 0x01
    2754:	9a 81       	ldd	r25, Y+2	; 0x02
    2756:	ab 81       	ldd	r26, Y+3	; 0x03
    2758:	bc 81       	ldd	r27, Y+4	; 0x04
    275a:	82 17       	cp	r24, r18
    275c:	93 07       	cpc	r25, r19
    275e:	a4 07       	cpc	r26, r20
    2760:	b5 07       	cpc	r27, r21
    2762:	b0 f2       	brcs	.-84     	; 0x2710 <u32Power+0x3e>
		Local_u32Result*=Copy_u32Base;
	}
	return Local_u32Result;
    2764:	8d 81       	ldd	r24, Y+5	; 0x05
    2766:	9e 81       	ldd	r25, Y+6	; 0x06
    2768:	af 81       	ldd	r26, Y+7	; 0x07
    276a:	b8 85       	ldd	r27, Y+8	; 0x08
}
    276c:	bc 01       	movw	r22, r24
    276e:	cd 01       	movw	r24, r26
    2770:	60 96       	adiw	r28, 0x10	; 16
    2772:	0f b6       	in	r0, 0x3f	; 63
    2774:	f8 94       	cli
    2776:	de bf       	out	0x3e, r29	; 62
    2778:	0f be       	out	0x3f, r0	; 63
    277a:	cd bf       	out	0x3d, r28	; 61
    277c:	cf 91       	pop	r28
    277e:	df 91       	pop	r29
    2780:	08 95       	ret

00002782 <__mulsi3>:
    2782:	62 9f       	mul	r22, r18
    2784:	d0 01       	movw	r26, r0
    2786:	73 9f       	mul	r23, r19
    2788:	f0 01       	movw	r30, r0
    278a:	82 9f       	mul	r24, r18
    278c:	e0 0d       	add	r30, r0
    278e:	f1 1d       	adc	r31, r1
    2790:	64 9f       	mul	r22, r20
    2792:	e0 0d       	add	r30, r0
    2794:	f1 1d       	adc	r31, r1
    2796:	92 9f       	mul	r25, r18
    2798:	f0 0d       	add	r31, r0
    279a:	83 9f       	mul	r24, r19
    279c:	f0 0d       	add	r31, r0
    279e:	74 9f       	mul	r23, r20
    27a0:	f0 0d       	add	r31, r0
    27a2:	65 9f       	mul	r22, r21
    27a4:	f0 0d       	add	r31, r0
    27a6:	99 27       	eor	r25, r25
    27a8:	72 9f       	mul	r23, r18
    27aa:	b0 0d       	add	r27, r0
    27ac:	e1 1d       	adc	r30, r1
    27ae:	f9 1f       	adc	r31, r25
    27b0:	63 9f       	mul	r22, r19
    27b2:	b0 0d       	add	r27, r0
    27b4:	e1 1d       	adc	r30, r1
    27b6:	f9 1f       	adc	r31, r25
    27b8:	bd 01       	movw	r22, r26
    27ba:	cf 01       	movw	r24, r30
    27bc:	11 24       	eor	r1, r1
    27be:	08 95       	ret

000027c0 <__udivmodsi4>:
    27c0:	a1 e2       	ldi	r26, 0x21	; 33
    27c2:	1a 2e       	mov	r1, r26
    27c4:	aa 1b       	sub	r26, r26
    27c6:	bb 1b       	sub	r27, r27
    27c8:	fd 01       	movw	r30, r26
    27ca:	0d c0       	rjmp	.+26     	; 0x27e6 <__udivmodsi4_ep>

000027cc <__udivmodsi4_loop>:
    27cc:	aa 1f       	adc	r26, r26
    27ce:	bb 1f       	adc	r27, r27
    27d0:	ee 1f       	adc	r30, r30
    27d2:	ff 1f       	adc	r31, r31
    27d4:	a2 17       	cp	r26, r18
    27d6:	b3 07       	cpc	r27, r19
    27d8:	e4 07       	cpc	r30, r20
    27da:	f5 07       	cpc	r31, r21
    27dc:	20 f0       	brcs	.+8      	; 0x27e6 <__udivmodsi4_ep>
    27de:	a2 1b       	sub	r26, r18
    27e0:	b3 0b       	sbc	r27, r19
    27e2:	e4 0b       	sbc	r30, r20
    27e4:	f5 0b       	sbc	r31, r21

000027e6 <__udivmodsi4_ep>:
    27e6:	66 1f       	adc	r22, r22
    27e8:	77 1f       	adc	r23, r23
    27ea:	88 1f       	adc	r24, r24
    27ec:	99 1f       	adc	r25, r25
    27ee:	1a 94       	dec	r1
    27f0:	69 f7       	brne	.-38     	; 0x27cc <__udivmodsi4_loop>
    27f2:	60 95       	com	r22
    27f4:	70 95       	com	r23
    27f6:	80 95       	com	r24
    27f8:	90 95       	com	r25
    27fa:	9b 01       	movw	r18, r22
    27fc:	ac 01       	movw	r20, r24
    27fe:	bd 01       	movw	r22, r26
    2800:	cf 01       	movw	r24, r30
    2802:	08 95       	ret

00002804 <__prologue_saves__>:
    2804:	2f 92       	push	r2
    2806:	3f 92       	push	r3
    2808:	4f 92       	push	r4
    280a:	5f 92       	push	r5
    280c:	6f 92       	push	r6
    280e:	7f 92       	push	r7
    2810:	8f 92       	push	r8
    2812:	9f 92       	push	r9
    2814:	af 92       	push	r10
    2816:	bf 92       	push	r11
    2818:	cf 92       	push	r12
    281a:	df 92       	push	r13
    281c:	ef 92       	push	r14
    281e:	ff 92       	push	r15
    2820:	0f 93       	push	r16
    2822:	1f 93       	push	r17
    2824:	cf 93       	push	r28
    2826:	df 93       	push	r29
    2828:	cd b7       	in	r28, 0x3d	; 61
    282a:	de b7       	in	r29, 0x3e	; 62
    282c:	ca 1b       	sub	r28, r26
    282e:	db 0b       	sbc	r29, r27
    2830:	0f b6       	in	r0, 0x3f	; 63
    2832:	f8 94       	cli
    2834:	de bf       	out	0x3e, r29	; 62
    2836:	0f be       	out	0x3f, r0	; 63
    2838:	cd bf       	out	0x3d, r28	; 61
    283a:	09 94       	ijmp

0000283c <__epilogue_restores__>:
    283c:	2a 88       	ldd	r2, Y+18	; 0x12
    283e:	39 88       	ldd	r3, Y+17	; 0x11
    2840:	48 88       	ldd	r4, Y+16	; 0x10
    2842:	5f 84       	ldd	r5, Y+15	; 0x0f
    2844:	6e 84       	ldd	r6, Y+14	; 0x0e
    2846:	7d 84       	ldd	r7, Y+13	; 0x0d
    2848:	8c 84       	ldd	r8, Y+12	; 0x0c
    284a:	9b 84       	ldd	r9, Y+11	; 0x0b
    284c:	aa 84       	ldd	r10, Y+10	; 0x0a
    284e:	b9 84       	ldd	r11, Y+9	; 0x09
    2850:	c8 84       	ldd	r12, Y+8	; 0x08
    2852:	df 80       	ldd	r13, Y+7	; 0x07
    2854:	ee 80       	ldd	r14, Y+6	; 0x06
    2856:	fd 80       	ldd	r15, Y+5	; 0x05
    2858:	0c 81       	ldd	r16, Y+4	; 0x04
    285a:	1b 81       	ldd	r17, Y+3	; 0x03
    285c:	aa 81       	ldd	r26, Y+2	; 0x02
    285e:	b9 81       	ldd	r27, Y+1	; 0x01
    2860:	ce 0f       	add	r28, r30
    2862:	d1 1d       	adc	r29, r1
    2864:	0f b6       	in	r0, 0x3f	; 63
    2866:	f8 94       	cli
    2868:	de bf       	out	0x3e, r29	; 62
    286a:	0f be       	out	0x3f, r0	; 63
    286c:	cd bf       	out	0x3d, r28	; 61
    286e:	ed 01       	movw	r28, r26
    2870:	08 95       	ret

00002872 <_exit>:
    2872:	f8 94       	cli

00002874 <__stop_program>:
    2874:	ff cf       	rjmp	.-2      	; 0x2874 <__stop_program>
