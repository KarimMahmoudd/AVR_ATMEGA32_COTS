
ICU_HW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000326e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  0000326e  00003302  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000027  00800080  00800080  00003322  2**0
                  ALLOC
  3 .stab         00002eec  00000000  00000000  00003324  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001419  00000000  00000000  00006210  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007629  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007769  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000078d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009522  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a40d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b1bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b31c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b5a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bd77  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 50 15 	jmp	0x2aa0	; 0x2aa0 <__vector_4>
      14:	0c 94 83 15 	jmp	0x2b06	; 0x2b06 <__vector_5>
      18:	0c 94 b6 15 	jmp	0x2b6c	; 0x2b6c <__vector_6>
      1c:	0c 94 e9 15 	jmp	0x2bd2	; 0x2bd2 <__vector_7>
      20:	0c 94 1c 16 	jmp	0x2c38	; 0x2c38 <__vector_8>
      24:	0c 94 4f 16 	jmp	0x2c9e	; 0x2c9e <__vector_9>
      28:	0c 94 82 16 	jmp	0x2d04	; 0x2d04 <__vector_10>
      2c:	0c 94 b5 16 	jmp	0x2d6a	; 0x2d6a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e6       	ldi	r30, 0x6E	; 110
      68:	f2 e3       	ldi	r31, 0x32	; 50
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 3a       	cpi	r26, 0xA7	; 167
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e8 16 	call	0x2dd0	; 0x2dd0 <main>
      8a:	0c 94 35 19 	jmp	0x326a	; 0x326a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 fe 18 	jmp	0x31fc	; 0x31fc <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 1a 19 	jmp	0x3234	; 0x3234 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 0a 19 	jmp	0x3214	; 0x3214 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 26 19 	jmp	0x324c	; 0x324c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 0a 19 	jmp	0x3214	; 0x3214 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 26 19 	jmp	0x324c	; 0x324c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 fe 18 	jmp	0x31fc	; 0x31fc <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 1a 19 	jmp	0x3234	; 0x3234 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 0a 19 	jmp	0x3214	; 0x3214 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 26 19 	jmp	0x324c	; 0x324c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 0a 19 	jmp	0x3214	; 0x3214 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 26 19 	jmp	0x324c	; 0x324c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 0a 19 	jmp	0x3214	; 0x3214 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 26 19 	jmp	0x324c	; 0x324c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 0e 19 	jmp	0x321c	; 0x321c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 2a 19 	jmp	0x3254	; 0x3254 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <CLCD_voidSendCommand>:
#include "CLCD_private.h"
#include "CLCD_config.h"



void CLCD_voidSendCommand(u8 Copy_u8Command){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2f 97       	sbiw	r28, 0x0f	; 15
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	8f 87       	std	Y+15, r24	; 0x0f
	/*set RS pin to low for command*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
     b5c:	80 e0       	ldi	r24, 0x00	; 0
     b5e:	67 e0       	ldi	r22, 0x07	; 7
     b60:	40 e0       	ldi	r20, 0x00	; 0
     b62:	0e 94 8d 08 	call	0x111a	; 0x111a <DIO_u8SetPinValue>
	/*set RW pin to low for write*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	66 e0       	ldi	r22, 0x06	; 6
     b6a:	40 e0       	ldi	r20, 0x00	; 0
     b6c:	0e 94 8d 08 	call	0x111a	; 0x111a <DIO_u8SetPinValue>
	/*set data port to command*/
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Command);
     b70:	82 e0       	ldi	r24, 0x02	; 2
     b72:	6f 85       	ldd	r22, Y+15	; 0x0f
     b74:	0e 94 9f 09 	call	0x133e	; 0x133e <DIO_u8SetPortValue>
	/*send enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	65 e0       	ldi	r22, 0x05	; 5
     b7c:	41 e0       	ldi	r20, 0x01	; 1
     b7e:	0e 94 8d 08 	call	0x111a	; 0x111a <DIO_u8SetPinValue>
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	a0 e0       	ldi	r26, 0x00	; 0
     b88:	b0 e4       	ldi	r27, 0x40	; 64
     b8a:	8b 87       	std	Y+11, r24	; 0x0b
     b8c:	9c 87       	std	Y+12, r25	; 0x0c
     b8e:	ad 87       	std	Y+13, r26	; 0x0d
     b90:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b92:	6b 85       	ldd	r22, Y+11	; 0x0b
     b94:	7c 85       	ldd	r23, Y+12	; 0x0c
     b96:	8d 85       	ldd	r24, Y+13	; 0x0d
     b98:	9e 85       	ldd	r25, Y+14	; 0x0e
     b9a:	20 e0       	ldi	r18, 0x00	; 0
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	4a ef       	ldi	r20, 0xFA	; 250
     ba0:	54 e4       	ldi	r21, 0x44	; 68
     ba2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ba6:	dc 01       	movw	r26, r24
     ba8:	cb 01       	movw	r24, r22
     baa:	8f 83       	std	Y+7, r24	; 0x07
     bac:	98 87       	std	Y+8, r25	; 0x08
     bae:	a9 87       	std	Y+9, r26	; 0x09
     bb0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bb2:	6f 81       	ldd	r22, Y+7	; 0x07
     bb4:	78 85       	ldd	r23, Y+8	; 0x08
     bb6:	89 85       	ldd	r24, Y+9	; 0x09
     bb8:	9a 85       	ldd	r25, Y+10	; 0x0a
     bba:	20 e0       	ldi	r18, 0x00	; 0
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	40 e8       	ldi	r20, 0x80	; 128
     bc0:	5f e3       	ldi	r21, 0x3F	; 63
     bc2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bc6:	88 23       	and	r24, r24
     bc8:	2c f4       	brge	.+10     	; 0xbd4 <CLCD_voidSendCommand+0x8e>
		__ticks = 1;
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	9e 83       	std	Y+6, r25	; 0x06
     bd0:	8d 83       	std	Y+5, r24	; 0x05
     bd2:	3f c0       	rjmp	.+126    	; 0xc52 <CLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
     bd4:	6f 81       	ldd	r22, Y+7	; 0x07
     bd6:	78 85       	ldd	r23, Y+8	; 0x08
     bd8:	89 85       	ldd	r24, Y+9	; 0x09
     bda:	9a 85       	ldd	r25, Y+10	; 0x0a
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	3f ef       	ldi	r19, 0xFF	; 255
     be0:	4f e7       	ldi	r20, 0x7F	; 127
     be2:	57 e4       	ldi	r21, 0x47	; 71
     be4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     be8:	18 16       	cp	r1, r24
     bea:	4c f5       	brge	.+82     	; 0xc3e <CLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bec:	6b 85       	ldd	r22, Y+11	; 0x0b
     bee:	7c 85       	ldd	r23, Y+12	; 0x0c
     bf0:	8d 85       	ldd	r24, Y+13	; 0x0d
     bf2:	9e 85       	ldd	r25, Y+14	; 0x0e
     bf4:	20 e0       	ldi	r18, 0x00	; 0
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	40 e2       	ldi	r20, 0x20	; 32
     bfa:	51 e4       	ldi	r21, 0x41	; 65
     bfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c00:	dc 01       	movw	r26, r24
     c02:	cb 01       	movw	r24, r22
     c04:	bc 01       	movw	r22, r24
     c06:	cd 01       	movw	r24, r26
     c08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c0c:	dc 01       	movw	r26, r24
     c0e:	cb 01       	movw	r24, r22
     c10:	9e 83       	std	Y+6, r25	; 0x06
     c12:	8d 83       	std	Y+5, r24	; 0x05
     c14:	0f c0       	rjmp	.+30     	; 0xc34 <CLCD_voidSendCommand+0xee>
     c16:	88 ec       	ldi	r24, 0xC8	; 200
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	9c 83       	std	Y+4, r25	; 0x04
     c1c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c1e:	8b 81       	ldd	r24, Y+3	; 0x03
     c20:	9c 81       	ldd	r25, Y+4	; 0x04
     c22:	01 97       	sbiw	r24, 0x01	; 1
     c24:	f1 f7       	brne	.-4      	; 0xc22 <CLCD_voidSendCommand+0xdc>
     c26:	9c 83       	std	Y+4, r25	; 0x04
     c28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c2a:	8d 81       	ldd	r24, Y+5	; 0x05
     c2c:	9e 81       	ldd	r25, Y+6	; 0x06
     c2e:	01 97       	sbiw	r24, 0x01	; 1
     c30:	9e 83       	std	Y+6, r25	; 0x06
     c32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c34:	8d 81       	ldd	r24, Y+5	; 0x05
     c36:	9e 81       	ldd	r25, Y+6	; 0x06
     c38:	00 97       	sbiw	r24, 0x00	; 0
     c3a:	69 f7       	brne	.-38     	; 0xc16 <CLCD_voidSendCommand+0xd0>
     c3c:	14 c0       	rjmp	.+40     	; 0xc66 <CLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c3e:	6f 81       	ldd	r22, Y+7	; 0x07
     c40:	78 85       	ldd	r23, Y+8	; 0x08
     c42:	89 85       	ldd	r24, Y+9	; 0x09
     c44:	9a 85       	ldd	r25, Y+10	; 0x0a
     c46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c4a:	dc 01       	movw	r26, r24
     c4c:	cb 01       	movw	r24, r22
     c4e:	9e 83       	std	Y+6, r25	; 0x06
     c50:	8d 83       	std	Y+5, r24	; 0x05
     c52:	8d 81       	ldd	r24, Y+5	; 0x05
     c54:	9e 81       	ldd	r25, Y+6	; 0x06
     c56:	9a 83       	std	Y+2, r25	; 0x02
     c58:	89 83       	std	Y+1, r24	; 0x01
     c5a:	89 81       	ldd	r24, Y+1	; 0x01
     c5c:	9a 81       	ldd	r25, Y+2	; 0x02
     c5e:	01 97       	sbiw	r24, 0x01	; 1
     c60:	f1 f7       	brne	.-4      	; 0xc5e <CLCD_voidSendCommand+0x118>
     c62:	9a 83       	std	Y+2, r25	; 0x02
     c64:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
     c66:	80 e0       	ldi	r24, 0x00	; 0
     c68:	65 e0       	ldi	r22, 0x05	; 5
     c6a:	40 e0       	ldi	r20, 0x00	; 0
     c6c:	0e 94 8d 08 	call	0x111a	; 0x111a <DIO_u8SetPinValue>
}
     c70:	2f 96       	adiw	r28, 0x0f	; 15
     c72:	0f b6       	in	r0, 0x3f	; 63
     c74:	f8 94       	cli
     c76:	de bf       	out	0x3e, r29	; 62
     c78:	0f be       	out	0x3f, r0	; 63
     c7a:	cd bf       	out	0x3d, r28	; 61
     c7c:	cf 91       	pop	r28
     c7e:	df 91       	pop	r29
     c80:	08 95       	ret

00000c82 <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data){
     c82:	df 93       	push	r29
     c84:	cf 93       	push	r28
     c86:	cd b7       	in	r28, 0x3d	; 61
     c88:	de b7       	in	r29, 0x3e	; 62
     c8a:	2f 97       	sbiw	r28, 0x0f	; 15
     c8c:	0f b6       	in	r0, 0x3f	; 63
     c8e:	f8 94       	cli
     c90:	de bf       	out	0x3e, r29	; 62
     c92:	0f be       	out	0x3f, r0	; 63
     c94:	cd bf       	out	0x3d, r28	; 61
     c96:	8f 87       	std	Y+15, r24	; 0x0f
	/*set RS pin to high for data*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
     c98:	80 e0       	ldi	r24, 0x00	; 0
     c9a:	67 e0       	ldi	r22, 0x07	; 7
     c9c:	41 e0       	ldi	r20, 0x01	; 1
     c9e:	0e 94 8d 08 	call	0x111a	; 0x111a <DIO_u8SetPinValue>
	/*set RW pin to low for write*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
     ca2:	80 e0       	ldi	r24, 0x00	; 0
     ca4:	66 e0       	ldi	r22, 0x06	; 6
     ca6:	40 e0       	ldi	r20, 0x00	; 0
     ca8:	0e 94 8d 08 	call	0x111a	; 0x111a <DIO_u8SetPinValue>
	/*set data port to data*/
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Data);
     cac:	82 e0       	ldi	r24, 0x02	; 2
     cae:	6f 85       	ldd	r22, Y+15	; 0x0f
     cb0:	0e 94 9f 09 	call	0x133e	; 0x133e <DIO_u8SetPortValue>
	/*send enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     cb4:	80 e0       	ldi	r24, 0x00	; 0
     cb6:	65 e0       	ldi	r22, 0x05	; 5
     cb8:	41 e0       	ldi	r20, 0x01	; 1
     cba:	0e 94 8d 08 	call	0x111a	; 0x111a <DIO_u8SetPinValue>
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	a0 e0       	ldi	r26, 0x00	; 0
     cc4:	b0 e4       	ldi	r27, 0x40	; 64
     cc6:	8b 87       	std	Y+11, r24	; 0x0b
     cc8:	9c 87       	std	Y+12, r25	; 0x0c
     cca:	ad 87       	std	Y+13, r26	; 0x0d
     ccc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cce:	6b 85       	ldd	r22, Y+11	; 0x0b
     cd0:	7c 85       	ldd	r23, Y+12	; 0x0c
     cd2:	8d 85       	ldd	r24, Y+13	; 0x0d
     cd4:	9e 85       	ldd	r25, Y+14	; 0x0e
     cd6:	20 e0       	ldi	r18, 0x00	; 0
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	4a ef       	ldi	r20, 0xFA	; 250
     cdc:	54 e4       	ldi	r21, 0x44	; 68
     cde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ce2:	dc 01       	movw	r26, r24
     ce4:	cb 01       	movw	r24, r22
     ce6:	8f 83       	std	Y+7, r24	; 0x07
     ce8:	98 87       	std	Y+8, r25	; 0x08
     cea:	a9 87       	std	Y+9, r26	; 0x09
     cec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cee:	6f 81       	ldd	r22, Y+7	; 0x07
     cf0:	78 85       	ldd	r23, Y+8	; 0x08
     cf2:	89 85       	ldd	r24, Y+9	; 0x09
     cf4:	9a 85       	ldd	r25, Y+10	; 0x0a
     cf6:	20 e0       	ldi	r18, 0x00	; 0
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	40 e8       	ldi	r20, 0x80	; 128
     cfc:	5f e3       	ldi	r21, 0x3F	; 63
     cfe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d02:	88 23       	and	r24, r24
     d04:	2c f4       	brge	.+10     	; 0xd10 <CLCD_voidSendData+0x8e>
		__ticks = 1;
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	9e 83       	std	Y+6, r25	; 0x06
     d0c:	8d 83       	std	Y+5, r24	; 0x05
     d0e:	3f c0       	rjmp	.+126    	; 0xd8e <CLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
     d10:	6f 81       	ldd	r22, Y+7	; 0x07
     d12:	78 85       	ldd	r23, Y+8	; 0x08
     d14:	89 85       	ldd	r24, Y+9	; 0x09
     d16:	9a 85       	ldd	r25, Y+10	; 0x0a
     d18:	20 e0       	ldi	r18, 0x00	; 0
     d1a:	3f ef       	ldi	r19, 0xFF	; 255
     d1c:	4f e7       	ldi	r20, 0x7F	; 127
     d1e:	57 e4       	ldi	r21, 0x47	; 71
     d20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d24:	18 16       	cp	r1, r24
     d26:	4c f5       	brge	.+82     	; 0xd7a <CLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d28:	6b 85       	ldd	r22, Y+11	; 0x0b
     d2a:	7c 85       	ldd	r23, Y+12	; 0x0c
     d2c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d2e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d30:	20 e0       	ldi	r18, 0x00	; 0
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	40 e2       	ldi	r20, 0x20	; 32
     d36:	51 e4       	ldi	r21, 0x41	; 65
     d38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d3c:	dc 01       	movw	r26, r24
     d3e:	cb 01       	movw	r24, r22
     d40:	bc 01       	movw	r22, r24
     d42:	cd 01       	movw	r24, r26
     d44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d48:	dc 01       	movw	r26, r24
     d4a:	cb 01       	movw	r24, r22
     d4c:	9e 83       	std	Y+6, r25	; 0x06
     d4e:	8d 83       	std	Y+5, r24	; 0x05
     d50:	0f c0       	rjmp	.+30     	; 0xd70 <CLCD_voidSendData+0xee>
     d52:	88 ec       	ldi	r24, 0xC8	; 200
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	9c 83       	std	Y+4, r25	; 0x04
     d58:	8b 83       	std	Y+3, r24	; 0x03
     d5a:	8b 81       	ldd	r24, Y+3	; 0x03
     d5c:	9c 81       	ldd	r25, Y+4	; 0x04
     d5e:	01 97       	sbiw	r24, 0x01	; 1
     d60:	f1 f7       	brne	.-4      	; 0xd5e <CLCD_voidSendData+0xdc>
     d62:	9c 83       	std	Y+4, r25	; 0x04
     d64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d66:	8d 81       	ldd	r24, Y+5	; 0x05
     d68:	9e 81       	ldd	r25, Y+6	; 0x06
     d6a:	01 97       	sbiw	r24, 0x01	; 1
     d6c:	9e 83       	std	Y+6, r25	; 0x06
     d6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d70:	8d 81       	ldd	r24, Y+5	; 0x05
     d72:	9e 81       	ldd	r25, Y+6	; 0x06
     d74:	00 97       	sbiw	r24, 0x00	; 0
     d76:	69 f7       	brne	.-38     	; 0xd52 <CLCD_voidSendData+0xd0>
     d78:	14 c0       	rjmp	.+40     	; 0xda2 <CLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d7a:	6f 81       	ldd	r22, Y+7	; 0x07
     d7c:	78 85       	ldd	r23, Y+8	; 0x08
     d7e:	89 85       	ldd	r24, Y+9	; 0x09
     d80:	9a 85       	ldd	r25, Y+10	; 0x0a
     d82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d86:	dc 01       	movw	r26, r24
     d88:	cb 01       	movw	r24, r22
     d8a:	9e 83       	std	Y+6, r25	; 0x06
     d8c:	8d 83       	std	Y+5, r24	; 0x05
     d8e:	8d 81       	ldd	r24, Y+5	; 0x05
     d90:	9e 81       	ldd	r25, Y+6	; 0x06
     d92:	9a 83       	std	Y+2, r25	; 0x02
     d94:	89 83       	std	Y+1, r24	; 0x01
     d96:	89 81       	ldd	r24, Y+1	; 0x01
     d98:	9a 81       	ldd	r25, Y+2	; 0x02
     d9a:	01 97       	sbiw	r24, 0x01	; 1
     d9c:	f1 f7       	brne	.-4      	; 0xd9a <CLCD_voidSendData+0x118>
     d9e:	9a 83       	std	Y+2, r25	; 0x02
     da0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
     da2:	80 e0       	ldi	r24, 0x00	; 0
     da4:	65 e0       	ldi	r22, 0x05	; 5
     da6:	40 e0       	ldi	r20, 0x00	; 0
     da8:	0e 94 8d 08 	call	0x111a	; 0x111a <DIO_u8SetPinValue>
}
     dac:	2f 96       	adiw	r28, 0x0f	; 15
     dae:	0f b6       	in	r0, 0x3f	; 63
     db0:	f8 94       	cli
     db2:	de bf       	out	0x3e, r29	; 62
     db4:	0f be       	out	0x3f, r0	; 63
     db6:	cd bf       	out	0x3d, r28	; 61
     db8:	cf 91       	pop	r28
     dba:	df 91       	pop	r29
     dbc:	08 95       	ret

00000dbe <CLCD_voidSendString>:
void CLCD_voidSendString(const char* Copy_pcString){
     dbe:	df 93       	push	r29
     dc0:	cf 93       	push	r28
     dc2:	00 d0       	rcall	.+0      	; 0xdc4 <CLCD_voidSendString+0x6>
     dc4:	cd b7       	in	r28, 0x3d	; 61
     dc6:	de b7       	in	r29, 0x3e	; 62
     dc8:	9a 83       	std	Y+2, r25	; 0x02
     dca:	89 83       	std	Y+1, r24	; 0x01
     dcc:	0a c0       	rjmp	.+20     	; 0xde2 <CLCD_voidSendString+0x24>
	while(*Copy_pcString != '\0'){
		CLCD_voidSendData(*Copy_pcString);
     dce:	e9 81       	ldd	r30, Y+1	; 0x01
     dd0:	fa 81       	ldd	r31, Y+2	; 0x02
     dd2:	80 81       	ld	r24, Z
     dd4:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
		Copy_pcString++;
     dd8:	89 81       	ldd	r24, Y+1	; 0x01
     dda:	9a 81       	ldd	r25, Y+2	; 0x02
     ddc:	01 96       	adiw	r24, 0x01	; 1
     dde:	9a 83       	std	Y+2, r25	; 0x02
     de0:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
}
void CLCD_voidSendString(const char* Copy_pcString){
	while(*Copy_pcString != '\0'){
     de2:	e9 81       	ldd	r30, Y+1	; 0x01
     de4:	fa 81       	ldd	r31, Y+2	; 0x02
     de6:	80 81       	ld	r24, Z
     de8:	88 23       	and	r24, r24
     dea:	89 f7       	brne	.-30     	; 0xdce <CLCD_voidSendString+0x10>
		CLCD_voidSendData(*Copy_pcString);
		Copy_pcString++;
	}
}
     dec:	0f 90       	pop	r0
     dee:	0f 90       	pop	r0
     df0:	cf 91       	pop	r28
     df2:	df 91       	pop	r29
     df4:	08 95       	ret

00000df6 <CLCD_voidInit>:
void CLCD_voidInit(void){
     df6:	df 93       	push	r29
     df8:	cf 93       	push	r28
     dfa:	cd b7       	in	r28, 0x3d	; 61
     dfc:	de b7       	in	r29, 0x3e	; 62
     dfe:	2e 97       	sbiw	r28, 0x0e	; 14
     e00:	0f b6       	in	r0, 0x3f	; 63
     e02:	f8 94       	cli
     e04:	de bf       	out	0x3e, r29	; 62
     e06:	0f be       	out	0x3f, r0	; 63
     e08:	cd bf       	out	0x3d, r28	; 61
     e0a:	80 e0       	ldi	r24, 0x00	; 0
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	a0 e2       	ldi	r26, 0x20	; 32
     e10:	b2 e4       	ldi	r27, 0x42	; 66
     e12:	8b 87       	std	Y+11, r24	; 0x0b
     e14:	9c 87       	std	Y+12, r25	; 0x0c
     e16:	ad 87       	std	Y+13, r26	; 0x0d
     e18:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e1a:	6b 85       	ldd	r22, Y+11	; 0x0b
     e1c:	7c 85       	ldd	r23, Y+12	; 0x0c
     e1e:	8d 85       	ldd	r24, Y+13	; 0x0d
     e20:	9e 85       	ldd	r25, Y+14	; 0x0e
     e22:	20 e0       	ldi	r18, 0x00	; 0
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	4a ef       	ldi	r20, 0xFA	; 250
     e28:	54 e4       	ldi	r21, 0x44	; 68
     e2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e2e:	dc 01       	movw	r26, r24
     e30:	cb 01       	movw	r24, r22
     e32:	8f 83       	std	Y+7, r24	; 0x07
     e34:	98 87       	std	Y+8, r25	; 0x08
     e36:	a9 87       	std	Y+9, r26	; 0x09
     e38:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e3a:	6f 81       	ldd	r22, Y+7	; 0x07
     e3c:	78 85       	ldd	r23, Y+8	; 0x08
     e3e:	89 85       	ldd	r24, Y+9	; 0x09
     e40:	9a 85       	ldd	r25, Y+10	; 0x0a
     e42:	20 e0       	ldi	r18, 0x00	; 0
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	40 e8       	ldi	r20, 0x80	; 128
     e48:	5f e3       	ldi	r21, 0x3F	; 63
     e4a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e4e:	88 23       	and	r24, r24
     e50:	2c f4       	brge	.+10     	; 0xe5c <CLCD_voidInit+0x66>
		__ticks = 1;
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	9e 83       	std	Y+6, r25	; 0x06
     e58:	8d 83       	std	Y+5, r24	; 0x05
     e5a:	3f c0       	rjmp	.+126    	; 0xeda <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
     e5c:	6f 81       	ldd	r22, Y+7	; 0x07
     e5e:	78 85       	ldd	r23, Y+8	; 0x08
     e60:	89 85       	ldd	r24, Y+9	; 0x09
     e62:	9a 85       	ldd	r25, Y+10	; 0x0a
     e64:	20 e0       	ldi	r18, 0x00	; 0
     e66:	3f ef       	ldi	r19, 0xFF	; 255
     e68:	4f e7       	ldi	r20, 0x7F	; 127
     e6a:	57 e4       	ldi	r21, 0x47	; 71
     e6c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e70:	18 16       	cp	r1, r24
     e72:	4c f5       	brge	.+82     	; 0xec6 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e74:	6b 85       	ldd	r22, Y+11	; 0x0b
     e76:	7c 85       	ldd	r23, Y+12	; 0x0c
     e78:	8d 85       	ldd	r24, Y+13	; 0x0d
     e7a:	9e 85       	ldd	r25, Y+14	; 0x0e
     e7c:	20 e0       	ldi	r18, 0x00	; 0
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	40 e2       	ldi	r20, 0x20	; 32
     e82:	51 e4       	ldi	r21, 0x41	; 65
     e84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e88:	dc 01       	movw	r26, r24
     e8a:	cb 01       	movw	r24, r22
     e8c:	bc 01       	movw	r22, r24
     e8e:	cd 01       	movw	r24, r26
     e90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e94:	dc 01       	movw	r26, r24
     e96:	cb 01       	movw	r24, r22
     e98:	9e 83       	std	Y+6, r25	; 0x06
     e9a:	8d 83       	std	Y+5, r24	; 0x05
     e9c:	0f c0       	rjmp	.+30     	; 0xebc <CLCD_voidInit+0xc6>
     e9e:	88 ec       	ldi	r24, 0xC8	; 200
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	9c 83       	std	Y+4, r25	; 0x04
     ea4:	8b 83       	std	Y+3, r24	; 0x03
     ea6:	8b 81       	ldd	r24, Y+3	; 0x03
     ea8:	9c 81       	ldd	r25, Y+4	; 0x04
     eaa:	01 97       	sbiw	r24, 0x01	; 1
     eac:	f1 f7       	brne	.-4      	; 0xeaa <CLCD_voidInit+0xb4>
     eae:	9c 83       	std	Y+4, r25	; 0x04
     eb0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eb2:	8d 81       	ldd	r24, Y+5	; 0x05
     eb4:	9e 81       	ldd	r25, Y+6	; 0x06
     eb6:	01 97       	sbiw	r24, 0x01	; 1
     eb8:	9e 83       	std	Y+6, r25	; 0x06
     eba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ebc:	8d 81       	ldd	r24, Y+5	; 0x05
     ebe:	9e 81       	ldd	r25, Y+6	; 0x06
     ec0:	00 97       	sbiw	r24, 0x00	; 0
     ec2:	69 f7       	brne	.-38     	; 0xe9e <CLCD_voidInit+0xa8>
     ec4:	14 c0       	rjmp	.+40     	; 0xeee <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ec6:	6f 81       	ldd	r22, Y+7	; 0x07
     ec8:	78 85       	ldd	r23, Y+8	; 0x08
     eca:	89 85       	ldd	r24, Y+9	; 0x09
     ecc:	9a 85       	ldd	r25, Y+10	; 0x0a
     ece:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ed2:	dc 01       	movw	r26, r24
     ed4:	cb 01       	movw	r24, r22
     ed6:	9e 83       	std	Y+6, r25	; 0x06
     ed8:	8d 83       	std	Y+5, r24	; 0x05
     eda:	8d 81       	ldd	r24, Y+5	; 0x05
     edc:	9e 81       	ldd	r25, Y+6	; 0x06
     ede:	9a 83       	std	Y+2, r25	; 0x02
     ee0:	89 83       	std	Y+1, r24	; 0x01
     ee2:	89 81       	ldd	r24, Y+1	; 0x01
     ee4:	9a 81       	ldd	r25, Y+2	; 0x02
     ee6:	01 97       	sbiw	r24, 0x01	; 1
     ee8:	f1 f7       	brne	.-4      	; 0xee6 <CLCD_voidInit+0xf0>
     eea:	9a 83       	std	Y+2, r25	; 0x02
     eec:	89 83       	std	Y+1, r24	; 0x01
	/*wait for more than 30 ms*/
	_delay_ms(40);
	/*Function Set Command: 2 lines, 5*8 Font Size*/
	CLCD_voidSendCommand(0b00111000);
     eee:	88 e3       	ldi	r24, 0x38	; 56
     ef0:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
	/*Display control on off: enable display disable cursor no blinking cursor*/
	CLCD_voidSendCommand(0b00001100);
     ef4:	8c e0       	ldi	r24, 0x0C	; 12
     ef6:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
	/*clear display*/
	CLCD_voidSendCommand(1);
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>


}
     f00:	2e 96       	adiw	r28, 0x0e	; 14
     f02:	0f b6       	in	r0, 0x3f	; 63
     f04:	f8 94       	cli
     f06:	de bf       	out	0x3e, r29	; 62
     f08:	0f be       	out	0x3f, r0	; 63
     f0a:	cd bf       	out	0x3d, r28	; 61
     f0c:	cf 91       	pop	r28
     f0e:	df 91       	pop	r29
     f10:	08 95       	ret

00000f12 <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(u8 Copy_u8XPos,u8 Copy_u8YPos){
     f12:	df 93       	push	r29
     f14:	cf 93       	push	r28
     f16:	00 d0       	rcall	.+0      	; 0xf18 <CLCD_voidGoToXY+0x6>
     f18:	0f 92       	push	r0
     f1a:	cd b7       	in	r28, 0x3d	; 61
     f1c:	de b7       	in	r29, 0x3e	; 62
     f1e:	8a 83       	std	Y+2, r24	; 0x02
     f20:	6b 83       	std	Y+3, r22	; 0x03
	/*converting the position into an address*/
	u8 Local_u8Adress;
	if(Copy_u8XPos==0){
     f22:	8a 81       	ldd	r24, Y+2	; 0x02
     f24:	88 23       	and	r24, r24
     f26:	19 f4       	brne	.+6      	; 0xf2e <CLCD_voidGoToXY+0x1c>
		Local_u8Adress = Copy_u8YPos;
     f28:	8b 81       	ldd	r24, Y+3	; 0x03
     f2a:	89 83       	std	Y+1, r24	; 0x01
     f2c:	06 c0       	rjmp	.+12     	; 0xf3a <CLCD_voidGoToXY+0x28>
	}
	else if(Copy_u8XPos==1){
     f2e:	8a 81       	ldd	r24, Y+2	; 0x02
     f30:	81 30       	cpi	r24, 0x01	; 1
     f32:	19 f4       	brne	.+6      	; 0xf3a <CLCD_voidGoToXY+0x28>
		Local_u8Adress = Copy_u8YPos+0x40;
     f34:	8b 81       	ldd	r24, Y+3	; 0x03
     f36:	80 5c       	subi	r24, 0xC0	; 192
     f38:	89 83       	std	Y+1, r24	; 0x01
	}
	/*setting the 7th bit so we can send the set ddram address command*/
	SET_BIT(Local_u8Adress,7);
     f3a:	89 81       	ldd	r24, Y+1	; 0x01
     f3c:	80 68       	ori	r24, 0x80	; 128
     f3e:	89 83       	std	Y+1, r24	; 0x01
	CLCD_voidSendCommand(Local_u8Adress);
     f40:	89 81       	ldd	r24, Y+1	; 0x01
     f42:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
}
     f46:	0f 90       	pop	r0
     f48:	0f 90       	pop	r0
     f4a:	0f 90       	pop	r0
     f4c:	cf 91       	pop	r28
     f4e:	df 91       	pop	r29
     f50:	08 95       	ret

00000f52 <CLCD_voidWriteSpecialCharacter>:

void CLCD_voidWriteSpecialCharacter(u8* Copy_pu8Arr,u8 Copy_u8PatternNumber){
     f52:	df 93       	push	r29
     f54:	cf 93       	push	r28
     f56:	00 d0       	rcall	.+0      	; 0xf58 <CLCD_voidWriteSpecialCharacter+0x6>
     f58:	00 d0       	rcall	.+0      	; 0xf5a <CLCD_voidWriteSpecialCharacter+0x8>
     f5a:	0f 92       	push	r0
     f5c:	cd b7       	in	r28, 0x3d	; 61
     f5e:	de b7       	in	r29, 0x3e	; 62
     f60:	9c 83       	std	Y+4, r25	; 0x04
     f62:	8b 83       	std	Y+3, r24	; 0x03
     f64:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8Iterator;
	/*calculate CGRAM address of block 8 bytes*/
	u8 Local_u8CGRAMAdress = Copy_u8PatternNumber*8;
     f66:	8d 81       	ldd	r24, Y+5	; 0x05
     f68:	88 2f       	mov	r24, r24
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	88 0f       	add	r24, r24
     f6e:	99 1f       	adc	r25, r25
     f70:	88 0f       	add	r24, r24
     f72:	99 1f       	adc	r25, r25
     f74:	88 0f       	add	r24, r24
     f76:	99 1f       	adc	r25, r25
     f78:	89 83       	std	Y+1, r24	; 0x01
	/*set bit 6 for command and set the CGRAM address command*/
	SET_BIT(Local_u8CGRAMAdress,6);
     f7a:	89 81       	ldd	r24, Y+1	; 0x01
     f7c:	80 64       	ori	r24, 0x40	; 64
     f7e:	89 83       	std	Y+1, r24	; 0x01
	CLCD_voidSendCommand(Local_u8CGRAMAdress);
     f80:	89 81       	ldd	r24, Y+1	; 0x01
     f82:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
	/*write the pattern on CGRAM*/
	for(Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++){
     f86:	1a 82       	std	Y+2, r1	; 0x02
     f88:	0e c0       	rjmp	.+28     	; 0xfa6 <CLCD_voidWriteSpecialCharacter+0x54>
		CLCD_voidSendData(Copy_pu8Arr[Local_u8Iterator]);
     f8a:	8a 81       	ldd	r24, Y+2	; 0x02
     f8c:	28 2f       	mov	r18, r24
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	8b 81       	ldd	r24, Y+3	; 0x03
     f92:	9c 81       	ldd	r25, Y+4	; 0x04
     f94:	fc 01       	movw	r30, r24
     f96:	e2 0f       	add	r30, r18
     f98:	f3 1f       	adc	r31, r19
     f9a:	80 81       	ld	r24, Z
     f9c:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
	u8 Local_u8CGRAMAdress = Copy_u8PatternNumber*8;
	/*set bit 6 for command and set the CGRAM address command*/
	SET_BIT(Local_u8CGRAMAdress,6);
	CLCD_voidSendCommand(Local_u8CGRAMAdress);
	/*write the pattern on CGRAM*/
	for(Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++){
     fa0:	8a 81       	ldd	r24, Y+2	; 0x02
     fa2:	8f 5f       	subi	r24, 0xFF	; 255
     fa4:	8a 83       	std	Y+2, r24	; 0x02
     fa6:	8a 81       	ldd	r24, Y+2	; 0x02
     fa8:	88 30       	cpi	r24, 0x08	; 8
     faa:	78 f3       	brcs	.-34     	; 0xf8a <CLCD_voidWriteSpecialCharacter+0x38>
		CLCD_voidSendData(Copy_pu8Arr[Local_u8Iterator]);
	}
}
     fac:	0f 90       	pop	r0
     fae:	0f 90       	pop	r0
     fb0:	0f 90       	pop	r0
     fb2:	0f 90       	pop	r0
     fb4:	0f 90       	pop	r0
     fb6:	cf 91       	pop	r28
     fb8:	df 91       	pop	r29
     fba:	08 95       	ret

00000fbc <CLCD_voidSendSpecialCharacter>:
void CLCD_voidSendSpecialCharacter(u8 Copy_u8PatternNumber,u8 Copy_u8XPos,u8 Copy_u8YPos){
     fbc:	df 93       	push	r29
     fbe:	cf 93       	push	r28
     fc0:	00 d0       	rcall	.+0      	; 0xfc2 <CLCD_voidSendSpecialCharacter+0x6>
     fc2:	0f 92       	push	r0
     fc4:	cd b7       	in	r28, 0x3d	; 61
     fc6:	de b7       	in	r29, 0x3e	; 62
     fc8:	89 83       	std	Y+1, r24	; 0x01
     fca:	6a 83       	std	Y+2, r22	; 0x02
     fcc:	4b 83       	std	Y+3, r20	; 0x03
	/*go back to ddram to display pattern and send pattern by choosing battern blovk*/
	CLCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
     fce:	8a 81       	ldd	r24, Y+2	; 0x02
     fd0:	6b 81       	ldd	r22, Y+3	; 0x03
     fd2:	0e 94 89 07 	call	0xf12	; 0xf12 <CLCD_voidGoToXY>
	CLCD_voidSendData(Copy_u8PatternNumber);
     fd6:	89 81       	ldd	r24, Y+1	; 0x01
     fd8:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
}
     fdc:	0f 90       	pop	r0
     fde:	0f 90       	pop	r0
     fe0:	0f 90       	pop	r0
     fe2:	cf 91       	pop	r28
     fe4:	df 91       	pop	r29
     fe6:	08 95       	ret

00000fe8 <CLCD_voidSendNumber>:


void CLCD_voidSendNumber(u32 Copy_u32Number){
     fe8:	df 93       	push	r29
     fea:	cf 93       	push	r28
     fec:	cd b7       	in	r28, 0x3d	; 61
     fee:	de b7       	in	r29, 0x3e	; 62
     ff0:	2b 97       	sbiw	r28, 0x0b	; 11
     ff2:	0f b6       	in	r0, 0x3f	; 63
     ff4:	f8 94       	cli
     ff6:	de bf       	out	0x3e, r29	; 62
     ff8:	0f be       	out	0x3f, r0	; 63
     ffa:	cd bf       	out	0x3d, r28	; 61
     ffc:	68 87       	std	Y+8, r22	; 0x08
     ffe:	79 87       	std	Y+9, r23	; 0x09
    1000:	8a 87       	std	Y+10, r24	; 0x0a
    1002:	9b 87       	std	Y+11, r25	; 0x0b
	/*set local variables to know the number of digits and the digit to print*/
	u8 Local_u8Quotient=1;
    1004:	81 e0       	ldi	r24, 0x01	; 1
    1006:	8f 83       	std	Y+7, r24	; 0x07
	u8 Local_u8NumOfDigits=0;
    1008:	1e 82       	std	Y+6, r1	; 0x06
    100a:	1b c0       	rjmp	.+54     	; 0x1042 <CLCD_voidSendNumber+0x5a>
    u8 Local_u8Digit;
    /*calculating the number of digits in the number*/
	while(Local_u8Quotient!=0){
		Local_u8Quotient = Copy_u32Number/MATH_u32Power(10,++Local_u8NumOfDigits);
    100c:	8e 81       	ldd	r24, Y+6	; 0x06
    100e:	8f 5f       	subi	r24, 0xFF	; 255
    1010:	8e 83       	std	Y+6, r24	; 0x06
    1012:	8e 81       	ldd	r24, Y+6	; 0x06
    1014:	28 2f       	mov	r18, r24
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	40 e0       	ldi	r20, 0x00	; 0
    101a:	50 e0       	ldi	r21, 0x00	; 0
    101c:	6a e0       	ldi	r22, 0x0A	; 10
    101e:	70 e0       	ldi	r23, 0x00	; 0
    1020:	80 e0       	ldi	r24, 0x00	; 0
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	0e 94 ed 0a 	call	0x15da	; 0x15da <MATH_u32Power>
    1028:	9b 01       	movw	r18, r22
    102a:	ac 01       	movw	r20, r24
    102c:	88 85       	ldd	r24, Y+8	; 0x08
    102e:	99 85       	ldd	r25, Y+9	; 0x09
    1030:	aa 85       	ldd	r26, Y+10	; 0x0a
    1032:	bb 85       	ldd	r27, Y+11	; 0x0b
    1034:	bc 01       	movw	r22, r24
    1036:	cd 01       	movw	r24, r26
    1038:	0e 94 c1 18 	call	0x3182	; 0x3182 <__udivmodsi4>
    103c:	da 01       	movw	r26, r20
    103e:	c9 01       	movw	r24, r18
    1040:	8f 83       	std	Y+7, r24	; 0x07
	/*set local variables to know the number of digits and the digit to print*/
	u8 Local_u8Quotient=1;
	u8 Local_u8NumOfDigits=0;
    u8 Local_u8Digit;
    /*calculating the number of digits in the number*/
	while(Local_u8Quotient!=0){
    1042:	8f 81       	ldd	r24, Y+7	; 0x07
    1044:	88 23       	and	r24, r24
    1046:	11 f7       	brne	.-60     	; 0x100c <CLCD_voidSendNumber+0x24>
		Local_u8Quotient = Copy_u32Number/MATH_u32Power(10,++Local_u8NumOfDigits);
	}
	/*separating each digit then sending then sending them separately to the CLCD*/
	for(s32 Local_u8Power =Local_u8NumOfDigits-1;Local_u8Power>=0;Local_u8Power--){
    1048:	8e 81       	ldd	r24, Y+6	; 0x06
    104a:	88 2f       	mov	r24, r24
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	01 97       	sbiw	r24, 0x01	; 1
    1050:	aa 27       	eor	r26, r26
    1052:	97 fd       	sbrc	r25, 7
    1054:	a0 95       	com	r26
    1056:	ba 2f       	mov	r27, r26
    1058:	89 83       	std	Y+1, r24	; 0x01
    105a:	9a 83       	std	Y+2, r25	; 0x02
    105c:	ab 83       	std	Y+3, r26	; 0x03
    105e:	bc 83       	std	Y+4, r27	; 0x04
    1060:	42 c0       	rjmp	.+132    	; 0x10e6 <CLCD_voidSendNumber+0xfe>
	        Local_u8Digit=Copy_u32Number/MATH_u32Power(10,Local_u8Power);
    1062:	29 81       	ldd	r18, Y+1	; 0x01
    1064:	3a 81       	ldd	r19, Y+2	; 0x02
    1066:	4b 81       	ldd	r20, Y+3	; 0x03
    1068:	5c 81       	ldd	r21, Y+4	; 0x04
    106a:	6a e0       	ldi	r22, 0x0A	; 10
    106c:	70 e0       	ldi	r23, 0x00	; 0
    106e:	80 e0       	ldi	r24, 0x00	; 0
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	0e 94 ed 0a 	call	0x15da	; 0x15da <MATH_u32Power>
    1076:	9b 01       	movw	r18, r22
    1078:	ac 01       	movw	r20, r24
    107a:	88 85       	ldd	r24, Y+8	; 0x08
    107c:	99 85       	ldd	r25, Y+9	; 0x09
    107e:	aa 85       	ldd	r26, Y+10	; 0x0a
    1080:	bb 85       	ldd	r27, Y+11	; 0x0b
    1082:	bc 01       	movw	r22, r24
    1084:	cd 01       	movw	r24, r26
    1086:	0e 94 c1 18 	call	0x3182	; 0x3182 <__udivmodsi4>
    108a:	da 01       	movw	r26, r20
    108c:	c9 01       	movw	r24, r18
    108e:	8d 83       	std	Y+5, r24	; 0x05
	        Copy_u32Number %= MATH_u32Power(10,Local_u8Power);
    1090:	29 81       	ldd	r18, Y+1	; 0x01
    1092:	3a 81       	ldd	r19, Y+2	; 0x02
    1094:	4b 81       	ldd	r20, Y+3	; 0x03
    1096:	5c 81       	ldd	r21, Y+4	; 0x04
    1098:	6a e0       	ldi	r22, 0x0A	; 10
    109a:	70 e0       	ldi	r23, 0x00	; 0
    109c:	80 e0       	ldi	r24, 0x00	; 0
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	0e 94 ed 0a 	call	0x15da	; 0x15da <MATH_u32Power>
    10a4:	9b 01       	movw	r18, r22
    10a6:	ac 01       	movw	r20, r24
    10a8:	88 85       	ldd	r24, Y+8	; 0x08
    10aa:	99 85       	ldd	r25, Y+9	; 0x09
    10ac:	aa 85       	ldd	r26, Y+10	; 0x0a
    10ae:	bb 85       	ldd	r27, Y+11	; 0x0b
    10b0:	bc 01       	movw	r22, r24
    10b2:	cd 01       	movw	r24, r26
    10b4:	0e 94 c1 18 	call	0x3182	; 0x3182 <__udivmodsi4>
    10b8:	dc 01       	movw	r26, r24
    10ba:	cb 01       	movw	r24, r22
    10bc:	88 87       	std	Y+8, r24	; 0x08
    10be:	99 87       	std	Y+9, r25	; 0x09
    10c0:	aa 87       	std	Y+10, r26	; 0x0a
    10c2:	bb 87       	std	Y+11, r27	; 0x0b
	        Local_u8Digit+=48;
    10c4:	8d 81       	ldd	r24, Y+5	; 0x05
    10c6:	80 5d       	subi	r24, 0xD0	; 208
    10c8:	8d 83       	std	Y+5, r24	; 0x05
	        CLCD_voidSendData(Local_u8Digit);
    10ca:	8d 81       	ldd	r24, Y+5	; 0x05
    10cc:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    /*calculating the number of digits in the number*/
	while(Local_u8Quotient!=0){
		Local_u8Quotient = Copy_u32Number/MATH_u32Power(10,++Local_u8NumOfDigits);
	}
	/*separating each digit then sending then sending them separately to the CLCD*/
	for(s32 Local_u8Power =Local_u8NumOfDigits-1;Local_u8Power>=0;Local_u8Power--){
    10d0:	89 81       	ldd	r24, Y+1	; 0x01
    10d2:	9a 81       	ldd	r25, Y+2	; 0x02
    10d4:	ab 81       	ldd	r26, Y+3	; 0x03
    10d6:	bc 81       	ldd	r27, Y+4	; 0x04
    10d8:	01 97       	sbiw	r24, 0x01	; 1
    10da:	a1 09       	sbc	r26, r1
    10dc:	b1 09       	sbc	r27, r1
    10de:	89 83       	std	Y+1, r24	; 0x01
    10e0:	9a 83       	std	Y+2, r25	; 0x02
    10e2:	ab 83       	std	Y+3, r26	; 0x03
    10e4:	bc 83       	std	Y+4, r27	; 0x04
    10e6:	89 81       	ldd	r24, Y+1	; 0x01
    10e8:	9a 81       	ldd	r25, Y+2	; 0x02
    10ea:	ab 81       	ldd	r26, Y+3	; 0x03
    10ec:	bc 81       	ldd	r27, Y+4	; 0x04
    10ee:	bb 23       	and	r27, r27
    10f0:	0c f0       	brlt	.+2      	; 0x10f4 <CLCD_voidSendNumber+0x10c>
    10f2:	b7 cf       	rjmp	.-146    	; 0x1062 <CLCD_voidSendNumber+0x7a>
	        Local_u8Digit=Copy_u32Number/MATH_u32Power(10,Local_u8Power);
	        Copy_u32Number %= MATH_u32Power(10,Local_u8Power);
	        Local_u8Digit+=48;
	        CLCD_voidSendData(Local_u8Digit);
	    }
}
    10f4:	2b 96       	adiw	r28, 0x0b	; 11
    10f6:	0f b6       	in	r0, 0x3f	; 63
    10f8:	f8 94       	cli
    10fa:	de bf       	out	0x3e, r29	; 62
    10fc:	0f be       	out	0x3f, r0	; 63
    10fe:	cd bf       	out	0x3d, r28	; 61
    1100:	cf 91       	pop	r28
    1102:	df 91       	pop	r29
    1104:	08 95       	ret

00001106 <CLCD_voidCLR>:

void CLCD_voidCLR(void){
    1106:	df 93       	push	r29
    1108:	cf 93       	push	r28
    110a:	cd b7       	in	r28, 0x3d	; 61
    110c:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSendCommand(CLCD_CLR);
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
}
    1114:	cf 91       	pop	r28
    1116:	df 91       	pop	r29
    1118:	08 95       	ret

0000111a <DIO_u8SetPinValue>:
#include "DIO_private.h"
#include "DIO_config.h"



u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value){
    111a:	df 93       	push	r29
    111c:	cf 93       	push	r28
    111e:	cd b7       	in	r28, 0x3d	; 61
    1120:	de b7       	in	r29, 0x3e	; 62
    1122:	28 97       	sbiw	r28, 0x08	; 8
    1124:	0f b6       	in	r0, 0x3f	; 63
    1126:	f8 94       	cli
    1128:	de bf       	out	0x3e, r29	; 62
    112a:	0f be       	out	0x3f, r0	; 63
    112c:	cd bf       	out	0x3d, r28	; 61
    112e:	8a 83       	std	Y+2, r24	; 0x02
    1130:	6b 83       	std	Y+3, r22	; 0x03
    1132:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    1134:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin <= DIO_u8PIN7){
    1136:	8b 81       	ldd	r24, Y+3	; 0x03
    1138:	88 30       	cpi	r24, 0x08	; 8
    113a:	08 f0       	brcs	.+2      	; 0x113e <DIO_u8SetPinValue+0x24>
    113c:	f4 c0       	rjmp	.+488    	; 0x1326 <DIO_u8SetPinValue+0x20c>
		if(Copy_u8Value == DIO_u8PIN_LOW){
    113e:	8c 81       	ldd	r24, Y+4	; 0x04
    1140:	88 23       	and	r24, r24
    1142:	09 f0       	breq	.+2      	; 0x1146 <DIO_u8SetPinValue+0x2c>
    1144:	77 c0       	rjmp	.+238    	; 0x1234 <DIO_u8SetPinValue+0x11a>
			switch(Copy_u8Port){
    1146:	8a 81       	ldd	r24, Y+2	; 0x02
    1148:	28 2f       	mov	r18, r24
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	38 87       	std	Y+8, r19	; 0x08
    114e:	2f 83       	std	Y+7, r18	; 0x07
    1150:	8f 81       	ldd	r24, Y+7	; 0x07
    1152:	98 85       	ldd	r25, Y+8	; 0x08
    1154:	81 30       	cpi	r24, 0x01	; 1
    1156:	91 05       	cpc	r25, r1
    1158:	59 f1       	breq	.+86     	; 0x11b0 <DIO_u8SetPinValue+0x96>
    115a:	2f 81       	ldd	r18, Y+7	; 0x07
    115c:	38 85       	ldd	r19, Y+8	; 0x08
    115e:	22 30       	cpi	r18, 0x02	; 2
    1160:	31 05       	cpc	r19, r1
    1162:	2c f4       	brge	.+10     	; 0x116e <DIO_u8SetPinValue+0x54>
    1164:	8f 81       	ldd	r24, Y+7	; 0x07
    1166:	98 85       	ldd	r25, Y+8	; 0x08
    1168:	00 97       	sbiw	r24, 0x00	; 0
    116a:	69 f0       	breq	.+26     	; 0x1186 <DIO_u8SetPinValue+0x6c>
    116c:	60 c0       	rjmp	.+192    	; 0x122e <DIO_u8SetPinValue+0x114>
    116e:	2f 81       	ldd	r18, Y+7	; 0x07
    1170:	38 85       	ldd	r19, Y+8	; 0x08
    1172:	22 30       	cpi	r18, 0x02	; 2
    1174:	31 05       	cpc	r19, r1
    1176:	89 f1       	breq	.+98     	; 0x11da <DIO_u8SetPinValue+0xc0>
    1178:	8f 81       	ldd	r24, Y+7	; 0x07
    117a:	98 85       	ldd	r25, Y+8	; 0x08
    117c:	83 30       	cpi	r24, 0x03	; 3
    117e:	91 05       	cpc	r25, r1
    1180:	09 f4       	brne	.+2      	; 0x1184 <DIO_u8SetPinValue+0x6a>
    1182:	40 c0       	rjmp	.+128    	; 0x1204 <DIO_u8SetPinValue+0xea>
    1184:	54 c0       	rjmp	.+168    	; 0x122e <DIO_u8SetPinValue+0x114>
			case DIO_u8PORTA : CLR_BIT(PORTA,Copy_u8Pin); break;
    1186:	ab e3       	ldi	r26, 0x3B	; 59
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	eb e3       	ldi	r30, 0x3B	; 59
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	48 2f       	mov	r20, r24
    1192:	8b 81       	ldd	r24, Y+3	; 0x03
    1194:	28 2f       	mov	r18, r24
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	02 2e       	mov	r0, r18
    119e:	02 c0       	rjmp	.+4      	; 0x11a4 <DIO_u8SetPinValue+0x8a>
    11a0:	88 0f       	add	r24, r24
    11a2:	99 1f       	adc	r25, r25
    11a4:	0a 94       	dec	r0
    11a6:	e2 f7       	brpl	.-8      	; 0x11a0 <DIO_u8SetPinValue+0x86>
    11a8:	80 95       	com	r24
    11aa:	84 23       	and	r24, r20
    11ac:	8c 93       	st	X, r24
    11ae:	bd c0       	rjmp	.+378    	; 0x132a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB : CLR_BIT(PORTB,Copy_u8Pin); break;
    11b0:	a8 e3       	ldi	r26, 0x38	; 56
    11b2:	b0 e0       	ldi	r27, 0x00	; 0
    11b4:	e8 e3       	ldi	r30, 0x38	; 56
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	48 2f       	mov	r20, r24
    11bc:	8b 81       	ldd	r24, Y+3	; 0x03
    11be:	28 2f       	mov	r18, r24
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	02 2e       	mov	r0, r18
    11c8:	02 c0       	rjmp	.+4      	; 0x11ce <DIO_u8SetPinValue+0xb4>
    11ca:	88 0f       	add	r24, r24
    11cc:	99 1f       	adc	r25, r25
    11ce:	0a 94       	dec	r0
    11d0:	e2 f7       	brpl	.-8      	; 0x11ca <DIO_u8SetPinValue+0xb0>
    11d2:	80 95       	com	r24
    11d4:	84 23       	and	r24, r20
    11d6:	8c 93       	st	X, r24
    11d8:	a8 c0       	rjmp	.+336    	; 0x132a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC : CLR_BIT(PORTC,Copy_u8Pin); break;
    11da:	a5 e3       	ldi	r26, 0x35	; 53
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	e5 e3       	ldi	r30, 0x35	; 53
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	48 2f       	mov	r20, r24
    11e6:	8b 81       	ldd	r24, Y+3	; 0x03
    11e8:	28 2f       	mov	r18, r24
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	02 2e       	mov	r0, r18
    11f2:	02 c0       	rjmp	.+4      	; 0x11f8 <DIO_u8SetPinValue+0xde>
    11f4:	88 0f       	add	r24, r24
    11f6:	99 1f       	adc	r25, r25
    11f8:	0a 94       	dec	r0
    11fa:	e2 f7       	brpl	.-8      	; 0x11f4 <DIO_u8SetPinValue+0xda>
    11fc:	80 95       	com	r24
    11fe:	84 23       	and	r24, r20
    1200:	8c 93       	st	X, r24
    1202:	93 c0       	rjmp	.+294    	; 0x132a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD : CLR_BIT(PORTD,Copy_u8Pin); break;
    1204:	a2 e3       	ldi	r26, 0x32	; 50
    1206:	b0 e0       	ldi	r27, 0x00	; 0
    1208:	e2 e3       	ldi	r30, 0x32	; 50
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	80 81       	ld	r24, Z
    120e:	48 2f       	mov	r20, r24
    1210:	8b 81       	ldd	r24, Y+3	; 0x03
    1212:	28 2f       	mov	r18, r24
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	81 e0       	ldi	r24, 0x01	; 1
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	02 2e       	mov	r0, r18
    121c:	02 c0       	rjmp	.+4      	; 0x1222 <DIO_u8SetPinValue+0x108>
    121e:	88 0f       	add	r24, r24
    1220:	99 1f       	adc	r25, r25
    1222:	0a 94       	dec	r0
    1224:	e2 f7       	brpl	.-8      	; 0x121e <DIO_u8SetPinValue+0x104>
    1226:	80 95       	com	r24
    1228:	84 23       	and	r24, r20
    122a:	8c 93       	st	X, r24
    122c:	7e c0       	rjmp	.+252    	; 0x132a <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1;
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	89 83       	std	Y+1, r24	; 0x01
    1232:	7b c0       	rjmp	.+246    	; 0x132a <DIO_u8SetPinValue+0x210>
			}
		}
		else if(Copy_u8Value == DIO_u8PIN_HIGH){
    1234:	8c 81       	ldd	r24, Y+4	; 0x04
    1236:	81 30       	cpi	r24, 0x01	; 1
    1238:	09 f0       	breq	.+2      	; 0x123c <DIO_u8SetPinValue+0x122>
    123a:	72 c0       	rjmp	.+228    	; 0x1320 <DIO_u8SetPinValue+0x206>
			switch(Copy_u8Port){
    123c:	8a 81       	ldd	r24, Y+2	; 0x02
    123e:	28 2f       	mov	r18, r24
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	3e 83       	std	Y+6, r19	; 0x06
    1244:	2d 83       	std	Y+5, r18	; 0x05
    1246:	8d 81       	ldd	r24, Y+5	; 0x05
    1248:	9e 81       	ldd	r25, Y+6	; 0x06
    124a:	81 30       	cpi	r24, 0x01	; 1
    124c:	91 05       	cpc	r25, r1
    124e:	49 f1       	breq	.+82     	; 0x12a2 <DIO_u8SetPinValue+0x188>
    1250:	2d 81       	ldd	r18, Y+5	; 0x05
    1252:	3e 81       	ldd	r19, Y+6	; 0x06
    1254:	22 30       	cpi	r18, 0x02	; 2
    1256:	31 05       	cpc	r19, r1
    1258:	2c f4       	brge	.+10     	; 0x1264 <DIO_u8SetPinValue+0x14a>
    125a:	8d 81       	ldd	r24, Y+5	; 0x05
    125c:	9e 81       	ldd	r25, Y+6	; 0x06
    125e:	00 97       	sbiw	r24, 0x00	; 0
    1260:	61 f0       	breq	.+24     	; 0x127a <DIO_u8SetPinValue+0x160>
    1262:	5b c0       	rjmp	.+182    	; 0x131a <DIO_u8SetPinValue+0x200>
    1264:	2d 81       	ldd	r18, Y+5	; 0x05
    1266:	3e 81       	ldd	r19, Y+6	; 0x06
    1268:	22 30       	cpi	r18, 0x02	; 2
    126a:	31 05       	cpc	r19, r1
    126c:	71 f1       	breq	.+92     	; 0x12ca <DIO_u8SetPinValue+0x1b0>
    126e:	8d 81       	ldd	r24, Y+5	; 0x05
    1270:	9e 81       	ldd	r25, Y+6	; 0x06
    1272:	83 30       	cpi	r24, 0x03	; 3
    1274:	91 05       	cpc	r25, r1
    1276:	e9 f1       	breq	.+122    	; 0x12f2 <DIO_u8SetPinValue+0x1d8>
    1278:	50 c0       	rjmp	.+160    	; 0x131a <DIO_u8SetPinValue+0x200>
			case DIO_u8PORTA : SET_BIT(PORTA,Copy_u8Pin); break;
    127a:	ab e3       	ldi	r26, 0x3B	; 59
    127c:	b0 e0       	ldi	r27, 0x00	; 0
    127e:	eb e3       	ldi	r30, 0x3B	; 59
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	80 81       	ld	r24, Z
    1284:	48 2f       	mov	r20, r24
    1286:	8b 81       	ldd	r24, Y+3	; 0x03
    1288:	28 2f       	mov	r18, r24
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	02 2e       	mov	r0, r18
    1292:	02 c0       	rjmp	.+4      	; 0x1298 <DIO_u8SetPinValue+0x17e>
    1294:	88 0f       	add	r24, r24
    1296:	99 1f       	adc	r25, r25
    1298:	0a 94       	dec	r0
    129a:	e2 f7       	brpl	.-8      	; 0x1294 <DIO_u8SetPinValue+0x17a>
    129c:	84 2b       	or	r24, r20
    129e:	8c 93       	st	X, r24
    12a0:	44 c0       	rjmp	.+136    	; 0x132a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB : SET_BIT(PORTB,Copy_u8Pin); break;
    12a2:	a8 e3       	ldi	r26, 0x38	; 56
    12a4:	b0 e0       	ldi	r27, 0x00	; 0
    12a6:	e8 e3       	ldi	r30, 0x38	; 56
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	48 2f       	mov	r20, r24
    12ae:	8b 81       	ldd	r24, Y+3	; 0x03
    12b0:	28 2f       	mov	r18, r24
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	02 2e       	mov	r0, r18
    12ba:	02 c0       	rjmp	.+4      	; 0x12c0 <DIO_u8SetPinValue+0x1a6>
    12bc:	88 0f       	add	r24, r24
    12be:	99 1f       	adc	r25, r25
    12c0:	0a 94       	dec	r0
    12c2:	e2 f7       	brpl	.-8      	; 0x12bc <DIO_u8SetPinValue+0x1a2>
    12c4:	84 2b       	or	r24, r20
    12c6:	8c 93       	st	X, r24
    12c8:	30 c0       	rjmp	.+96     	; 0x132a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC : SET_BIT(PORTC,Copy_u8Pin); break;
    12ca:	a5 e3       	ldi	r26, 0x35	; 53
    12cc:	b0 e0       	ldi	r27, 0x00	; 0
    12ce:	e5 e3       	ldi	r30, 0x35	; 53
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	80 81       	ld	r24, Z
    12d4:	48 2f       	mov	r20, r24
    12d6:	8b 81       	ldd	r24, Y+3	; 0x03
    12d8:	28 2f       	mov	r18, r24
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	02 2e       	mov	r0, r18
    12e2:	02 c0       	rjmp	.+4      	; 0x12e8 <DIO_u8SetPinValue+0x1ce>
    12e4:	88 0f       	add	r24, r24
    12e6:	99 1f       	adc	r25, r25
    12e8:	0a 94       	dec	r0
    12ea:	e2 f7       	brpl	.-8      	; 0x12e4 <DIO_u8SetPinValue+0x1ca>
    12ec:	84 2b       	or	r24, r20
    12ee:	8c 93       	st	X, r24
    12f0:	1c c0       	rjmp	.+56     	; 0x132a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD : SET_BIT(PORTD,Copy_u8Pin); break;
    12f2:	a2 e3       	ldi	r26, 0x32	; 50
    12f4:	b0 e0       	ldi	r27, 0x00	; 0
    12f6:	e2 e3       	ldi	r30, 0x32	; 50
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	80 81       	ld	r24, Z
    12fc:	48 2f       	mov	r20, r24
    12fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1300:	28 2f       	mov	r18, r24
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	81 e0       	ldi	r24, 0x01	; 1
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	02 2e       	mov	r0, r18
    130a:	02 c0       	rjmp	.+4      	; 0x1310 <DIO_u8SetPinValue+0x1f6>
    130c:	88 0f       	add	r24, r24
    130e:	99 1f       	adc	r25, r25
    1310:	0a 94       	dec	r0
    1312:	e2 f7       	brpl	.-8      	; 0x130c <DIO_u8SetPinValue+0x1f2>
    1314:	84 2b       	or	r24, r20
    1316:	8c 93       	st	X, r24
    1318:	08 c0       	rjmp	.+16     	; 0x132a <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1;
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	89 83       	std	Y+1, r24	; 0x01
    131e:	05 c0       	rjmp	.+10     	; 0x132a <DIO_u8SetPinValue+0x210>
			}
		}
		else{
			Local_u8ErrorState=1;
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	89 83       	std	Y+1, r24	; 0x01
    1324:	02 c0       	rjmp	.+4      	; 0x132a <DIO_u8SetPinValue+0x210>
		}
	}
	else{
		Local_u8ErrorState=1;
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState ;
    132a:	89 81       	ldd	r24, Y+1	; 0x01
}
    132c:	28 96       	adiw	r28, 0x08	; 8
    132e:	0f b6       	in	r0, 0x3f	; 63
    1330:	f8 94       	cli
    1332:	de bf       	out	0x3e, r29	; 62
    1334:	0f be       	out	0x3f, r0	; 63
    1336:	cd bf       	out	0x3d, r28	; 61
    1338:	cf 91       	pop	r28
    133a:	df 91       	pop	r29
    133c:	08 95       	ret

0000133e <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8Port,u8 Copy_u8Value){
    133e:	df 93       	push	r29
    1340:	cf 93       	push	r28
    1342:	00 d0       	rcall	.+0      	; 0x1344 <DIO_u8SetPortValue+0x6>
    1344:	00 d0       	rcall	.+0      	; 0x1346 <DIO_u8SetPortValue+0x8>
    1346:	0f 92       	push	r0
    1348:	cd b7       	in	r28, 0x3d	; 61
    134a:	de b7       	in	r29, 0x3e	; 62
    134c:	8a 83       	std	Y+2, r24	; 0x02
    134e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    1350:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8Port)
    1352:	8a 81       	ldd	r24, Y+2	; 0x02
    1354:	28 2f       	mov	r18, r24
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	3d 83       	std	Y+5, r19	; 0x05
    135a:	2c 83       	std	Y+4, r18	; 0x04
    135c:	8c 81       	ldd	r24, Y+4	; 0x04
    135e:	9d 81       	ldd	r25, Y+5	; 0x05
    1360:	81 30       	cpi	r24, 0x01	; 1
    1362:	91 05       	cpc	r25, r1
    1364:	d1 f0       	breq	.+52     	; 0x139a <DIO_u8SetPortValue+0x5c>
    1366:	2c 81       	ldd	r18, Y+4	; 0x04
    1368:	3d 81       	ldd	r19, Y+5	; 0x05
    136a:	22 30       	cpi	r18, 0x02	; 2
    136c:	31 05       	cpc	r19, r1
    136e:	2c f4       	brge	.+10     	; 0x137a <DIO_u8SetPortValue+0x3c>
    1370:	8c 81       	ldd	r24, Y+4	; 0x04
    1372:	9d 81       	ldd	r25, Y+5	; 0x05
    1374:	00 97       	sbiw	r24, 0x00	; 0
    1376:	61 f0       	breq	.+24     	; 0x1390 <DIO_u8SetPortValue+0x52>
    1378:	1f c0       	rjmp	.+62     	; 0x13b8 <DIO_u8SetPortValue+0x7a>
    137a:	2c 81       	ldd	r18, Y+4	; 0x04
    137c:	3d 81       	ldd	r19, Y+5	; 0x05
    137e:	22 30       	cpi	r18, 0x02	; 2
    1380:	31 05       	cpc	r19, r1
    1382:	81 f0       	breq	.+32     	; 0x13a4 <DIO_u8SetPortValue+0x66>
    1384:	8c 81       	ldd	r24, Y+4	; 0x04
    1386:	9d 81       	ldd	r25, Y+5	; 0x05
    1388:	83 30       	cpi	r24, 0x03	; 3
    138a:	91 05       	cpc	r25, r1
    138c:	81 f0       	breq	.+32     	; 0x13ae <DIO_u8SetPortValue+0x70>
    138e:	14 c0       	rjmp	.+40     	; 0x13b8 <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA: PORTA=Copy_u8Value; break;
    1390:	eb e3       	ldi	r30, 0x3B	; 59
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	8b 81       	ldd	r24, Y+3	; 0x03
    1396:	80 83       	st	Z, r24
    1398:	11 c0       	rjmp	.+34     	; 0x13bc <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB: PORTB=Copy_u8Value; break;
    139a:	e8 e3       	ldi	r30, 0x38	; 56
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	8b 81       	ldd	r24, Y+3	; 0x03
    13a0:	80 83       	st	Z, r24
    13a2:	0c c0       	rjmp	.+24     	; 0x13bc <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC: PORTC=Copy_u8Value; break;
    13a4:	e5 e3       	ldi	r30, 0x35	; 53
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	8b 81       	ldd	r24, Y+3	; 0x03
    13aa:	80 83       	st	Z, r24
    13ac:	07 c0       	rjmp	.+14     	; 0x13bc <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD: PORTD=Copy_u8Value; break;
    13ae:	e2 e3       	ldi	r30, 0x32	; 50
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	8b 81       	ldd	r24, Y+3	; 0x03
    13b4:	80 83       	st	Z, r24
    13b6:	02 c0       	rjmp	.+4      	; 0x13bc <DIO_u8SetPortValue+0x7e>
	default: Local_u8ErrorState=1 ;
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState ;
    13bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    13be:	0f 90       	pop	r0
    13c0:	0f 90       	pop	r0
    13c2:	0f 90       	pop	r0
    13c4:	0f 90       	pop	r0
    13c6:	0f 90       	pop	r0
    13c8:	cf 91       	pop	r28
    13ca:	df 91       	pop	r29
    13cc:	08 95       	ret

000013ce <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin, u8* Copy_pu8Value){
    13ce:	df 93       	push	r29
    13d0:	cf 93       	push	r28
    13d2:	cd b7       	in	r28, 0x3d	; 61
    13d4:	de b7       	in	r29, 0x3e	; 62
    13d6:	27 97       	sbiw	r28, 0x07	; 7
    13d8:	0f b6       	in	r0, 0x3f	; 63
    13da:	f8 94       	cli
    13dc:	de bf       	out	0x3e, r29	; 62
    13de:	0f be       	out	0x3f, r0	; 63
    13e0:	cd bf       	out	0x3d, r28	; 61
    13e2:	8a 83       	std	Y+2, r24	; 0x02
    13e4:	6b 83       	std	Y+3, r22	; 0x03
    13e6:	5d 83       	std	Y+5, r21	; 0x05
    13e8:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    13ea:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_pu8Value != NULL) && (Copy_u8Pin <= DIO_u8PIN7)){
    13ec:	8c 81       	ldd	r24, Y+4	; 0x04
    13ee:	9d 81       	ldd	r25, Y+5	; 0x05
    13f0:	00 97       	sbiw	r24, 0x00	; 0
    13f2:	09 f4       	brne	.+2      	; 0x13f6 <DIO_u8GetPinValue+0x28>
    13f4:	78 c0       	rjmp	.+240    	; 0x14e6 <DIO_u8GetPinValue+0x118>
    13f6:	8b 81       	ldd	r24, Y+3	; 0x03
    13f8:	88 30       	cpi	r24, 0x08	; 8
    13fa:	08 f0       	brcs	.+2      	; 0x13fe <DIO_u8GetPinValue+0x30>
    13fc:	74 c0       	rjmp	.+232    	; 0x14e6 <DIO_u8GetPinValue+0x118>
		switch (Copy_u8Port){
    13fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1400:	28 2f       	mov	r18, r24
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	3f 83       	std	Y+7, r19	; 0x07
    1406:	2e 83       	std	Y+6, r18	; 0x06
    1408:	4e 81       	ldd	r20, Y+6	; 0x06
    140a:	5f 81       	ldd	r21, Y+7	; 0x07
    140c:	41 30       	cpi	r20, 0x01	; 1
    140e:	51 05       	cpc	r21, r1
    1410:	59 f1       	breq	.+86     	; 0x1468 <DIO_u8GetPinValue+0x9a>
    1412:	8e 81       	ldd	r24, Y+6	; 0x06
    1414:	9f 81       	ldd	r25, Y+7	; 0x07
    1416:	82 30       	cpi	r24, 0x02	; 2
    1418:	91 05       	cpc	r25, r1
    141a:	34 f4       	brge	.+12     	; 0x1428 <DIO_u8GetPinValue+0x5a>
    141c:	2e 81       	ldd	r18, Y+6	; 0x06
    141e:	3f 81       	ldd	r19, Y+7	; 0x07
    1420:	21 15       	cp	r18, r1
    1422:	31 05       	cpc	r19, r1
    1424:	69 f0       	breq	.+26     	; 0x1440 <DIO_u8GetPinValue+0x72>
    1426:	5c c0       	rjmp	.+184    	; 0x14e0 <DIO_u8GetPinValue+0x112>
    1428:	4e 81       	ldd	r20, Y+6	; 0x06
    142a:	5f 81       	ldd	r21, Y+7	; 0x07
    142c:	42 30       	cpi	r20, 0x02	; 2
    142e:	51 05       	cpc	r21, r1
    1430:	79 f1       	breq	.+94     	; 0x1490 <DIO_u8GetPinValue+0xc2>
    1432:	8e 81       	ldd	r24, Y+6	; 0x06
    1434:	9f 81       	ldd	r25, Y+7	; 0x07
    1436:	83 30       	cpi	r24, 0x03	; 3
    1438:	91 05       	cpc	r25, r1
    143a:	09 f4       	brne	.+2      	; 0x143e <DIO_u8GetPinValue+0x70>
    143c:	3d c0       	rjmp	.+122    	; 0x14b8 <DIO_u8GetPinValue+0xea>
    143e:	50 c0       	rjmp	.+160    	; 0x14e0 <DIO_u8GetPinValue+0x112>
		case DIO_u8PORTA: *Copy_pu8Value = GET_BIT(PINA,Copy_u8Pin); break;
    1440:	e9 e3       	ldi	r30, 0x39	; 57
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
    1446:	28 2f       	mov	r18, r24
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	8b 81       	ldd	r24, Y+3	; 0x03
    144c:	88 2f       	mov	r24, r24
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	a9 01       	movw	r20, r18
    1452:	02 c0       	rjmp	.+4      	; 0x1458 <DIO_u8GetPinValue+0x8a>
    1454:	55 95       	asr	r21
    1456:	47 95       	ror	r20
    1458:	8a 95       	dec	r24
    145a:	e2 f7       	brpl	.-8      	; 0x1454 <DIO_u8GetPinValue+0x86>
    145c:	ca 01       	movw	r24, r20
    145e:	81 70       	andi	r24, 0x01	; 1
    1460:	ec 81       	ldd	r30, Y+4	; 0x04
    1462:	fd 81       	ldd	r31, Y+5	; 0x05
    1464:	80 83       	st	Z, r24
    1466:	41 c0       	rjmp	.+130    	; 0x14ea <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTB: *Copy_pu8Value = GET_BIT(PINB,Copy_u8Pin); break;
    1468:	e6 e3       	ldi	r30, 0x36	; 54
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	28 2f       	mov	r18, r24
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	8b 81       	ldd	r24, Y+3	; 0x03
    1474:	88 2f       	mov	r24, r24
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	a9 01       	movw	r20, r18
    147a:	02 c0       	rjmp	.+4      	; 0x1480 <DIO_u8GetPinValue+0xb2>
    147c:	55 95       	asr	r21
    147e:	47 95       	ror	r20
    1480:	8a 95       	dec	r24
    1482:	e2 f7       	brpl	.-8      	; 0x147c <DIO_u8GetPinValue+0xae>
    1484:	ca 01       	movw	r24, r20
    1486:	81 70       	andi	r24, 0x01	; 1
    1488:	ec 81       	ldd	r30, Y+4	; 0x04
    148a:	fd 81       	ldd	r31, Y+5	; 0x05
    148c:	80 83       	st	Z, r24
    148e:	2d c0       	rjmp	.+90     	; 0x14ea <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTC: *Copy_pu8Value = GET_BIT(PINC,Copy_u8Pin); break;
    1490:	e3 e3       	ldi	r30, 0x33	; 51
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	80 81       	ld	r24, Z
    1496:	28 2f       	mov	r18, r24
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	8b 81       	ldd	r24, Y+3	; 0x03
    149c:	88 2f       	mov	r24, r24
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	a9 01       	movw	r20, r18
    14a2:	02 c0       	rjmp	.+4      	; 0x14a8 <DIO_u8GetPinValue+0xda>
    14a4:	55 95       	asr	r21
    14a6:	47 95       	ror	r20
    14a8:	8a 95       	dec	r24
    14aa:	e2 f7       	brpl	.-8      	; 0x14a4 <DIO_u8GetPinValue+0xd6>
    14ac:	ca 01       	movw	r24, r20
    14ae:	81 70       	andi	r24, 0x01	; 1
    14b0:	ec 81       	ldd	r30, Y+4	; 0x04
    14b2:	fd 81       	ldd	r31, Y+5	; 0x05
    14b4:	80 83       	st	Z, r24
    14b6:	19 c0       	rjmp	.+50     	; 0x14ea <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTD: *Copy_pu8Value = GET_BIT(PIND,Copy_u8Pin); break;
    14b8:	e0 e3       	ldi	r30, 0x30	; 48
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	80 81       	ld	r24, Z
    14be:	28 2f       	mov	r18, r24
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	8b 81       	ldd	r24, Y+3	; 0x03
    14c4:	88 2f       	mov	r24, r24
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	a9 01       	movw	r20, r18
    14ca:	02 c0       	rjmp	.+4      	; 0x14d0 <DIO_u8GetPinValue+0x102>
    14cc:	55 95       	asr	r21
    14ce:	47 95       	ror	r20
    14d0:	8a 95       	dec	r24
    14d2:	e2 f7       	brpl	.-8      	; 0x14cc <DIO_u8GetPinValue+0xfe>
    14d4:	ca 01       	movw	r24, r20
    14d6:	81 70       	andi	r24, 0x01	; 1
    14d8:	ec 81       	ldd	r30, Y+4	; 0x04
    14da:	fd 81       	ldd	r31, Y+5	; 0x05
    14dc:	80 83       	st	Z, r24
    14de:	05 c0       	rjmp	.+10     	; 0x14ea <DIO_u8GetPinValue+0x11c>
		default:Local_u8ErrorState=1 ;
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	89 83       	std	Y+1, r24	; 0x01
    14e4:	02 c0       	rjmp	.+4      	; 0x14ea <DIO_u8GetPinValue+0x11c>
		}
	}
	else{
		Local_u8ErrorState=1;
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState ;
    14ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    14ec:	27 96       	adiw	r28, 0x07	; 7
    14ee:	0f b6       	in	r0, 0x3f	; 63
    14f0:	f8 94       	cli
    14f2:	de bf       	out	0x3e, r29	; 62
    14f4:	0f be       	out	0x3f, r0	; 63
    14f6:	cd bf       	out	0x3d, r28	; 61
    14f8:	cf 91       	pop	r28
    14fa:	df 91       	pop	r29
    14fc:	08 95       	ret

000014fe <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8Port,u8* Copy_pu8Value){
    14fe:	df 93       	push	r29
    1500:	cf 93       	push	r28
    1502:	00 d0       	rcall	.+0      	; 0x1504 <DIO_u8GetPortValue+0x6>
    1504:	00 d0       	rcall	.+0      	; 0x1506 <DIO_u8GetPortValue+0x8>
    1506:	00 d0       	rcall	.+0      	; 0x1508 <DIO_u8GetPortValue+0xa>
    1508:	cd b7       	in	r28, 0x3d	; 61
    150a:	de b7       	in	r29, 0x3e	; 62
    150c:	8a 83       	std	Y+2, r24	; 0x02
    150e:	7c 83       	std	Y+4, r23	; 0x04
    1510:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    1512:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8Port)
    1514:	8a 81       	ldd	r24, Y+2	; 0x02
    1516:	28 2f       	mov	r18, r24
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	3e 83       	std	Y+6, r19	; 0x06
    151c:	2d 83       	std	Y+5, r18	; 0x05
    151e:	8d 81       	ldd	r24, Y+5	; 0x05
    1520:	9e 81       	ldd	r25, Y+6	; 0x06
    1522:	81 30       	cpi	r24, 0x01	; 1
    1524:	91 05       	cpc	r25, r1
    1526:	e1 f0       	breq	.+56     	; 0x1560 <DIO_u8GetPortValue+0x62>
    1528:	2d 81       	ldd	r18, Y+5	; 0x05
    152a:	3e 81       	ldd	r19, Y+6	; 0x06
    152c:	22 30       	cpi	r18, 0x02	; 2
    152e:	31 05       	cpc	r19, r1
    1530:	2c f4       	brge	.+10     	; 0x153c <DIO_u8GetPortValue+0x3e>
    1532:	8d 81       	ldd	r24, Y+5	; 0x05
    1534:	9e 81       	ldd	r25, Y+6	; 0x06
    1536:	00 97       	sbiw	r24, 0x00	; 0
    1538:	61 f0       	breq	.+24     	; 0x1552 <DIO_u8GetPortValue+0x54>
    153a:	27 c0       	rjmp	.+78     	; 0x158a <DIO_u8GetPortValue+0x8c>
    153c:	2d 81       	ldd	r18, Y+5	; 0x05
    153e:	3e 81       	ldd	r19, Y+6	; 0x06
    1540:	22 30       	cpi	r18, 0x02	; 2
    1542:	31 05       	cpc	r19, r1
    1544:	a1 f0       	breq	.+40     	; 0x156e <DIO_u8GetPortValue+0x70>
    1546:	8d 81       	ldd	r24, Y+5	; 0x05
    1548:	9e 81       	ldd	r25, Y+6	; 0x06
    154a:	83 30       	cpi	r24, 0x03	; 3
    154c:	91 05       	cpc	r25, r1
    154e:	b1 f0       	breq	.+44     	; 0x157c <DIO_u8GetPortValue+0x7e>
    1550:	1c c0       	rjmp	.+56     	; 0x158a <DIO_u8GetPortValue+0x8c>
	{
	case DIO_u8PORTA: *Copy_pu8Value = PINA; break;
    1552:	e9 e3       	ldi	r30, 0x39	; 57
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	80 81       	ld	r24, Z
    1558:	eb 81       	ldd	r30, Y+3	; 0x03
    155a:	fc 81       	ldd	r31, Y+4	; 0x04
    155c:	80 83       	st	Z, r24
    155e:	17 c0       	rjmp	.+46     	; 0x158e <DIO_u8GetPortValue+0x90>
	case DIO_u8PORTB: *Copy_pu8Value = PINB; break;
    1560:	e6 e3       	ldi	r30, 0x36	; 54
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	80 81       	ld	r24, Z
    1566:	eb 81       	ldd	r30, Y+3	; 0x03
    1568:	fc 81       	ldd	r31, Y+4	; 0x04
    156a:	80 83       	st	Z, r24
    156c:	10 c0       	rjmp	.+32     	; 0x158e <DIO_u8GetPortValue+0x90>
	case DIO_u8PORTC: *Copy_pu8Value = PINC; break;
    156e:	e3 e3       	ldi	r30, 0x33	; 51
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	80 81       	ld	r24, Z
    1574:	eb 81       	ldd	r30, Y+3	; 0x03
    1576:	fc 81       	ldd	r31, Y+4	; 0x04
    1578:	80 83       	st	Z, r24
    157a:	09 c0       	rjmp	.+18     	; 0x158e <DIO_u8GetPortValue+0x90>
	case DIO_u8PORTD: *Copy_pu8Value = PIND; break;
    157c:	e0 e3       	ldi	r30, 0x30	; 48
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	eb 81       	ldd	r30, Y+3	; 0x03
    1584:	fc 81       	ldd	r31, Y+4	; 0x04
    1586:	80 83       	st	Z, r24
    1588:	02 c0       	rjmp	.+4      	; 0x158e <DIO_u8GetPortValue+0x90>
	default: Local_u8ErrorState=1 ;
    158a:	81 e0       	ldi	r24, 0x01	; 1
    158c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    158e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1590:	26 96       	adiw	r28, 0x06	; 6
    1592:	0f b6       	in	r0, 0x3f	; 63
    1594:	f8 94       	cli
    1596:	de bf       	out	0x3e, r29	; 62
    1598:	0f be       	out	0x3f, r0	; 63
    159a:	cd bf       	out	0x3d, r28	; 61
    159c:	cf 91       	pop	r28
    159e:	df 91       	pop	r29
    15a0:	08 95       	ret

000015a2 <GIE_voidEnable>:
#include "BIT_MATH.h"

#include "GIE_interface.h"
#include "GIE_register.h"

void GIE_voidEnable(void){
    15a2:	df 93       	push	r29
    15a4:	cf 93       	push	r28
    15a6:	cd b7       	in	r28, 0x3d	; 61
    15a8:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(SREG,SREG_I);
    15aa:	af e5       	ldi	r26, 0x5F	; 95
    15ac:	b0 e0       	ldi	r27, 0x00	; 0
    15ae:	ef e5       	ldi	r30, 0x5F	; 95
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	80 81       	ld	r24, Z
    15b4:	80 68       	ori	r24, 0x80	; 128
    15b6:	8c 93       	st	X, r24
}
    15b8:	cf 91       	pop	r28
    15ba:	df 91       	pop	r29
    15bc:	08 95       	ret

000015be <GIE_voidDisable>:

void GIE_voidDisable(void){
    15be:	df 93       	push	r29
    15c0:	cf 93       	push	r28
    15c2:	cd b7       	in	r28, 0x3d	; 61
    15c4:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(SREG,SREG_I);
    15c6:	af e5       	ldi	r26, 0x5F	; 95
    15c8:	b0 e0       	ldi	r27, 0x00	; 0
    15ca:	ef e5       	ldi	r30, 0x5F	; 95
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	80 81       	ld	r24, Z
    15d0:	8f 77       	andi	r24, 0x7F	; 127
    15d2:	8c 93       	st	X, r24
    15d4:	cf 91       	pop	r28
    15d6:	df 91       	pop	r29
    15d8:	08 95       	ret

000015da <MATH_u32Power>:
#include "STD_TYPES.h"
#include "BIT_MATH.h"
#include "MATH_HELPER.h"

u32 MATH_u32Power(u32 Copy_u32Base,s32 Copy_u32Exponent){
    15da:	df 93       	push	r29
    15dc:	cf 93       	push	r28
    15de:	cd b7       	in	r28, 0x3d	; 61
    15e0:	de b7       	in	r29, 0x3e	; 62
    15e2:	60 97       	sbiw	r28, 0x10	; 16
    15e4:	0f b6       	in	r0, 0x3f	; 63
    15e6:	f8 94       	cli
    15e8:	de bf       	out	0x3e, r29	; 62
    15ea:	0f be       	out	0x3f, r0	; 63
    15ec:	cd bf       	out	0x3d, r28	; 61
    15ee:	69 87       	std	Y+9, r22	; 0x09
    15f0:	7a 87       	std	Y+10, r23	; 0x0a
    15f2:	8b 87       	std	Y+11, r24	; 0x0b
    15f4:	9c 87       	std	Y+12, r25	; 0x0c
    15f6:	2d 87       	std	Y+13, r18	; 0x0d
    15f8:	3e 87       	std	Y+14, r19	; 0x0e
    15fa:	4f 87       	std	Y+15, r20	; 0x0f
    15fc:	58 8b       	std	Y+16, r21	; 0x10
	u32 Local_u32Result=1;
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	a0 e0       	ldi	r26, 0x00	; 0
    1604:	b0 e0       	ldi	r27, 0x00	; 0
    1606:	8d 83       	std	Y+5, r24	; 0x05
    1608:	9e 83       	std	Y+6, r25	; 0x06
    160a:	af 83       	std	Y+7, r26	; 0x07
    160c:	b8 87       	std	Y+8, r27	; 0x08
	for(u32 i=0;i<Copy_u32Exponent;i++){
    160e:	19 82       	std	Y+1, r1	; 0x01
    1610:	1a 82       	std	Y+2, r1	; 0x02
    1612:	1b 82       	std	Y+3, r1	; 0x03
    1614:	1c 82       	std	Y+4, r1	; 0x04
    1616:	1d c0       	rjmp	.+58     	; 0x1652 <MATH_u32Power+0x78>
		Local_u32Result*=Copy_u32Base;
    1618:	8d 81       	ldd	r24, Y+5	; 0x05
    161a:	9e 81       	ldd	r25, Y+6	; 0x06
    161c:	af 81       	ldd	r26, Y+7	; 0x07
    161e:	b8 85       	ldd	r27, Y+8	; 0x08
    1620:	29 85       	ldd	r18, Y+9	; 0x09
    1622:	3a 85       	ldd	r19, Y+10	; 0x0a
    1624:	4b 85       	ldd	r20, Y+11	; 0x0b
    1626:	5c 85       	ldd	r21, Y+12	; 0x0c
    1628:	bc 01       	movw	r22, r24
    162a:	cd 01       	movw	r24, r26
    162c:	0e 94 8e 18 	call	0x311c	; 0x311c <__mulsi3>
    1630:	dc 01       	movw	r26, r24
    1632:	cb 01       	movw	r24, r22
    1634:	8d 83       	std	Y+5, r24	; 0x05
    1636:	9e 83       	std	Y+6, r25	; 0x06
    1638:	af 83       	std	Y+7, r26	; 0x07
    163a:	b8 87       	std	Y+8, r27	; 0x08
#include "BIT_MATH.h"
#include "MATH_HELPER.h"

u32 MATH_u32Power(u32 Copy_u32Base,s32 Copy_u32Exponent){
	u32 Local_u32Result=1;
	for(u32 i=0;i<Copy_u32Exponent;i++){
    163c:	89 81       	ldd	r24, Y+1	; 0x01
    163e:	9a 81       	ldd	r25, Y+2	; 0x02
    1640:	ab 81       	ldd	r26, Y+3	; 0x03
    1642:	bc 81       	ldd	r27, Y+4	; 0x04
    1644:	01 96       	adiw	r24, 0x01	; 1
    1646:	a1 1d       	adc	r26, r1
    1648:	b1 1d       	adc	r27, r1
    164a:	89 83       	std	Y+1, r24	; 0x01
    164c:	9a 83       	std	Y+2, r25	; 0x02
    164e:	ab 83       	std	Y+3, r26	; 0x03
    1650:	bc 83       	std	Y+4, r27	; 0x04
    1652:	2d 85       	ldd	r18, Y+13	; 0x0d
    1654:	3e 85       	ldd	r19, Y+14	; 0x0e
    1656:	4f 85       	ldd	r20, Y+15	; 0x0f
    1658:	58 89       	ldd	r21, Y+16	; 0x10
    165a:	89 81       	ldd	r24, Y+1	; 0x01
    165c:	9a 81       	ldd	r25, Y+2	; 0x02
    165e:	ab 81       	ldd	r26, Y+3	; 0x03
    1660:	bc 81       	ldd	r27, Y+4	; 0x04
    1662:	82 17       	cp	r24, r18
    1664:	93 07       	cpc	r25, r19
    1666:	a4 07       	cpc	r26, r20
    1668:	b5 07       	cpc	r27, r21
    166a:	b0 f2       	brcs	.-84     	; 0x1618 <MATH_u32Power+0x3e>
		Local_u32Result*=Copy_u32Base;
	}
	return Local_u32Result;
    166c:	8d 81       	ldd	r24, Y+5	; 0x05
    166e:	9e 81       	ldd	r25, Y+6	; 0x06
    1670:	af 81       	ldd	r26, Y+7	; 0x07
    1672:	b8 85       	ldd	r27, Y+8	; 0x08
}
    1674:	bc 01       	movw	r22, r24
    1676:	cd 01       	movw	r24, r26
    1678:	60 96       	adiw	r28, 0x10	; 16
    167a:	0f b6       	in	r0, 0x3f	; 63
    167c:	f8 94       	cli
    167e:	de bf       	out	0x3e, r29	; 62
    1680:	0f be       	out	0x3f, r0	; 63
    1682:	cd bf       	out	0x3d, r28	; 61
    1684:	cf 91       	pop	r28
    1686:	df 91       	pop	r29
    1688:	08 95       	ret

0000168a <MATH_s32Map>:

s32 MATH_s32Map(s32 Copy_s32InputMin,s32 Copy_s32InputMax,s32 Copy_s32OutputMin,s32 Copy_s32OutputMax,s32 Copy_s32InputVal){
    168a:	af 92       	push	r10
    168c:	bf 92       	push	r11
    168e:	cf 92       	push	r12
    1690:	df 92       	push	r13
    1692:	ef 92       	push	r14
    1694:	ff 92       	push	r15
    1696:	0f 93       	push	r16
    1698:	1f 93       	push	r17
    169a:	df 93       	push	r29
    169c:	cf 93       	push	r28
    169e:	cd b7       	in	r28, 0x3d	; 61
    16a0:	de b7       	in	r29, 0x3e	; 62
    16a2:	64 97       	sbiw	r28, 0x14	; 20
    16a4:	0f b6       	in	r0, 0x3f	; 63
    16a6:	f8 94       	cli
    16a8:	de bf       	out	0x3e, r29	; 62
    16aa:	0f be       	out	0x3f, r0	; 63
    16ac:	cd bf       	out	0x3d, r28	; 61
    16ae:	6d 83       	std	Y+5, r22	; 0x05
    16b0:	7e 83       	std	Y+6, r23	; 0x06
    16b2:	8f 83       	std	Y+7, r24	; 0x07
    16b4:	98 87       	std	Y+8, r25	; 0x08
    16b6:	29 87       	std	Y+9, r18	; 0x09
    16b8:	3a 87       	std	Y+10, r19	; 0x0a
    16ba:	4b 87       	std	Y+11, r20	; 0x0b
    16bc:	5c 87       	std	Y+12, r21	; 0x0c
    16be:	ed 86       	std	Y+13, r14	; 0x0d
    16c0:	fe 86       	std	Y+14, r15	; 0x0e
    16c2:	0f 87       	std	Y+15, r16	; 0x0f
    16c4:	18 8b       	std	Y+16, r17	; 0x10
    16c6:	a9 8a       	std	Y+17, r10	; 0x11
    16c8:	ba 8a       	std	Y+18, r11	; 0x12
    16ca:	cb 8a       	std	Y+19, r12	; 0x13
    16cc:	dc 8a       	std	Y+20, r13	; 0x14
    s32 Local_s32OutputVal;
    Local_s32OutputVal= (((Copy_s32OutputMax-Copy_s32OutputMin)*(Copy_s32InputVal-Copy_s32InputMin))/(Copy_s32InputMax-Copy_s32InputMin))+Copy_s32OutputMin;
    16ce:	29 89       	ldd	r18, Y+17	; 0x11
    16d0:	3a 89       	ldd	r19, Y+18	; 0x12
    16d2:	4b 89       	ldd	r20, Y+19	; 0x13
    16d4:	5c 89       	ldd	r21, Y+20	; 0x14
    16d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    16d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    16da:	af 85       	ldd	r26, Y+15	; 0x0f
    16dc:	b8 89       	ldd	r27, Y+16	; 0x10
    16de:	79 01       	movw	r14, r18
    16e0:	8a 01       	movw	r16, r20
    16e2:	e8 1a       	sub	r14, r24
    16e4:	f9 0a       	sbc	r15, r25
    16e6:	0a 0b       	sbc	r16, r26
    16e8:	1b 0b       	sbc	r17, r27
    16ea:	29 a1       	ldd	r18, Y+33	; 0x21
    16ec:	3a a1       	ldd	r19, Y+34	; 0x22
    16ee:	4b a1       	ldd	r20, Y+35	; 0x23
    16f0:	5c a1       	ldd	r21, Y+36	; 0x24
    16f2:	8d 81       	ldd	r24, Y+5	; 0x05
    16f4:	9e 81       	ldd	r25, Y+6	; 0x06
    16f6:	af 81       	ldd	r26, Y+7	; 0x07
    16f8:	b8 85       	ldd	r27, Y+8	; 0x08
    16fa:	28 1b       	sub	r18, r24
    16fc:	39 0b       	sbc	r19, r25
    16fe:	4a 0b       	sbc	r20, r26
    1700:	5b 0b       	sbc	r21, r27
    1702:	c8 01       	movw	r24, r16
    1704:	b7 01       	movw	r22, r14
    1706:	0e 94 8e 18 	call	0x311c	; 0x311c <__mulsi3>
    170a:	7b 01       	movw	r14, r22
    170c:	8c 01       	movw	r16, r24
    170e:	29 85       	ldd	r18, Y+9	; 0x09
    1710:	3a 85       	ldd	r19, Y+10	; 0x0a
    1712:	4b 85       	ldd	r20, Y+11	; 0x0b
    1714:	5c 85       	ldd	r21, Y+12	; 0x0c
    1716:	8d 81       	ldd	r24, Y+5	; 0x05
    1718:	9e 81       	ldd	r25, Y+6	; 0x06
    171a:	af 81       	ldd	r26, Y+7	; 0x07
    171c:	b8 85       	ldd	r27, Y+8	; 0x08
    171e:	28 1b       	sub	r18, r24
    1720:	39 0b       	sbc	r19, r25
    1722:	4a 0b       	sbc	r20, r26
    1724:	5b 0b       	sbc	r21, r27
    1726:	c8 01       	movw	r24, r16
    1728:	b7 01       	movw	r22, r14
    172a:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <__divmodsi4>
    172e:	da 01       	movw	r26, r20
    1730:	c9 01       	movw	r24, r18
    1732:	9c 01       	movw	r18, r24
    1734:	ad 01       	movw	r20, r26
    1736:	8d 85       	ldd	r24, Y+13	; 0x0d
    1738:	9e 85       	ldd	r25, Y+14	; 0x0e
    173a:	af 85       	ldd	r26, Y+15	; 0x0f
    173c:	b8 89       	ldd	r27, Y+16	; 0x10
    173e:	82 0f       	add	r24, r18
    1740:	93 1f       	adc	r25, r19
    1742:	a4 1f       	adc	r26, r20
    1744:	b5 1f       	adc	r27, r21
    1746:	89 83       	std	Y+1, r24	; 0x01
    1748:	9a 83       	std	Y+2, r25	; 0x02
    174a:	ab 83       	std	Y+3, r26	; 0x03
    174c:	bc 83       	std	Y+4, r27	; 0x04
    return Local_s32OutputVal;
    174e:	89 81       	ldd	r24, Y+1	; 0x01
    1750:	9a 81       	ldd	r25, Y+2	; 0x02
    1752:	ab 81       	ldd	r26, Y+3	; 0x03
    1754:	bc 81       	ldd	r27, Y+4	; 0x04
    1756:	bc 01       	movw	r22, r24
    1758:	cd 01       	movw	r24, r26
    175a:	64 96       	adiw	r28, 0x14	; 20
    175c:	0f b6       	in	r0, 0x3f	; 63
    175e:	f8 94       	cli
    1760:	de bf       	out	0x3e, r29	; 62
    1762:	0f be       	out	0x3f, r0	; 63
    1764:	cd bf       	out	0x3d, r28	; 61
    1766:	cf 91       	pop	r28
    1768:	df 91       	pop	r29
    176a:	1f 91       	pop	r17
    176c:	0f 91       	pop	r16
    176e:	ff 90       	pop	r15
    1770:	ef 90       	pop	r14
    1772:	df 90       	pop	r13
    1774:	cf 90       	pop	r12
    1776:	bf 90       	pop	r11
    1778:	af 90       	pop	r10
    177a:	08 95       	ret

0000177c <PORT_voidInit>:
#include "PORT_config.h"
#include "PORT_private.h"
#include "PORT_interface.h"
#include "PORT_register.h"

void PORT_voidInit(){
    177c:	df 93       	push	r29
    177e:	cf 93       	push	r28
    1780:	cd b7       	in	r28, 0x3d	; 61
    1782:	de b7       	in	r29, 0x3e	; 62
    DDRA=PORTA_DIR;
    1784:	ea e3       	ldi	r30, 0x3A	; 58
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	8f ef       	ldi	r24, 0xFF	; 255
    178a:	80 83       	st	Z, r24
    DDRB=PORTB_DIR;
    178c:	e7 e3       	ldi	r30, 0x37	; 55
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	8f e0       	ldi	r24, 0x0F	; 15
    1792:	80 83       	st	Z, r24
    DDRC=PORTC_DIR;
    1794:	e4 e3       	ldi	r30, 0x34	; 52
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	8f ef       	ldi	r24, 0xFF	; 255
    179a:	80 83       	st	Z, r24
    DDRD=PORTD_DIR;
    179c:	e1 e3       	ldi	r30, 0x31	; 49
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	8b eb       	ldi	r24, 0xBB	; 187
    17a2:	80 83       	st	Z, r24
    
    PORTA=PORTA_INIT_VAL;
    17a4:	eb e3       	ldi	r30, 0x3B	; 59
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	10 82       	st	Z, r1
    PORTB=PORTB_INIT_VAL;
    17aa:	e8 e3       	ldi	r30, 0x38	; 56
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	10 82       	st	Z, r1
    PORTC=PORTC_INIT_VAL;
    17b0:	e5 e3       	ldi	r30, 0x35	; 53
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	10 82       	st	Z, r1
    PORTD=PORTD_INIT_VAL;
    17b6:	e2 e3       	ldi	r30, 0x32	; 50
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	10 82       	st	Z, r1
}
    17bc:	cf 91       	pop	r28
    17be:	df 91       	pop	r29
    17c0:	08 95       	ret

000017c2 <TIMER_u8SetTimerVal>:


/********************************************************TIMER0**********************************************************
 ************************************************************************************************************************/

u8 TIMER_u8SetTimerVal(u8 Copy_u8TimerID,u16 Copy_u16Value){
    17c2:	df 93       	push	r29
    17c4:	cf 93       	push	r28
    17c6:	00 d0       	rcall	.+0      	; 0x17c8 <TIMER_u8SetTimerVal+0x6>
    17c8:	00 d0       	rcall	.+0      	; 0x17ca <TIMER_u8SetTimerVal+0x8>
    17ca:	00 d0       	rcall	.+0      	; 0x17cc <TIMER_u8SetTimerVal+0xa>
    17cc:	cd b7       	in	r28, 0x3d	; 61
    17ce:	de b7       	in	r29, 0x3e	; 62
    17d0:	8a 83       	std	Y+2, r24	; 0x02
    17d2:	7c 83       	std	Y+4, r23	; 0x04
    17d4:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=OK;
    17d6:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8TimerID){
    17d8:	8a 81       	ldd	r24, Y+2	; 0x02
    17da:	28 2f       	mov	r18, r24
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	3e 83       	std	Y+6, r19	; 0x06
    17e0:	2d 83       	std	Y+5, r18	; 0x05
    17e2:	8d 81       	ldd	r24, Y+5	; 0x05
    17e4:	9e 81       	ldd	r25, Y+6	; 0x06
    17e6:	83 30       	cpi	r24, 0x03	; 3
    17e8:	91 05       	cpc	r25, r1
    17ea:	b9 f0       	breq	.+46     	; 0x181a <TIMER_u8SetTimerVal+0x58>
    17ec:	2d 81       	ldd	r18, Y+5	; 0x05
    17ee:	3e 81       	ldd	r19, Y+6	; 0x06
    17f0:	24 30       	cpi	r18, 0x04	; 4
    17f2:	31 05       	cpc	r19, r1
    17f4:	c9 f0       	breq	.+50     	; 0x1828 <TIMER_u8SetTimerVal+0x66>
    17f6:	8d 81       	ldd	r24, Y+5	; 0x05
    17f8:	9e 81       	ldd	r25, Y+6	; 0x06
    17fa:	00 97       	sbiw	r24, 0x00	; 0
    17fc:	19 f5       	brne	.+70     	; 0x1844 <TIMER_u8SetTimerVal+0x82>
	case TIMER0 : if(Copy_u16Value<256){TCNT0  = Copy_u16Value;} else{Local_u8ErrorState=NOK;} break;
    17fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1800:	9c 81       	ldd	r25, Y+4	; 0x04
    1802:	8f 3f       	cpi	r24, 0xFF	; 255
    1804:	91 05       	cpc	r25, r1
    1806:	09 f0       	breq	.+2      	; 0x180a <TIMER_u8SetTimerVal+0x48>
    1808:	28 f4       	brcc	.+10     	; 0x1814 <TIMER_u8SetTimerVal+0x52>
    180a:	e2 e5       	ldi	r30, 0x52	; 82
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	8b 81       	ldd	r24, Y+3	; 0x03
    1810:	80 83       	st	Z, r24
    1812:	1a c0       	rjmp	.+52     	; 0x1848 <TIMER_u8SetTimerVal+0x86>
    1814:	81 e0       	ldi	r24, 0x01	; 1
    1816:	89 83       	std	Y+1, r24	; 0x01
    1818:	17 c0       	rjmp	.+46     	; 0x1848 <TIMER_u8SetTimerVal+0x86>
	case TIMER1 : TCNT1 = Copy_u16Value; break;
    181a:	ec e4       	ldi	r30, 0x4C	; 76
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	8b 81       	ldd	r24, Y+3	; 0x03
    1820:	9c 81       	ldd	r25, Y+4	; 0x04
    1822:	91 83       	std	Z+1, r25	; 0x01
    1824:	80 83       	st	Z, r24
    1826:	10 c0       	rjmp	.+32     	; 0x1848 <TIMER_u8SetTimerVal+0x86>
	case TIMER2 : if(Copy_u16Value<256){TCNT2  = Copy_u16Value;} else{Local_u8ErrorState=NOK;} break;
    1828:	8b 81       	ldd	r24, Y+3	; 0x03
    182a:	9c 81       	ldd	r25, Y+4	; 0x04
    182c:	8f 3f       	cpi	r24, 0xFF	; 255
    182e:	91 05       	cpc	r25, r1
    1830:	09 f0       	breq	.+2      	; 0x1834 <TIMER_u8SetTimerVal+0x72>
    1832:	28 f4       	brcc	.+10     	; 0x183e <TIMER_u8SetTimerVal+0x7c>
    1834:	e4 e4       	ldi	r30, 0x44	; 68
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	8b 81       	ldd	r24, Y+3	; 0x03
    183a:	80 83       	st	Z, r24
    183c:	05 c0       	rjmp	.+10     	; 0x1848 <TIMER_u8SetTimerVal+0x86>
    183e:	81 e0       	ldi	r24, 0x01	; 1
    1840:	89 83       	std	Y+1, r24	; 0x01
    1842:	02 c0       	rjmp	.+4      	; 0x1848 <TIMER_u8SetTimerVal+0x86>
	default: Local_u8ErrorState=NOK;
    1844:	81 e0       	ldi	r24, 0x01	; 1
    1846:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1848:	89 81       	ldd	r24, Y+1	; 0x01
}
    184a:	26 96       	adiw	r28, 0x06	; 6
    184c:	0f b6       	in	r0, 0x3f	; 63
    184e:	f8 94       	cli
    1850:	de bf       	out	0x3e, r29	; 62
    1852:	0f be       	out	0x3f, r0	; 63
    1854:	cd bf       	out	0x3d, r28	; 61
    1856:	cf 91       	pop	r28
    1858:	df 91       	pop	r29
    185a:	08 95       	ret

0000185c <TIMER_u8GetTimerVal>:

u8 TIMER_u8GetTimerVal(u8 Copy_u8TimerID,u16* Copy_pu16Value){
    185c:	df 93       	push	r29
    185e:	cf 93       	push	r28
    1860:	00 d0       	rcall	.+0      	; 0x1862 <TIMER_u8GetTimerVal+0x6>
    1862:	00 d0       	rcall	.+0      	; 0x1864 <TIMER_u8GetTimerVal+0x8>
    1864:	00 d0       	rcall	.+0      	; 0x1866 <TIMER_u8GetTimerVal+0xa>
    1866:	cd b7       	in	r28, 0x3d	; 61
    1868:	de b7       	in	r29, 0x3e	; 62
    186a:	8a 83       	std	Y+2, r24	; 0x02
    186c:	7c 83       	std	Y+4, r23	; 0x04
    186e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=OK;
    1870:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8TimerID){
    1872:	8a 81       	ldd	r24, Y+2	; 0x02
    1874:	28 2f       	mov	r18, r24
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	3e 83       	std	Y+6, r19	; 0x06
    187a:	2d 83       	std	Y+5, r18	; 0x05
    187c:	8d 81       	ldd	r24, Y+5	; 0x05
    187e:	9e 81       	ldd	r25, Y+6	; 0x06
    1880:	83 30       	cpi	r24, 0x03	; 3
    1882:	91 05       	cpc	r25, r1
    1884:	99 f0       	breq	.+38     	; 0x18ac <TIMER_u8GetTimerVal+0x50>
    1886:	2d 81       	ldd	r18, Y+5	; 0x05
    1888:	3e 81       	ldd	r19, Y+6	; 0x06
    188a:	24 30       	cpi	r18, 0x04	; 4
    188c:	31 05       	cpc	r19, r1
    188e:	b9 f0       	breq	.+46     	; 0x18be <TIMER_u8GetTimerVal+0x62>
    1890:	8d 81       	ldd	r24, Y+5	; 0x05
    1892:	9e 81       	ldd	r25, Y+6	; 0x06
    1894:	00 97       	sbiw	r24, 0x00	; 0
    1896:	e9 f4       	brne	.+58     	; 0x18d2 <TIMER_u8GetTimerVal+0x76>
	case TIMER0 : *Copy_pu16Value = TCNT0 ; break;
    1898:	e2 e5       	ldi	r30, 0x52	; 82
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	80 81       	ld	r24, Z
    189e:	88 2f       	mov	r24, r24
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	eb 81       	ldd	r30, Y+3	; 0x03
    18a4:	fc 81       	ldd	r31, Y+4	; 0x04
    18a6:	91 83       	std	Z+1, r25	; 0x01
    18a8:	80 83       	st	Z, r24
    18aa:	15 c0       	rjmp	.+42     	; 0x18d6 <TIMER_u8GetTimerVal+0x7a>
	case TIMER1 : *Copy_pu16Value = TCNT1 ; break;
    18ac:	ec e4       	ldi	r30, 0x4C	; 76
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	80 81       	ld	r24, Z
    18b2:	91 81       	ldd	r25, Z+1	; 0x01
    18b4:	eb 81       	ldd	r30, Y+3	; 0x03
    18b6:	fc 81       	ldd	r31, Y+4	; 0x04
    18b8:	91 83       	std	Z+1, r25	; 0x01
    18ba:	80 83       	st	Z, r24
    18bc:	0c c0       	rjmp	.+24     	; 0x18d6 <TIMER_u8GetTimerVal+0x7a>
	case TIMER2 : *Copy_pu16Value = TCNT2 ; break;
    18be:	e4 e4       	ldi	r30, 0x44	; 68
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	80 81       	ld	r24, Z
    18c4:	88 2f       	mov	r24, r24
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	eb 81       	ldd	r30, Y+3	; 0x03
    18ca:	fc 81       	ldd	r31, Y+4	; 0x04
    18cc:	91 83       	std	Z+1, r25	; 0x01
    18ce:	80 83       	st	Z, r24
    18d0:	02 c0       	rjmp	.+4      	; 0x18d6 <TIMER_u8GetTimerVal+0x7a>
	default: Local_u8ErrorState=NOK;
    18d2:	81 e0       	ldi	r24, 0x01	; 1
    18d4:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    18d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    18d8:	26 96       	adiw	r28, 0x06	; 6
    18da:	0f b6       	in	r0, 0x3f	; 63
    18dc:	f8 94       	cli
    18de:	de bf       	out	0x3e, r29	; 62
    18e0:	0f be       	out	0x3f, r0	; 63
    18e2:	cd bf       	out	0x3d, r28	; 61
    18e4:	cf 91       	pop	r28
    18e6:	df 91       	pop	r29
    18e8:	08 95       	ret

000018ea <TIMER_u8SetCompMatch>:

u8 TIMER_u8SetCompMatch(u8 Copy_u8TimerID,u16 Copy_u16Value){
    18ea:	df 93       	push	r29
    18ec:	cf 93       	push	r28
    18ee:	00 d0       	rcall	.+0      	; 0x18f0 <TIMER_u8SetCompMatch+0x6>
    18f0:	00 d0       	rcall	.+0      	; 0x18f2 <TIMER_u8SetCompMatch+0x8>
    18f2:	00 d0       	rcall	.+0      	; 0x18f4 <TIMER_u8SetCompMatch+0xa>
    18f4:	cd b7       	in	r28, 0x3d	; 61
    18f6:	de b7       	in	r29, 0x3e	; 62
    18f8:	8a 83       	std	Y+2, r24	; 0x02
    18fa:	7c 83       	std	Y+4, r23	; 0x04
    18fc:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=OK;
    18fe:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8TimerID){
    1900:	8a 81       	ldd	r24, Y+2	; 0x02
    1902:	28 2f       	mov	r18, r24
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	3e 83       	std	Y+6, r19	; 0x06
    1908:	2d 83       	std	Y+5, r18	; 0x05
    190a:	8d 81       	ldd	r24, Y+5	; 0x05
    190c:	9e 81       	ldd	r25, Y+6	; 0x06
    190e:	81 30       	cpi	r24, 0x01	; 1
    1910:	91 05       	cpc	r25, r1
    1912:	19 f1       	breq	.+70     	; 0x195a <TIMER_u8SetCompMatch+0x70>
    1914:	2d 81       	ldd	r18, Y+5	; 0x05
    1916:	3e 81       	ldd	r19, Y+6	; 0x06
    1918:	22 30       	cpi	r18, 0x02	; 2
    191a:	31 05       	cpc	r19, r1
    191c:	2c f4       	brge	.+10     	; 0x1928 <TIMER_u8SetCompMatch+0x3e>
    191e:	8d 81       	ldd	r24, Y+5	; 0x05
    1920:	9e 81       	ldd	r25, Y+6	; 0x06
    1922:	00 97       	sbiw	r24, 0x00	; 0
    1924:	61 f0       	breq	.+24     	; 0x193e <TIMER_u8SetCompMatch+0x54>
    1926:	35 c0       	rjmp	.+106    	; 0x1992 <TIMER_u8SetCompMatch+0xa8>
    1928:	2d 81       	ldd	r18, Y+5	; 0x05
    192a:	3e 81       	ldd	r19, Y+6	; 0x06
    192c:	22 30       	cpi	r18, 0x02	; 2
    192e:	31 05       	cpc	r19, r1
    1930:	d9 f0       	breq	.+54     	; 0x1968 <TIMER_u8SetCompMatch+0x7e>
    1932:	8d 81       	ldd	r24, Y+5	; 0x05
    1934:	9e 81       	ldd	r25, Y+6	; 0x06
    1936:	84 30       	cpi	r24, 0x04	; 4
    1938:	91 05       	cpc	r25, r1
    193a:	e9 f0       	breq	.+58     	; 0x1976 <TIMER_u8SetCompMatch+0x8c>
    193c:	2a c0       	rjmp	.+84     	; 0x1992 <TIMER_u8SetCompMatch+0xa8>
	case TIMER0  : if(Copy_u16Value<256){OCR0  = Copy_u16Value;} else{Local_u8ErrorState=NOK;} break;
    193e:	8b 81       	ldd	r24, Y+3	; 0x03
    1940:	9c 81       	ldd	r25, Y+4	; 0x04
    1942:	8f 3f       	cpi	r24, 0xFF	; 255
    1944:	91 05       	cpc	r25, r1
    1946:	09 f0       	breq	.+2      	; 0x194a <TIMER_u8SetCompMatch+0x60>
    1948:	28 f4       	brcc	.+10     	; 0x1954 <TIMER_u8SetCompMatch+0x6a>
    194a:	ec e5       	ldi	r30, 0x5C	; 92
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	8b 81       	ldd	r24, Y+3	; 0x03
    1950:	80 83       	st	Z, r24
    1952:	21 c0       	rjmp	.+66     	; 0x1996 <TIMER_u8SetCompMatch+0xac>
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	89 83       	std	Y+1, r24	; 0x01
    1958:	1e c0       	rjmp	.+60     	; 0x1996 <TIMER_u8SetCompMatch+0xac>
	case TIMER1A : OCR1A = Copy_u16Value; break;
    195a:	ea e4       	ldi	r30, 0x4A	; 74
    195c:	f0 e0       	ldi	r31, 0x00	; 0
    195e:	8b 81       	ldd	r24, Y+3	; 0x03
    1960:	9c 81       	ldd	r25, Y+4	; 0x04
    1962:	91 83       	std	Z+1, r25	; 0x01
    1964:	80 83       	st	Z, r24
    1966:	17 c0       	rjmp	.+46     	; 0x1996 <TIMER_u8SetCompMatch+0xac>
	case TIMER1B : OCR1B = Copy_u16Value; break;
    1968:	e8 e4       	ldi	r30, 0x48	; 72
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	8b 81       	ldd	r24, Y+3	; 0x03
    196e:	9c 81       	ldd	r25, Y+4	; 0x04
    1970:	91 83       	std	Z+1, r25	; 0x01
    1972:	80 83       	st	Z, r24
    1974:	10 c0       	rjmp	.+32     	; 0x1996 <TIMER_u8SetCompMatch+0xac>
	case TIMER2  : if(Copy_u16Value<256){OCR2  = Copy_u16Value;} else{Local_u8ErrorState=NOK;} break;
    1976:	8b 81       	ldd	r24, Y+3	; 0x03
    1978:	9c 81       	ldd	r25, Y+4	; 0x04
    197a:	8f 3f       	cpi	r24, 0xFF	; 255
    197c:	91 05       	cpc	r25, r1
    197e:	09 f0       	breq	.+2      	; 0x1982 <TIMER_u8SetCompMatch+0x98>
    1980:	28 f4       	brcc	.+10     	; 0x198c <TIMER_u8SetCompMatch+0xa2>
    1982:	e3 e4       	ldi	r30, 0x43	; 67
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	8b 81       	ldd	r24, Y+3	; 0x03
    1988:	80 83       	st	Z, r24
    198a:	05 c0       	rjmp	.+10     	; 0x1996 <TIMER_u8SetCompMatch+0xac>
    198c:	81 e0       	ldi	r24, 0x01	; 1
    198e:	89 83       	std	Y+1, r24	; 0x01
    1990:	02 c0       	rjmp	.+4      	; 0x1996 <TIMER_u8SetCompMatch+0xac>
	default: Local_u8ErrorState=NOK;
    1992:	81 e0       	ldi	r24, 0x01	; 1
    1994:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1996:	89 81       	ldd	r24, Y+1	; 0x01
}
    1998:	26 96       	adiw	r28, 0x06	; 6
    199a:	0f b6       	in	r0, 0x3f	; 63
    199c:	f8 94       	cli
    199e:	de bf       	out	0x3e, r29	; 62
    19a0:	0f be       	out	0x3f, r0	; 63
    19a2:	cd bf       	out	0x3d, r28	; 61
    19a4:	cf 91       	pop	r28
    19a6:	df 91       	pop	r29
    19a8:	08 95       	ret

000019aa <ICU_u8Init>:

u8 ICU_u8Init(u8 Copy_u8Edge,u8 Copy_u8InterruptStatus){
    19aa:	df 93       	push	r29
    19ac:	cf 93       	push	r28
    19ae:	00 d0       	rcall	.+0      	; 0x19b0 <ICU_u8Init+0x6>
    19b0:	0f 92       	push	r0
    19b2:	cd b7       	in	r28, 0x3d	; 61
    19b4:	de b7       	in	r29, 0x3e	; 62
    19b6:	8a 83       	std	Y+2, r24	; 0x02
    19b8:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=OK;
    19ba:	19 82       	std	Y+1, r1	; 0x01

	//Input Capture Edge Select
	if(Copy_u8Edge==RISING_EDGE){
    19bc:	8a 81       	ldd	r24, Y+2	; 0x02
    19be:	81 30       	cpi	r24, 0x01	; 1
    19c0:	41 f4       	brne	.+16     	; 0x19d2 <ICU_u8Init+0x28>
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    19c2:	ae e4       	ldi	r26, 0x4E	; 78
    19c4:	b0 e0       	ldi	r27, 0x00	; 0
    19c6:	ee e4       	ldi	r30, 0x4E	; 78
    19c8:	f0 e0       	ldi	r31, 0x00	; 0
    19ca:	80 81       	ld	r24, Z
    19cc:	80 64       	ori	r24, 0x40	; 64
    19ce:	8c 93       	st	X, r24
    19d0:	0d c0       	rjmp	.+26     	; 0x19ec <ICU_u8Init+0x42>
	}
	else if(Copy_u8Edge==FALLING_EDGE){
    19d2:	8a 81       	ldd	r24, Y+2	; 0x02
    19d4:	88 23       	and	r24, r24
    19d6:	41 f4       	brne	.+16     	; 0x19e8 <ICU_u8Init+0x3e>
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
    19d8:	ae e4       	ldi	r26, 0x4E	; 78
    19da:	b0 e0       	ldi	r27, 0x00	; 0
    19dc:	ee e4       	ldi	r30, 0x4E	; 78
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	80 81       	ld	r24, Z
    19e2:	8f 7b       	andi	r24, 0xBF	; 191
    19e4:	8c 93       	st	X, r24
    19e6:	02 c0       	rjmp	.+4      	; 0x19ec <ICU_u8Init+0x42>
	}
	else{
		Local_u8ErrorState=NOK;
    19e8:	81 e0       	ldi	r24, 0x01	; 1
    19ea:	89 83       	std	Y+1, r24	; 0x01
	}


	//Input Capture Interrupt
	if(Copy_u8InterruptStatus==INT_ENABLE){
    19ec:	8b 81       	ldd	r24, Y+3	; 0x03
    19ee:	81 30       	cpi	r24, 0x01	; 1
    19f0:	41 f4       	brne	.+16     	; 0x1a02 <ICU_u8Init+0x58>
		SET_BIT(TIMSK,TIMSK_TICIE1);
    19f2:	a9 e5       	ldi	r26, 0x59	; 89
    19f4:	b0 e0       	ldi	r27, 0x00	; 0
    19f6:	e9 e5       	ldi	r30, 0x59	; 89
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	80 81       	ld	r24, Z
    19fc:	80 62       	ori	r24, 0x20	; 32
    19fe:	8c 93       	st	X, r24
    1a00:	0d c0       	rjmp	.+26     	; 0x1a1c <ICU_u8Init+0x72>
	}
	else if(Copy_u8InterruptStatus==INT_DISABLE){
    1a02:	8b 81       	ldd	r24, Y+3	; 0x03
    1a04:	82 30       	cpi	r24, 0x02	; 2
    1a06:	41 f4       	brne	.+16     	; 0x1a18 <ICU_u8Init+0x6e>
		CLR_BIT(TIMSK,TIMSK_TICIE1);
    1a08:	a9 e5       	ldi	r26, 0x59	; 89
    1a0a:	b0 e0       	ldi	r27, 0x00	; 0
    1a0c:	e9 e5       	ldi	r30, 0x59	; 89
    1a0e:	f0 e0       	ldi	r31, 0x00	; 0
    1a10:	80 81       	ld	r24, Z
    1a12:	8f 7d       	andi	r24, 0xDF	; 223
    1a14:	8c 93       	st	X, r24
    1a16:	02 c0       	rjmp	.+4      	; 0x1a1c <ICU_u8Init+0x72>
	}
	else{
		Local_u8ErrorState=NOK;
    1a18:	81 e0       	ldi	r24, 0x01	; 1
    1a1a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1a1c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a1e:	0f 90       	pop	r0
    1a20:	0f 90       	pop	r0
    1a22:	0f 90       	pop	r0
    1a24:	cf 91       	pop	r28
    1a26:	df 91       	pop	r29
    1a28:	08 95       	ret

00001a2a <ICU_u8SetEdge>:

u8 ICU_u8SetEdge(u8 Copy_u8Edge){
    1a2a:	df 93       	push	r29
    1a2c:	cf 93       	push	r28
    1a2e:	00 d0       	rcall	.+0      	; 0x1a30 <ICU_u8SetEdge+0x6>
    1a30:	cd b7       	in	r28, 0x3d	; 61
    1a32:	de b7       	in	r29, 0x3e	; 62
    1a34:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
    1a36:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Edge==RISING_EDGE){
    1a38:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3a:	81 30       	cpi	r24, 0x01	; 1
    1a3c:	41 f4       	brne	.+16     	; 0x1a4e <ICU_u8SetEdge+0x24>
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    1a3e:	ae e4       	ldi	r26, 0x4E	; 78
    1a40:	b0 e0       	ldi	r27, 0x00	; 0
    1a42:	ee e4       	ldi	r30, 0x4E	; 78
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	80 81       	ld	r24, Z
    1a48:	80 64       	ori	r24, 0x40	; 64
    1a4a:	8c 93       	st	X, r24
    1a4c:	0d c0       	rjmp	.+26     	; 0x1a68 <ICU_u8SetEdge+0x3e>
	}
	else if(Copy_u8Edge==FALLING_EDGE){
    1a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a50:	88 23       	and	r24, r24
    1a52:	41 f4       	brne	.+16     	; 0x1a64 <ICU_u8SetEdge+0x3a>
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
    1a54:	ae e4       	ldi	r26, 0x4E	; 78
    1a56:	b0 e0       	ldi	r27, 0x00	; 0
    1a58:	ee e4       	ldi	r30, 0x4E	; 78
    1a5a:	f0 e0       	ldi	r31, 0x00	; 0
    1a5c:	80 81       	ld	r24, Z
    1a5e:	8f 7b       	andi	r24, 0xBF	; 191
    1a60:	8c 93       	st	X, r24
    1a62:	02 c0       	rjmp	.+4      	; 0x1a68 <ICU_u8SetEdge+0x3e>
	}
	else{
		Local_u8ErrorState=NOK;
    1a64:	81 e0       	ldi	r24, 0x01	; 1
    1a66:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1a68:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a6a:	0f 90       	pop	r0
    1a6c:	0f 90       	pop	r0
    1a6e:	cf 91       	pop	r28
    1a70:	df 91       	pop	r29
    1a72:	08 95       	ret

00001a74 <ICU_u16ReadInputCapture>:

u16 ICU_u16ReadInputCapture(void){
    1a74:	df 93       	push	r29
    1a76:	cf 93       	push	r28
    1a78:	cd b7       	in	r28, 0x3d	; 61
    1a7a:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    1a7c:	e6 e4       	ldi	r30, 0x46	; 70
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	80 81       	ld	r24, Z
    1a82:	91 81       	ldd	r25, Z+1	; 0x01
}
    1a84:	cf 91       	pop	r28
    1a86:	df 91       	pop	r29
    1a88:	08 95       	ret

00001a8a <TIMER_u8SetIntStatus>:

u8 TIMER_u8SetIntStatus(u8 Copy_u8InterruptID, u8 Copy_u8Status){
    1a8a:	df 93       	push	r29
    1a8c:	cf 93       	push	r28
    1a8e:	cd b7       	in	r28, 0x3d	; 61
    1a90:	de b7       	in	r29, 0x3e	; 62
    1a92:	27 97       	sbiw	r28, 0x07	; 7
    1a94:	0f b6       	in	r0, 0x3f	; 63
    1a96:	f8 94       	cli
    1a98:	de bf       	out	0x3e, r29	; 62
    1a9a:	0f be       	out	0x3f, r0	; 63
    1a9c:	cd bf       	out	0x3d, r28	; 61
    1a9e:	8a 83       	std	Y+2, r24	; 0x02
    1aa0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=OK;
    1aa2:	19 82       	std	Y+1, r1	; 0x01


	if(Copy_u8Status==INT_ENABLE){
    1aa4:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa6:	81 30       	cpi	r24, 0x01	; 1
    1aa8:	09 f0       	breq	.+2      	; 0x1aac <TIMER_u8SetIntStatus+0x22>
    1aaa:	77 c0       	rjmp	.+238    	; 0x1b9a <TIMER_u8SetIntStatus+0x110>
		switch(Copy_u8InterruptID){
    1aac:	8a 81       	ldd	r24, Y+2	; 0x02
    1aae:	28 2f       	mov	r18, r24
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	3f 83       	std	Y+7, r19	; 0x07
    1ab4:	2e 83       	std	Y+6, r18	; 0x06
    1ab6:	8e 81       	ldd	r24, Y+6	; 0x06
    1ab8:	9f 81       	ldd	r25, Y+7	; 0x07
    1aba:	83 30       	cpi	r24, 0x03	; 3
    1abc:	91 05       	cpc	r25, r1
    1abe:	09 f4       	brne	.+2      	; 0x1ac2 <TIMER_u8SetIntStatus+0x38>
    1ac0:	41 c0       	rjmp	.+130    	; 0x1b44 <TIMER_u8SetIntStatus+0xba>
    1ac2:	2e 81       	ldd	r18, Y+6	; 0x06
    1ac4:	3f 81       	ldd	r19, Y+7	; 0x07
    1ac6:	24 30       	cpi	r18, 0x04	; 4
    1ac8:	31 05       	cpc	r19, r1
    1aca:	7c f4       	brge	.+30     	; 0x1aea <TIMER_u8SetIntStatus+0x60>
    1acc:	8e 81       	ldd	r24, Y+6	; 0x06
    1ace:	9f 81       	ldd	r25, Y+7	; 0x07
    1ad0:	81 30       	cpi	r24, 0x01	; 1
    1ad2:	91 05       	cpc	r25, r1
    1ad4:	39 f1       	breq	.+78     	; 0x1b24 <TIMER_u8SetIntStatus+0x9a>
    1ad6:	2e 81       	ldd	r18, Y+6	; 0x06
    1ad8:	3f 81       	ldd	r19, Y+7	; 0x07
    1ada:	22 30       	cpi	r18, 0x02	; 2
    1adc:	31 05       	cpc	r19, r1
    1ade:	d4 f5       	brge	.+116    	; 0x1b54 <TIMER_u8SetIntStatus+0xca>
    1ae0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ae2:	9f 81       	ldd	r25, Y+7	; 0x07
    1ae4:	00 97       	sbiw	r24, 0x00	; 0
    1ae6:	b1 f0       	breq	.+44     	; 0x1b14 <TIMER_u8SetIntStatus+0x8a>
    1ae8:	55 c0       	rjmp	.+170    	; 0x1b94 <TIMER_u8SetIntStatus+0x10a>
    1aea:	2e 81       	ldd	r18, Y+6	; 0x06
    1aec:	3f 81       	ldd	r19, Y+7	; 0x07
    1aee:	25 30       	cpi	r18, 0x05	; 5
    1af0:	31 05       	cpc	r19, r1
    1af2:	c1 f1       	breq	.+112    	; 0x1b64 <TIMER_u8SetIntStatus+0xda>
    1af4:	8e 81       	ldd	r24, Y+6	; 0x06
    1af6:	9f 81       	ldd	r25, Y+7	; 0x07
    1af8:	85 30       	cpi	r24, 0x05	; 5
    1afa:	91 05       	cpc	r25, r1
    1afc:	dc f0       	brlt	.+54     	; 0x1b34 <TIMER_u8SetIntStatus+0xaa>
    1afe:	2e 81       	ldd	r18, Y+6	; 0x06
    1b00:	3f 81       	ldd	r19, Y+7	; 0x07
    1b02:	26 30       	cpi	r18, 0x06	; 6
    1b04:	31 05       	cpc	r19, r1
    1b06:	b1 f1       	breq	.+108    	; 0x1b74 <TIMER_u8SetIntStatus+0xea>
    1b08:	8e 81       	ldd	r24, Y+6	; 0x06
    1b0a:	9f 81       	ldd	r25, Y+7	; 0x07
    1b0c:	87 30       	cpi	r24, 0x07	; 7
    1b0e:	91 05       	cpc	r25, r1
    1b10:	c9 f1       	breq	.+114    	; 0x1b84 <TIMER_u8SetIntStatus+0xfa>
    1b12:	40 c0       	rjmp	.+128    	; 0x1b94 <TIMER_u8SetIntStatus+0x10a>
		case  INT_TIMER2_COMP	: SET_BIT(TIMSK,TIMSK_OCIE2 );break;
    1b14:	a9 e5       	ldi	r26, 0x59	; 89
    1b16:	b0 e0       	ldi	r27, 0x00	; 0
    1b18:	e9 e5       	ldi	r30, 0x59	; 89
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	80 81       	ld	r24, Z
    1b1e:	80 68       	ori	r24, 0x80	; 128
    1b20:	8c 93       	st	X, r24
    1b22:	b8 c0       	rjmp	.+368    	; 0x1c94 <TIMER_u8SetIntStatus+0x20a>
		case  INT_TIMER2_OVF	: SET_BIT(TIMSK,TIMSK_TOIE2 );break;
    1b24:	a9 e5       	ldi	r26, 0x59	; 89
    1b26:	b0 e0       	ldi	r27, 0x00	; 0
    1b28:	e9 e5       	ldi	r30, 0x59	; 89
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	80 81       	ld	r24, Z
    1b2e:	80 64       	ori	r24, 0x40	; 64
    1b30:	8c 93       	st	X, r24
    1b32:	b0 c0       	rjmp	.+352    	; 0x1c94 <TIMER_u8SetIntStatus+0x20a>
		case  INT_TIMER1_CAPT	: SET_BIT(TIMSK,TIMSK_TICIE1);break;
    1b34:	a9 e5       	ldi	r26, 0x59	; 89
    1b36:	b0 e0       	ldi	r27, 0x00	; 0
    1b38:	e9 e5       	ldi	r30, 0x59	; 89
    1b3a:	f0 e0       	ldi	r31, 0x00	; 0
    1b3c:	80 81       	ld	r24, Z
    1b3e:	80 62       	ori	r24, 0x20	; 32
    1b40:	8c 93       	st	X, r24
    1b42:	a8 c0       	rjmp	.+336    	; 0x1c94 <TIMER_u8SetIntStatus+0x20a>
		case  INT_TIMER1A_COMP	: SET_BIT(TIMSK,TIMSK_OCIE1A);break;
    1b44:	a9 e5       	ldi	r26, 0x59	; 89
    1b46:	b0 e0       	ldi	r27, 0x00	; 0
    1b48:	e9 e5       	ldi	r30, 0x59	; 89
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	80 81       	ld	r24, Z
    1b4e:	80 61       	ori	r24, 0x10	; 16
    1b50:	8c 93       	st	X, r24
    1b52:	a0 c0       	rjmp	.+320    	; 0x1c94 <TIMER_u8SetIntStatus+0x20a>
		case  INT_TIMER1B_COMP  : SET_BIT(TIMSK,TIMSK_OCIE1B);break;
    1b54:	a9 e5       	ldi	r26, 0x59	; 89
    1b56:	b0 e0       	ldi	r27, 0x00	; 0
    1b58:	e9 e5       	ldi	r30, 0x59	; 89
    1b5a:	f0 e0       	ldi	r31, 0x00	; 0
    1b5c:	80 81       	ld	r24, Z
    1b5e:	88 60       	ori	r24, 0x08	; 8
    1b60:	8c 93       	st	X, r24
    1b62:	98 c0       	rjmp	.+304    	; 0x1c94 <TIMER_u8SetIntStatus+0x20a>
		case  INT_TIMER1_OVF 	: SET_BIT(TIMSK,TIMSK_TOIE1 );break;
    1b64:	a9 e5       	ldi	r26, 0x59	; 89
    1b66:	b0 e0       	ldi	r27, 0x00	; 0
    1b68:	e9 e5       	ldi	r30, 0x59	; 89
    1b6a:	f0 e0       	ldi	r31, 0x00	; 0
    1b6c:	80 81       	ld	r24, Z
    1b6e:	84 60       	ori	r24, 0x04	; 4
    1b70:	8c 93       	st	X, r24
    1b72:	90 c0       	rjmp	.+288    	; 0x1c94 <TIMER_u8SetIntStatus+0x20a>
		case  INT_TIMER0_COMP	: SET_BIT(TIMSK,TIMSK_OCIE0 );break;
    1b74:	a9 e5       	ldi	r26, 0x59	; 89
    1b76:	b0 e0       	ldi	r27, 0x00	; 0
    1b78:	e9 e5       	ldi	r30, 0x59	; 89
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	80 81       	ld	r24, Z
    1b7e:	82 60       	ori	r24, 0x02	; 2
    1b80:	8c 93       	st	X, r24
    1b82:	88 c0       	rjmp	.+272    	; 0x1c94 <TIMER_u8SetIntStatus+0x20a>
		case  INT_TIMER0_OVF	: SET_BIT(TIMSK,TIMSK_TOIE0 );break;
    1b84:	a9 e5       	ldi	r26, 0x59	; 89
    1b86:	b0 e0       	ldi	r27, 0x00	; 0
    1b88:	e9 e5       	ldi	r30, 0x59	; 89
    1b8a:	f0 e0       	ldi	r31, 0x00	; 0
    1b8c:	80 81       	ld	r24, Z
    1b8e:	81 60       	ori	r24, 0x01	; 1
    1b90:	8c 93       	st	X, r24
    1b92:	80 c0       	rjmp	.+256    	; 0x1c94 <TIMER_u8SetIntStatus+0x20a>
		default : Local_u8ErrorState=NOK;
    1b94:	81 e0       	ldi	r24, 0x01	; 1
    1b96:	89 83       	std	Y+1, r24	; 0x01
    1b98:	7d c0       	rjmp	.+250    	; 0x1c94 <TIMER_u8SetIntStatus+0x20a>
		}
	}
	else if(Copy_u8Status==INT_DISABLE){
    1b9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9c:	82 30       	cpi	r24, 0x02	; 2
    1b9e:	09 f0       	breq	.+2      	; 0x1ba2 <TIMER_u8SetIntStatus+0x118>
    1ba0:	77 c0       	rjmp	.+238    	; 0x1c90 <TIMER_u8SetIntStatus+0x206>
		switch(Copy_u8InterruptID){
    1ba2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba4:	28 2f       	mov	r18, r24
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	3d 83       	std	Y+5, r19	; 0x05
    1baa:	2c 83       	std	Y+4, r18	; 0x04
    1bac:	8c 81       	ldd	r24, Y+4	; 0x04
    1bae:	9d 81       	ldd	r25, Y+5	; 0x05
    1bb0:	83 30       	cpi	r24, 0x03	; 3
    1bb2:	91 05       	cpc	r25, r1
    1bb4:	09 f4       	brne	.+2      	; 0x1bb8 <TIMER_u8SetIntStatus+0x12e>
    1bb6:	41 c0       	rjmp	.+130    	; 0x1c3a <TIMER_u8SetIntStatus+0x1b0>
    1bb8:	2c 81       	ldd	r18, Y+4	; 0x04
    1bba:	3d 81       	ldd	r19, Y+5	; 0x05
    1bbc:	24 30       	cpi	r18, 0x04	; 4
    1bbe:	31 05       	cpc	r19, r1
    1bc0:	7c f4       	brge	.+30     	; 0x1be0 <TIMER_u8SetIntStatus+0x156>
    1bc2:	8c 81       	ldd	r24, Y+4	; 0x04
    1bc4:	9d 81       	ldd	r25, Y+5	; 0x05
    1bc6:	81 30       	cpi	r24, 0x01	; 1
    1bc8:	91 05       	cpc	r25, r1
    1bca:	39 f1       	breq	.+78     	; 0x1c1a <TIMER_u8SetIntStatus+0x190>
    1bcc:	2c 81       	ldd	r18, Y+4	; 0x04
    1bce:	3d 81       	ldd	r19, Y+5	; 0x05
    1bd0:	22 30       	cpi	r18, 0x02	; 2
    1bd2:	31 05       	cpc	r19, r1
    1bd4:	d4 f5       	brge	.+116    	; 0x1c4a <TIMER_u8SetIntStatus+0x1c0>
    1bd6:	8c 81       	ldd	r24, Y+4	; 0x04
    1bd8:	9d 81       	ldd	r25, Y+5	; 0x05
    1bda:	00 97       	sbiw	r24, 0x00	; 0
    1bdc:	b1 f0       	breq	.+44     	; 0x1c0a <TIMER_u8SetIntStatus+0x180>
    1bde:	55 c0       	rjmp	.+170    	; 0x1c8a <TIMER_u8SetIntStatus+0x200>
    1be0:	2c 81       	ldd	r18, Y+4	; 0x04
    1be2:	3d 81       	ldd	r19, Y+5	; 0x05
    1be4:	25 30       	cpi	r18, 0x05	; 5
    1be6:	31 05       	cpc	r19, r1
    1be8:	c1 f1       	breq	.+112    	; 0x1c5a <TIMER_u8SetIntStatus+0x1d0>
    1bea:	8c 81       	ldd	r24, Y+4	; 0x04
    1bec:	9d 81       	ldd	r25, Y+5	; 0x05
    1bee:	85 30       	cpi	r24, 0x05	; 5
    1bf0:	91 05       	cpc	r25, r1
    1bf2:	dc f0       	brlt	.+54     	; 0x1c2a <TIMER_u8SetIntStatus+0x1a0>
    1bf4:	2c 81       	ldd	r18, Y+4	; 0x04
    1bf6:	3d 81       	ldd	r19, Y+5	; 0x05
    1bf8:	26 30       	cpi	r18, 0x06	; 6
    1bfa:	31 05       	cpc	r19, r1
    1bfc:	b1 f1       	breq	.+108    	; 0x1c6a <TIMER_u8SetIntStatus+0x1e0>
    1bfe:	8c 81       	ldd	r24, Y+4	; 0x04
    1c00:	9d 81       	ldd	r25, Y+5	; 0x05
    1c02:	87 30       	cpi	r24, 0x07	; 7
    1c04:	91 05       	cpc	r25, r1
    1c06:	c9 f1       	breq	.+114    	; 0x1c7a <TIMER_u8SetIntStatus+0x1f0>
    1c08:	40 c0       	rjmp	.+128    	; 0x1c8a <TIMER_u8SetIntStatus+0x200>
		case  INT_TIMER2_COMP	: CLR_BIT(TIMSK,TIMSK_OCIE2 );break;
    1c0a:	a9 e5       	ldi	r26, 0x59	; 89
    1c0c:	b0 e0       	ldi	r27, 0x00	; 0
    1c0e:	e9 e5       	ldi	r30, 0x59	; 89
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	80 81       	ld	r24, Z
    1c14:	8f 77       	andi	r24, 0x7F	; 127
    1c16:	8c 93       	st	X, r24
    1c18:	3d c0       	rjmp	.+122    	; 0x1c94 <TIMER_u8SetIntStatus+0x20a>
		case  INT_TIMER2_OVF	: CLR_BIT(TIMSK,TIMSK_TOIE2 );break;
    1c1a:	a9 e5       	ldi	r26, 0x59	; 89
    1c1c:	b0 e0       	ldi	r27, 0x00	; 0
    1c1e:	e9 e5       	ldi	r30, 0x59	; 89
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	80 81       	ld	r24, Z
    1c24:	8f 7b       	andi	r24, 0xBF	; 191
    1c26:	8c 93       	st	X, r24
    1c28:	35 c0       	rjmp	.+106    	; 0x1c94 <TIMER_u8SetIntStatus+0x20a>
		case  INT_TIMER1_CAPT	: CLR_BIT(TIMSK,TIMSK_TICIE1);break;
    1c2a:	a9 e5       	ldi	r26, 0x59	; 89
    1c2c:	b0 e0       	ldi	r27, 0x00	; 0
    1c2e:	e9 e5       	ldi	r30, 0x59	; 89
    1c30:	f0 e0       	ldi	r31, 0x00	; 0
    1c32:	80 81       	ld	r24, Z
    1c34:	8f 7d       	andi	r24, 0xDF	; 223
    1c36:	8c 93       	st	X, r24
    1c38:	2d c0       	rjmp	.+90     	; 0x1c94 <TIMER_u8SetIntStatus+0x20a>
		case  INT_TIMER1A_COMP	: CLR_BIT(TIMSK,TIMSK_OCIE1A);break;
    1c3a:	a9 e5       	ldi	r26, 0x59	; 89
    1c3c:	b0 e0       	ldi	r27, 0x00	; 0
    1c3e:	e9 e5       	ldi	r30, 0x59	; 89
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	80 81       	ld	r24, Z
    1c44:	8f 7e       	andi	r24, 0xEF	; 239
    1c46:	8c 93       	st	X, r24
    1c48:	25 c0       	rjmp	.+74     	; 0x1c94 <TIMER_u8SetIntStatus+0x20a>
		case  INT_TIMER1B_COMP  : CLR_BIT(TIMSK,TIMSK_OCIE1B);break;
    1c4a:	a9 e5       	ldi	r26, 0x59	; 89
    1c4c:	b0 e0       	ldi	r27, 0x00	; 0
    1c4e:	e9 e5       	ldi	r30, 0x59	; 89
    1c50:	f0 e0       	ldi	r31, 0x00	; 0
    1c52:	80 81       	ld	r24, Z
    1c54:	87 7f       	andi	r24, 0xF7	; 247
    1c56:	8c 93       	st	X, r24
    1c58:	1d c0       	rjmp	.+58     	; 0x1c94 <TIMER_u8SetIntStatus+0x20a>
		case  INT_TIMER1_OVF 	: CLR_BIT(TIMSK,TIMSK_TOIE1 );break;
    1c5a:	a9 e5       	ldi	r26, 0x59	; 89
    1c5c:	b0 e0       	ldi	r27, 0x00	; 0
    1c5e:	e9 e5       	ldi	r30, 0x59	; 89
    1c60:	f0 e0       	ldi	r31, 0x00	; 0
    1c62:	80 81       	ld	r24, Z
    1c64:	8b 7f       	andi	r24, 0xFB	; 251
    1c66:	8c 93       	st	X, r24
    1c68:	15 c0       	rjmp	.+42     	; 0x1c94 <TIMER_u8SetIntStatus+0x20a>
		case  INT_TIMER0_COMP	: CLR_BIT(TIMSK,TIMSK_OCIE0 );break;
    1c6a:	a9 e5       	ldi	r26, 0x59	; 89
    1c6c:	b0 e0       	ldi	r27, 0x00	; 0
    1c6e:	e9 e5       	ldi	r30, 0x59	; 89
    1c70:	f0 e0       	ldi	r31, 0x00	; 0
    1c72:	80 81       	ld	r24, Z
    1c74:	8d 7f       	andi	r24, 0xFD	; 253
    1c76:	8c 93       	st	X, r24
    1c78:	0d c0       	rjmp	.+26     	; 0x1c94 <TIMER_u8SetIntStatus+0x20a>
		case  INT_TIMER0_OVF	: CLR_BIT(TIMSK,TIMSK_TOIE0 );break;
    1c7a:	a9 e5       	ldi	r26, 0x59	; 89
    1c7c:	b0 e0       	ldi	r27, 0x00	; 0
    1c7e:	e9 e5       	ldi	r30, 0x59	; 89
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	80 81       	ld	r24, Z
    1c84:	8e 7f       	andi	r24, 0xFE	; 254
    1c86:	8c 93       	st	X, r24
    1c88:	05 c0       	rjmp	.+10     	; 0x1c94 <TIMER_u8SetIntStatus+0x20a>
		default : Local_u8ErrorState=NOK;
    1c8a:	81 e0       	ldi	r24, 0x01	; 1
    1c8c:	89 83       	std	Y+1, r24	; 0x01
    1c8e:	02 c0       	rjmp	.+4      	; 0x1c94 <TIMER_u8SetIntStatus+0x20a>
		}
	}
	else{
		Local_u8ErrorState=NOK;
    1c90:	81 e0       	ldi	r24, 0x01	; 1
    1c92:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1c94:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c96:	27 96       	adiw	r28, 0x07	; 7
    1c98:	0f b6       	in	r0, 0x3f	; 63
    1c9a:	f8 94       	cli
    1c9c:	de bf       	out	0x3e, r29	; 62
    1c9e:	0f be       	out	0x3f, r0	; 63
    1ca0:	cd bf       	out	0x3d, r28	; 61
    1ca2:	cf 91       	pop	r28
    1ca4:	df 91       	pop	r29
    1ca6:	08 95       	ret

00001ca8 <TIMER0_u8Init>:

/********************************************************TIMER0**********************************************************
 ************************************************************************************************************************/


u8 TIMER0_u8Init(Timer_t* Copy_psTimer){
    1ca8:	df 93       	push	r29
    1caa:	cf 93       	push	r28
    1cac:	00 d0       	rcall	.+0      	; 0x1cae <TIMER0_u8Init+0x6>
    1cae:	0f 92       	push	r0
    1cb0:	cd b7       	in	r28, 0x3d	; 61
    1cb2:	de b7       	in	r29, 0x3e	; 62
    1cb4:	9b 83       	std	Y+3, r25	; 0x03
    1cb6:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
    1cb8:	19 82       	std	Y+1, r1	; 0x01
	//Initialize Wave Generation Mode
	if(Copy_psTimer!=NULL){
    1cba:	8a 81       	ldd	r24, Y+2	; 0x02
    1cbc:	9b 81       	ldd	r25, Y+3	; 0x03
    1cbe:	00 97       	sbiw	r24, 0x00	; 0
    1cc0:	09 f4       	brne	.+2      	; 0x1cc4 <TIMER0_u8Init+0x1c>
    1cc2:	b6 c0       	rjmp	.+364    	; 0x1e30 <TIMER0_u8Init+0x188>
		if(Copy_psTimer->WaveGenMode==TIMER_NORMAL){
    1cc4:	ea 81       	ldd	r30, Y+2	; 0x02
    1cc6:	fb 81       	ldd	r31, Y+3	; 0x03
    1cc8:	80 81       	ld	r24, Z
    1cca:	81 30       	cpi	r24, 0x01	; 1
    1ccc:	79 f4       	brne	.+30     	; 0x1cec <TIMER0_u8Init+0x44>
			CLR_BIT(TCCR0,TCCR0_WGM01);
    1cce:	a3 e5       	ldi	r26, 0x53	; 83
    1cd0:	b0 e0       	ldi	r27, 0x00	; 0
    1cd2:	e3 e5       	ldi	r30, 0x53	; 83
    1cd4:	f0 e0       	ldi	r31, 0x00	; 0
    1cd6:	80 81       	ld	r24, Z
    1cd8:	87 7f       	andi	r24, 0xF7	; 247
    1cda:	8c 93       	st	X, r24
			CLR_BIT(TCCR0,TCCR0_WGM00);
    1cdc:	a3 e5       	ldi	r26, 0x53	; 83
    1cde:	b0 e0       	ldi	r27, 0x00	; 0
    1ce0:	e3 e5       	ldi	r30, 0x53	; 83
    1ce2:	f0 e0       	ldi	r31, 0x00	; 0
    1ce4:	80 81       	ld	r24, Z
    1ce6:	8f 7b       	andi	r24, 0xBF	; 191
    1ce8:	8c 93       	st	X, r24
    1cea:	3e c0       	rjmp	.+124    	; 0x1d68 <TIMER0_u8Init+0xc0>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER_PHC_PWM){
    1cec:	ea 81       	ldd	r30, Y+2	; 0x02
    1cee:	fb 81       	ldd	r31, Y+3	; 0x03
    1cf0:	80 81       	ld	r24, Z
    1cf2:	82 30       	cpi	r24, 0x02	; 2
    1cf4:	79 f4       	brne	.+30     	; 0x1d14 <TIMER0_u8Init+0x6c>
			CLR_BIT(TCCR0,TCCR0_WGM01);
    1cf6:	a3 e5       	ldi	r26, 0x53	; 83
    1cf8:	b0 e0       	ldi	r27, 0x00	; 0
    1cfa:	e3 e5       	ldi	r30, 0x53	; 83
    1cfc:	f0 e0       	ldi	r31, 0x00	; 0
    1cfe:	80 81       	ld	r24, Z
    1d00:	87 7f       	andi	r24, 0xF7	; 247
    1d02:	8c 93       	st	X, r24
			SET_BIT(TCCR0,TCCR0_WGM00);
    1d04:	a3 e5       	ldi	r26, 0x53	; 83
    1d06:	b0 e0       	ldi	r27, 0x00	; 0
    1d08:	e3 e5       	ldi	r30, 0x53	; 83
    1d0a:	f0 e0       	ldi	r31, 0x00	; 0
    1d0c:	80 81       	ld	r24, Z
    1d0e:	80 64       	ori	r24, 0x40	; 64
    1d10:	8c 93       	st	X, r24
    1d12:	2a c0       	rjmp	.+84     	; 0x1d68 <TIMER0_u8Init+0xc0>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER_CTC){
    1d14:	ea 81       	ldd	r30, Y+2	; 0x02
    1d16:	fb 81       	ldd	r31, Y+3	; 0x03
    1d18:	80 81       	ld	r24, Z
    1d1a:	83 30       	cpi	r24, 0x03	; 3
    1d1c:	79 f4       	brne	.+30     	; 0x1d3c <TIMER0_u8Init+0x94>
			SET_BIT(TCCR0,TCCR0_WGM01);
    1d1e:	a3 e5       	ldi	r26, 0x53	; 83
    1d20:	b0 e0       	ldi	r27, 0x00	; 0
    1d22:	e3 e5       	ldi	r30, 0x53	; 83
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	80 81       	ld	r24, Z
    1d28:	88 60       	ori	r24, 0x08	; 8
    1d2a:	8c 93       	st	X, r24
			CLR_BIT(TCCR0,TCCR0_WGM00);
    1d2c:	a3 e5       	ldi	r26, 0x53	; 83
    1d2e:	b0 e0       	ldi	r27, 0x00	; 0
    1d30:	e3 e5       	ldi	r30, 0x53	; 83
    1d32:	f0 e0       	ldi	r31, 0x00	; 0
    1d34:	80 81       	ld	r24, Z
    1d36:	8f 7b       	andi	r24, 0xBF	; 191
    1d38:	8c 93       	st	X, r24
    1d3a:	16 c0       	rjmp	.+44     	; 0x1d68 <TIMER0_u8Init+0xc0>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER_FAST_PWM){
    1d3c:	ea 81       	ldd	r30, Y+2	; 0x02
    1d3e:	fb 81       	ldd	r31, Y+3	; 0x03
    1d40:	80 81       	ld	r24, Z
    1d42:	84 30       	cpi	r24, 0x04	; 4
    1d44:	79 f4       	brne	.+30     	; 0x1d64 <TIMER0_u8Init+0xbc>
			SET_BIT(TCCR0,TCCR0_WGM01);
    1d46:	a3 e5       	ldi	r26, 0x53	; 83
    1d48:	b0 e0       	ldi	r27, 0x00	; 0
    1d4a:	e3 e5       	ldi	r30, 0x53	; 83
    1d4c:	f0 e0       	ldi	r31, 0x00	; 0
    1d4e:	80 81       	ld	r24, Z
    1d50:	88 60       	ori	r24, 0x08	; 8
    1d52:	8c 93       	st	X, r24
			SET_BIT(TCCR0,TCCR0_WGM00);
    1d54:	a3 e5       	ldi	r26, 0x53	; 83
    1d56:	b0 e0       	ldi	r27, 0x00	; 0
    1d58:	e3 e5       	ldi	r30, 0x53	; 83
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	80 81       	ld	r24, Z
    1d5e:	80 64       	ori	r24, 0x40	; 64
    1d60:	8c 93       	st	X, r24
    1d62:	02 c0       	rjmp	.+4      	; 0x1d68 <TIMER0_u8Init+0xc0>
		}
		else{
			Local_u8ErrorState=NOK;
    1d64:	81 e0       	ldi	r24, 0x01	; 1
    1d66:	89 83       	std	Y+1, r24	; 0x01
		}
		//Initialize Compare Match Output Mode
		TCCR0&=COMP_MATCH_OUT_MASK;
    1d68:	a3 e5       	ldi	r26, 0x53	; 83
    1d6a:	b0 e0       	ldi	r27, 0x00	; 0
    1d6c:	e3 e5       	ldi	r30, 0x53	; 83
    1d6e:	f0 e0       	ldi	r31, 0x00	; 0
    1d70:	80 81       	ld	r24, Z
    1d72:	8f 7c       	andi	r24, 0xCF	; 207
    1d74:	8c 93       	st	X, r24
		TCCR0|=((Copy_psTimer->CompareMatchOutputMode)<<4);
    1d76:	a3 e5       	ldi	r26, 0x53	; 83
    1d78:	b0 e0       	ldi	r27, 0x00	; 0
    1d7a:	e3 e5       	ldi	r30, 0x53	; 83
    1d7c:	f0 e0       	ldi	r31, 0x00	; 0
    1d7e:	80 81       	ld	r24, Z
    1d80:	28 2f       	mov	r18, r24
    1d82:	ea 81       	ldd	r30, Y+2	; 0x02
    1d84:	fb 81       	ldd	r31, Y+3	; 0x03
    1d86:	82 81       	ldd	r24, Z+2	; 0x02
    1d88:	88 2f       	mov	r24, r24
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	82 95       	swap	r24
    1d8e:	92 95       	swap	r25
    1d90:	90 7f       	andi	r25, 0xF0	; 240
    1d92:	98 27       	eor	r25, r24
    1d94:	80 7f       	andi	r24, 0xF0	; 240
    1d96:	98 27       	eor	r25, r24
    1d98:	82 2b       	or	r24, r18
    1d9a:	8c 93       	st	X, r24
		//Initialize Interrupt Enable pins
		if(Copy_psTimer->CompareMatchInterrupt==INT_ENABLE){
    1d9c:	ea 81       	ldd	r30, Y+2	; 0x02
    1d9e:	fb 81       	ldd	r31, Y+3	; 0x03
    1da0:	83 81       	ldd	r24, Z+3	; 0x03
    1da2:	81 30       	cpi	r24, 0x01	; 1
    1da4:	41 f4       	brne	.+16     	; 0x1db6 <TIMER0_u8Init+0x10e>
			SET_BIT(TIMSK,TIMSK_OCIE0);
    1da6:	a9 e5       	ldi	r26, 0x59	; 89
    1da8:	b0 e0       	ldi	r27, 0x00	; 0
    1daa:	e9 e5       	ldi	r30, 0x59	; 89
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
    1dae:	80 81       	ld	r24, Z
    1db0:	82 60       	ori	r24, 0x02	; 2
    1db2:	8c 93       	st	X, r24
    1db4:	0f c0       	rjmp	.+30     	; 0x1dd4 <TIMER0_u8Init+0x12c>
		}
		else if(Copy_psTimer->CompareMatchInterrupt==INT_DISABLE){
    1db6:	ea 81       	ldd	r30, Y+2	; 0x02
    1db8:	fb 81       	ldd	r31, Y+3	; 0x03
    1dba:	83 81       	ldd	r24, Z+3	; 0x03
    1dbc:	82 30       	cpi	r24, 0x02	; 2
    1dbe:	41 f4       	brne	.+16     	; 0x1dd0 <TIMER0_u8Init+0x128>
			CLR_BIT(TIMSK,TIMSK_OCIE0);
    1dc0:	a9 e5       	ldi	r26, 0x59	; 89
    1dc2:	b0 e0       	ldi	r27, 0x00	; 0
    1dc4:	e9 e5       	ldi	r30, 0x59	; 89
    1dc6:	f0 e0       	ldi	r31, 0x00	; 0
    1dc8:	80 81       	ld	r24, Z
    1dca:	8d 7f       	andi	r24, 0xFD	; 253
    1dcc:	8c 93       	st	X, r24
    1dce:	02 c0       	rjmp	.+4      	; 0x1dd4 <TIMER0_u8Init+0x12c>
		}
		else{
			Local_u8ErrorState=NOK;
    1dd0:	81 e0       	ldi	r24, 0x01	; 1
    1dd2:	89 83       	std	Y+1, r24	; 0x01
		}

		if(Copy_psTimer->OverFlowInterrupt==INT_ENABLE){
    1dd4:	ea 81       	ldd	r30, Y+2	; 0x02
    1dd6:	fb 81       	ldd	r31, Y+3	; 0x03
    1dd8:	84 81       	ldd	r24, Z+4	; 0x04
    1dda:	81 30       	cpi	r24, 0x01	; 1
    1ddc:	41 f4       	brne	.+16     	; 0x1dee <TIMER0_u8Init+0x146>
			SET_BIT(TIMSK,TIMSK_TOIE0);
    1dde:	a9 e5       	ldi	r26, 0x59	; 89
    1de0:	b0 e0       	ldi	r27, 0x00	; 0
    1de2:	e9 e5       	ldi	r30, 0x59	; 89
    1de4:	f0 e0       	ldi	r31, 0x00	; 0
    1de6:	80 81       	ld	r24, Z
    1de8:	81 60       	ori	r24, 0x01	; 1
    1dea:	8c 93       	st	X, r24
    1dec:	0f c0       	rjmp	.+30     	; 0x1e0c <TIMER0_u8Init+0x164>
		}
		else if(Copy_psTimer->OverFlowInterrupt==INT_DISABLE){
    1dee:	ea 81       	ldd	r30, Y+2	; 0x02
    1df0:	fb 81       	ldd	r31, Y+3	; 0x03
    1df2:	84 81       	ldd	r24, Z+4	; 0x04
    1df4:	82 30       	cpi	r24, 0x02	; 2
    1df6:	41 f4       	brne	.+16     	; 0x1e08 <TIMER0_u8Init+0x160>
			CLR_BIT(TIMSK,TIMSK_TOIE0);
    1df8:	a9 e5       	ldi	r26, 0x59	; 89
    1dfa:	b0 e0       	ldi	r27, 0x00	; 0
    1dfc:	e9 e5       	ldi	r30, 0x59	; 89
    1dfe:	f0 e0       	ldi	r31, 0x00	; 0
    1e00:	80 81       	ld	r24, Z
    1e02:	8e 7f       	andi	r24, 0xFE	; 254
    1e04:	8c 93       	st	X, r24
    1e06:	02 c0       	rjmp	.+4      	; 0x1e0c <TIMER0_u8Init+0x164>
		}
		else{
			Local_u8ErrorState=NOK;
    1e08:	81 e0       	ldi	r24, 0x01	; 1
    1e0a:	89 83       	std	Y+1, r24	; 0x01
		}

		//Initialize Prescaler
		TCCR0&=PRESCALER_MASK;
    1e0c:	a3 e5       	ldi	r26, 0x53	; 83
    1e0e:	b0 e0       	ldi	r27, 0x00	; 0
    1e10:	e3 e5       	ldi	r30, 0x53	; 83
    1e12:	f0 e0       	ldi	r31, 0x00	; 0
    1e14:	80 81       	ld	r24, Z
    1e16:	88 7f       	andi	r24, 0xF8	; 248
    1e18:	8c 93       	st	X, r24
		TCCR0|=Copy_psTimer->Prescaler;
    1e1a:	a3 e5       	ldi	r26, 0x53	; 83
    1e1c:	b0 e0       	ldi	r27, 0x00	; 0
    1e1e:	e3 e5       	ldi	r30, 0x53	; 83
    1e20:	f0 e0       	ldi	r31, 0x00	; 0
    1e22:	90 81       	ld	r25, Z
    1e24:	ea 81       	ldd	r30, Y+2	; 0x02
    1e26:	fb 81       	ldd	r31, Y+3	; 0x03
    1e28:	81 81       	ldd	r24, Z+1	; 0x01
    1e2a:	89 2b       	or	r24, r25
    1e2c:	8c 93       	st	X, r24
    1e2e:	02 c0       	rjmp	.+4      	; 0x1e34 <TIMER0_u8Init+0x18c>
	}
	else{
		Local_u8ErrorState=NULL_POINTER;
    1e30:	82 e0       	ldi	r24, 0x02	; 2
    1e32:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1e34:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e36:	0f 90       	pop	r0
    1e38:	0f 90       	pop	r0
    1e3a:	0f 90       	pop	r0
    1e3c:	cf 91       	pop	r28
    1e3e:	df 91       	pop	r29
    1e40:	08 95       	ret

00001e42 <TIMER1_u8Init>:

/********************************************************TIMER1**********************************************************
 ************************************************************************************************************************/


u8 TIMER1_u8Init(Timer1_t* Copy_psTimer){
    1e42:	df 93       	push	r29
    1e44:	cf 93       	push	r28
    1e46:	00 d0       	rcall	.+0      	; 0x1e48 <TIMER1_u8Init+0x6>
    1e48:	0f 92       	push	r0
    1e4a:	cd b7       	in	r28, 0x3d	; 61
    1e4c:	de b7       	in	r29, 0x3e	; 62
    1e4e:	9b 83       	std	Y+3, r25	; 0x03
    1e50:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
    1e52:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_psTimer!=NULL){
    1e54:	8a 81       	ldd	r24, Y+2	; 0x02
    1e56:	9b 81       	ldd	r25, Y+3	; 0x03
    1e58:	00 97       	sbiw	r24, 0x00	; 0
    1e5a:	09 f4       	brne	.+2      	; 0x1e5e <TIMER1_u8Init+0x1c>
    1e5c:	96 c2       	rjmp	.+1324   	; 0x238a <TIMER1_u8Init+0x548>
		//initialize wave generation mode
		if(Copy_psTimer->WaveGenMode==TIMER1_NORMAL){
    1e5e:	ea 81       	ldd	r30, Y+2	; 0x02
    1e60:	fb 81       	ldd	r31, Y+3	; 0x03
    1e62:	80 81       	ld	r24, Z
    1e64:	81 30       	cpi	r24, 0x01	; 1
    1e66:	e9 f4       	brne	.+58     	; 0x1ea2 <TIMER1_u8Init+0x60>
			CLR_BIT(TCCR1B,TCCR1B_WGM13);
    1e68:	ae e4       	ldi	r26, 0x4E	; 78
    1e6a:	b0 e0       	ldi	r27, 0x00	; 0
    1e6c:	ee e4       	ldi	r30, 0x4E	; 78
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	80 81       	ld	r24, Z
    1e72:	8f 7e       	andi	r24, 0xEF	; 239
    1e74:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B,TCCR1B_WGM12);
    1e76:	ae e4       	ldi	r26, 0x4E	; 78
    1e78:	b0 e0       	ldi	r27, 0x00	; 0
    1e7a:	ee e4       	ldi	r30, 0x4E	; 78
    1e7c:	f0 e0       	ldi	r31, 0x00	; 0
    1e7e:	80 81       	ld	r24, Z
    1e80:	87 7f       	andi	r24, 0xF7	; 247
    1e82:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM11);
    1e84:	af e4       	ldi	r26, 0x4F	; 79
    1e86:	b0 e0       	ldi	r27, 0x00	; 0
    1e88:	ef e4       	ldi	r30, 0x4F	; 79
    1e8a:	f0 e0       	ldi	r31, 0x00	; 0
    1e8c:	80 81       	ld	r24, Z
    1e8e:	8d 7f       	andi	r24, 0xFD	; 253
    1e90:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM10);
    1e92:	af e4       	ldi	r26, 0x4F	; 79
    1e94:	b0 e0       	ldi	r27, 0x00	; 0
    1e96:	ef e4       	ldi	r30, 0x4F	; 79
    1e98:	f0 e0       	ldi	r31, 0x00	; 0
    1e9a:	80 81       	ld	r24, Z
    1e9c:	8e 7f       	andi	r24, 0xFE	; 254
    1e9e:	8c 93       	st	X, r24
    1ea0:	de c1       	rjmp	.+956    	; 0x225e <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_PHC_PWM_8_BIT){
    1ea2:	ea 81       	ldd	r30, Y+2	; 0x02
    1ea4:	fb 81       	ldd	r31, Y+3	; 0x03
    1ea6:	80 81       	ld	r24, Z
    1ea8:	82 30       	cpi	r24, 0x02	; 2
    1eaa:	e9 f4       	brne	.+58     	; 0x1ee6 <TIMER1_u8Init+0xa4>
			CLR_BIT(TCCR1B,TCCR1B_WGM13);
    1eac:	ae e4       	ldi	r26, 0x4E	; 78
    1eae:	b0 e0       	ldi	r27, 0x00	; 0
    1eb0:	ee e4       	ldi	r30, 0x4E	; 78
    1eb2:	f0 e0       	ldi	r31, 0x00	; 0
    1eb4:	80 81       	ld	r24, Z
    1eb6:	8f 7e       	andi	r24, 0xEF	; 239
    1eb8:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B,TCCR1B_WGM12);
    1eba:	ae e4       	ldi	r26, 0x4E	; 78
    1ebc:	b0 e0       	ldi	r27, 0x00	; 0
    1ebe:	ee e4       	ldi	r30, 0x4E	; 78
    1ec0:	f0 e0       	ldi	r31, 0x00	; 0
    1ec2:	80 81       	ld	r24, Z
    1ec4:	87 7f       	andi	r24, 0xF7	; 247
    1ec6:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM11);
    1ec8:	af e4       	ldi	r26, 0x4F	; 79
    1eca:	b0 e0       	ldi	r27, 0x00	; 0
    1ecc:	ef e4       	ldi	r30, 0x4F	; 79
    1ece:	f0 e0       	ldi	r31, 0x00	; 0
    1ed0:	80 81       	ld	r24, Z
    1ed2:	8d 7f       	andi	r24, 0xFD	; 253
    1ed4:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM10);
    1ed6:	af e4       	ldi	r26, 0x4F	; 79
    1ed8:	b0 e0       	ldi	r27, 0x00	; 0
    1eda:	ef e4       	ldi	r30, 0x4F	; 79
    1edc:	f0 e0       	ldi	r31, 0x00	; 0
    1ede:	80 81       	ld	r24, Z
    1ee0:	81 60       	ori	r24, 0x01	; 1
    1ee2:	8c 93       	st	X, r24
    1ee4:	bc c1       	rjmp	.+888    	; 0x225e <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_PHC_PWM_9_BIT){
    1ee6:	ea 81       	ldd	r30, Y+2	; 0x02
    1ee8:	fb 81       	ldd	r31, Y+3	; 0x03
    1eea:	80 81       	ld	r24, Z
    1eec:	83 30       	cpi	r24, 0x03	; 3
    1eee:	e9 f4       	brne	.+58     	; 0x1f2a <TIMER1_u8Init+0xe8>
			CLR_BIT(TCCR1B,TCCR1B_WGM13);
    1ef0:	ae e4       	ldi	r26, 0x4E	; 78
    1ef2:	b0 e0       	ldi	r27, 0x00	; 0
    1ef4:	ee e4       	ldi	r30, 0x4E	; 78
    1ef6:	f0 e0       	ldi	r31, 0x00	; 0
    1ef8:	80 81       	ld	r24, Z
    1efa:	8f 7e       	andi	r24, 0xEF	; 239
    1efc:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B,TCCR1B_WGM12);
    1efe:	ae e4       	ldi	r26, 0x4E	; 78
    1f00:	b0 e0       	ldi	r27, 0x00	; 0
    1f02:	ee e4       	ldi	r30, 0x4E	; 78
    1f04:	f0 e0       	ldi	r31, 0x00	; 0
    1f06:	80 81       	ld	r24, Z
    1f08:	87 7f       	andi	r24, 0xF7	; 247
    1f0a:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM11);
    1f0c:	af e4       	ldi	r26, 0x4F	; 79
    1f0e:	b0 e0       	ldi	r27, 0x00	; 0
    1f10:	ef e4       	ldi	r30, 0x4F	; 79
    1f12:	f0 e0       	ldi	r31, 0x00	; 0
    1f14:	80 81       	ld	r24, Z
    1f16:	82 60       	ori	r24, 0x02	; 2
    1f18:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM10);
    1f1a:	af e4       	ldi	r26, 0x4F	; 79
    1f1c:	b0 e0       	ldi	r27, 0x00	; 0
    1f1e:	ef e4       	ldi	r30, 0x4F	; 79
    1f20:	f0 e0       	ldi	r31, 0x00	; 0
    1f22:	80 81       	ld	r24, Z
    1f24:	8e 7f       	andi	r24, 0xFE	; 254
    1f26:	8c 93       	st	X, r24
    1f28:	9a c1       	rjmp	.+820    	; 0x225e <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_PHC_PWM_10_BIT){
    1f2a:	ea 81       	ldd	r30, Y+2	; 0x02
    1f2c:	fb 81       	ldd	r31, Y+3	; 0x03
    1f2e:	80 81       	ld	r24, Z
    1f30:	84 30       	cpi	r24, 0x04	; 4
    1f32:	e9 f4       	brne	.+58     	; 0x1f6e <TIMER1_u8Init+0x12c>
			CLR_BIT(TCCR1B,TCCR1B_WGM13);
    1f34:	ae e4       	ldi	r26, 0x4E	; 78
    1f36:	b0 e0       	ldi	r27, 0x00	; 0
    1f38:	ee e4       	ldi	r30, 0x4E	; 78
    1f3a:	f0 e0       	ldi	r31, 0x00	; 0
    1f3c:	80 81       	ld	r24, Z
    1f3e:	8f 7e       	andi	r24, 0xEF	; 239
    1f40:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B,TCCR1B_WGM12);
    1f42:	ae e4       	ldi	r26, 0x4E	; 78
    1f44:	b0 e0       	ldi	r27, 0x00	; 0
    1f46:	ee e4       	ldi	r30, 0x4E	; 78
    1f48:	f0 e0       	ldi	r31, 0x00	; 0
    1f4a:	80 81       	ld	r24, Z
    1f4c:	87 7f       	andi	r24, 0xF7	; 247
    1f4e:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM11);
    1f50:	af e4       	ldi	r26, 0x4F	; 79
    1f52:	b0 e0       	ldi	r27, 0x00	; 0
    1f54:	ef e4       	ldi	r30, 0x4F	; 79
    1f56:	f0 e0       	ldi	r31, 0x00	; 0
    1f58:	80 81       	ld	r24, Z
    1f5a:	82 60       	ori	r24, 0x02	; 2
    1f5c:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM10);
    1f5e:	af e4       	ldi	r26, 0x4F	; 79
    1f60:	b0 e0       	ldi	r27, 0x00	; 0
    1f62:	ef e4       	ldi	r30, 0x4F	; 79
    1f64:	f0 e0       	ldi	r31, 0x00	; 0
    1f66:	80 81       	ld	r24, Z
    1f68:	81 60       	ori	r24, 0x01	; 1
    1f6a:	8c 93       	st	X, r24
    1f6c:	78 c1       	rjmp	.+752    	; 0x225e <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_CTC){
    1f6e:	ea 81       	ldd	r30, Y+2	; 0x02
    1f70:	fb 81       	ldd	r31, Y+3	; 0x03
    1f72:	80 81       	ld	r24, Z
    1f74:	85 30       	cpi	r24, 0x05	; 5
    1f76:	e9 f4       	brne	.+58     	; 0x1fb2 <TIMER1_u8Init+0x170>
			CLR_BIT(TCCR1B,TCCR1B_WGM13);
    1f78:	ae e4       	ldi	r26, 0x4E	; 78
    1f7a:	b0 e0       	ldi	r27, 0x00	; 0
    1f7c:	ee e4       	ldi	r30, 0x4E	; 78
    1f7e:	f0 e0       	ldi	r31, 0x00	; 0
    1f80:	80 81       	ld	r24, Z
    1f82:	8f 7e       	andi	r24, 0xEF	; 239
    1f84:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,TCCR1B_WGM12);
    1f86:	ae e4       	ldi	r26, 0x4E	; 78
    1f88:	b0 e0       	ldi	r27, 0x00	; 0
    1f8a:	ee e4       	ldi	r30, 0x4E	; 78
    1f8c:	f0 e0       	ldi	r31, 0x00	; 0
    1f8e:	80 81       	ld	r24, Z
    1f90:	88 60       	ori	r24, 0x08	; 8
    1f92:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM11);
    1f94:	af e4       	ldi	r26, 0x4F	; 79
    1f96:	b0 e0       	ldi	r27, 0x00	; 0
    1f98:	ef e4       	ldi	r30, 0x4F	; 79
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	80 81       	ld	r24, Z
    1f9e:	8d 7f       	andi	r24, 0xFD	; 253
    1fa0:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM10);
    1fa2:	af e4       	ldi	r26, 0x4F	; 79
    1fa4:	b0 e0       	ldi	r27, 0x00	; 0
    1fa6:	ef e4       	ldi	r30, 0x4F	; 79
    1fa8:	f0 e0       	ldi	r31, 0x00	; 0
    1faa:	80 81       	ld	r24, Z
    1fac:	8e 7f       	andi	r24, 0xFE	; 254
    1fae:	8c 93       	st	X, r24
    1fb0:	56 c1       	rjmp	.+684    	; 0x225e <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_FAST_PWM_8_BIT){
    1fb2:	ea 81       	ldd	r30, Y+2	; 0x02
    1fb4:	fb 81       	ldd	r31, Y+3	; 0x03
    1fb6:	80 81       	ld	r24, Z
    1fb8:	86 30       	cpi	r24, 0x06	; 6
    1fba:	e9 f4       	brne	.+58     	; 0x1ff6 <TIMER1_u8Init+0x1b4>
			CLR_BIT(TCCR1B,TCCR1B_WGM13);
    1fbc:	ae e4       	ldi	r26, 0x4E	; 78
    1fbe:	b0 e0       	ldi	r27, 0x00	; 0
    1fc0:	ee e4       	ldi	r30, 0x4E	; 78
    1fc2:	f0 e0       	ldi	r31, 0x00	; 0
    1fc4:	80 81       	ld	r24, Z
    1fc6:	8f 7e       	andi	r24, 0xEF	; 239
    1fc8:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,TCCR1B_WGM12);
    1fca:	ae e4       	ldi	r26, 0x4E	; 78
    1fcc:	b0 e0       	ldi	r27, 0x00	; 0
    1fce:	ee e4       	ldi	r30, 0x4E	; 78
    1fd0:	f0 e0       	ldi	r31, 0x00	; 0
    1fd2:	80 81       	ld	r24, Z
    1fd4:	88 60       	ori	r24, 0x08	; 8
    1fd6:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM11);
    1fd8:	af e4       	ldi	r26, 0x4F	; 79
    1fda:	b0 e0       	ldi	r27, 0x00	; 0
    1fdc:	ef e4       	ldi	r30, 0x4F	; 79
    1fde:	f0 e0       	ldi	r31, 0x00	; 0
    1fe0:	80 81       	ld	r24, Z
    1fe2:	8d 7f       	andi	r24, 0xFD	; 253
    1fe4:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM10);
    1fe6:	af e4       	ldi	r26, 0x4F	; 79
    1fe8:	b0 e0       	ldi	r27, 0x00	; 0
    1fea:	ef e4       	ldi	r30, 0x4F	; 79
    1fec:	f0 e0       	ldi	r31, 0x00	; 0
    1fee:	80 81       	ld	r24, Z
    1ff0:	81 60       	ori	r24, 0x01	; 1
    1ff2:	8c 93       	st	X, r24
    1ff4:	34 c1       	rjmp	.+616    	; 0x225e <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_FAST_PWM_9_BIT){
    1ff6:	ea 81       	ldd	r30, Y+2	; 0x02
    1ff8:	fb 81       	ldd	r31, Y+3	; 0x03
    1ffa:	80 81       	ld	r24, Z
    1ffc:	87 30       	cpi	r24, 0x07	; 7
    1ffe:	e9 f4       	brne	.+58     	; 0x203a <TIMER1_u8Init+0x1f8>
			CLR_BIT(TCCR1B,TCCR1B_WGM13);
    2000:	ae e4       	ldi	r26, 0x4E	; 78
    2002:	b0 e0       	ldi	r27, 0x00	; 0
    2004:	ee e4       	ldi	r30, 0x4E	; 78
    2006:	f0 e0       	ldi	r31, 0x00	; 0
    2008:	80 81       	ld	r24, Z
    200a:	8f 7e       	andi	r24, 0xEF	; 239
    200c:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,TCCR1B_WGM12);
    200e:	ae e4       	ldi	r26, 0x4E	; 78
    2010:	b0 e0       	ldi	r27, 0x00	; 0
    2012:	ee e4       	ldi	r30, 0x4E	; 78
    2014:	f0 e0       	ldi	r31, 0x00	; 0
    2016:	80 81       	ld	r24, Z
    2018:	88 60       	ori	r24, 0x08	; 8
    201a:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM11);
    201c:	af e4       	ldi	r26, 0x4F	; 79
    201e:	b0 e0       	ldi	r27, 0x00	; 0
    2020:	ef e4       	ldi	r30, 0x4F	; 79
    2022:	f0 e0       	ldi	r31, 0x00	; 0
    2024:	80 81       	ld	r24, Z
    2026:	82 60       	ori	r24, 0x02	; 2
    2028:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM10);
    202a:	af e4       	ldi	r26, 0x4F	; 79
    202c:	b0 e0       	ldi	r27, 0x00	; 0
    202e:	ef e4       	ldi	r30, 0x4F	; 79
    2030:	f0 e0       	ldi	r31, 0x00	; 0
    2032:	80 81       	ld	r24, Z
    2034:	8e 7f       	andi	r24, 0xFE	; 254
    2036:	8c 93       	st	X, r24
    2038:	12 c1       	rjmp	.+548    	; 0x225e <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_FAST_PWM_10_BIT){
    203a:	ea 81       	ldd	r30, Y+2	; 0x02
    203c:	fb 81       	ldd	r31, Y+3	; 0x03
    203e:	80 81       	ld	r24, Z
    2040:	88 30       	cpi	r24, 0x08	; 8
    2042:	e9 f4       	brne	.+58     	; 0x207e <TIMER1_u8Init+0x23c>
			CLR_BIT(TCCR1B,TCCR1B_WGM13);
    2044:	ae e4       	ldi	r26, 0x4E	; 78
    2046:	b0 e0       	ldi	r27, 0x00	; 0
    2048:	ee e4       	ldi	r30, 0x4E	; 78
    204a:	f0 e0       	ldi	r31, 0x00	; 0
    204c:	80 81       	ld	r24, Z
    204e:	8f 7e       	andi	r24, 0xEF	; 239
    2050:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,TCCR1B_WGM12);
    2052:	ae e4       	ldi	r26, 0x4E	; 78
    2054:	b0 e0       	ldi	r27, 0x00	; 0
    2056:	ee e4       	ldi	r30, 0x4E	; 78
    2058:	f0 e0       	ldi	r31, 0x00	; 0
    205a:	80 81       	ld	r24, Z
    205c:	88 60       	ori	r24, 0x08	; 8
    205e:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM11);
    2060:	af e4       	ldi	r26, 0x4F	; 79
    2062:	b0 e0       	ldi	r27, 0x00	; 0
    2064:	ef e4       	ldi	r30, 0x4F	; 79
    2066:	f0 e0       	ldi	r31, 0x00	; 0
    2068:	80 81       	ld	r24, Z
    206a:	82 60       	ori	r24, 0x02	; 2
    206c:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM10);
    206e:	af e4       	ldi	r26, 0x4F	; 79
    2070:	b0 e0       	ldi	r27, 0x00	; 0
    2072:	ef e4       	ldi	r30, 0x4F	; 79
    2074:	f0 e0       	ldi	r31, 0x00	; 0
    2076:	80 81       	ld	r24, Z
    2078:	81 60       	ori	r24, 0x01	; 1
    207a:	8c 93       	st	X, r24
    207c:	f0 c0       	rjmp	.+480    	; 0x225e <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_PHFC_PWM_CUSTOM_TOP){
    207e:	ea 81       	ldd	r30, Y+2	; 0x02
    2080:	fb 81       	ldd	r31, Y+3	; 0x03
    2082:	80 81       	ld	r24, Z
    2084:	89 30       	cpi	r24, 0x09	; 9
    2086:	e9 f4       	brne	.+58     	; 0x20c2 <TIMER1_u8Init+0x280>
			SET_BIT(TCCR1B,TCCR1B_WGM13);
    2088:	ae e4       	ldi	r26, 0x4E	; 78
    208a:	b0 e0       	ldi	r27, 0x00	; 0
    208c:	ee e4       	ldi	r30, 0x4E	; 78
    208e:	f0 e0       	ldi	r31, 0x00	; 0
    2090:	80 81       	ld	r24, Z
    2092:	80 61       	ori	r24, 0x10	; 16
    2094:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B,TCCR1B_WGM12);
    2096:	ae e4       	ldi	r26, 0x4E	; 78
    2098:	b0 e0       	ldi	r27, 0x00	; 0
    209a:	ee e4       	ldi	r30, 0x4E	; 78
    209c:	f0 e0       	ldi	r31, 0x00	; 0
    209e:	80 81       	ld	r24, Z
    20a0:	87 7f       	andi	r24, 0xF7	; 247
    20a2:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM11);
    20a4:	af e4       	ldi	r26, 0x4F	; 79
    20a6:	b0 e0       	ldi	r27, 0x00	; 0
    20a8:	ef e4       	ldi	r30, 0x4F	; 79
    20aa:	f0 e0       	ldi	r31, 0x00	; 0
    20ac:	80 81       	ld	r24, Z
    20ae:	8d 7f       	andi	r24, 0xFD	; 253
    20b0:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM10);
    20b2:	af e4       	ldi	r26, 0x4F	; 79
    20b4:	b0 e0       	ldi	r27, 0x00	; 0
    20b6:	ef e4       	ldi	r30, 0x4F	; 79
    20b8:	f0 e0       	ldi	r31, 0x00	; 0
    20ba:	80 81       	ld	r24, Z
    20bc:	8e 7f       	andi	r24, 0xFE	; 254
    20be:	8c 93       	st	X, r24
    20c0:	ce c0       	rjmp	.+412    	; 0x225e <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_PHFC_PWM){
    20c2:	ea 81       	ldd	r30, Y+2	; 0x02
    20c4:	fb 81       	ldd	r31, Y+3	; 0x03
    20c6:	80 81       	ld	r24, Z
    20c8:	8a 30       	cpi	r24, 0x0A	; 10
    20ca:	e9 f4       	brne	.+58     	; 0x2106 <TIMER1_u8Init+0x2c4>
			SET_BIT(TCCR1B,TCCR1B_WGM13);
    20cc:	ae e4       	ldi	r26, 0x4E	; 78
    20ce:	b0 e0       	ldi	r27, 0x00	; 0
    20d0:	ee e4       	ldi	r30, 0x4E	; 78
    20d2:	f0 e0       	ldi	r31, 0x00	; 0
    20d4:	80 81       	ld	r24, Z
    20d6:	80 61       	ori	r24, 0x10	; 16
    20d8:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B,TCCR1B_WGM12);
    20da:	ae e4       	ldi	r26, 0x4E	; 78
    20dc:	b0 e0       	ldi	r27, 0x00	; 0
    20de:	ee e4       	ldi	r30, 0x4E	; 78
    20e0:	f0 e0       	ldi	r31, 0x00	; 0
    20e2:	80 81       	ld	r24, Z
    20e4:	87 7f       	andi	r24, 0xF7	; 247
    20e6:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM11);
    20e8:	af e4       	ldi	r26, 0x4F	; 79
    20ea:	b0 e0       	ldi	r27, 0x00	; 0
    20ec:	ef e4       	ldi	r30, 0x4F	; 79
    20ee:	f0 e0       	ldi	r31, 0x00	; 0
    20f0:	80 81       	ld	r24, Z
    20f2:	8d 7f       	andi	r24, 0xFD	; 253
    20f4:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM10);
    20f6:	af e4       	ldi	r26, 0x4F	; 79
    20f8:	b0 e0       	ldi	r27, 0x00	; 0
    20fa:	ef e4       	ldi	r30, 0x4F	; 79
    20fc:	f0 e0       	ldi	r31, 0x00	; 0
    20fe:	80 81       	ld	r24, Z
    2100:	81 60       	ori	r24, 0x01	; 1
    2102:	8c 93       	st	X, r24
    2104:	ac c0       	rjmp	.+344    	; 0x225e <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_PHC_PWM_CUSTOM_TOP){
    2106:	ea 81       	ldd	r30, Y+2	; 0x02
    2108:	fb 81       	ldd	r31, Y+3	; 0x03
    210a:	80 81       	ld	r24, Z
    210c:	8b 30       	cpi	r24, 0x0B	; 11
    210e:	e9 f4       	brne	.+58     	; 0x214a <TIMER1_u8Init+0x308>
			SET_BIT(TCCR1B,TCCR1B_WGM13);
    2110:	ae e4       	ldi	r26, 0x4E	; 78
    2112:	b0 e0       	ldi	r27, 0x00	; 0
    2114:	ee e4       	ldi	r30, 0x4E	; 78
    2116:	f0 e0       	ldi	r31, 0x00	; 0
    2118:	80 81       	ld	r24, Z
    211a:	80 61       	ori	r24, 0x10	; 16
    211c:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B,TCCR1B_WGM12);
    211e:	ae e4       	ldi	r26, 0x4E	; 78
    2120:	b0 e0       	ldi	r27, 0x00	; 0
    2122:	ee e4       	ldi	r30, 0x4E	; 78
    2124:	f0 e0       	ldi	r31, 0x00	; 0
    2126:	80 81       	ld	r24, Z
    2128:	87 7f       	andi	r24, 0xF7	; 247
    212a:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM11);
    212c:	af e4       	ldi	r26, 0x4F	; 79
    212e:	b0 e0       	ldi	r27, 0x00	; 0
    2130:	ef e4       	ldi	r30, 0x4F	; 79
    2132:	f0 e0       	ldi	r31, 0x00	; 0
    2134:	80 81       	ld	r24, Z
    2136:	82 60       	ori	r24, 0x02	; 2
    2138:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM10);
    213a:	af e4       	ldi	r26, 0x4F	; 79
    213c:	b0 e0       	ldi	r27, 0x00	; 0
    213e:	ef e4       	ldi	r30, 0x4F	; 79
    2140:	f0 e0       	ldi	r31, 0x00	; 0
    2142:	80 81       	ld	r24, Z
    2144:	8e 7f       	andi	r24, 0xFE	; 254
    2146:	8c 93       	st	X, r24
    2148:	8a c0       	rjmp	.+276    	; 0x225e <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_PHC_PWM){
    214a:	ea 81       	ldd	r30, Y+2	; 0x02
    214c:	fb 81       	ldd	r31, Y+3	; 0x03
    214e:	80 81       	ld	r24, Z
    2150:	8c 30       	cpi	r24, 0x0C	; 12
    2152:	e9 f4       	brne	.+58     	; 0x218e <TIMER1_u8Init+0x34c>
			SET_BIT(TCCR1B,TCCR1B_WGM13);
    2154:	ae e4       	ldi	r26, 0x4E	; 78
    2156:	b0 e0       	ldi	r27, 0x00	; 0
    2158:	ee e4       	ldi	r30, 0x4E	; 78
    215a:	f0 e0       	ldi	r31, 0x00	; 0
    215c:	80 81       	ld	r24, Z
    215e:	80 61       	ori	r24, 0x10	; 16
    2160:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B,TCCR1B_WGM12);
    2162:	ae e4       	ldi	r26, 0x4E	; 78
    2164:	b0 e0       	ldi	r27, 0x00	; 0
    2166:	ee e4       	ldi	r30, 0x4E	; 78
    2168:	f0 e0       	ldi	r31, 0x00	; 0
    216a:	80 81       	ld	r24, Z
    216c:	87 7f       	andi	r24, 0xF7	; 247
    216e:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM11);
    2170:	af e4       	ldi	r26, 0x4F	; 79
    2172:	b0 e0       	ldi	r27, 0x00	; 0
    2174:	ef e4       	ldi	r30, 0x4F	; 79
    2176:	f0 e0       	ldi	r31, 0x00	; 0
    2178:	80 81       	ld	r24, Z
    217a:	82 60       	ori	r24, 0x02	; 2
    217c:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM10);
    217e:	af e4       	ldi	r26, 0x4F	; 79
    2180:	b0 e0       	ldi	r27, 0x00	; 0
    2182:	ef e4       	ldi	r30, 0x4F	; 79
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	80 81       	ld	r24, Z
    2188:	81 60       	ori	r24, 0x01	; 1
    218a:	8c 93       	st	X, r24
    218c:	68 c0       	rjmp	.+208    	; 0x225e <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_CTC_CUSTOM_TOP){
    218e:	ea 81       	ldd	r30, Y+2	; 0x02
    2190:	fb 81       	ldd	r31, Y+3	; 0x03
    2192:	80 81       	ld	r24, Z
    2194:	8d 30       	cpi	r24, 0x0D	; 13
    2196:	e9 f4       	brne	.+58     	; 0x21d2 <TIMER1_u8Init+0x390>
			SET_BIT(TCCR1B,TCCR1B_WGM13);
    2198:	ae e4       	ldi	r26, 0x4E	; 78
    219a:	b0 e0       	ldi	r27, 0x00	; 0
    219c:	ee e4       	ldi	r30, 0x4E	; 78
    219e:	f0 e0       	ldi	r31, 0x00	; 0
    21a0:	80 81       	ld	r24, Z
    21a2:	80 61       	ori	r24, 0x10	; 16
    21a4:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,TCCR1B_WGM12);
    21a6:	ae e4       	ldi	r26, 0x4E	; 78
    21a8:	b0 e0       	ldi	r27, 0x00	; 0
    21aa:	ee e4       	ldi	r30, 0x4E	; 78
    21ac:	f0 e0       	ldi	r31, 0x00	; 0
    21ae:	80 81       	ld	r24, Z
    21b0:	88 60       	ori	r24, 0x08	; 8
    21b2:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM11);
    21b4:	af e4       	ldi	r26, 0x4F	; 79
    21b6:	b0 e0       	ldi	r27, 0x00	; 0
    21b8:	ef e4       	ldi	r30, 0x4F	; 79
    21ba:	f0 e0       	ldi	r31, 0x00	; 0
    21bc:	80 81       	ld	r24, Z
    21be:	8d 7f       	andi	r24, 0xFD	; 253
    21c0:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM10);
    21c2:	af e4       	ldi	r26, 0x4F	; 79
    21c4:	b0 e0       	ldi	r27, 0x00	; 0
    21c6:	ef e4       	ldi	r30, 0x4F	; 79
    21c8:	f0 e0       	ldi	r31, 0x00	; 0
    21ca:	80 81       	ld	r24, Z
    21cc:	8e 7f       	andi	r24, 0xFE	; 254
    21ce:	8c 93       	st	X, r24
    21d0:	46 c0       	rjmp	.+140    	; 0x225e <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_FAST_PWM_CUSTOM_TOP){
    21d2:	ea 81       	ldd	r30, Y+2	; 0x02
    21d4:	fb 81       	ldd	r31, Y+3	; 0x03
    21d6:	80 81       	ld	r24, Z
    21d8:	8e 30       	cpi	r24, 0x0E	; 14
    21da:	e9 f4       	brne	.+58     	; 0x2216 <TIMER1_u8Init+0x3d4>
			SET_BIT(TCCR1B,TCCR1B_WGM13);
    21dc:	ae e4       	ldi	r26, 0x4E	; 78
    21de:	b0 e0       	ldi	r27, 0x00	; 0
    21e0:	ee e4       	ldi	r30, 0x4E	; 78
    21e2:	f0 e0       	ldi	r31, 0x00	; 0
    21e4:	80 81       	ld	r24, Z
    21e6:	80 61       	ori	r24, 0x10	; 16
    21e8:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,TCCR1B_WGM12);
    21ea:	ae e4       	ldi	r26, 0x4E	; 78
    21ec:	b0 e0       	ldi	r27, 0x00	; 0
    21ee:	ee e4       	ldi	r30, 0x4E	; 78
    21f0:	f0 e0       	ldi	r31, 0x00	; 0
    21f2:	80 81       	ld	r24, Z
    21f4:	88 60       	ori	r24, 0x08	; 8
    21f6:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM11);
    21f8:	af e4       	ldi	r26, 0x4F	; 79
    21fa:	b0 e0       	ldi	r27, 0x00	; 0
    21fc:	ef e4       	ldi	r30, 0x4F	; 79
    21fe:	f0 e0       	ldi	r31, 0x00	; 0
    2200:	80 81       	ld	r24, Z
    2202:	82 60       	ori	r24, 0x02	; 2
    2204:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM10);
    2206:	af e4       	ldi	r26, 0x4F	; 79
    2208:	b0 e0       	ldi	r27, 0x00	; 0
    220a:	ef e4       	ldi	r30, 0x4F	; 79
    220c:	f0 e0       	ldi	r31, 0x00	; 0
    220e:	80 81       	ld	r24, Z
    2210:	8e 7f       	andi	r24, 0xFE	; 254
    2212:	8c 93       	st	X, r24
    2214:	24 c0       	rjmp	.+72     	; 0x225e <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_FAST_PWM){
    2216:	ea 81       	ldd	r30, Y+2	; 0x02
    2218:	fb 81       	ldd	r31, Y+3	; 0x03
    221a:	80 81       	ld	r24, Z
    221c:	8f 30       	cpi	r24, 0x0F	; 15
    221e:	e9 f4       	brne	.+58     	; 0x225a <TIMER1_u8Init+0x418>
			SET_BIT(TCCR1B,TCCR1B_WGM13);
    2220:	ae e4       	ldi	r26, 0x4E	; 78
    2222:	b0 e0       	ldi	r27, 0x00	; 0
    2224:	ee e4       	ldi	r30, 0x4E	; 78
    2226:	f0 e0       	ldi	r31, 0x00	; 0
    2228:	80 81       	ld	r24, Z
    222a:	80 61       	ori	r24, 0x10	; 16
    222c:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,TCCR1B_WGM12);
    222e:	ae e4       	ldi	r26, 0x4E	; 78
    2230:	b0 e0       	ldi	r27, 0x00	; 0
    2232:	ee e4       	ldi	r30, 0x4E	; 78
    2234:	f0 e0       	ldi	r31, 0x00	; 0
    2236:	80 81       	ld	r24, Z
    2238:	88 60       	ori	r24, 0x08	; 8
    223a:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM11);
    223c:	af e4       	ldi	r26, 0x4F	; 79
    223e:	b0 e0       	ldi	r27, 0x00	; 0
    2240:	ef e4       	ldi	r30, 0x4F	; 79
    2242:	f0 e0       	ldi	r31, 0x00	; 0
    2244:	80 81       	ld	r24, Z
    2246:	82 60       	ori	r24, 0x02	; 2
    2248:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM10);
    224a:	af e4       	ldi	r26, 0x4F	; 79
    224c:	b0 e0       	ldi	r27, 0x00	; 0
    224e:	ef e4       	ldi	r30, 0x4F	; 79
    2250:	f0 e0       	ldi	r31, 0x00	; 0
    2252:	80 81       	ld	r24, Z
    2254:	81 60       	ori	r24, 0x01	; 1
    2256:	8c 93       	st	X, r24
    2258:	02 c0       	rjmp	.+4      	; 0x225e <TIMER1_u8Init+0x41c>
		}
		else{
			Local_u8ErrorState=NOK;
    225a:	81 e0       	ldi	r24, 0x01	; 1
    225c:	89 83       	std	Y+1, r24	; 0x01
		}
		//Set Match Compare Output Mode for both channel A and B
		TCCR1A&=T1_COMP_MATCH_OUT_MASK;
    225e:	af e4       	ldi	r26, 0x4F	; 79
    2260:	b0 e0       	ldi	r27, 0x00	; 0
    2262:	ef e4       	ldi	r30, 0x4F	; 79
    2264:	f0 e0       	ldi	r31, 0x00	; 0
    2266:	80 81       	ld	r24, Z
    2268:	8f 70       	andi	r24, 0x0F	; 15
    226a:	8c 93       	st	X, r24
		TCCR1A|=((Copy_psTimer->CompareMatchOutputMode_B)<<4);
    226c:	af e4       	ldi	r26, 0x4F	; 79
    226e:	b0 e0       	ldi	r27, 0x00	; 0
    2270:	ef e4       	ldi	r30, 0x4F	; 79
    2272:	f0 e0       	ldi	r31, 0x00	; 0
    2274:	80 81       	ld	r24, Z
    2276:	28 2f       	mov	r18, r24
    2278:	ea 81       	ldd	r30, Y+2	; 0x02
    227a:	fb 81       	ldd	r31, Y+3	; 0x03
    227c:	83 81       	ldd	r24, Z+3	; 0x03
    227e:	88 2f       	mov	r24, r24
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	82 95       	swap	r24
    2284:	92 95       	swap	r25
    2286:	90 7f       	andi	r25, 0xF0	; 240
    2288:	98 27       	eor	r25, r24
    228a:	80 7f       	andi	r24, 0xF0	; 240
    228c:	98 27       	eor	r25, r24
    228e:	82 2b       	or	r24, r18
    2290:	8c 93       	st	X, r24
		TCCR1A|=((Copy_psTimer->CompareMatchOutputMode_A)<<6);
    2292:	af e4       	ldi	r26, 0x4F	; 79
    2294:	b0 e0       	ldi	r27, 0x00	; 0
    2296:	ef e4       	ldi	r30, 0x4F	; 79
    2298:	f0 e0       	ldi	r31, 0x00	; 0
    229a:	80 81       	ld	r24, Z
    229c:	28 2f       	mov	r18, r24
    229e:	ea 81       	ldd	r30, Y+2	; 0x02
    22a0:	fb 81       	ldd	r31, Y+3	; 0x03
    22a2:	82 81       	ldd	r24, Z+2	; 0x02
    22a4:	88 2f       	mov	r24, r24
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	00 24       	eor	r0, r0
    22aa:	96 95       	lsr	r25
    22ac:	87 95       	ror	r24
    22ae:	07 94       	ror	r0
    22b0:	96 95       	lsr	r25
    22b2:	87 95       	ror	r24
    22b4:	07 94       	ror	r0
    22b6:	98 2f       	mov	r25, r24
    22b8:	80 2d       	mov	r24, r0
    22ba:	82 2b       	or	r24, r18
    22bc:	8c 93       	st	X, r24


		//Initialize Interrupt Enable pins
		if(Copy_psTimer->CompareMatchInterrupt_A==INT_ENABLE){
    22be:	ea 81       	ldd	r30, Y+2	; 0x02
    22c0:	fb 81       	ldd	r31, Y+3	; 0x03
    22c2:	84 81       	ldd	r24, Z+4	; 0x04
    22c4:	81 30       	cpi	r24, 0x01	; 1
    22c6:	41 f4       	brne	.+16     	; 0x22d8 <TIMER1_u8Init+0x496>
			SET_BIT(TIMSK,TIMSK_OCIE1A);
    22c8:	a9 e5       	ldi	r26, 0x59	; 89
    22ca:	b0 e0       	ldi	r27, 0x00	; 0
    22cc:	e9 e5       	ldi	r30, 0x59	; 89
    22ce:	f0 e0       	ldi	r31, 0x00	; 0
    22d0:	80 81       	ld	r24, Z
    22d2:	80 61       	ori	r24, 0x10	; 16
    22d4:	8c 93       	st	X, r24
    22d6:	0f c0       	rjmp	.+30     	; 0x22f6 <TIMER1_u8Init+0x4b4>
		}
		else if(Copy_psTimer->CompareMatchInterrupt_A==INT_DISABLE){
    22d8:	ea 81       	ldd	r30, Y+2	; 0x02
    22da:	fb 81       	ldd	r31, Y+3	; 0x03
    22dc:	84 81       	ldd	r24, Z+4	; 0x04
    22de:	82 30       	cpi	r24, 0x02	; 2
    22e0:	41 f4       	brne	.+16     	; 0x22f2 <TIMER1_u8Init+0x4b0>
			CLR_BIT(TIMSK,TIMSK_OCIE1A);
    22e2:	a9 e5       	ldi	r26, 0x59	; 89
    22e4:	b0 e0       	ldi	r27, 0x00	; 0
    22e6:	e9 e5       	ldi	r30, 0x59	; 89
    22e8:	f0 e0       	ldi	r31, 0x00	; 0
    22ea:	80 81       	ld	r24, Z
    22ec:	8f 7e       	andi	r24, 0xEF	; 239
    22ee:	8c 93       	st	X, r24
    22f0:	02 c0       	rjmp	.+4      	; 0x22f6 <TIMER1_u8Init+0x4b4>
		}
		else{
			Local_u8ErrorState=NOK;
    22f2:	81 e0       	ldi	r24, 0x01	; 1
    22f4:	89 83       	std	Y+1, r24	; 0x01
		}

		//Compare Match Interrupt
		if(Copy_psTimer->CompareMatchInterrupt_B==INT_ENABLE){
    22f6:	ea 81       	ldd	r30, Y+2	; 0x02
    22f8:	fb 81       	ldd	r31, Y+3	; 0x03
    22fa:	85 81       	ldd	r24, Z+5	; 0x05
    22fc:	81 30       	cpi	r24, 0x01	; 1
    22fe:	41 f4       	brne	.+16     	; 0x2310 <TIMER1_u8Init+0x4ce>
			SET_BIT(TIMSK,TIMSK_OCIE1B);
    2300:	a9 e5       	ldi	r26, 0x59	; 89
    2302:	b0 e0       	ldi	r27, 0x00	; 0
    2304:	e9 e5       	ldi	r30, 0x59	; 89
    2306:	f0 e0       	ldi	r31, 0x00	; 0
    2308:	80 81       	ld	r24, Z
    230a:	88 60       	ori	r24, 0x08	; 8
    230c:	8c 93       	st	X, r24
    230e:	0f c0       	rjmp	.+30     	; 0x232e <TIMER1_u8Init+0x4ec>
		}
		else if(Copy_psTimer->CompareMatchInterrupt_B==INT_DISABLE){
    2310:	ea 81       	ldd	r30, Y+2	; 0x02
    2312:	fb 81       	ldd	r31, Y+3	; 0x03
    2314:	85 81       	ldd	r24, Z+5	; 0x05
    2316:	82 30       	cpi	r24, 0x02	; 2
    2318:	41 f4       	brne	.+16     	; 0x232a <TIMER1_u8Init+0x4e8>
			CLR_BIT(TIMSK,TIMSK_OCIE1B);
    231a:	a9 e5       	ldi	r26, 0x59	; 89
    231c:	b0 e0       	ldi	r27, 0x00	; 0
    231e:	e9 e5       	ldi	r30, 0x59	; 89
    2320:	f0 e0       	ldi	r31, 0x00	; 0
    2322:	80 81       	ld	r24, Z
    2324:	87 7f       	andi	r24, 0xF7	; 247
    2326:	8c 93       	st	X, r24
    2328:	02 c0       	rjmp	.+4      	; 0x232e <TIMER1_u8Init+0x4ec>
		}
		else{
			Local_u8ErrorState=NOK;
    232a:	81 e0       	ldi	r24, 0x01	; 1
    232c:	89 83       	std	Y+1, r24	; 0x01
		}


		//OverFlow Interrupt
		if(Copy_psTimer->OverFlowInterrupt==INT_ENABLE){
    232e:	ea 81       	ldd	r30, Y+2	; 0x02
    2330:	fb 81       	ldd	r31, Y+3	; 0x03
    2332:	86 81       	ldd	r24, Z+6	; 0x06
    2334:	81 30       	cpi	r24, 0x01	; 1
    2336:	41 f4       	brne	.+16     	; 0x2348 <TIMER1_u8Init+0x506>
			SET_BIT(TIMSK,TIMSK_TOIE1);
    2338:	a9 e5       	ldi	r26, 0x59	; 89
    233a:	b0 e0       	ldi	r27, 0x00	; 0
    233c:	e9 e5       	ldi	r30, 0x59	; 89
    233e:	f0 e0       	ldi	r31, 0x00	; 0
    2340:	80 81       	ld	r24, Z
    2342:	84 60       	ori	r24, 0x04	; 4
    2344:	8c 93       	st	X, r24
    2346:	0f c0       	rjmp	.+30     	; 0x2366 <TIMER1_u8Init+0x524>
		}
		else if(Copy_psTimer->OverFlowInterrupt==INT_DISABLE){
    2348:	ea 81       	ldd	r30, Y+2	; 0x02
    234a:	fb 81       	ldd	r31, Y+3	; 0x03
    234c:	86 81       	ldd	r24, Z+6	; 0x06
    234e:	82 30       	cpi	r24, 0x02	; 2
    2350:	41 f4       	brne	.+16     	; 0x2362 <TIMER1_u8Init+0x520>
			CLR_BIT(TIMSK,TIMSK_TOIE1);
    2352:	a9 e5       	ldi	r26, 0x59	; 89
    2354:	b0 e0       	ldi	r27, 0x00	; 0
    2356:	e9 e5       	ldi	r30, 0x59	; 89
    2358:	f0 e0       	ldi	r31, 0x00	; 0
    235a:	80 81       	ld	r24, Z
    235c:	8b 7f       	andi	r24, 0xFB	; 251
    235e:	8c 93       	st	X, r24
    2360:	02 c0       	rjmp	.+4      	; 0x2366 <TIMER1_u8Init+0x524>
		}
		else{
			Local_u8ErrorState=NOK;
    2362:	81 e0       	ldi	r24, 0x01	; 1
    2364:	89 83       	std	Y+1, r24	; 0x01
		}


		//Initialize Prescaler
		TCCR1B&=PRESCALER_MASK;
    2366:	ae e4       	ldi	r26, 0x4E	; 78
    2368:	b0 e0       	ldi	r27, 0x00	; 0
    236a:	ee e4       	ldi	r30, 0x4E	; 78
    236c:	f0 e0       	ldi	r31, 0x00	; 0
    236e:	80 81       	ld	r24, Z
    2370:	88 7f       	andi	r24, 0xF8	; 248
    2372:	8c 93       	st	X, r24
		TCCR1B|=Copy_psTimer->Prescaler;
    2374:	ae e4       	ldi	r26, 0x4E	; 78
    2376:	b0 e0       	ldi	r27, 0x00	; 0
    2378:	ee e4       	ldi	r30, 0x4E	; 78
    237a:	f0 e0       	ldi	r31, 0x00	; 0
    237c:	90 81       	ld	r25, Z
    237e:	ea 81       	ldd	r30, Y+2	; 0x02
    2380:	fb 81       	ldd	r31, Y+3	; 0x03
    2382:	81 81       	ldd	r24, Z+1	; 0x01
    2384:	89 2b       	or	r24, r25
    2386:	8c 93       	st	X, r24
    2388:	02 c0       	rjmp	.+4      	; 0x238e <TIMER1_u8Init+0x54c>
	}
	else{
		Local_u8ErrorState=NULL_POINTER;
    238a:	82 e0       	ldi	r24, 0x02	; 2
    238c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    238e:	89 81       	ldd	r24, Y+1	; 0x01

}
    2390:	0f 90       	pop	r0
    2392:	0f 90       	pop	r0
    2394:	0f 90       	pop	r0
    2396:	cf 91       	pop	r28
    2398:	df 91       	pop	r29
    239a:	08 95       	ret

0000239c <TIMER1_voidSetTopValue>:

void TIMER1_voidSetTopValue(u16 Copy_u16Value){
    239c:	df 93       	push	r29
    239e:	cf 93       	push	r28
    23a0:	00 d0       	rcall	.+0      	; 0x23a2 <TIMER1_voidSetTopValue+0x6>
    23a2:	cd b7       	in	r28, 0x3d	; 61
    23a4:	de b7       	in	r29, 0x3e	; 62
    23a6:	9a 83       	std	Y+2, r25	; 0x02
    23a8:	89 83       	std	Y+1, r24	; 0x01
	ICR1=Copy_u16Value;
    23aa:	e6 e4       	ldi	r30, 0x46	; 70
    23ac:	f0 e0       	ldi	r31, 0x00	; 0
    23ae:	89 81       	ldd	r24, Y+1	; 0x01
    23b0:	9a 81       	ldd	r25, Y+2	; 0x02
    23b2:	91 83       	std	Z+1, r25	; 0x01
    23b4:	80 83       	st	Z, r24
}
    23b6:	0f 90       	pop	r0
    23b8:	0f 90       	pop	r0
    23ba:	cf 91       	pop	r28
    23bc:	df 91       	pop	r29
    23be:	08 95       	ret

000023c0 <TIMER1_u8PWMGenerate>:

u8 TIMER1_u8PWMGenerate(Timer1_t* Copy_psTimer,u16 Copy_u16PeriodTime,u16 Copy_u16OnTime){
    23c0:	df 93       	push	r29
    23c2:	cf 93       	push	r28
    23c4:	cd b7       	in	r28, 0x3d	; 61
    23c6:	de b7       	in	r29, 0x3e	; 62
    23c8:	29 97       	sbiw	r28, 0x09	; 9
    23ca:	0f b6       	in	r0, 0x3f	; 63
    23cc:	f8 94       	cli
    23ce:	de bf       	out	0x3e, r29	; 62
    23d0:	0f be       	out	0x3f, r0	; 63
    23d2:	cd bf       	out	0x3d, r28	; 61
    23d4:	9b 83       	std	Y+3, r25	; 0x03
    23d6:	8a 83       	std	Y+2, r24	; 0x02
    23d8:	7d 83       	std	Y+5, r23	; 0x05
    23da:	6c 83       	std	Y+4, r22	; 0x04
    23dc:	5f 83       	std	Y+7, r21	; 0x07
    23de:	4e 83       	std	Y+6, r20	; 0x06
	u8 Local_u8ErrorState=OK;
    23e0:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_psTimer!=NULL){
    23e2:	8a 81       	ldd	r24, Y+2	; 0x02
    23e4:	9b 81       	ldd	r25, Y+3	; 0x03
    23e6:	00 97       	sbiw	r24, 0x00	; 0
    23e8:	09 f4       	brne	.+2      	; 0x23ec <TIMER1_u8PWMGenerate+0x2c>
    23ea:	9c c0       	rjmp	.+312    	; 0x2524 <TIMER1_u8PWMGenerate+0x164>
		if((Copy_psTimer->WaveGenMode)==TIMER1_FAST_PWM_CUSTOM_TOP){
    23ec:	ea 81       	ldd	r30, Y+2	; 0x02
    23ee:	fb 81       	ldd	r31, Y+3	; 0x03
    23f0:	80 81       	ld	r24, Z
    23f2:	8e 30       	cpi	r24, 0x0E	; 14
    23f4:	09 f0       	breq	.+2      	; 0x23f8 <TIMER1_u8PWMGenerate+0x38>
    23f6:	93 c0       	rjmp	.+294    	; 0x251e <TIMER1_u8PWMGenerate+0x15e>
			switch(Copy_psTimer->Prescaler){
    23f8:	ea 81       	ldd	r30, Y+2	; 0x02
    23fa:	fb 81       	ldd	r31, Y+3	; 0x03
    23fc:	81 81       	ldd	r24, Z+1	; 0x01
    23fe:	28 2f       	mov	r18, r24
    2400:	30 e0       	ldi	r19, 0x00	; 0
    2402:	39 87       	std	Y+9, r19	; 0x09
    2404:	28 87       	std	Y+8, r18	; 0x08
    2406:	88 85       	ldd	r24, Y+8	; 0x08
    2408:	99 85       	ldd	r25, Y+9	; 0x09
    240a:	83 30       	cpi	r24, 0x03	; 3
    240c:	91 05       	cpc	r25, r1
    240e:	79 f1       	breq	.+94     	; 0x246e <TIMER1_u8PWMGenerate+0xae>
    2410:	28 85       	ldd	r18, Y+8	; 0x08
    2412:	39 85       	ldd	r19, Y+9	; 0x09
    2414:	24 30       	cpi	r18, 0x04	; 4
    2416:	31 05       	cpc	r19, r1
    2418:	5c f4       	brge	.+22     	; 0x2430 <TIMER1_u8PWMGenerate+0x70>
    241a:	88 85       	ldd	r24, Y+8	; 0x08
    241c:	99 85       	ldd	r25, Y+9	; 0x09
    241e:	81 30       	cpi	r24, 0x01	; 1
    2420:	91 05       	cpc	r25, r1
    2422:	89 f0       	breq	.+34     	; 0x2446 <TIMER1_u8PWMGenerate+0x86>
    2424:	28 85       	ldd	r18, Y+8	; 0x08
    2426:	39 85       	ldd	r19, Y+9	; 0x09
    2428:	22 30       	cpi	r18, 0x02	; 2
    242a:	31 05       	cpc	r19, r1
    242c:	c9 f0       	breq	.+50     	; 0x2460 <TIMER1_u8PWMGenerate+0xa0>
    242e:	47 c0       	rjmp	.+142    	; 0x24be <TIMER1_u8PWMGenerate+0xfe>
    2430:	88 85       	ldd	r24, Y+8	; 0x08
    2432:	99 85       	ldd	r25, Y+9	; 0x09
    2434:	84 30       	cpi	r24, 0x04	; 4
    2436:	91 05       	cpc	r25, r1
    2438:	39 f1       	breq	.+78     	; 0x2488 <TIMER1_u8PWMGenerate+0xc8>
    243a:	28 85       	ldd	r18, Y+8	; 0x08
    243c:	39 85       	ldd	r19, Y+9	; 0x09
    243e:	25 30       	cpi	r18, 0x05	; 5
    2440:	31 05       	cpc	r19, r1
    2442:	89 f1       	breq	.+98     	; 0x24a6 <TIMER1_u8PWMGenerate+0xe6>
    2444:	3c c0       	rjmp	.+120    	; 0x24be <TIMER1_u8PWMGenerate+0xfe>
			case PRSCLR_DIV_BY_1    : ICR1 = Copy_u16PeriodTime*8   ; break;
    2446:	e6 e4       	ldi	r30, 0x46	; 70
    2448:	f0 e0       	ldi	r31, 0x00	; 0
    244a:	8c 81       	ldd	r24, Y+4	; 0x04
    244c:	9d 81       	ldd	r25, Y+5	; 0x05
    244e:	88 0f       	add	r24, r24
    2450:	99 1f       	adc	r25, r25
    2452:	88 0f       	add	r24, r24
    2454:	99 1f       	adc	r25, r25
    2456:	88 0f       	add	r24, r24
    2458:	99 1f       	adc	r25, r25
    245a:	91 83       	std	Z+1, r25	; 0x01
    245c:	80 83       	st	Z, r24
    245e:	31 c0       	rjmp	.+98     	; 0x24c2 <TIMER1_u8PWMGenerate+0x102>
			case PRSCLR_DIV_BY_8    : ICR1 = Copy_u16PeriodTime     ; break;
    2460:	e6 e4       	ldi	r30, 0x46	; 70
    2462:	f0 e0       	ldi	r31, 0x00	; 0
    2464:	8c 81       	ldd	r24, Y+4	; 0x04
    2466:	9d 81       	ldd	r25, Y+5	; 0x05
    2468:	91 83       	std	Z+1, r25	; 0x01
    246a:	80 83       	st	Z, r24
    246c:	2a c0       	rjmp	.+84     	; 0x24c2 <TIMER1_u8PWMGenerate+0x102>
			case PRSCLR_DIV_BY_64   : ICR1 = Copy_u16PeriodTime/8   ; break;
    246e:	e6 e4       	ldi	r30, 0x46	; 70
    2470:	f0 e0       	ldi	r31, 0x00	; 0
    2472:	8c 81       	ldd	r24, Y+4	; 0x04
    2474:	9d 81       	ldd	r25, Y+5	; 0x05
    2476:	96 95       	lsr	r25
    2478:	87 95       	ror	r24
    247a:	96 95       	lsr	r25
    247c:	87 95       	ror	r24
    247e:	96 95       	lsr	r25
    2480:	87 95       	ror	r24
    2482:	91 83       	std	Z+1, r25	; 0x01
    2484:	80 83       	st	Z, r24
    2486:	1d c0       	rjmp	.+58     	; 0x24c2 <TIMER1_u8PWMGenerate+0x102>
			case PRSCLR_DIV_BY_256  : ICR1 = Copy_u16PeriodTime/32  ; break;
    2488:	e6 e4       	ldi	r30, 0x46	; 70
    248a:	f0 e0       	ldi	r31, 0x00	; 0
    248c:	8c 81       	ldd	r24, Y+4	; 0x04
    248e:	9d 81       	ldd	r25, Y+5	; 0x05
    2490:	96 95       	lsr	r25
    2492:	87 95       	ror	r24
    2494:	92 95       	swap	r25
    2496:	82 95       	swap	r24
    2498:	8f 70       	andi	r24, 0x0F	; 15
    249a:	89 27       	eor	r24, r25
    249c:	9f 70       	andi	r25, 0x0F	; 15
    249e:	89 27       	eor	r24, r25
    24a0:	91 83       	std	Z+1, r25	; 0x01
    24a2:	80 83       	st	Z, r24
    24a4:	0e c0       	rjmp	.+28     	; 0x24c2 <TIMER1_u8PWMGenerate+0x102>
			case PRSCLR_DIV_BY_1024 : ICR1 = Copy_u16PeriodTime/128 ; break;
    24a6:	e6 e4       	ldi	r30, 0x46	; 70
    24a8:	f0 e0       	ldi	r31, 0x00	; 0
    24aa:	8c 81       	ldd	r24, Y+4	; 0x04
    24ac:	9d 81       	ldd	r25, Y+5	; 0x05
    24ae:	88 0f       	add	r24, r24
    24b0:	89 2f       	mov	r24, r25
    24b2:	88 1f       	adc	r24, r24
    24b4:	99 0b       	sbc	r25, r25
    24b6:	91 95       	neg	r25
    24b8:	91 83       	std	Z+1, r25	; 0x01
    24ba:	80 83       	st	Z, r24
    24bc:	02 c0       	rjmp	.+4      	; 0x24c2 <TIMER1_u8PWMGenerate+0x102>
			default: Local_u8ErrorState=NOK;
    24be:	81 e0       	ldi	r24, 0x01	; 1
    24c0:	89 83       	std	Y+1, r24	; 0x01
			}

			if(Copy_u16OnTime<=Copy_u16PeriodTime){
    24c2:	2e 81       	ldd	r18, Y+6	; 0x06
    24c4:	3f 81       	ldd	r19, Y+7	; 0x07
    24c6:	8c 81       	ldd	r24, Y+4	; 0x04
    24c8:	9d 81       	ldd	r25, Y+5	; 0x05
    24ca:	82 17       	cp	r24, r18
    24cc:	93 07       	cpc	r25, r19
    24ce:	20 f1       	brcs	.+72     	; 0x2518 <TIMER1_u8PWMGenerate+0x158>
				if((Copy_psTimer->CompareMatchOutputMode_A)== OCM_FAST_PWM_NON_INVERTED && (Copy_psTimer->CompareMatchOutputMode_B) == OCM_DISCONNECT ){
    24d0:	ea 81       	ldd	r30, Y+2	; 0x02
    24d2:	fb 81       	ldd	r31, Y+3	; 0x03
    24d4:	82 81       	ldd	r24, Z+2	; 0x02
    24d6:	82 30       	cpi	r24, 0x02	; 2
    24d8:	59 f4       	brne	.+22     	; 0x24f0 <TIMER1_u8PWMGenerate+0x130>
    24da:	ea 81       	ldd	r30, Y+2	; 0x02
    24dc:	fb 81       	ldd	r31, Y+3	; 0x03
    24de:	83 81       	ldd	r24, Z+3	; 0x03
    24e0:	88 23       	and	r24, r24
    24e2:	31 f4       	brne	.+12     	; 0x24f0 <TIMER1_u8PWMGenerate+0x130>
					OCR1A=Copy_u16OnTime;
    24e4:	ea e4       	ldi	r30, 0x4A	; 74
    24e6:	f0 e0       	ldi	r31, 0x00	; 0
    24e8:	8e 81       	ldd	r24, Y+6	; 0x06
    24ea:	9f 81       	ldd	r25, Y+7	; 0x07
    24ec:	91 83       	std	Z+1, r25	; 0x01
    24ee:	80 83       	st	Z, r24
				}
				if( (Copy_psTimer->CompareMatchOutputMode_B) == OCM_FAST_PWM_NON_INVERTED && (Copy_psTimer->CompareMatchOutputMode_A) == OCM_DISCONNECT ){
    24f0:	ea 81       	ldd	r30, Y+2	; 0x02
    24f2:	fb 81       	ldd	r31, Y+3	; 0x03
    24f4:	83 81       	ldd	r24, Z+3	; 0x03
    24f6:	82 30       	cpi	r24, 0x02	; 2
    24f8:	61 f4       	brne	.+24     	; 0x2512 <TIMER1_u8PWMGenerate+0x152>
    24fa:	ea 81       	ldd	r30, Y+2	; 0x02
    24fc:	fb 81       	ldd	r31, Y+3	; 0x03
    24fe:	82 81       	ldd	r24, Z+2	; 0x02
    2500:	88 23       	and	r24, r24
    2502:	39 f4       	brne	.+14     	; 0x2512 <TIMER1_u8PWMGenerate+0x152>
					OCR1B=Copy_u16OnTime;
    2504:	e8 e4       	ldi	r30, 0x48	; 72
    2506:	f0 e0       	ldi	r31, 0x00	; 0
    2508:	8e 81       	ldd	r24, Y+6	; 0x06
    250a:	9f 81       	ldd	r25, Y+7	; 0x07
    250c:	91 83       	std	Z+1, r25	; 0x01
    250e:	80 83       	st	Z, r24
    2510:	0b c0       	rjmp	.+22     	; 0x2528 <TIMER1_u8PWMGenerate+0x168>
				}
				else{
					Local_u8ErrorState=NOK;
    2512:	81 e0       	ldi	r24, 0x01	; 1
    2514:	89 83       	std	Y+1, r24	; 0x01
    2516:	08 c0       	rjmp	.+16     	; 0x2528 <TIMER1_u8PWMGenerate+0x168>
				}
			}
			else{
				Local_u8ErrorState=NOK;
    2518:	81 e0       	ldi	r24, 0x01	; 1
    251a:	89 83       	std	Y+1, r24	; 0x01
    251c:	05 c0       	rjmp	.+10     	; 0x2528 <TIMER1_u8PWMGenerate+0x168>

			}
		}
		else{
			Local_u8ErrorState=NOK;
    251e:	81 e0       	ldi	r24, 0x01	; 1
    2520:	89 83       	std	Y+1, r24	; 0x01
    2522:	02 c0       	rjmp	.+4      	; 0x2528 <TIMER1_u8PWMGenerate+0x168>
		}
	}
	else{
		Local_u8ErrorState=NULL_POINTER;
    2524:	82 e0       	ldi	r24, 0x02	; 2
    2526:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErrorState;
    2528:	89 81       	ldd	r24, Y+1	; 0x01

}
    252a:	29 96       	adiw	r28, 0x09	; 9
    252c:	0f b6       	in	r0, 0x3f	; 63
    252e:	f8 94       	cli
    2530:	de bf       	out	0x3e, r29	; 62
    2532:	0f be       	out	0x3f, r0	; 63
    2534:	cd bf       	out	0x3d, r28	; 61
    2536:	cf 91       	pop	r28
    2538:	df 91       	pop	r29
    253a:	08 95       	ret

0000253c <TIMER2_u8Init>:

/********************************************************TIMER2**********************************************************
 ************************************************************************************************************************/


u8 TIMER2_u8Init(Timer_t* Copy_psTimer){
    253c:	df 93       	push	r29
    253e:	cf 93       	push	r28
    2540:	00 d0       	rcall	.+0      	; 0x2542 <TIMER2_u8Init+0x6>
    2542:	0f 92       	push	r0
    2544:	cd b7       	in	r28, 0x3d	; 61
    2546:	de b7       	in	r29, 0x3e	; 62
    2548:	9b 83       	std	Y+3, r25	; 0x03
    254a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
    254c:	19 82       	std	Y+1, r1	; 0x01
	//Initialize Wave Generation Mode
	if(Copy_psTimer!=NULL){
    254e:	8a 81       	ldd	r24, Y+2	; 0x02
    2550:	9b 81       	ldd	r25, Y+3	; 0x03
    2552:	00 97       	sbiw	r24, 0x00	; 0
    2554:	09 f4       	brne	.+2      	; 0x2558 <TIMER2_u8Init+0x1c>
    2556:	b6 c0       	rjmp	.+364    	; 0x26c4 <TIMER2_u8Init+0x188>
		if(Copy_psTimer->WaveGenMode==TIMER_NORMAL){
    2558:	ea 81       	ldd	r30, Y+2	; 0x02
    255a:	fb 81       	ldd	r31, Y+3	; 0x03
    255c:	80 81       	ld	r24, Z
    255e:	81 30       	cpi	r24, 0x01	; 1
    2560:	79 f4       	brne	.+30     	; 0x2580 <TIMER2_u8Init+0x44>
			CLR_BIT(TCCR2,TCCR2_WGM21);
    2562:	a5 e4       	ldi	r26, 0x45	; 69
    2564:	b0 e0       	ldi	r27, 0x00	; 0
    2566:	e5 e4       	ldi	r30, 0x45	; 69
    2568:	f0 e0       	ldi	r31, 0x00	; 0
    256a:	80 81       	ld	r24, Z
    256c:	87 7f       	andi	r24, 0xF7	; 247
    256e:	8c 93       	st	X, r24
			CLR_BIT(TCCR2,TCCR2_WGM20);
    2570:	a5 e4       	ldi	r26, 0x45	; 69
    2572:	b0 e0       	ldi	r27, 0x00	; 0
    2574:	e5 e4       	ldi	r30, 0x45	; 69
    2576:	f0 e0       	ldi	r31, 0x00	; 0
    2578:	80 81       	ld	r24, Z
    257a:	8f 7b       	andi	r24, 0xBF	; 191
    257c:	8c 93       	st	X, r24
    257e:	3e c0       	rjmp	.+124    	; 0x25fc <TIMER2_u8Init+0xc0>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER_PHC_PWM){
    2580:	ea 81       	ldd	r30, Y+2	; 0x02
    2582:	fb 81       	ldd	r31, Y+3	; 0x03
    2584:	80 81       	ld	r24, Z
    2586:	82 30       	cpi	r24, 0x02	; 2
    2588:	79 f4       	brne	.+30     	; 0x25a8 <TIMER2_u8Init+0x6c>
			CLR_BIT(TCCR2,TCCR2_WGM21);
    258a:	a5 e4       	ldi	r26, 0x45	; 69
    258c:	b0 e0       	ldi	r27, 0x00	; 0
    258e:	e5 e4       	ldi	r30, 0x45	; 69
    2590:	f0 e0       	ldi	r31, 0x00	; 0
    2592:	80 81       	ld	r24, Z
    2594:	87 7f       	andi	r24, 0xF7	; 247
    2596:	8c 93       	st	X, r24
			SET_BIT(TCCR2,TCCR2_WGM20);
    2598:	a5 e4       	ldi	r26, 0x45	; 69
    259a:	b0 e0       	ldi	r27, 0x00	; 0
    259c:	e5 e4       	ldi	r30, 0x45	; 69
    259e:	f0 e0       	ldi	r31, 0x00	; 0
    25a0:	80 81       	ld	r24, Z
    25a2:	80 64       	ori	r24, 0x40	; 64
    25a4:	8c 93       	st	X, r24
    25a6:	2a c0       	rjmp	.+84     	; 0x25fc <TIMER2_u8Init+0xc0>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER_CTC){
    25a8:	ea 81       	ldd	r30, Y+2	; 0x02
    25aa:	fb 81       	ldd	r31, Y+3	; 0x03
    25ac:	80 81       	ld	r24, Z
    25ae:	83 30       	cpi	r24, 0x03	; 3
    25b0:	79 f4       	brne	.+30     	; 0x25d0 <TIMER2_u8Init+0x94>
			SET_BIT(TCCR2,TCCR2_WGM21);
    25b2:	a5 e4       	ldi	r26, 0x45	; 69
    25b4:	b0 e0       	ldi	r27, 0x00	; 0
    25b6:	e5 e4       	ldi	r30, 0x45	; 69
    25b8:	f0 e0       	ldi	r31, 0x00	; 0
    25ba:	80 81       	ld	r24, Z
    25bc:	88 60       	ori	r24, 0x08	; 8
    25be:	8c 93       	st	X, r24
			CLR_BIT(TCCR2,TCCR2_WGM20);
    25c0:	a5 e4       	ldi	r26, 0x45	; 69
    25c2:	b0 e0       	ldi	r27, 0x00	; 0
    25c4:	e5 e4       	ldi	r30, 0x45	; 69
    25c6:	f0 e0       	ldi	r31, 0x00	; 0
    25c8:	80 81       	ld	r24, Z
    25ca:	8f 7b       	andi	r24, 0xBF	; 191
    25cc:	8c 93       	st	X, r24
    25ce:	16 c0       	rjmp	.+44     	; 0x25fc <TIMER2_u8Init+0xc0>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER_FAST_PWM){
    25d0:	ea 81       	ldd	r30, Y+2	; 0x02
    25d2:	fb 81       	ldd	r31, Y+3	; 0x03
    25d4:	80 81       	ld	r24, Z
    25d6:	84 30       	cpi	r24, 0x04	; 4
    25d8:	79 f4       	brne	.+30     	; 0x25f8 <TIMER2_u8Init+0xbc>
			SET_BIT(TCCR2,TCCR2_WGM21);
    25da:	a5 e4       	ldi	r26, 0x45	; 69
    25dc:	b0 e0       	ldi	r27, 0x00	; 0
    25de:	e5 e4       	ldi	r30, 0x45	; 69
    25e0:	f0 e0       	ldi	r31, 0x00	; 0
    25e2:	80 81       	ld	r24, Z
    25e4:	88 60       	ori	r24, 0x08	; 8
    25e6:	8c 93       	st	X, r24
			SET_BIT(TCCR2,TCCR2_WGM20);
    25e8:	a5 e4       	ldi	r26, 0x45	; 69
    25ea:	b0 e0       	ldi	r27, 0x00	; 0
    25ec:	e5 e4       	ldi	r30, 0x45	; 69
    25ee:	f0 e0       	ldi	r31, 0x00	; 0
    25f0:	80 81       	ld	r24, Z
    25f2:	80 64       	ori	r24, 0x40	; 64
    25f4:	8c 93       	st	X, r24
    25f6:	02 c0       	rjmp	.+4      	; 0x25fc <TIMER2_u8Init+0xc0>
		}
		else{
			Local_u8ErrorState=NOK;
    25f8:	81 e0       	ldi	r24, 0x01	; 1
    25fa:	89 83       	std	Y+1, r24	; 0x01
		}
		//Initialize Compare Match Output Mode
		TCCR2&=COMP_MATCH_OUT_MASK;
    25fc:	a5 e4       	ldi	r26, 0x45	; 69
    25fe:	b0 e0       	ldi	r27, 0x00	; 0
    2600:	e5 e4       	ldi	r30, 0x45	; 69
    2602:	f0 e0       	ldi	r31, 0x00	; 0
    2604:	80 81       	ld	r24, Z
    2606:	8f 7c       	andi	r24, 0xCF	; 207
    2608:	8c 93       	st	X, r24
		TCCR2|=((Copy_psTimer->CompareMatchOutputMode)<<4);
    260a:	a5 e4       	ldi	r26, 0x45	; 69
    260c:	b0 e0       	ldi	r27, 0x00	; 0
    260e:	e5 e4       	ldi	r30, 0x45	; 69
    2610:	f0 e0       	ldi	r31, 0x00	; 0
    2612:	80 81       	ld	r24, Z
    2614:	28 2f       	mov	r18, r24
    2616:	ea 81       	ldd	r30, Y+2	; 0x02
    2618:	fb 81       	ldd	r31, Y+3	; 0x03
    261a:	82 81       	ldd	r24, Z+2	; 0x02
    261c:	88 2f       	mov	r24, r24
    261e:	90 e0       	ldi	r25, 0x00	; 0
    2620:	82 95       	swap	r24
    2622:	92 95       	swap	r25
    2624:	90 7f       	andi	r25, 0xF0	; 240
    2626:	98 27       	eor	r25, r24
    2628:	80 7f       	andi	r24, 0xF0	; 240
    262a:	98 27       	eor	r25, r24
    262c:	82 2b       	or	r24, r18
    262e:	8c 93       	st	X, r24
		//Initialize Interrupt Enable pins
		if(Copy_psTimer->CompareMatchInterrupt==INT_ENABLE){
    2630:	ea 81       	ldd	r30, Y+2	; 0x02
    2632:	fb 81       	ldd	r31, Y+3	; 0x03
    2634:	83 81       	ldd	r24, Z+3	; 0x03
    2636:	81 30       	cpi	r24, 0x01	; 1
    2638:	41 f4       	brne	.+16     	; 0x264a <TIMER2_u8Init+0x10e>
			SET_BIT(TIMSK,TIMSK_OCIE2);
    263a:	a9 e5       	ldi	r26, 0x59	; 89
    263c:	b0 e0       	ldi	r27, 0x00	; 0
    263e:	e9 e5       	ldi	r30, 0x59	; 89
    2640:	f0 e0       	ldi	r31, 0x00	; 0
    2642:	80 81       	ld	r24, Z
    2644:	80 68       	ori	r24, 0x80	; 128
    2646:	8c 93       	st	X, r24
    2648:	0f c0       	rjmp	.+30     	; 0x2668 <TIMER2_u8Init+0x12c>
		}
		else if(Copy_psTimer->CompareMatchInterrupt==INT_DISABLE){
    264a:	ea 81       	ldd	r30, Y+2	; 0x02
    264c:	fb 81       	ldd	r31, Y+3	; 0x03
    264e:	83 81       	ldd	r24, Z+3	; 0x03
    2650:	82 30       	cpi	r24, 0x02	; 2
    2652:	41 f4       	brne	.+16     	; 0x2664 <TIMER2_u8Init+0x128>
			CLR_BIT(TIMSK,TIMSK_OCIE2);
    2654:	a9 e5       	ldi	r26, 0x59	; 89
    2656:	b0 e0       	ldi	r27, 0x00	; 0
    2658:	e9 e5       	ldi	r30, 0x59	; 89
    265a:	f0 e0       	ldi	r31, 0x00	; 0
    265c:	80 81       	ld	r24, Z
    265e:	8f 77       	andi	r24, 0x7F	; 127
    2660:	8c 93       	st	X, r24
    2662:	02 c0       	rjmp	.+4      	; 0x2668 <TIMER2_u8Init+0x12c>
		}
		else{
			Local_u8ErrorState=NOK;
    2664:	81 e0       	ldi	r24, 0x01	; 1
    2666:	89 83       	std	Y+1, r24	; 0x01
		}

		if(Copy_psTimer->OverFlowInterrupt==INT_ENABLE){
    2668:	ea 81       	ldd	r30, Y+2	; 0x02
    266a:	fb 81       	ldd	r31, Y+3	; 0x03
    266c:	84 81       	ldd	r24, Z+4	; 0x04
    266e:	81 30       	cpi	r24, 0x01	; 1
    2670:	41 f4       	brne	.+16     	; 0x2682 <TIMER2_u8Init+0x146>
			SET_BIT(TIMSK,TIMSK_TOIE2);
    2672:	a9 e5       	ldi	r26, 0x59	; 89
    2674:	b0 e0       	ldi	r27, 0x00	; 0
    2676:	e9 e5       	ldi	r30, 0x59	; 89
    2678:	f0 e0       	ldi	r31, 0x00	; 0
    267a:	80 81       	ld	r24, Z
    267c:	80 64       	ori	r24, 0x40	; 64
    267e:	8c 93       	st	X, r24
    2680:	0f c0       	rjmp	.+30     	; 0x26a0 <TIMER2_u8Init+0x164>
		}
		else if(Copy_psTimer->OverFlowInterrupt==INT_DISABLE){
    2682:	ea 81       	ldd	r30, Y+2	; 0x02
    2684:	fb 81       	ldd	r31, Y+3	; 0x03
    2686:	84 81       	ldd	r24, Z+4	; 0x04
    2688:	82 30       	cpi	r24, 0x02	; 2
    268a:	41 f4       	brne	.+16     	; 0x269c <TIMER2_u8Init+0x160>
			CLR_BIT(TIMSK,TIMSK_TOIE2);
    268c:	a9 e5       	ldi	r26, 0x59	; 89
    268e:	b0 e0       	ldi	r27, 0x00	; 0
    2690:	e9 e5       	ldi	r30, 0x59	; 89
    2692:	f0 e0       	ldi	r31, 0x00	; 0
    2694:	80 81       	ld	r24, Z
    2696:	8f 7b       	andi	r24, 0xBF	; 191
    2698:	8c 93       	st	X, r24
    269a:	02 c0       	rjmp	.+4      	; 0x26a0 <TIMER2_u8Init+0x164>
		}
		else{
			Local_u8ErrorState=NOK;
    269c:	81 e0       	ldi	r24, 0x01	; 1
    269e:	89 83       	std	Y+1, r24	; 0x01
		}

		//Initialize Prescaler
		TCCR2&=PRESCALER_MASK;
    26a0:	a5 e4       	ldi	r26, 0x45	; 69
    26a2:	b0 e0       	ldi	r27, 0x00	; 0
    26a4:	e5 e4       	ldi	r30, 0x45	; 69
    26a6:	f0 e0       	ldi	r31, 0x00	; 0
    26a8:	80 81       	ld	r24, Z
    26aa:	88 7f       	andi	r24, 0xF8	; 248
    26ac:	8c 93       	st	X, r24
		TCCR2|=(Copy_psTimer->Prescaler);
    26ae:	a5 e4       	ldi	r26, 0x45	; 69
    26b0:	b0 e0       	ldi	r27, 0x00	; 0
    26b2:	e5 e4       	ldi	r30, 0x45	; 69
    26b4:	f0 e0       	ldi	r31, 0x00	; 0
    26b6:	90 81       	ld	r25, Z
    26b8:	ea 81       	ldd	r30, Y+2	; 0x02
    26ba:	fb 81       	ldd	r31, Y+3	; 0x03
    26bc:	81 81       	ldd	r24, Z+1	; 0x01
    26be:	89 2b       	or	r24, r25
    26c0:	8c 93       	st	X, r24
    26c2:	02 c0       	rjmp	.+4      	; 0x26c8 <TIMER2_u8Init+0x18c>
	}
	else{
		Local_u8ErrorState=NULL_POINTER;
    26c4:	82 e0       	ldi	r24, 0x02	; 2
    26c6:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    26c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    26ca:	0f 90       	pop	r0
    26cc:	0f 90       	pop	r0
    26ce:	0f 90       	pop	r0
    26d0:	cf 91       	pop	r28
    26d2:	df 91       	pop	r29
    26d4:	08 95       	ret

000026d6 <TIMER2_delay_ms>:

u8 TIMER2_delay_ms(Timer_t* Copy_psTimer,u16 Copy_u16Time){
    26d6:	df 93       	push	r29
    26d8:	cf 93       	push	r28
    26da:	cd b7       	in	r28, 0x3d	; 61
    26dc:	de b7       	in	r29, 0x3e	; 62
    26de:	6a 97       	sbiw	r28, 0x1a	; 26
    26e0:	0f b6       	in	r0, 0x3f	; 63
    26e2:	f8 94       	cli
    26e4:	de bf       	out	0x3e, r29	; 62
    26e6:	0f be       	out	0x3f, r0	; 63
    26e8:	cd bf       	out	0x3d, r28	; 61
    26ea:	9b 8b       	std	Y+19, r25	; 0x13
    26ec:	8a 8b       	std	Y+18, r24	; 0x12
    26ee:	7d 8b       	std	Y+21, r23	; 0x15
    26f0:	6c 8b       	std	Y+20, r22	; 0x14
	u8 Local_u8ErrorState=OK,Local_u8Break=1; u16 Local_u16Counter=0;u32 Local_u32usTime,Local_u32CompMatchCount;
    26f2:	1c 86       	std	Y+12, r1	; 0x0c
    26f4:	81 e0       	ldi	r24, 0x01	; 1
    26f6:	8b 87       	std	Y+11, r24	; 0x0b
    26f8:	1a 86       	std	Y+10, r1	; 0x0a
    26fa:	19 86       	std	Y+9, r1	; 0x09
	if(Copy_psTimer!=NULL){
    26fc:	8a 89       	ldd	r24, Y+18	; 0x12
    26fe:	9b 89       	ldd	r25, Y+19	; 0x13
    2700:	00 97       	sbiw	r24, 0x00	; 0
    2702:	09 f4       	brne	.+2      	; 0x2706 <TIMER2_delay_ms+0x30>
    2704:	82 c0       	rjmp	.+260    	; 0x280a <TIMER2_delay_ms+0x134>
		Timer_t Timer ={TIMER_CTC,PRSCLR_DIV_BY_8,OCM_DISCONNECT,INT_DISABLE,INT_DISABLE};
    2706:	ce 01       	movw	r24, r28
    2708:	0d 96       	adiw	r24, 0x0d	; 13
    270a:	9f 8b       	std	Y+23, r25	; 0x17
    270c:	8e 8b       	std	Y+22, r24	; 0x16
    270e:	ea e6       	ldi	r30, 0x6A	; 106
    2710:	f0 e0       	ldi	r31, 0x00	; 0
    2712:	f9 8f       	std	Y+25, r31	; 0x19
    2714:	e8 8f       	std	Y+24, r30	; 0x18
    2716:	f5 e0       	ldi	r31, 0x05	; 5
    2718:	fa 8f       	std	Y+26, r31	; 0x1a
    271a:	e8 8d       	ldd	r30, Y+24	; 0x18
    271c:	f9 8d       	ldd	r31, Y+25	; 0x19
    271e:	00 80       	ld	r0, Z
    2720:	88 8d       	ldd	r24, Y+24	; 0x18
    2722:	99 8d       	ldd	r25, Y+25	; 0x19
    2724:	01 96       	adiw	r24, 0x01	; 1
    2726:	99 8f       	std	Y+25, r25	; 0x19
    2728:	88 8f       	std	Y+24, r24	; 0x18
    272a:	ee 89       	ldd	r30, Y+22	; 0x16
    272c:	ff 89       	ldd	r31, Y+23	; 0x17
    272e:	00 82       	st	Z, r0
    2730:	8e 89       	ldd	r24, Y+22	; 0x16
    2732:	9f 89       	ldd	r25, Y+23	; 0x17
    2734:	01 96       	adiw	r24, 0x01	; 1
    2736:	9f 8b       	std	Y+23, r25	; 0x17
    2738:	8e 8b       	std	Y+22, r24	; 0x16
    273a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    273c:	91 50       	subi	r25, 0x01	; 1
    273e:	9a 8f       	std	Y+26, r25	; 0x1a
    2740:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2742:	ee 23       	and	r30, r30
    2744:	51 f7       	brne	.-44     	; 0x271a <TIMER2_delay_ms+0x44>
		TIMER_u8SetCompMatch(TIMER2,250);
    2746:	84 e0       	ldi	r24, 0x04	; 4
    2748:	6a ef       	ldi	r22, 0xFA	; 250
    274a:	70 e0       	ldi	r23, 0x00	; 0
    274c:	0e 94 75 0c 	call	0x18ea	; 0x18ea <TIMER_u8SetCompMatch>
		Local_u32usTime=(u32)Copy_u16Time*1000UL;
    2750:	8c 89       	ldd	r24, Y+20	; 0x14
    2752:	9d 89       	ldd	r25, Y+21	; 0x15
    2754:	cc 01       	movw	r24, r24
    2756:	a0 e0       	ldi	r26, 0x00	; 0
    2758:	b0 e0       	ldi	r27, 0x00	; 0
    275a:	28 ee       	ldi	r18, 0xE8	; 232
    275c:	33 e0       	ldi	r19, 0x03	; 3
    275e:	40 e0       	ldi	r20, 0x00	; 0
    2760:	50 e0       	ldi	r21, 0x00	; 0
    2762:	bc 01       	movw	r22, r24
    2764:	cd 01       	movw	r24, r26
    2766:	0e 94 8e 18 	call	0x311c	; 0x311c <__mulsi3>
    276a:	dc 01       	movw	r26, r24
    276c:	cb 01       	movw	r24, r22
    276e:	8d 83       	std	Y+5, r24	; 0x05
    2770:	9e 83       	std	Y+6, r25	; 0x06
    2772:	af 83       	std	Y+7, r26	; 0x07
    2774:	b8 87       	std	Y+8, r27	; 0x08
		Local_u32CompMatchCount=Local_u32usTime/250;
    2776:	8d 81       	ldd	r24, Y+5	; 0x05
    2778:	9e 81       	ldd	r25, Y+6	; 0x06
    277a:	af 81       	ldd	r26, Y+7	; 0x07
    277c:	b8 85       	ldd	r27, Y+8	; 0x08
    277e:	2a ef       	ldi	r18, 0xFA	; 250
    2780:	30 e0       	ldi	r19, 0x00	; 0
    2782:	40 e0       	ldi	r20, 0x00	; 0
    2784:	50 e0       	ldi	r21, 0x00	; 0
    2786:	bc 01       	movw	r22, r24
    2788:	cd 01       	movw	r24, r26
    278a:	0e 94 c1 18 	call	0x3182	; 0x3182 <__udivmodsi4>
    278e:	da 01       	movw	r26, r20
    2790:	c9 01       	movw	r24, r18
    2792:	89 83       	std	Y+1, r24	; 0x01
    2794:	9a 83       	std	Y+2, r25	; 0x02
    2796:	ab 83       	std	Y+3, r26	; 0x03
    2798:	bc 83       	std	Y+4, r27	; 0x04
		TIMER2_u8Init(&Timer);
    279a:	ce 01       	movw	r24, r28
    279c:	0d 96       	adiw	r24, 0x0d	; 13
    279e:	0e 94 9e 12 	call	0x253c	; 0x253c <TIMER2_u8Init>
    27a2:	2b c0       	rjmp	.+86     	; 0x27fa <TIMER2_delay_ms+0x124>
		while(Local_u8Break==1){
			if(GET_BIT(TIFR,TIFR_OCF2)==1){
    27a4:	e8 e5       	ldi	r30, 0x58	; 88
    27a6:	f0 e0       	ldi	r31, 0x00	; 0
    27a8:	80 81       	ld	r24, Z
    27aa:	88 1f       	adc	r24, r24
    27ac:	88 27       	eor	r24, r24
    27ae:	88 1f       	adc	r24, r24
    27b0:	81 30       	cpi	r24, 0x01	; 1
    27b2:	19 f5       	brne	.+70     	; 0x27fa <TIMER2_delay_ms+0x124>
				if(Local_u16Counter==Local_u32CompMatchCount){
    27b4:	89 85       	ldd	r24, Y+9	; 0x09
    27b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    27b8:	9c 01       	movw	r18, r24
    27ba:	40 e0       	ldi	r20, 0x00	; 0
    27bc:	50 e0       	ldi	r21, 0x00	; 0
    27be:	89 81       	ldd	r24, Y+1	; 0x01
    27c0:	9a 81       	ldd	r25, Y+2	; 0x02
    27c2:	ab 81       	ldd	r26, Y+3	; 0x03
    27c4:	bc 81       	ldd	r27, Y+4	; 0x04
    27c6:	28 17       	cp	r18, r24
    27c8:	39 07       	cpc	r19, r25
    27ca:	4a 07       	cpc	r20, r26
    27cc:	5b 07       	cpc	r21, r27
    27ce:	49 f4       	brne	.+18     	; 0x27e2 <TIMER2_delay_ms+0x10c>
					Local_u8Break=0;
    27d0:	1b 86       	std	Y+11, r1	; 0x0b
					SET_BIT(TIFR,TIFR_OCF2);
    27d2:	a8 e5       	ldi	r26, 0x58	; 88
    27d4:	b0 e0       	ldi	r27, 0x00	; 0
    27d6:	e8 e5       	ldi	r30, 0x58	; 88
    27d8:	f0 e0       	ldi	r31, 0x00	; 0
    27da:	80 81       	ld	r24, Z
    27dc:	80 68       	ori	r24, 0x80	; 128
    27de:	8c 93       	st	X, r24
    27e0:	0c c0       	rjmp	.+24     	; 0x27fa <TIMER2_delay_ms+0x124>
				}
				else{
					Local_u16Counter++;
    27e2:	89 85       	ldd	r24, Y+9	; 0x09
    27e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    27e6:	01 96       	adiw	r24, 0x01	; 1
    27e8:	9a 87       	std	Y+10, r25	; 0x0a
    27ea:	89 87       	std	Y+9, r24	; 0x09
					SET_BIT(TIFR,TIFR_OCF2);
    27ec:	a8 e5       	ldi	r26, 0x58	; 88
    27ee:	b0 e0       	ldi	r27, 0x00	; 0
    27f0:	e8 e5       	ldi	r30, 0x58	; 88
    27f2:	f0 e0       	ldi	r31, 0x00	; 0
    27f4:	80 81       	ld	r24, Z
    27f6:	80 68       	ori	r24, 0x80	; 128
    27f8:	8c 93       	st	X, r24
		Timer_t Timer ={TIMER_CTC,PRSCLR_DIV_BY_8,OCM_DISCONNECT,INT_DISABLE,INT_DISABLE};
		TIMER_u8SetCompMatch(TIMER2,250);
		Local_u32usTime=(u32)Copy_u16Time*1000UL;
		Local_u32CompMatchCount=Local_u32usTime/250;
		TIMER2_u8Init(&Timer);
		while(Local_u8Break==1){
    27fa:	8b 85       	ldd	r24, Y+11	; 0x0b
    27fc:	81 30       	cpi	r24, 0x01	; 1
    27fe:	91 f2       	breq	.-92     	; 0x27a4 <TIMER2_delay_ms+0xce>
					Local_u16Counter++;
					SET_BIT(TIFR,TIFR_OCF2);
				}
			}
		}
		TIMER2_u8Init(Copy_psTimer);
    2800:	8a 89       	ldd	r24, Y+18	; 0x12
    2802:	9b 89       	ldd	r25, Y+19	; 0x13
    2804:	0e 94 9e 12 	call	0x253c	; 0x253c <TIMER2_u8Init>
    2808:	02 c0       	rjmp	.+4      	; 0x280e <TIMER2_delay_ms+0x138>

	}
	else{
		Local_u8ErrorState=NULL_POINTER;
    280a:	82 e0       	ldi	r24, 0x02	; 2
    280c:	8c 87       	std	Y+12, r24	; 0x0c
	}
	return Local_u8ErrorState;
    280e:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    2810:	6a 96       	adiw	r28, 0x1a	; 26
    2812:	0f b6       	in	r0, 0x3f	; 63
    2814:	f8 94       	cli
    2816:	de bf       	out	0x3e, r29	; 62
    2818:	0f be       	out	0x3f, r0	; 63
    281a:	cd bf       	out	0x3d, r28	; 61
    281c:	cf 91       	pop	r28
    281e:	df 91       	pop	r29
    2820:	08 95       	ret

00002822 <TIMER2_delay_us>:

u8 TIMER2_delay_us(Timer_t* Copy_psTimer,u16 Copy_u16Time){
    2822:	df 93       	push	r29
    2824:	cf 93       	push	r28
    2826:	cd b7       	in	r28, 0x3d	; 61
    2828:	de b7       	in	r29, 0x3e	; 62
    282a:	6b 97       	sbiw	r28, 0x1b	; 27
    282c:	0f b6       	in	r0, 0x3f	; 63
    282e:	f8 94       	cli
    2830:	de bf       	out	0x3e, r29	; 62
    2832:	0f be       	out	0x3f, r0	; 63
    2834:	cd bf       	out	0x3d, r28	; 61
    2836:	9c 8b       	std	Y+20, r25	; 0x14
    2838:	8b 8b       	std	Y+19, r24	; 0x13
    283a:	7e 8b       	std	Y+22, r23	; 0x16
    283c:	6d 8b       	std	Y+21, r22	; 0x15
	u8 Local_u8ErrorState=OK,Local_u8Break=1,Local_u8CompMatch; u16 Local_u16Counter=0;u32 Local_u32usTime,Local_u32CompMatchCount;
    283e:	1d 86       	std	Y+13, r1	; 0x0d
    2840:	81 e0       	ldi	r24, 0x01	; 1
    2842:	8c 87       	std	Y+12, r24	; 0x0c
    2844:	1a 86       	std	Y+10, r1	; 0x0a
    2846:	19 86       	std	Y+9, r1	; 0x09
	if(Copy_psTimer!=NULL){
    2848:	8b 89       	ldd	r24, Y+19	; 0x13
    284a:	9c 89       	ldd	r25, Y+20	; 0x14
    284c:	00 97       	sbiw	r24, 0x00	; 0
    284e:	09 f4       	brne	.+2      	; 0x2852 <TIMER2_delay_us+0x30>
    2850:	85 c0       	rjmp	.+266    	; 0x295c <TIMER2_delay_us+0x13a>
		Timer_t Timer ={TIMER_CTC,PRSCLR_DIV_BY_8,OCM_DISCONNECT,INT_DISABLE,INT_DISABLE};
    2852:	ce 01       	movw	r24, r28
    2854:	0e 96       	adiw	r24, 0x0e	; 14
    2856:	98 8f       	std	Y+24, r25	; 0x18
    2858:	8f 8b       	std	Y+23, r24	; 0x17
    285a:	ef e6       	ldi	r30, 0x6F	; 111
    285c:	f0 e0       	ldi	r31, 0x00	; 0
    285e:	fa 8f       	std	Y+26, r31	; 0x1a
    2860:	e9 8f       	std	Y+25, r30	; 0x19
    2862:	f5 e0       	ldi	r31, 0x05	; 5
    2864:	fb 8f       	std	Y+27, r31	; 0x1b
    2866:	e9 8d       	ldd	r30, Y+25	; 0x19
    2868:	fa 8d       	ldd	r31, Y+26	; 0x1a
    286a:	00 80       	ld	r0, Z
    286c:	89 8d       	ldd	r24, Y+25	; 0x19
    286e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2870:	01 96       	adiw	r24, 0x01	; 1
    2872:	9a 8f       	std	Y+26, r25	; 0x1a
    2874:	89 8f       	std	Y+25, r24	; 0x19
    2876:	ef 89       	ldd	r30, Y+23	; 0x17
    2878:	f8 8d       	ldd	r31, Y+24	; 0x18
    287a:	00 82       	st	Z, r0
    287c:	8f 89       	ldd	r24, Y+23	; 0x17
    287e:	98 8d       	ldd	r25, Y+24	; 0x18
    2880:	01 96       	adiw	r24, 0x01	; 1
    2882:	98 8f       	std	Y+24, r25	; 0x18
    2884:	8f 8b       	std	Y+23, r24	; 0x17
    2886:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2888:	91 50       	subi	r25, 0x01	; 1
    288a:	9b 8f       	std	Y+27, r25	; 0x1b
    288c:	eb 8d       	ldd	r30, Y+27	; 0x1b
    288e:	ee 23       	and	r30, r30
    2890:	51 f7       	brne	.-44     	; 0x2866 <TIMER2_delay_us+0x44>
		for(Local_u8CompMatch=255;Local_u8CompMatch>0;Local_u8CompMatch--){
    2892:	8f ef       	ldi	r24, 0xFF	; 255
    2894:	8b 87       	std	Y+11, r24	; 0x0b
    2896:	0d c0       	rjmp	.+26     	; 0x28b2 <TIMER2_delay_us+0x90>
			if(Copy_u16Time%Local_u8CompMatch==0){
    2898:	8b 85       	ldd	r24, Y+11	; 0x0b
    289a:	28 2f       	mov	r18, r24
    289c:	30 e0       	ldi	r19, 0x00	; 0
    289e:	8d 89       	ldd	r24, Y+21	; 0x15
    28a0:	9e 89       	ldd	r25, Y+22	; 0x16
    28a2:	b9 01       	movw	r22, r18
    28a4:	0e 94 ad 18 	call	0x315a	; 0x315a <__udivmodhi4>
    28a8:	00 97       	sbiw	r24, 0x00	; 0
    28aa:	31 f0       	breq	.+12     	; 0x28b8 <TIMER2_delay_us+0x96>

u8 TIMER2_delay_us(Timer_t* Copy_psTimer,u16 Copy_u16Time){
	u8 Local_u8ErrorState=OK,Local_u8Break=1,Local_u8CompMatch; u16 Local_u16Counter=0;u32 Local_u32usTime,Local_u32CompMatchCount;
	if(Copy_psTimer!=NULL){
		Timer_t Timer ={TIMER_CTC,PRSCLR_DIV_BY_8,OCM_DISCONNECT,INT_DISABLE,INT_DISABLE};
		for(Local_u8CompMatch=255;Local_u8CompMatch>0;Local_u8CompMatch--){
    28ac:	8b 85       	ldd	r24, Y+11	; 0x0b
    28ae:	81 50       	subi	r24, 0x01	; 1
    28b0:	8b 87       	std	Y+11, r24	; 0x0b
    28b2:	8b 85       	ldd	r24, Y+11	; 0x0b
    28b4:	88 23       	and	r24, r24
    28b6:	81 f7       	brne	.-32     	; 0x2898 <TIMER2_delay_us+0x76>
			if(Copy_u16Time%Local_u8CompMatch==0){
				break;
			}
		}
		TIMER_u8SetCompMatch(TIMER2,Local_u8CompMatch);
    28b8:	8b 85       	ldd	r24, Y+11	; 0x0b
    28ba:	28 2f       	mov	r18, r24
    28bc:	30 e0       	ldi	r19, 0x00	; 0
    28be:	84 e0       	ldi	r24, 0x04	; 4
    28c0:	b9 01       	movw	r22, r18
    28c2:	0e 94 75 0c 	call	0x18ea	; 0x18ea <TIMER_u8SetCompMatch>
		Local_u32CompMatchCount=Local_u32usTime/Local_u8CompMatch;
    28c6:	8b 85       	ldd	r24, Y+11	; 0x0b
    28c8:	28 2f       	mov	r18, r24
    28ca:	30 e0       	ldi	r19, 0x00	; 0
    28cc:	40 e0       	ldi	r20, 0x00	; 0
    28ce:	50 e0       	ldi	r21, 0x00	; 0
    28d0:	8d 81       	ldd	r24, Y+5	; 0x05
    28d2:	9e 81       	ldd	r25, Y+6	; 0x06
    28d4:	af 81       	ldd	r26, Y+7	; 0x07
    28d6:	b8 85       	ldd	r27, Y+8	; 0x08
    28d8:	bc 01       	movw	r22, r24
    28da:	cd 01       	movw	r24, r26
    28dc:	0e 94 c1 18 	call	0x3182	; 0x3182 <__udivmodsi4>
    28e0:	da 01       	movw	r26, r20
    28e2:	c9 01       	movw	r24, r18
    28e4:	89 83       	std	Y+1, r24	; 0x01
    28e6:	9a 83       	std	Y+2, r25	; 0x02
    28e8:	ab 83       	std	Y+3, r26	; 0x03
    28ea:	bc 83       	std	Y+4, r27	; 0x04
		TIMER2_u8Init(&Timer);
    28ec:	ce 01       	movw	r24, r28
    28ee:	0e 96       	adiw	r24, 0x0e	; 14
    28f0:	0e 94 9e 12 	call	0x253c	; 0x253c <TIMER2_u8Init>
    28f4:	2b c0       	rjmp	.+86     	; 0x294c <TIMER2_delay_us+0x12a>
		while(Local_u8Break==1){
			if(GET_BIT(TIFR,TIFR_OCF2)==1){
    28f6:	e8 e5       	ldi	r30, 0x58	; 88
    28f8:	f0 e0       	ldi	r31, 0x00	; 0
    28fa:	80 81       	ld	r24, Z
    28fc:	88 1f       	adc	r24, r24
    28fe:	88 27       	eor	r24, r24
    2900:	88 1f       	adc	r24, r24
    2902:	81 30       	cpi	r24, 0x01	; 1
    2904:	19 f5       	brne	.+70     	; 0x294c <TIMER2_delay_us+0x12a>
				if(Local_u16Counter==Local_u32CompMatchCount){
    2906:	89 85       	ldd	r24, Y+9	; 0x09
    2908:	9a 85       	ldd	r25, Y+10	; 0x0a
    290a:	9c 01       	movw	r18, r24
    290c:	40 e0       	ldi	r20, 0x00	; 0
    290e:	50 e0       	ldi	r21, 0x00	; 0
    2910:	89 81       	ldd	r24, Y+1	; 0x01
    2912:	9a 81       	ldd	r25, Y+2	; 0x02
    2914:	ab 81       	ldd	r26, Y+3	; 0x03
    2916:	bc 81       	ldd	r27, Y+4	; 0x04
    2918:	28 17       	cp	r18, r24
    291a:	39 07       	cpc	r19, r25
    291c:	4a 07       	cpc	r20, r26
    291e:	5b 07       	cpc	r21, r27
    2920:	49 f4       	brne	.+18     	; 0x2934 <TIMER2_delay_us+0x112>
					Local_u8Break=0;
    2922:	1c 86       	std	Y+12, r1	; 0x0c
					SET_BIT(TIFR,TIFR_OCF2);
    2924:	a8 e5       	ldi	r26, 0x58	; 88
    2926:	b0 e0       	ldi	r27, 0x00	; 0
    2928:	e8 e5       	ldi	r30, 0x58	; 88
    292a:	f0 e0       	ldi	r31, 0x00	; 0
    292c:	80 81       	ld	r24, Z
    292e:	80 68       	ori	r24, 0x80	; 128
    2930:	8c 93       	st	X, r24
    2932:	0c c0       	rjmp	.+24     	; 0x294c <TIMER2_delay_us+0x12a>
				}
				else{
					Local_u16Counter++;
    2934:	89 85       	ldd	r24, Y+9	; 0x09
    2936:	9a 85       	ldd	r25, Y+10	; 0x0a
    2938:	01 96       	adiw	r24, 0x01	; 1
    293a:	9a 87       	std	Y+10, r25	; 0x0a
    293c:	89 87       	std	Y+9, r24	; 0x09
					SET_BIT(TIFR,TIFR_OCF2);
    293e:	a8 e5       	ldi	r26, 0x58	; 88
    2940:	b0 e0       	ldi	r27, 0x00	; 0
    2942:	e8 e5       	ldi	r30, 0x58	; 88
    2944:	f0 e0       	ldi	r31, 0x00	; 0
    2946:	80 81       	ld	r24, Z
    2948:	80 68       	ori	r24, 0x80	; 128
    294a:	8c 93       	st	X, r24
			}
		}
		TIMER_u8SetCompMatch(TIMER2,Local_u8CompMatch);
		Local_u32CompMatchCount=Local_u32usTime/Local_u8CompMatch;
		TIMER2_u8Init(&Timer);
		while(Local_u8Break==1){
    294c:	8c 85       	ldd	r24, Y+12	; 0x0c
    294e:	81 30       	cpi	r24, 0x01	; 1
    2950:	91 f2       	breq	.-92     	; 0x28f6 <TIMER2_delay_us+0xd4>
					Local_u16Counter++;
					SET_BIT(TIFR,TIFR_OCF2);
				}
			}
		}
		TIMER2_u8Init(Copy_psTimer);
    2952:	8b 89       	ldd	r24, Y+19	; 0x13
    2954:	9c 89       	ldd	r25, Y+20	; 0x14
    2956:	0e 94 9e 12 	call	0x253c	; 0x253c <TIMER2_u8Init>
    295a:	02 c0       	rjmp	.+4      	; 0x2960 <TIMER2_delay_us+0x13e>

	}
	else{
		Local_u8ErrorState=NULL_POINTER;
    295c:	82 e0       	ldi	r24, 0x02	; 2
    295e:	8d 87       	std	Y+13, r24	; 0x0d
	}
	return Local_u8ErrorState;
    2960:	8d 85       	ldd	r24, Y+13	; 0x0d
}
    2962:	6b 96       	adiw	r28, 0x1b	; 27
    2964:	0f b6       	in	r0, 0x3f	; 63
    2966:	f8 94       	cli
    2968:	de bf       	out	0x3e, r29	; 62
    296a:	0f be       	out	0x3f, r0	; 63
    296c:	cd bf       	out	0x3d, r28	; 61
    296e:	cf 91       	pop	r28
    2970:	df 91       	pop	r29
    2972:	08 95       	ret

00002974 <TIMER2_u8PWMGenerate>:

u8 TIMER2_u8PWMGenerate(Timer_t* Copy_psTimer,u8 Copy_u8DutyCycle){
    2974:	8f 92       	push	r8
    2976:	9f 92       	push	r9
    2978:	af 92       	push	r10
    297a:	bf 92       	push	r11
    297c:	cf 92       	push	r12
    297e:	df 92       	push	r13
    2980:	ef 92       	push	r14
    2982:	ff 92       	push	r15
    2984:	0f 93       	push	r16
    2986:	1f 93       	push	r17
    2988:	df 93       	push	r29
    298a:	cf 93       	push	r28
    298c:	00 d0       	rcall	.+0      	; 0x298e <TIMER2_u8PWMGenerate+0x1a>
    298e:	00 d0       	rcall	.+0      	; 0x2990 <TIMER2_u8PWMGenerate+0x1c>
    2990:	cd b7       	in	r28, 0x3d	; 61
    2992:	de b7       	in	r29, 0x3e	; 62
    2994:	9b 83       	std	Y+3, r25	; 0x03
    2996:	8a 83       	std	Y+2, r24	; 0x02
    2998:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState=OK;
    299a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_psTimer!=NULL){
    299c:	8a 81       	ldd	r24, Y+2	; 0x02
    299e:	9b 81       	ldd	r25, Y+3	; 0x03
    29a0:	00 97       	sbiw	r24, 0x00	; 0
    29a2:	09 f4       	brne	.+2      	; 0x29a6 <TIMER2_u8PWMGenerate+0x32>
    29a4:	44 c0       	rjmp	.+136    	; 0x2a2e <TIMER2_u8PWMGenerate+0xba>
		if((Copy_psTimer->WaveGenMode) == TIMER_FAST_PWM && (Copy_psTimer->CompareMatchOutputMode)== OCM_FAST_PWM_NON_INVERTED ){
    29a6:	ea 81       	ldd	r30, Y+2	; 0x02
    29a8:	fb 81       	ldd	r31, Y+3	; 0x03
    29aa:	80 81       	ld	r24, Z
    29ac:	84 30       	cpi	r24, 0x04	; 4
    29ae:	e1 f5       	brne	.+120    	; 0x2a28 <TIMER2_u8PWMGenerate+0xb4>
    29b0:	ea 81       	ldd	r30, Y+2	; 0x02
    29b2:	fb 81       	ldd	r31, Y+3	; 0x03
    29b4:	82 81       	ldd	r24, Z+2	; 0x02
    29b6:	82 30       	cpi	r24, 0x02	; 2
    29b8:	b9 f5       	brne	.+110    	; 0x2a28 <TIMER2_u8PWMGenerate+0xb4>
			OCR2 = MATH_s32Map(0,100,0,255,Copy_u8DutyCycle);
    29ba:	0f 2e       	mov	r0, r31
    29bc:	f3 e4       	ldi	r31, 0x43	; 67
    29be:	8f 2e       	mov	r8, r31
    29c0:	99 24       	eor	r9, r9
    29c2:	f0 2d       	mov	r31, r0
    29c4:	8c 81       	ldd	r24, Y+4	; 0x04
    29c6:	88 2f       	mov	r24, r24
    29c8:	90 e0       	ldi	r25, 0x00	; 0
    29ca:	a0 e0       	ldi	r26, 0x00	; 0
    29cc:	b0 e0       	ldi	r27, 0x00	; 0
    29ce:	00 d0       	rcall	.+0      	; 0x29d0 <TIMER2_u8PWMGenerate+0x5c>
    29d0:	00 d0       	rcall	.+0      	; 0x29d2 <TIMER2_u8PWMGenerate+0x5e>
    29d2:	ed b7       	in	r30, 0x3d	; 61
    29d4:	fe b7       	in	r31, 0x3e	; 62
    29d6:	31 96       	adiw	r30, 0x01	; 1
    29d8:	80 83       	st	Z, r24
    29da:	91 83       	std	Z+1, r25	; 0x01
    29dc:	a2 83       	std	Z+2, r26	; 0x02
    29de:	b3 83       	std	Z+3, r27	; 0x03
    29e0:	60 e0       	ldi	r22, 0x00	; 0
    29e2:	70 e0       	ldi	r23, 0x00	; 0
    29e4:	80 e0       	ldi	r24, 0x00	; 0
    29e6:	90 e0       	ldi	r25, 0x00	; 0
    29e8:	24 e6       	ldi	r18, 0x64	; 100
    29ea:	30 e0       	ldi	r19, 0x00	; 0
    29ec:	40 e0       	ldi	r20, 0x00	; 0
    29ee:	50 e0       	ldi	r21, 0x00	; 0
    29f0:	ee 24       	eor	r14, r14
    29f2:	ff 24       	eor	r15, r15
    29f4:	87 01       	movw	r16, r14
    29f6:	0f 2e       	mov	r0, r31
    29f8:	ff ef       	ldi	r31, 0xFF	; 255
    29fa:	af 2e       	mov	r10, r31
    29fc:	f0 e0       	ldi	r31, 0x00	; 0
    29fe:	bf 2e       	mov	r11, r31
    2a00:	f0 e0       	ldi	r31, 0x00	; 0
    2a02:	cf 2e       	mov	r12, r31
    2a04:	f0 e0       	ldi	r31, 0x00	; 0
    2a06:	df 2e       	mov	r13, r31
    2a08:	f0 2d       	mov	r31, r0
    2a0a:	0e 94 45 0b 	call	0x168a	; 0x168a <MATH_s32Map>
    2a0e:	0f 90       	pop	r0
    2a10:	0f 90       	pop	r0
    2a12:	0f 90       	pop	r0
    2a14:	0f 90       	pop	r0
    2a16:	dc 01       	movw	r26, r24
    2a18:	cb 01       	movw	r24, r22
    2a1a:	f4 01       	movw	r30, r8
    2a1c:	80 83       	st	Z, r24
			TIMER2_u8Init(Copy_psTimer);
    2a1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a20:	9b 81       	ldd	r25, Y+3	; 0x03
    2a22:	0e 94 9e 12 	call	0x253c	; 0x253c <TIMER2_u8Init>
    2a26:	05 c0       	rjmp	.+10     	; 0x2a32 <TIMER2_u8PWMGenerate+0xbe>
		}
		else{
			Local_u8ErrorState=NOK;
    2a28:	81 e0       	ldi	r24, 0x01	; 1
    2a2a:	89 83       	std	Y+1, r24	; 0x01
    2a2c:	02 c0       	rjmp	.+4      	; 0x2a32 <TIMER2_u8PWMGenerate+0xbe>
		}
	}
	else{
		Local_u8ErrorState=NULL_POINTER;
    2a2e:	82 e0       	ldi	r24, 0x02	; 2
    2a30:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    2a32:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a34:	0f 90       	pop	r0
    2a36:	0f 90       	pop	r0
    2a38:	0f 90       	pop	r0
    2a3a:	0f 90       	pop	r0
    2a3c:	cf 91       	pop	r28
    2a3e:	df 91       	pop	r29
    2a40:	1f 91       	pop	r17
    2a42:	0f 91       	pop	r16
    2a44:	ff 90       	pop	r15
    2a46:	ef 90       	pop	r14
    2a48:	df 90       	pop	r13
    2a4a:	cf 90       	pop	r12
    2a4c:	bf 90       	pop	r11
    2a4e:	af 90       	pop	r10
    2a50:	9f 90       	pop	r9
    2a52:	8f 90       	pop	r8
    2a54:	08 95       	ret

00002a56 <TIMER_u8SetCallBack>:

/********************************************************ISRs************************************************************
 ************************************************************************************************************************/


u8 TIMER_u8SetCallBack(u8 Copy_u8InterruptID,void(*Copy_pvCallBackFunc)(void)){
    2a56:	df 93       	push	r29
    2a58:	cf 93       	push	r28
    2a5a:	00 d0       	rcall	.+0      	; 0x2a5c <TIMER_u8SetCallBack+0x6>
    2a5c:	00 d0       	rcall	.+0      	; 0x2a5e <TIMER_u8SetCallBack+0x8>
    2a5e:	cd b7       	in	r28, 0x3d	; 61
    2a60:	de b7       	in	r29, 0x3e	; 62
    2a62:	8a 83       	std	Y+2, r24	; 0x02
    2a64:	7c 83       	std	Y+4, r23	; 0x04
    2a66:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=OK;
    2a68:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvCallBackFunc!=NULL){
    2a6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a6c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a6e:	00 97       	sbiw	r24, 0x00	; 0
    2a70:	69 f0       	breq	.+26     	; 0x2a8c <TIMER_u8SetCallBack+0x36>
		TIMERS_pvCallBackFunc[Copy_u8InterruptID]=Copy_pvCallBackFunc;
    2a72:	8a 81       	ldd	r24, Y+2	; 0x02
    2a74:	88 2f       	mov	r24, r24
    2a76:	90 e0       	ldi	r25, 0x00	; 0
    2a78:	88 0f       	add	r24, r24
    2a7a:	99 1f       	adc	r25, r25
    2a7c:	fc 01       	movw	r30, r24
    2a7e:	e0 58       	subi	r30, 0x80	; 128
    2a80:	ff 4f       	sbci	r31, 0xFF	; 255
    2a82:	8b 81       	ldd	r24, Y+3	; 0x03
    2a84:	9c 81       	ldd	r25, Y+4	; 0x04
    2a86:	91 83       	std	Z+1, r25	; 0x01
    2a88:	80 83       	st	Z, r24
    2a8a:	02 c0       	rjmp	.+4      	; 0x2a90 <TIMER_u8SetCallBack+0x3a>
	}
	else{
		Local_u8ErrorState=NULL_POINTER;
    2a8c:	82 e0       	ldi	r24, 0x02	; 2
    2a8e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    2a90:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a92:	0f 90       	pop	r0
    2a94:	0f 90       	pop	r0
    2a96:	0f 90       	pop	r0
    2a98:	0f 90       	pop	r0
    2a9a:	cf 91       	pop	r28
    2a9c:	df 91       	pop	r29
    2a9e:	08 95       	ret

00002aa0 <__vector_4>:



//TIMER2 Compare Match ISR
void __vector_4(void)  __attribute__((signal));
void __vector_4(void){
    2aa0:	1f 92       	push	r1
    2aa2:	0f 92       	push	r0
    2aa4:	0f b6       	in	r0, 0x3f	; 63
    2aa6:	0f 92       	push	r0
    2aa8:	11 24       	eor	r1, r1
    2aaa:	2f 93       	push	r18
    2aac:	3f 93       	push	r19
    2aae:	4f 93       	push	r20
    2ab0:	5f 93       	push	r21
    2ab2:	6f 93       	push	r22
    2ab4:	7f 93       	push	r23
    2ab6:	8f 93       	push	r24
    2ab8:	9f 93       	push	r25
    2aba:	af 93       	push	r26
    2abc:	bf 93       	push	r27
    2abe:	ef 93       	push	r30
    2ac0:	ff 93       	push	r31
    2ac2:	df 93       	push	r29
    2ac4:	cf 93       	push	r28
    2ac6:	cd b7       	in	r28, 0x3d	; 61
    2ac8:	de b7       	in	r29, 0x3e	; 62
	if(TIMERS_pvCallBackFunc[INT_TIMER2_COMP]!=NULL){
    2aca:	80 91 80 00 	lds	r24, 0x0080
    2ace:	90 91 81 00 	lds	r25, 0x0081
    2ad2:	00 97       	sbiw	r24, 0x00	; 0
    2ad4:	29 f0       	breq	.+10     	; 0x2ae0 <__vector_4+0x40>
		TIMERS_pvCallBackFunc[INT_TIMER2_COMP]();
    2ad6:	e0 91 80 00 	lds	r30, 0x0080
    2ada:	f0 91 81 00 	lds	r31, 0x0081
    2ade:	09 95       	icall
	}
}
    2ae0:	cf 91       	pop	r28
    2ae2:	df 91       	pop	r29
    2ae4:	ff 91       	pop	r31
    2ae6:	ef 91       	pop	r30
    2ae8:	bf 91       	pop	r27
    2aea:	af 91       	pop	r26
    2aec:	9f 91       	pop	r25
    2aee:	8f 91       	pop	r24
    2af0:	7f 91       	pop	r23
    2af2:	6f 91       	pop	r22
    2af4:	5f 91       	pop	r21
    2af6:	4f 91       	pop	r20
    2af8:	3f 91       	pop	r19
    2afa:	2f 91       	pop	r18
    2afc:	0f 90       	pop	r0
    2afe:	0f be       	out	0x3f, r0	; 63
    2b00:	0f 90       	pop	r0
    2b02:	1f 90       	pop	r1
    2b04:	18 95       	reti

00002b06 <__vector_5>:

//TIMER2 Overflow ISR
void __vector_5(void)  __attribute__((signal));
void __vector_5(void){
    2b06:	1f 92       	push	r1
    2b08:	0f 92       	push	r0
    2b0a:	0f b6       	in	r0, 0x3f	; 63
    2b0c:	0f 92       	push	r0
    2b0e:	11 24       	eor	r1, r1
    2b10:	2f 93       	push	r18
    2b12:	3f 93       	push	r19
    2b14:	4f 93       	push	r20
    2b16:	5f 93       	push	r21
    2b18:	6f 93       	push	r22
    2b1a:	7f 93       	push	r23
    2b1c:	8f 93       	push	r24
    2b1e:	9f 93       	push	r25
    2b20:	af 93       	push	r26
    2b22:	bf 93       	push	r27
    2b24:	ef 93       	push	r30
    2b26:	ff 93       	push	r31
    2b28:	df 93       	push	r29
    2b2a:	cf 93       	push	r28
    2b2c:	cd b7       	in	r28, 0x3d	; 61
    2b2e:	de b7       	in	r29, 0x3e	; 62
	if(TIMERS_pvCallBackFunc[INT_TIMER2_OVF]!=NULL){
    2b30:	80 91 82 00 	lds	r24, 0x0082
    2b34:	90 91 83 00 	lds	r25, 0x0083
    2b38:	00 97       	sbiw	r24, 0x00	; 0
    2b3a:	29 f0       	breq	.+10     	; 0x2b46 <__vector_5+0x40>
		TIMERS_pvCallBackFunc[INT_TIMER2_OVF]();
    2b3c:	e0 91 82 00 	lds	r30, 0x0082
    2b40:	f0 91 83 00 	lds	r31, 0x0083
    2b44:	09 95       	icall
	}
}
    2b46:	cf 91       	pop	r28
    2b48:	df 91       	pop	r29
    2b4a:	ff 91       	pop	r31
    2b4c:	ef 91       	pop	r30
    2b4e:	bf 91       	pop	r27
    2b50:	af 91       	pop	r26
    2b52:	9f 91       	pop	r25
    2b54:	8f 91       	pop	r24
    2b56:	7f 91       	pop	r23
    2b58:	6f 91       	pop	r22
    2b5a:	5f 91       	pop	r21
    2b5c:	4f 91       	pop	r20
    2b5e:	3f 91       	pop	r19
    2b60:	2f 91       	pop	r18
    2b62:	0f 90       	pop	r0
    2b64:	0f be       	out	0x3f, r0	; 63
    2b66:	0f 90       	pop	r0
    2b68:	1f 90       	pop	r1
    2b6a:	18 95       	reti

00002b6c <__vector_6>:

//TIMER1 Capture Event ISR
void __vector_6(void)  __attribute__((signal));
void __vector_6(void){
    2b6c:	1f 92       	push	r1
    2b6e:	0f 92       	push	r0
    2b70:	0f b6       	in	r0, 0x3f	; 63
    2b72:	0f 92       	push	r0
    2b74:	11 24       	eor	r1, r1
    2b76:	2f 93       	push	r18
    2b78:	3f 93       	push	r19
    2b7a:	4f 93       	push	r20
    2b7c:	5f 93       	push	r21
    2b7e:	6f 93       	push	r22
    2b80:	7f 93       	push	r23
    2b82:	8f 93       	push	r24
    2b84:	9f 93       	push	r25
    2b86:	af 93       	push	r26
    2b88:	bf 93       	push	r27
    2b8a:	ef 93       	push	r30
    2b8c:	ff 93       	push	r31
    2b8e:	df 93       	push	r29
    2b90:	cf 93       	push	r28
    2b92:	cd b7       	in	r28, 0x3d	; 61
    2b94:	de b7       	in	r29, 0x3e	; 62
	if(TIMERS_pvCallBackFunc[INT_TIMER1_CAPT]!=NULL){
    2b96:	80 91 88 00 	lds	r24, 0x0088
    2b9a:	90 91 89 00 	lds	r25, 0x0089
    2b9e:	00 97       	sbiw	r24, 0x00	; 0
    2ba0:	29 f0       	breq	.+10     	; 0x2bac <__vector_6+0x40>
		TIMERS_pvCallBackFunc[INT_TIMER1_CAPT]();
    2ba2:	e0 91 88 00 	lds	r30, 0x0088
    2ba6:	f0 91 89 00 	lds	r31, 0x0089
    2baa:	09 95       	icall
	}
}
    2bac:	cf 91       	pop	r28
    2bae:	df 91       	pop	r29
    2bb0:	ff 91       	pop	r31
    2bb2:	ef 91       	pop	r30
    2bb4:	bf 91       	pop	r27
    2bb6:	af 91       	pop	r26
    2bb8:	9f 91       	pop	r25
    2bba:	8f 91       	pop	r24
    2bbc:	7f 91       	pop	r23
    2bbe:	6f 91       	pop	r22
    2bc0:	5f 91       	pop	r21
    2bc2:	4f 91       	pop	r20
    2bc4:	3f 91       	pop	r19
    2bc6:	2f 91       	pop	r18
    2bc8:	0f 90       	pop	r0
    2bca:	0f be       	out	0x3f, r0	; 63
    2bcc:	0f 90       	pop	r0
    2bce:	1f 90       	pop	r1
    2bd0:	18 95       	reti

00002bd2 <__vector_7>:


//TIMER1 Compare Match A ISR
void __vector_7(void)  __attribute__((signal));
void __vector_7(void){
    2bd2:	1f 92       	push	r1
    2bd4:	0f 92       	push	r0
    2bd6:	0f b6       	in	r0, 0x3f	; 63
    2bd8:	0f 92       	push	r0
    2bda:	11 24       	eor	r1, r1
    2bdc:	2f 93       	push	r18
    2bde:	3f 93       	push	r19
    2be0:	4f 93       	push	r20
    2be2:	5f 93       	push	r21
    2be4:	6f 93       	push	r22
    2be6:	7f 93       	push	r23
    2be8:	8f 93       	push	r24
    2bea:	9f 93       	push	r25
    2bec:	af 93       	push	r26
    2bee:	bf 93       	push	r27
    2bf0:	ef 93       	push	r30
    2bf2:	ff 93       	push	r31
    2bf4:	df 93       	push	r29
    2bf6:	cf 93       	push	r28
    2bf8:	cd b7       	in	r28, 0x3d	; 61
    2bfa:	de b7       	in	r29, 0x3e	; 62
	if(TIMERS_pvCallBackFunc[INT_TIMER1A_COMP]!=NULL){
    2bfc:	80 91 86 00 	lds	r24, 0x0086
    2c00:	90 91 87 00 	lds	r25, 0x0087
    2c04:	00 97       	sbiw	r24, 0x00	; 0
    2c06:	29 f0       	breq	.+10     	; 0x2c12 <__vector_7+0x40>
		TIMERS_pvCallBackFunc[INT_TIMER1A_COMP]();
    2c08:	e0 91 86 00 	lds	r30, 0x0086
    2c0c:	f0 91 87 00 	lds	r31, 0x0087
    2c10:	09 95       	icall
	}
}
    2c12:	cf 91       	pop	r28
    2c14:	df 91       	pop	r29
    2c16:	ff 91       	pop	r31
    2c18:	ef 91       	pop	r30
    2c1a:	bf 91       	pop	r27
    2c1c:	af 91       	pop	r26
    2c1e:	9f 91       	pop	r25
    2c20:	8f 91       	pop	r24
    2c22:	7f 91       	pop	r23
    2c24:	6f 91       	pop	r22
    2c26:	5f 91       	pop	r21
    2c28:	4f 91       	pop	r20
    2c2a:	3f 91       	pop	r19
    2c2c:	2f 91       	pop	r18
    2c2e:	0f 90       	pop	r0
    2c30:	0f be       	out	0x3f, r0	; 63
    2c32:	0f 90       	pop	r0
    2c34:	1f 90       	pop	r1
    2c36:	18 95       	reti

00002c38 <__vector_8>:

//TIMER1 Compare Match B ISR
void __vector_8(void)  __attribute__((signal));
void __vector_8(void){
    2c38:	1f 92       	push	r1
    2c3a:	0f 92       	push	r0
    2c3c:	0f b6       	in	r0, 0x3f	; 63
    2c3e:	0f 92       	push	r0
    2c40:	11 24       	eor	r1, r1
    2c42:	2f 93       	push	r18
    2c44:	3f 93       	push	r19
    2c46:	4f 93       	push	r20
    2c48:	5f 93       	push	r21
    2c4a:	6f 93       	push	r22
    2c4c:	7f 93       	push	r23
    2c4e:	8f 93       	push	r24
    2c50:	9f 93       	push	r25
    2c52:	af 93       	push	r26
    2c54:	bf 93       	push	r27
    2c56:	ef 93       	push	r30
    2c58:	ff 93       	push	r31
    2c5a:	df 93       	push	r29
    2c5c:	cf 93       	push	r28
    2c5e:	cd b7       	in	r28, 0x3d	; 61
    2c60:	de b7       	in	r29, 0x3e	; 62
	if(TIMERS_pvCallBackFunc[INT_TIMER1B_COMP]!=NULL){
    2c62:	80 91 84 00 	lds	r24, 0x0084
    2c66:	90 91 85 00 	lds	r25, 0x0085
    2c6a:	00 97       	sbiw	r24, 0x00	; 0
    2c6c:	29 f0       	breq	.+10     	; 0x2c78 <__vector_8+0x40>
		TIMERS_pvCallBackFunc[INT_TIMER1B_COMP]();
    2c6e:	e0 91 84 00 	lds	r30, 0x0084
    2c72:	f0 91 85 00 	lds	r31, 0x0085
    2c76:	09 95       	icall
	}
}
    2c78:	cf 91       	pop	r28
    2c7a:	df 91       	pop	r29
    2c7c:	ff 91       	pop	r31
    2c7e:	ef 91       	pop	r30
    2c80:	bf 91       	pop	r27
    2c82:	af 91       	pop	r26
    2c84:	9f 91       	pop	r25
    2c86:	8f 91       	pop	r24
    2c88:	7f 91       	pop	r23
    2c8a:	6f 91       	pop	r22
    2c8c:	5f 91       	pop	r21
    2c8e:	4f 91       	pop	r20
    2c90:	3f 91       	pop	r19
    2c92:	2f 91       	pop	r18
    2c94:	0f 90       	pop	r0
    2c96:	0f be       	out	0x3f, r0	; 63
    2c98:	0f 90       	pop	r0
    2c9a:	1f 90       	pop	r1
    2c9c:	18 95       	reti

00002c9e <__vector_9>:

//TIMER1 Overflow ISR
void __vector_9(void)  __attribute__((signal));
void __vector_9(void){
    2c9e:	1f 92       	push	r1
    2ca0:	0f 92       	push	r0
    2ca2:	0f b6       	in	r0, 0x3f	; 63
    2ca4:	0f 92       	push	r0
    2ca6:	11 24       	eor	r1, r1
    2ca8:	2f 93       	push	r18
    2caa:	3f 93       	push	r19
    2cac:	4f 93       	push	r20
    2cae:	5f 93       	push	r21
    2cb0:	6f 93       	push	r22
    2cb2:	7f 93       	push	r23
    2cb4:	8f 93       	push	r24
    2cb6:	9f 93       	push	r25
    2cb8:	af 93       	push	r26
    2cba:	bf 93       	push	r27
    2cbc:	ef 93       	push	r30
    2cbe:	ff 93       	push	r31
    2cc0:	df 93       	push	r29
    2cc2:	cf 93       	push	r28
    2cc4:	cd b7       	in	r28, 0x3d	; 61
    2cc6:	de b7       	in	r29, 0x3e	; 62
	if(TIMERS_pvCallBackFunc[INT_TIMER1_OVF]!=NULL){
    2cc8:	80 91 8a 00 	lds	r24, 0x008A
    2ccc:	90 91 8b 00 	lds	r25, 0x008B
    2cd0:	00 97       	sbiw	r24, 0x00	; 0
    2cd2:	29 f0       	breq	.+10     	; 0x2cde <__vector_9+0x40>
		TIMERS_pvCallBackFunc[INT_TIMER1_OVF]();
    2cd4:	e0 91 8a 00 	lds	r30, 0x008A
    2cd8:	f0 91 8b 00 	lds	r31, 0x008B
    2cdc:	09 95       	icall
	}
}
    2cde:	cf 91       	pop	r28
    2ce0:	df 91       	pop	r29
    2ce2:	ff 91       	pop	r31
    2ce4:	ef 91       	pop	r30
    2ce6:	bf 91       	pop	r27
    2ce8:	af 91       	pop	r26
    2cea:	9f 91       	pop	r25
    2cec:	8f 91       	pop	r24
    2cee:	7f 91       	pop	r23
    2cf0:	6f 91       	pop	r22
    2cf2:	5f 91       	pop	r21
    2cf4:	4f 91       	pop	r20
    2cf6:	3f 91       	pop	r19
    2cf8:	2f 91       	pop	r18
    2cfa:	0f 90       	pop	r0
    2cfc:	0f be       	out	0x3f, r0	; 63
    2cfe:	0f 90       	pop	r0
    2d00:	1f 90       	pop	r1
    2d02:	18 95       	reti

00002d04 <__vector_10>:

//TIMER0 Compare Match ISR
void __vector_10(void)  __attribute__((signal));
void __vector_10(void){
    2d04:	1f 92       	push	r1
    2d06:	0f 92       	push	r0
    2d08:	0f b6       	in	r0, 0x3f	; 63
    2d0a:	0f 92       	push	r0
    2d0c:	11 24       	eor	r1, r1
    2d0e:	2f 93       	push	r18
    2d10:	3f 93       	push	r19
    2d12:	4f 93       	push	r20
    2d14:	5f 93       	push	r21
    2d16:	6f 93       	push	r22
    2d18:	7f 93       	push	r23
    2d1a:	8f 93       	push	r24
    2d1c:	9f 93       	push	r25
    2d1e:	af 93       	push	r26
    2d20:	bf 93       	push	r27
    2d22:	ef 93       	push	r30
    2d24:	ff 93       	push	r31
    2d26:	df 93       	push	r29
    2d28:	cf 93       	push	r28
    2d2a:	cd b7       	in	r28, 0x3d	; 61
    2d2c:	de b7       	in	r29, 0x3e	; 62
	if(TIMERS_pvCallBackFunc[INT_TIMER0_COMP]!=NULL){
    2d2e:	80 91 8c 00 	lds	r24, 0x008C
    2d32:	90 91 8d 00 	lds	r25, 0x008D
    2d36:	00 97       	sbiw	r24, 0x00	; 0
    2d38:	29 f0       	breq	.+10     	; 0x2d44 <__vector_10+0x40>
		TIMERS_pvCallBackFunc[INT_TIMER0_COMP]();
    2d3a:	e0 91 8c 00 	lds	r30, 0x008C
    2d3e:	f0 91 8d 00 	lds	r31, 0x008D
    2d42:	09 95       	icall
	}
}
    2d44:	cf 91       	pop	r28
    2d46:	df 91       	pop	r29
    2d48:	ff 91       	pop	r31
    2d4a:	ef 91       	pop	r30
    2d4c:	bf 91       	pop	r27
    2d4e:	af 91       	pop	r26
    2d50:	9f 91       	pop	r25
    2d52:	8f 91       	pop	r24
    2d54:	7f 91       	pop	r23
    2d56:	6f 91       	pop	r22
    2d58:	5f 91       	pop	r21
    2d5a:	4f 91       	pop	r20
    2d5c:	3f 91       	pop	r19
    2d5e:	2f 91       	pop	r18
    2d60:	0f 90       	pop	r0
    2d62:	0f be       	out	0x3f, r0	; 63
    2d64:	0f 90       	pop	r0
    2d66:	1f 90       	pop	r1
    2d68:	18 95       	reti

00002d6a <__vector_11>:

//TIMER0 Overflow ISR
void __vector_11(void)  __attribute__((signal));
void __vector_11(void){
    2d6a:	1f 92       	push	r1
    2d6c:	0f 92       	push	r0
    2d6e:	0f b6       	in	r0, 0x3f	; 63
    2d70:	0f 92       	push	r0
    2d72:	11 24       	eor	r1, r1
    2d74:	2f 93       	push	r18
    2d76:	3f 93       	push	r19
    2d78:	4f 93       	push	r20
    2d7a:	5f 93       	push	r21
    2d7c:	6f 93       	push	r22
    2d7e:	7f 93       	push	r23
    2d80:	8f 93       	push	r24
    2d82:	9f 93       	push	r25
    2d84:	af 93       	push	r26
    2d86:	bf 93       	push	r27
    2d88:	ef 93       	push	r30
    2d8a:	ff 93       	push	r31
    2d8c:	df 93       	push	r29
    2d8e:	cf 93       	push	r28
    2d90:	cd b7       	in	r28, 0x3d	; 61
    2d92:	de b7       	in	r29, 0x3e	; 62
	if(TIMERS_pvCallBackFunc[INT_TIMER0_OVF]!=NULL){
    2d94:	80 91 8e 00 	lds	r24, 0x008E
    2d98:	90 91 8f 00 	lds	r25, 0x008F
    2d9c:	00 97       	sbiw	r24, 0x00	; 0
    2d9e:	29 f0       	breq	.+10     	; 0x2daa <__vector_11+0x40>
		TIMERS_pvCallBackFunc[INT_TIMER0_OVF]();
    2da0:	e0 91 8e 00 	lds	r30, 0x008E
    2da4:	f0 91 8f 00 	lds	r31, 0x008F
    2da8:	09 95       	icall
	}
}
    2daa:	cf 91       	pop	r28
    2dac:	df 91       	pop	r29
    2dae:	ff 91       	pop	r31
    2db0:	ef 91       	pop	r30
    2db2:	bf 91       	pop	r27
    2db4:	af 91       	pop	r26
    2db6:	9f 91       	pop	r25
    2db8:	8f 91       	pop	r24
    2dba:	7f 91       	pop	r23
    2dbc:	6f 91       	pop	r22
    2dbe:	5f 91       	pop	r21
    2dc0:	4f 91       	pop	r20
    2dc2:	3f 91       	pop	r19
    2dc4:	2f 91       	pop	r18
    2dc6:	0f 90       	pop	r0
    2dc8:	0f be       	out	0x3f, r0	; 63
    2dca:	0f 90       	pop	r0
    2dcc:	1f 90       	pop	r1
    2dce:	18 95       	reti

00002dd0 <main>:
static u8  Reading1Flag=0;
static u8  Reading2Flag=0;
static u8  ResetFlag=0;
static u16 OVFTicks=0xffff;

void main(void){
    2dd0:	df 93       	push	r29
    2dd2:	cf 93       	push	r28
    2dd4:	cd b7       	in	r28, 0x3d	; 61
    2dd6:	de b7       	in	r29, 0x3e	; 62
    2dd8:	66 97       	sbiw	r28, 0x16	; 22
    2dda:	0f b6       	in	r0, 0x3f	; 63
    2ddc:	f8 94       	cli
    2dde:	de bf       	out	0x3e, r29	; 62
    2de0:	0f be       	out	0x3f, r0	; 63
    2de2:	cd bf       	out	0x3d, r28	; 61
	Timer1_t Local_Timer1={TIMER1_NORMAL,PRSCLR_DIV_BY_8,OCM_DISCONNECT,OCM_DISCONNECT,INT_DISABLE,INT_DISABLE,INT_ENABLE};
    2de4:	ce 01       	movw	r24, r28
    2de6:	01 96       	adiw	r24, 0x01	; 1
    2de8:	9e 87       	std	Y+14, r25	; 0x0e
    2dea:	8d 87       	std	Y+13, r24	; 0x0d
    2dec:	e9 e7       	ldi	r30, 0x79	; 121
    2dee:	f0 e0       	ldi	r31, 0x00	; 0
    2df0:	f8 8b       	std	Y+16, r31	; 0x10
    2df2:	ef 87       	std	Y+15, r30	; 0x0f
    2df4:	f7 e0       	ldi	r31, 0x07	; 7
    2df6:	f9 8b       	std	Y+17, r31	; 0x11
    2df8:	ef 85       	ldd	r30, Y+15	; 0x0f
    2dfa:	f8 89       	ldd	r31, Y+16	; 0x10
    2dfc:	00 80       	ld	r0, Z
    2dfe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e00:	98 89       	ldd	r25, Y+16	; 0x10
    2e02:	01 96       	adiw	r24, 0x01	; 1
    2e04:	98 8b       	std	Y+16, r25	; 0x10
    2e06:	8f 87       	std	Y+15, r24	; 0x0f
    2e08:	ed 85       	ldd	r30, Y+13	; 0x0d
    2e0a:	fe 85       	ldd	r31, Y+14	; 0x0e
    2e0c:	00 82       	st	Z, r0
    2e0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e10:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e12:	01 96       	adiw	r24, 0x01	; 1
    2e14:	9e 87       	std	Y+14, r25	; 0x0e
    2e16:	8d 87       	std	Y+13, r24	; 0x0d
    2e18:	99 89       	ldd	r25, Y+17	; 0x11
    2e1a:	91 50       	subi	r25, 0x01	; 1
    2e1c:	99 8b       	std	Y+17, r25	; 0x11
    2e1e:	e9 89       	ldd	r30, Y+17	; 0x11
    2e20:	ee 23       	and	r30, r30
    2e22:	51 f7       	brne	.-44     	; 0x2df8 <main+0x28>
	Timer_t Local_Timer2={TIMER_FAST_PWM,PRSCLR_DIV_BY_1024,OCM_FAST_PWM_NON_INVERTED,INT_DISABLE,INT_DISABLE};
    2e24:	ce 01       	movw	r24, r28
    2e26:	08 96       	adiw	r24, 0x08	; 8
    2e28:	9b 8b       	std	Y+19, r25	; 0x13
    2e2a:	8a 8b       	std	Y+18, r24	; 0x12
    2e2c:	e4 e7       	ldi	r30, 0x74	; 116
    2e2e:	f0 e0       	ldi	r31, 0x00	; 0
    2e30:	fd 8b       	std	Y+21, r31	; 0x15
    2e32:	ec 8b       	std	Y+20, r30	; 0x14
    2e34:	f5 e0       	ldi	r31, 0x05	; 5
    2e36:	fe 8b       	std	Y+22, r31	; 0x16
    2e38:	ec 89       	ldd	r30, Y+20	; 0x14
    2e3a:	fd 89       	ldd	r31, Y+21	; 0x15
    2e3c:	00 80       	ld	r0, Z
    2e3e:	8c 89       	ldd	r24, Y+20	; 0x14
    2e40:	9d 89       	ldd	r25, Y+21	; 0x15
    2e42:	01 96       	adiw	r24, 0x01	; 1
    2e44:	9d 8b       	std	Y+21, r25	; 0x15
    2e46:	8c 8b       	std	Y+20, r24	; 0x14
    2e48:	ea 89       	ldd	r30, Y+18	; 0x12
    2e4a:	fb 89       	ldd	r31, Y+19	; 0x13
    2e4c:	00 82       	st	Z, r0
    2e4e:	8a 89       	ldd	r24, Y+18	; 0x12
    2e50:	9b 89       	ldd	r25, Y+19	; 0x13
    2e52:	01 96       	adiw	r24, 0x01	; 1
    2e54:	9b 8b       	std	Y+19, r25	; 0x13
    2e56:	8a 8b       	std	Y+18, r24	; 0x12
    2e58:	9e 89       	ldd	r25, Y+22	; 0x16
    2e5a:	91 50       	subi	r25, 0x01	; 1
    2e5c:	9e 8b       	std	Y+22, r25	; 0x16
    2e5e:	ee 89       	ldd	r30, Y+22	; 0x16
    2e60:	ee 23       	and	r30, r30
    2e62:	51 f7       	brne	.-44     	; 0x2e38 <main+0x68>

	PORT_voidInit();
    2e64:	0e 94 be 0b 	call	0x177c	; 0x177c <PORT_voidInit>

	TIMER_u8SetCallBack(INT_TIMER1_CAPT,&ICU_HW);
    2e68:	26 eb       	ldi	r18, 0xB6	; 182
    2e6a:	37 e1       	ldi	r19, 0x17	; 23
    2e6c:	84 e0       	ldi	r24, 0x04	; 4
    2e6e:	b9 01       	movw	r22, r18
    2e70:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <TIMER_u8SetCallBack>
	TIMER_u8SetCallBack(INT_TIMER2_OVF,&OVF_Count);
    2e74:	2a e8       	ldi	r18, 0x8A	; 138
    2e76:	37 e1       	ldi	r19, 0x17	; 23
    2e78:	81 e0       	ldi	r24, 0x01	; 1
    2e7a:	b9 01       	movw	r22, r18
    2e7c:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <TIMER_u8SetCallBack>
	ICU_u8Init(RISING_EDGE,INT_ENABLE);
    2e80:	81 e0       	ldi	r24, 0x01	; 1
    2e82:	61 e0       	ldi	r22, 0x01	; 1
    2e84:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <ICU_u8Init>

	CLCD_voidInit();
    2e88:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <CLCD_voidInit>

	TIMER1_u8Init(&Local_Timer1);
    2e8c:	ce 01       	movw	r24, r28
    2e8e:	01 96       	adiw	r24, 0x01	; 1
    2e90:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <TIMER1_u8Init>
	TIMER2_u8PWMGenerate(&Local_Timer2,25);
    2e94:	ce 01       	movw	r24, r28
    2e96:	08 96       	adiw	r24, 0x08	; 8
    2e98:	69 e1       	ldi	r22, 0x19	; 25
    2e9a:	0e 94 ba 14 	call	0x2974	; 0x2974 <TIMER2_u8PWMGenerate>

	GIE_voidEnable();
    2e9e:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <GIE_voidEnable>


	while((PeriodTicks==0) && (OnTimeTicks==0));
    2ea2:	80 91 90 00 	lds	r24, 0x0090
    2ea6:	90 91 91 00 	lds	r25, 0x0091
    2eaa:	a0 91 92 00 	lds	r26, 0x0092
    2eae:	b0 91 93 00 	lds	r27, 0x0093
    2eb2:	00 97       	sbiw	r24, 0x00	; 0
    2eb4:	a1 05       	cpc	r26, r1
    2eb6:	b1 05       	cpc	r27, r1
    2eb8:	61 f4       	brne	.+24     	; 0x2ed2 <main+0x102>
    2eba:	80 91 94 00 	lds	r24, 0x0094
    2ebe:	90 91 95 00 	lds	r25, 0x0095
    2ec2:	a0 91 96 00 	lds	r26, 0x0096
    2ec6:	b0 91 97 00 	lds	r27, 0x0097
    2eca:	00 97       	sbiw	r24, 0x00	; 0
    2ecc:	a1 05       	cpc	r26, r1
    2ece:	b1 05       	cpc	r27, r1
    2ed0:	41 f3       	breq	.-48     	; 0x2ea2 <main+0xd2>
	CLCD_voidGoToXY(0,0);
    2ed2:	80 e0       	ldi	r24, 0x00	; 0
    2ed4:	60 e0       	ldi	r22, 0x00	; 0
    2ed6:	0e 94 89 07 	call	0xf12	; 0xf12 <CLCD_voidGoToXY>
//	CLCD_voidSendString("Period Ticks=");
	CLCD_voidSendNumber(PeriodTicks);
    2eda:	80 91 90 00 	lds	r24, 0x0090
    2ede:	90 91 91 00 	lds	r25, 0x0091
    2ee2:	a0 91 92 00 	lds	r26, 0x0092
    2ee6:	b0 91 93 00 	lds	r27, 0x0093
    2eea:	bc 01       	movw	r22, r24
    2eec:	cd 01       	movw	r24, r26
    2eee:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <CLCD_voidSendNumber>
	CLCD_voidGoToXY(1,0);
    2ef2:	81 e0       	ldi	r24, 0x01	; 1
    2ef4:	60 e0       	ldi	r22, 0x00	; 0
    2ef6:	0e 94 89 07 	call	0xf12	; 0xf12 <CLCD_voidGoToXY>
//	CLCD_voidSendString("On Ticks=");
	CLCD_voidSendNumber(OnTimeTicks);
    2efa:	80 91 94 00 	lds	r24, 0x0094
    2efe:	90 91 95 00 	lds	r25, 0x0095
    2f02:	a0 91 96 00 	lds	r26, 0x0096
    2f06:	b0 91 97 00 	lds	r27, 0x0097
    2f0a:	bc 01       	movw	r22, r24
    2f0c:	cd 01       	movw	r24, r26
    2f0e:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <CLCD_voidSendNumber>
    2f12:	ff cf       	rjmp	.-2      	; 0x2f12 <main+0x142>

00002f14 <OVF_Count>:
	while(1){

	}
}

void OVF_Count(void){
    2f14:	df 93       	push	r29
    2f16:	cf 93       	push	r28
    2f18:	cd b7       	in	r28, 0x3d	; 61
    2f1a:	de b7       	in	r29, 0x3e	; 62
	static u8 Local_u8Counter=0;
	if(ResetFlag==1){
    2f1c:	80 91 9c 00 	lds	r24, 0x009C
    2f20:	81 30       	cpi	r24, 0x01	; 1
    2f22:	21 f4       	brne	.+8      	; 0x2f2c <OVF_Count+0x18>
		Local_u8Counter=0;
    2f24:	10 92 9d 00 	sts	0x009D, r1
		ResetFlag=0;
    2f28:	10 92 9c 00 	sts	0x009C, r1
	}
	if(Reading1Flag==1){
    2f2c:	80 91 9a 00 	lds	r24, 0x009A
    2f30:	81 30       	cpi	r24, 0x01	; 1
    2f32:	31 f4       	brne	.+12     	; 0x2f40 <OVF_Count+0x2c>
		Reading1Overflows=Local_u8Counter;
    2f34:	80 91 9d 00 	lds	r24, 0x009D
    2f38:	80 93 98 00 	sts	0x0098, r24
		Reading1Flag=0;
    2f3c:	10 92 9a 00 	sts	0x009A, r1
	}
	if(Reading2Flag==1){
    2f40:	80 91 9b 00 	lds	r24, 0x009B
    2f44:	81 30       	cpi	r24, 0x01	; 1
    2f46:	51 f4       	brne	.+20     	; 0x2f5c <OVF_Count+0x48>
		Reading2Overflows=Local_u8Counter;
    2f48:	80 91 9d 00 	lds	r24, 0x009D
    2f4c:	80 93 99 00 	sts	0x0099, r24
		Reading2Flag=0;
    2f50:	10 92 9b 00 	sts	0x009B, r1
		TIMER_u8SetIntStatus(INT_TIMER2_OVF,INT_DISABLE);
    2f54:	81 e0       	ldi	r24, 0x01	; 1
    2f56:	62 e0       	ldi	r22, 0x02	; 2
    2f58:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <TIMER_u8SetIntStatus>

	}

	Local_u8Counter++;
    2f5c:	80 91 9d 00 	lds	r24, 0x009D
    2f60:	8f 5f       	subi	r24, 0xFF	; 255
    2f62:	80 93 9d 00 	sts	0x009D, r24
}
    2f66:	cf 91       	pop	r28
    2f68:	df 91       	pop	r29
    2f6a:	08 95       	ret

00002f6c <ICU_HW>:


void ICU_HW(void){
    2f6c:	ef 92       	push	r14
    2f6e:	ff 92       	push	r15
    2f70:	0f 93       	push	r16
    2f72:	1f 93       	push	r17
    2f74:	df 93       	push	r29
    2f76:	cf 93       	push	r28
    2f78:	cd b7       	in	r28, 0x3d	; 61
    2f7a:	de b7       	in	r29, 0x3e	; 62
	static u32 Reading1, Reading2;
	static u8 Local_u8Counter=0;

	Local_u8Counter++;
    2f7c:	80 91 9e 00 	lds	r24, 0x009E
    2f80:	8f 5f       	subi	r24, 0xFF	; 255
    2f82:	80 93 9e 00 	sts	0x009E, r24

	if(Local_u8Counter==1){
    2f86:	80 91 9e 00 	lds	r24, 0x009E
    2f8a:	81 30       	cpi	r24, 0x01	; 1
    2f8c:	49 f4       	brne	.+18     	; 0x2fa0 <ICU_HW+0x34>
		TIMER_u8SetTimerVal(TIMER1,0);
    2f8e:	83 e0       	ldi	r24, 0x03	; 3
    2f90:	60 e0       	ldi	r22, 0x00	; 0
    2f92:	70 e0       	ldi	r23, 0x00	; 0
    2f94:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <TIMER_u8SetTimerVal>
		ResetFlag=1;
    2f98:	81 e0       	ldi	r24, 0x01	; 1
    2f9a:	80 93 9c 00 	sts	0x009C, r24
    2f9e:	b7 c0       	rjmp	.+366    	; 0x310e <ICU_HW+0x1a2>
	}
	else if(Local_u8Counter==2){
    2fa0:	80 91 9e 00 	lds	r24, 0x009E
    2fa4:	82 30       	cpi	r24, 0x02	; 2
    2fa6:	a1 f4       	brne	.+40     	; 0x2fd0 <ICU_HW+0x64>
		Reading1=ICU_u16ReadInputCapture();
    2fa8:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <ICU_u16ReadInputCapture>
    2fac:	cc 01       	movw	r24, r24
    2fae:	a0 e0       	ldi	r26, 0x00	; 0
    2fb0:	b0 e0       	ldi	r27, 0x00	; 0
    2fb2:	80 93 a3 00 	sts	0x00A3, r24
    2fb6:	90 93 a4 00 	sts	0x00A4, r25
    2fba:	a0 93 a5 00 	sts	0x00A5, r26
    2fbe:	b0 93 a6 00 	sts	0x00A6, r27
		Reading1Flag=1;
    2fc2:	81 e0       	ldi	r24, 0x01	; 1
    2fc4:	80 93 9a 00 	sts	0x009A, r24
		ICU_u8SetEdge(FALLING_EDGE);
    2fc8:	80 e0       	ldi	r24, 0x00	; 0
    2fca:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <ICU_u8SetEdge>
    2fce:	9f c0       	rjmp	.+318    	; 0x310e <ICU_HW+0x1a2>
	}
	else if(Local_u8Counter==3){
    2fd0:	80 91 9e 00 	lds	r24, 0x009E
    2fd4:	83 30       	cpi	r24, 0x03	; 3
    2fd6:	a1 f4       	brne	.+40     	; 0x3000 <ICU_HW+0x94>
		Reading2=ICU_u16ReadInputCapture();
    2fd8:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <ICU_u16ReadInputCapture>
    2fdc:	cc 01       	movw	r24, r24
    2fde:	a0 e0       	ldi	r26, 0x00	; 0
    2fe0:	b0 e0       	ldi	r27, 0x00	; 0
    2fe2:	80 93 9f 00 	sts	0x009F, r24
    2fe6:	90 93 a0 00 	sts	0x00A0, r25
    2fea:	a0 93 a1 00 	sts	0x00A1, r26
    2fee:	b0 93 a2 00 	sts	0x00A2, r27
		Reading2Flag=1;
    2ff2:	81 e0       	ldi	r24, 0x01	; 1
    2ff4:	80 93 9b 00 	sts	0x009B, r24
		ICU_u8SetEdge(RISING_EDGE);
    2ff8:	81 e0       	ldi	r24, 0x01	; 1
    2ffa:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <ICU_u8SetEdge>
    2ffe:	87 c0       	rjmp	.+270    	; 0x310e <ICU_HW+0x1a2>
	}
	else if(Local_u8Counter==4){
    3000:	80 91 9e 00 	lds	r24, 0x009E
    3004:	84 30       	cpi	r24, 0x04	; 4
    3006:	09 f0       	breq	.+2      	; 0x300a <ICU_HW+0x9e>
    3008:	82 c0       	rjmp	.+260    	; 0x310e <ICU_HW+0x1a2>
		Reading1+=(Reading1Overflows*OVFTicks);
    300a:	80 91 98 00 	lds	r24, 0x0098
    300e:	28 2f       	mov	r18, r24
    3010:	30 e0       	ldi	r19, 0x00	; 0
    3012:	80 91 68 00 	lds	r24, 0x0068
    3016:	90 91 69 00 	lds	r25, 0x0069
    301a:	7c 01       	movw	r14, r24
    301c:	2e 9d       	mul	r18, r14
    301e:	c0 01       	movw	r24, r0
    3020:	2f 9d       	mul	r18, r15
    3022:	90 0d       	add	r25, r0
    3024:	3e 9d       	mul	r19, r14
    3026:	90 0d       	add	r25, r0
    3028:	11 24       	eor	r1, r1
    302a:	9c 01       	movw	r18, r24
    302c:	40 e0       	ldi	r20, 0x00	; 0
    302e:	50 e0       	ldi	r21, 0x00	; 0
    3030:	80 91 a3 00 	lds	r24, 0x00A3
    3034:	90 91 a4 00 	lds	r25, 0x00A4
    3038:	a0 91 a5 00 	lds	r26, 0x00A5
    303c:	b0 91 a6 00 	lds	r27, 0x00A6
    3040:	82 0f       	add	r24, r18
    3042:	93 1f       	adc	r25, r19
    3044:	a4 1f       	adc	r26, r20
    3046:	b5 1f       	adc	r27, r21
    3048:	80 93 a3 00 	sts	0x00A3, r24
    304c:	90 93 a4 00 	sts	0x00A4, r25
    3050:	a0 93 a5 00 	sts	0x00A5, r26
    3054:	b0 93 a6 00 	sts	0x00A6, r27
		Reading2+=(Reading2Overflows*OVFTicks);
    3058:	80 91 99 00 	lds	r24, 0x0099
    305c:	28 2f       	mov	r18, r24
    305e:	30 e0       	ldi	r19, 0x00	; 0
    3060:	80 91 68 00 	lds	r24, 0x0068
    3064:	90 91 69 00 	lds	r25, 0x0069
    3068:	8c 01       	movw	r16, r24
    306a:	20 9f       	mul	r18, r16
    306c:	c0 01       	movw	r24, r0
    306e:	21 9f       	mul	r18, r17
    3070:	90 0d       	add	r25, r0
    3072:	30 9f       	mul	r19, r16
    3074:	90 0d       	add	r25, r0
    3076:	11 24       	eor	r1, r1
    3078:	9c 01       	movw	r18, r24
    307a:	40 e0       	ldi	r20, 0x00	; 0
    307c:	50 e0       	ldi	r21, 0x00	; 0
    307e:	80 91 9f 00 	lds	r24, 0x009F
    3082:	90 91 a0 00 	lds	r25, 0x00A0
    3086:	a0 91 a1 00 	lds	r26, 0x00A1
    308a:	b0 91 a2 00 	lds	r27, 0x00A2
    308e:	82 0f       	add	r24, r18
    3090:	93 1f       	adc	r25, r19
    3092:	a4 1f       	adc	r26, r20
    3094:	b5 1f       	adc	r27, r21
    3096:	80 93 9f 00 	sts	0x009F, r24
    309a:	90 93 a0 00 	sts	0x00A0, r25
    309e:	a0 93 a1 00 	sts	0x00A1, r26
    30a2:	b0 93 a2 00 	sts	0x00A2, r27
		PeriodTicks=Reading1;
    30a6:	80 91 a3 00 	lds	r24, 0x00A3
    30aa:	90 91 a4 00 	lds	r25, 0x00A4
    30ae:	a0 91 a5 00 	lds	r26, 0x00A5
    30b2:	b0 91 a6 00 	lds	r27, 0x00A6
    30b6:	80 93 90 00 	sts	0x0090, r24
    30ba:	90 93 91 00 	sts	0x0091, r25
    30be:	a0 93 92 00 	sts	0x0092, r26
    30c2:	b0 93 93 00 	sts	0x0093, r27
		OnTimeTicks=Reading2-Reading1;
    30c6:	20 91 9f 00 	lds	r18, 0x009F
    30ca:	30 91 a0 00 	lds	r19, 0x00A0
    30ce:	40 91 a1 00 	lds	r20, 0x00A1
    30d2:	50 91 a2 00 	lds	r21, 0x00A2
    30d6:	80 91 a3 00 	lds	r24, 0x00A3
    30da:	90 91 a4 00 	lds	r25, 0x00A4
    30de:	a0 91 a5 00 	lds	r26, 0x00A5
    30e2:	b0 91 a6 00 	lds	r27, 0x00A6
    30e6:	79 01       	movw	r14, r18
    30e8:	8a 01       	movw	r16, r20
    30ea:	e8 1a       	sub	r14, r24
    30ec:	f9 0a       	sbc	r15, r25
    30ee:	0a 0b       	sbc	r16, r26
    30f0:	1b 0b       	sbc	r17, r27
    30f2:	d8 01       	movw	r26, r16
    30f4:	c7 01       	movw	r24, r14
    30f6:	80 93 94 00 	sts	0x0094, r24
    30fa:	90 93 95 00 	sts	0x0095, r25
    30fe:	a0 93 96 00 	sts	0x0096, r26
    3102:	b0 93 97 00 	sts	0x0097, r27
		TIMER_u8SetIntStatus(INT_TIMER1_CAPT,INT_DISABLE);
    3106:	84 e0       	ldi	r24, 0x04	; 4
    3108:	62 e0       	ldi	r22, 0x02	; 2
    310a:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <TIMER_u8SetIntStatus>
	}

}
    310e:	cf 91       	pop	r28
    3110:	df 91       	pop	r29
    3112:	1f 91       	pop	r17
    3114:	0f 91       	pop	r16
    3116:	ff 90       	pop	r15
    3118:	ef 90       	pop	r14
    311a:	08 95       	ret

0000311c <__mulsi3>:
    311c:	62 9f       	mul	r22, r18
    311e:	d0 01       	movw	r26, r0
    3120:	73 9f       	mul	r23, r19
    3122:	f0 01       	movw	r30, r0
    3124:	82 9f       	mul	r24, r18
    3126:	e0 0d       	add	r30, r0
    3128:	f1 1d       	adc	r31, r1
    312a:	64 9f       	mul	r22, r20
    312c:	e0 0d       	add	r30, r0
    312e:	f1 1d       	adc	r31, r1
    3130:	92 9f       	mul	r25, r18
    3132:	f0 0d       	add	r31, r0
    3134:	83 9f       	mul	r24, r19
    3136:	f0 0d       	add	r31, r0
    3138:	74 9f       	mul	r23, r20
    313a:	f0 0d       	add	r31, r0
    313c:	65 9f       	mul	r22, r21
    313e:	f0 0d       	add	r31, r0
    3140:	99 27       	eor	r25, r25
    3142:	72 9f       	mul	r23, r18
    3144:	b0 0d       	add	r27, r0
    3146:	e1 1d       	adc	r30, r1
    3148:	f9 1f       	adc	r31, r25
    314a:	63 9f       	mul	r22, r19
    314c:	b0 0d       	add	r27, r0
    314e:	e1 1d       	adc	r30, r1
    3150:	f9 1f       	adc	r31, r25
    3152:	bd 01       	movw	r22, r26
    3154:	cf 01       	movw	r24, r30
    3156:	11 24       	eor	r1, r1
    3158:	08 95       	ret

0000315a <__udivmodhi4>:
    315a:	aa 1b       	sub	r26, r26
    315c:	bb 1b       	sub	r27, r27
    315e:	51 e1       	ldi	r21, 0x11	; 17
    3160:	07 c0       	rjmp	.+14     	; 0x3170 <__udivmodhi4_ep>

00003162 <__udivmodhi4_loop>:
    3162:	aa 1f       	adc	r26, r26
    3164:	bb 1f       	adc	r27, r27
    3166:	a6 17       	cp	r26, r22
    3168:	b7 07       	cpc	r27, r23
    316a:	10 f0       	brcs	.+4      	; 0x3170 <__udivmodhi4_ep>
    316c:	a6 1b       	sub	r26, r22
    316e:	b7 0b       	sbc	r27, r23

00003170 <__udivmodhi4_ep>:
    3170:	88 1f       	adc	r24, r24
    3172:	99 1f       	adc	r25, r25
    3174:	5a 95       	dec	r21
    3176:	a9 f7       	brne	.-22     	; 0x3162 <__udivmodhi4_loop>
    3178:	80 95       	com	r24
    317a:	90 95       	com	r25
    317c:	bc 01       	movw	r22, r24
    317e:	cd 01       	movw	r24, r26
    3180:	08 95       	ret

00003182 <__udivmodsi4>:
    3182:	a1 e2       	ldi	r26, 0x21	; 33
    3184:	1a 2e       	mov	r1, r26
    3186:	aa 1b       	sub	r26, r26
    3188:	bb 1b       	sub	r27, r27
    318a:	fd 01       	movw	r30, r26
    318c:	0d c0       	rjmp	.+26     	; 0x31a8 <__udivmodsi4_ep>

0000318e <__udivmodsi4_loop>:
    318e:	aa 1f       	adc	r26, r26
    3190:	bb 1f       	adc	r27, r27
    3192:	ee 1f       	adc	r30, r30
    3194:	ff 1f       	adc	r31, r31
    3196:	a2 17       	cp	r26, r18
    3198:	b3 07       	cpc	r27, r19
    319a:	e4 07       	cpc	r30, r20
    319c:	f5 07       	cpc	r31, r21
    319e:	20 f0       	brcs	.+8      	; 0x31a8 <__udivmodsi4_ep>
    31a0:	a2 1b       	sub	r26, r18
    31a2:	b3 0b       	sbc	r27, r19
    31a4:	e4 0b       	sbc	r30, r20
    31a6:	f5 0b       	sbc	r31, r21

000031a8 <__udivmodsi4_ep>:
    31a8:	66 1f       	adc	r22, r22
    31aa:	77 1f       	adc	r23, r23
    31ac:	88 1f       	adc	r24, r24
    31ae:	99 1f       	adc	r25, r25
    31b0:	1a 94       	dec	r1
    31b2:	69 f7       	brne	.-38     	; 0x318e <__udivmodsi4_loop>
    31b4:	60 95       	com	r22
    31b6:	70 95       	com	r23
    31b8:	80 95       	com	r24
    31ba:	90 95       	com	r25
    31bc:	9b 01       	movw	r18, r22
    31be:	ac 01       	movw	r20, r24
    31c0:	bd 01       	movw	r22, r26
    31c2:	cf 01       	movw	r24, r30
    31c4:	08 95       	ret

000031c6 <__divmodsi4>:
    31c6:	97 fb       	bst	r25, 7
    31c8:	09 2e       	mov	r0, r25
    31ca:	05 26       	eor	r0, r21
    31cc:	0e d0       	rcall	.+28     	; 0x31ea <__divmodsi4_neg1>
    31ce:	57 fd       	sbrc	r21, 7
    31d0:	04 d0       	rcall	.+8      	; 0x31da <__divmodsi4_neg2>
    31d2:	d7 df       	rcall	.-82     	; 0x3182 <__udivmodsi4>
    31d4:	0a d0       	rcall	.+20     	; 0x31ea <__divmodsi4_neg1>
    31d6:	00 1c       	adc	r0, r0
    31d8:	38 f4       	brcc	.+14     	; 0x31e8 <__divmodsi4_exit>

000031da <__divmodsi4_neg2>:
    31da:	50 95       	com	r21
    31dc:	40 95       	com	r20
    31de:	30 95       	com	r19
    31e0:	21 95       	neg	r18
    31e2:	3f 4f       	sbci	r19, 0xFF	; 255
    31e4:	4f 4f       	sbci	r20, 0xFF	; 255
    31e6:	5f 4f       	sbci	r21, 0xFF	; 255

000031e8 <__divmodsi4_exit>:
    31e8:	08 95       	ret

000031ea <__divmodsi4_neg1>:
    31ea:	f6 f7       	brtc	.-4      	; 0x31e8 <__divmodsi4_exit>
    31ec:	90 95       	com	r25
    31ee:	80 95       	com	r24
    31f0:	70 95       	com	r23
    31f2:	61 95       	neg	r22
    31f4:	7f 4f       	sbci	r23, 0xFF	; 255
    31f6:	8f 4f       	sbci	r24, 0xFF	; 255
    31f8:	9f 4f       	sbci	r25, 0xFF	; 255
    31fa:	08 95       	ret

000031fc <__prologue_saves__>:
    31fc:	2f 92       	push	r2
    31fe:	3f 92       	push	r3
    3200:	4f 92       	push	r4
    3202:	5f 92       	push	r5
    3204:	6f 92       	push	r6
    3206:	7f 92       	push	r7
    3208:	8f 92       	push	r8
    320a:	9f 92       	push	r9
    320c:	af 92       	push	r10
    320e:	bf 92       	push	r11
    3210:	cf 92       	push	r12
    3212:	df 92       	push	r13
    3214:	ef 92       	push	r14
    3216:	ff 92       	push	r15
    3218:	0f 93       	push	r16
    321a:	1f 93       	push	r17
    321c:	cf 93       	push	r28
    321e:	df 93       	push	r29
    3220:	cd b7       	in	r28, 0x3d	; 61
    3222:	de b7       	in	r29, 0x3e	; 62
    3224:	ca 1b       	sub	r28, r26
    3226:	db 0b       	sbc	r29, r27
    3228:	0f b6       	in	r0, 0x3f	; 63
    322a:	f8 94       	cli
    322c:	de bf       	out	0x3e, r29	; 62
    322e:	0f be       	out	0x3f, r0	; 63
    3230:	cd bf       	out	0x3d, r28	; 61
    3232:	09 94       	ijmp

00003234 <__epilogue_restores__>:
    3234:	2a 88       	ldd	r2, Y+18	; 0x12
    3236:	39 88       	ldd	r3, Y+17	; 0x11
    3238:	48 88       	ldd	r4, Y+16	; 0x10
    323a:	5f 84       	ldd	r5, Y+15	; 0x0f
    323c:	6e 84       	ldd	r6, Y+14	; 0x0e
    323e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3240:	8c 84       	ldd	r8, Y+12	; 0x0c
    3242:	9b 84       	ldd	r9, Y+11	; 0x0b
    3244:	aa 84       	ldd	r10, Y+10	; 0x0a
    3246:	b9 84       	ldd	r11, Y+9	; 0x09
    3248:	c8 84       	ldd	r12, Y+8	; 0x08
    324a:	df 80       	ldd	r13, Y+7	; 0x07
    324c:	ee 80       	ldd	r14, Y+6	; 0x06
    324e:	fd 80       	ldd	r15, Y+5	; 0x05
    3250:	0c 81       	ldd	r16, Y+4	; 0x04
    3252:	1b 81       	ldd	r17, Y+3	; 0x03
    3254:	aa 81       	ldd	r26, Y+2	; 0x02
    3256:	b9 81       	ldd	r27, Y+1	; 0x01
    3258:	ce 0f       	add	r28, r30
    325a:	d1 1d       	adc	r29, r1
    325c:	0f b6       	in	r0, 0x3f	; 63
    325e:	f8 94       	cli
    3260:	de bf       	out	0x3e, r29	; 62
    3262:	0f be       	out	0x3f, r0	; 63
    3264:	cd bf       	out	0x3d, r28	; 61
    3266:	ed 01       	movw	r28, r26
    3268:	08 95       	ret

0000326a <_exit>:
    326a:	f8 94       	cli

0000326c <__stop_program>:
    326c:	ff cf       	rjmp	.-2      	; 0x326c <__stop_program>
