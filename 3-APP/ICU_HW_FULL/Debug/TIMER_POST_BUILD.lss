
TIMER_POST_BUILD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001b02  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00001b02  00001b96  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800072  00800072  00001ba8  2**0
                  ALLOC
  3 .stab         00001e84  00000000  00000000  00001ba8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000bd2  00000000  00000000  00003a2c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 07 0b 	jmp	0x160e	; 0x160e <__vector_4>
      14:	0c 94 3a 0b 	jmp	0x1674	; 0x1674 <__vector_5>
      18:	0c 94 6d 0b 	jmp	0x16da	; 0x16da <__vector_6>
      1c:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__vector_7>
      20:	0c 94 d3 0b 	jmp	0x17a6	; 0x17a6 <__vector_8>
      24:	0c 94 06 0c 	jmp	0x180c	; 0x180c <__vector_9>
      28:	0c 94 39 0c 	jmp	0x1872	; 0x1872 <__vector_10>
      2c:	0c 94 6c 0c 	jmp	0x18d8	; 0x18d8 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e0       	ldi	r30, 0x02	; 2
      68:	fb e1       	ldi	r31, 0x1B	; 27
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e7       	ldi	r26, 0x72	; 114
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 38       	cpi	r26, 0x82	; 130
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9f 0c 	call	0x193e	; 0x193e <main>
      8a:	0c 94 7f 0d 	jmp	0x1afe	; 0x1afe <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_u8SetPinValue>:
#include "DIO_private.h"
#include "DIO_config.h"



u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value){
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
      9a:	28 97       	sbiw	r28, 0x08	; 8
      9c:	0f b6       	in	r0, 0x3f	; 63
      9e:	f8 94       	cli
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	0f be       	out	0x3f, r0	; 63
      a4:	cd bf       	out	0x3d, r28	; 61
      a6:	8a 83       	std	Y+2, r24	; 0x02
      a8:	6b 83       	std	Y+3, r22	; 0x03
      aa:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
      ac:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin <= DIO_u8PIN7){
      ae:	8b 81       	ldd	r24, Y+3	; 0x03
      b0:	88 30       	cpi	r24, 0x08	; 8
      b2:	08 f0       	brcs	.+2      	; 0xb6 <DIO_u8SetPinValue+0x24>
      b4:	f4 c0       	rjmp	.+488    	; 0x29e <DIO_u8SetPinValue+0x20c>
		if(Copy_u8Value == DIO_u8PIN_LOW){
      b6:	8c 81       	ldd	r24, Y+4	; 0x04
      b8:	88 23       	and	r24, r24
      ba:	09 f0       	breq	.+2      	; 0xbe <DIO_u8SetPinValue+0x2c>
      bc:	77 c0       	rjmp	.+238    	; 0x1ac <DIO_u8SetPinValue+0x11a>
			switch(Copy_u8Port){
      be:	8a 81       	ldd	r24, Y+2	; 0x02
      c0:	28 2f       	mov	r18, r24
      c2:	30 e0       	ldi	r19, 0x00	; 0
      c4:	38 87       	std	Y+8, r19	; 0x08
      c6:	2f 83       	std	Y+7, r18	; 0x07
      c8:	8f 81       	ldd	r24, Y+7	; 0x07
      ca:	98 85       	ldd	r25, Y+8	; 0x08
      cc:	81 30       	cpi	r24, 0x01	; 1
      ce:	91 05       	cpc	r25, r1
      d0:	59 f1       	breq	.+86     	; 0x128 <DIO_u8SetPinValue+0x96>
      d2:	2f 81       	ldd	r18, Y+7	; 0x07
      d4:	38 85       	ldd	r19, Y+8	; 0x08
      d6:	22 30       	cpi	r18, 0x02	; 2
      d8:	31 05       	cpc	r19, r1
      da:	2c f4       	brge	.+10     	; 0xe6 <DIO_u8SetPinValue+0x54>
      dc:	8f 81       	ldd	r24, Y+7	; 0x07
      de:	98 85       	ldd	r25, Y+8	; 0x08
      e0:	00 97       	sbiw	r24, 0x00	; 0
      e2:	69 f0       	breq	.+26     	; 0xfe <DIO_u8SetPinValue+0x6c>
      e4:	60 c0       	rjmp	.+192    	; 0x1a6 <DIO_u8SetPinValue+0x114>
      e6:	2f 81       	ldd	r18, Y+7	; 0x07
      e8:	38 85       	ldd	r19, Y+8	; 0x08
      ea:	22 30       	cpi	r18, 0x02	; 2
      ec:	31 05       	cpc	r19, r1
      ee:	89 f1       	breq	.+98     	; 0x152 <DIO_u8SetPinValue+0xc0>
      f0:	8f 81       	ldd	r24, Y+7	; 0x07
      f2:	98 85       	ldd	r25, Y+8	; 0x08
      f4:	83 30       	cpi	r24, 0x03	; 3
      f6:	91 05       	cpc	r25, r1
      f8:	09 f4       	brne	.+2      	; 0xfc <DIO_u8SetPinValue+0x6a>
      fa:	40 c0       	rjmp	.+128    	; 0x17c <DIO_u8SetPinValue+0xea>
      fc:	54 c0       	rjmp	.+168    	; 0x1a6 <DIO_u8SetPinValue+0x114>
			case DIO_u8PORTA : CLR_BIT(PORTA,Copy_u8Pin); break;
      fe:	ab e3       	ldi	r26, 0x3B	; 59
     100:	b0 e0       	ldi	r27, 0x00	; 0
     102:	eb e3       	ldi	r30, 0x3B	; 59
     104:	f0 e0       	ldi	r31, 0x00	; 0
     106:	80 81       	ld	r24, Z
     108:	48 2f       	mov	r20, r24
     10a:	8b 81       	ldd	r24, Y+3	; 0x03
     10c:	28 2f       	mov	r18, r24
     10e:	30 e0       	ldi	r19, 0x00	; 0
     110:	81 e0       	ldi	r24, 0x01	; 1
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	02 2e       	mov	r0, r18
     116:	02 c0       	rjmp	.+4      	; 0x11c <DIO_u8SetPinValue+0x8a>
     118:	88 0f       	add	r24, r24
     11a:	99 1f       	adc	r25, r25
     11c:	0a 94       	dec	r0
     11e:	e2 f7       	brpl	.-8      	; 0x118 <DIO_u8SetPinValue+0x86>
     120:	80 95       	com	r24
     122:	84 23       	and	r24, r20
     124:	8c 93       	st	X, r24
     126:	bd c0       	rjmp	.+378    	; 0x2a2 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB : CLR_BIT(PORTB,Copy_u8Pin); break;
     128:	a8 e3       	ldi	r26, 0x38	; 56
     12a:	b0 e0       	ldi	r27, 0x00	; 0
     12c:	e8 e3       	ldi	r30, 0x38	; 56
     12e:	f0 e0       	ldi	r31, 0x00	; 0
     130:	80 81       	ld	r24, Z
     132:	48 2f       	mov	r20, r24
     134:	8b 81       	ldd	r24, Y+3	; 0x03
     136:	28 2f       	mov	r18, r24
     138:	30 e0       	ldi	r19, 0x00	; 0
     13a:	81 e0       	ldi	r24, 0x01	; 1
     13c:	90 e0       	ldi	r25, 0x00	; 0
     13e:	02 2e       	mov	r0, r18
     140:	02 c0       	rjmp	.+4      	; 0x146 <DIO_u8SetPinValue+0xb4>
     142:	88 0f       	add	r24, r24
     144:	99 1f       	adc	r25, r25
     146:	0a 94       	dec	r0
     148:	e2 f7       	brpl	.-8      	; 0x142 <DIO_u8SetPinValue+0xb0>
     14a:	80 95       	com	r24
     14c:	84 23       	and	r24, r20
     14e:	8c 93       	st	X, r24
     150:	a8 c0       	rjmp	.+336    	; 0x2a2 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC : CLR_BIT(PORTC,Copy_u8Pin); break;
     152:	a5 e3       	ldi	r26, 0x35	; 53
     154:	b0 e0       	ldi	r27, 0x00	; 0
     156:	e5 e3       	ldi	r30, 0x35	; 53
     158:	f0 e0       	ldi	r31, 0x00	; 0
     15a:	80 81       	ld	r24, Z
     15c:	48 2f       	mov	r20, r24
     15e:	8b 81       	ldd	r24, Y+3	; 0x03
     160:	28 2f       	mov	r18, r24
     162:	30 e0       	ldi	r19, 0x00	; 0
     164:	81 e0       	ldi	r24, 0x01	; 1
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	02 2e       	mov	r0, r18
     16a:	02 c0       	rjmp	.+4      	; 0x170 <DIO_u8SetPinValue+0xde>
     16c:	88 0f       	add	r24, r24
     16e:	99 1f       	adc	r25, r25
     170:	0a 94       	dec	r0
     172:	e2 f7       	brpl	.-8      	; 0x16c <DIO_u8SetPinValue+0xda>
     174:	80 95       	com	r24
     176:	84 23       	and	r24, r20
     178:	8c 93       	st	X, r24
     17a:	93 c0       	rjmp	.+294    	; 0x2a2 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD : CLR_BIT(PORTD,Copy_u8Pin); break;
     17c:	a2 e3       	ldi	r26, 0x32	; 50
     17e:	b0 e0       	ldi	r27, 0x00	; 0
     180:	e2 e3       	ldi	r30, 0x32	; 50
     182:	f0 e0       	ldi	r31, 0x00	; 0
     184:	80 81       	ld	r24, Z
     186:	48 2f       	mov	r20, r24
     188:	8b 81       	ldd	r24, Y+3	; 0x03
     18a:	28 2f       	mov	r18, r24
     18c:	30 e0       	ldi	r19, 0x00	; 0
     18e:	81 e0       	ldi	r24, 0x01	; 1
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	02 2e       	mov	r0, r18
     194:	02 c0       	rjmp	.+4      	; 0x19a <DIO_u8SetPinValue+0x108>
     196:	88 0f       	add	r24, r24
     198:	99 1f       	adc	r25, r25
     19a:	0a 94       	dec	r0
     19c:	e2 f7       	brpl	.-8      	; 0x196 <DIO_u8SetPinValue+0x104>
     19e:	80 95       	com	r24
     1a0:	84 23       	and	r24, r20
     1a2:	8c 93       	st	X, r24
     1a4:	7e c0       	rjmp	.+252    	; 0x2a2 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1;
     1a6:	81 e0       	ldi	r24, 0x01	; 1
     1a8:	89 83       	std	Y+1, r24	; 0x01
     1aa:	7b c0       	rjmp	.+246    	; 0x2a2 <DIO_u8SetPinValue+0x210>
			}
		}
		else if(Copy_u8Value == DIO_u8PIN_HIGH){
     1ac:	8c 81       	ldd	r24, Y+4	; 0x04
     1ae:	81 30       	cpi	r24, 0x01	; 1
     1b0:	09 f0       	breq	.+2      	; 0x1b4 <DIO_u8SetPinValue+0x122>
     1b2:	72 c0       	rjmp	.+228    	; 0x298 <DIO_u8SetPinValue+0x206>
			switch(Copy_u8Port){
     1b4:	8a 81       	ldd	r24, Y+2	; 0x02
     1b6:	28 2f       	mov	r18, r24
     1b8:	30 e0       	ldi	r19, 0x00	; 0
     1ba:	3e 83       	std	Y+6, r19	; 0x06
     1bc:	2d 83       	std	Y+5, r18	; 0x05
     1be:	8d 81       	ldd	r24, Y+5	; 0x05
     1c0:	9e 81       	ldd	r25, Y+6	; 0x06
     1c2:	81 30       	cpi	r24, 0x01	; 1
     1c4:	91 05       	cpc	r25, r1
     1c6:	49 f1       	breq	.+82     	; 0x21a <DIO_u8SetPinValue+0x188>
     1c8:	2d 81       	ldd	r18, Y+5	; 0x05
     1ca:	3e 81       	ldd	r19, Y+6	; 0x06
     1cc:	22 30       	cpi	r18, 0x02	; 2
     1ce:	31 05       	cpc	r19, r1
     1d0:	2c f4       	brge	.+10     	; 0x1dc <DIO_u8SetPinValue+0x14a>
     1d2:	8d 81       	ldd	r24, Y+5	; 0x05
     1d4:	9e 81       	ldd	r25, Y+6	; 0x06
     1d6:	00 97       	sbiw	r24, 0x00	; 0
     1d8:	61 f0       	breq	.+24     	; 0x1f2 <DIO_u8SetPinValue+0x160>
     1da:	5b c0       	rjmp	.+182    	; 0x292 <DIO_u8SetPinValue+0x200>
     1dc:	2d 81       	ldd	r18, Y+5	; 0x05
     1de:	3e 81       	ldd	r19, Y+6	; 0x06
     1e0:	22 30       	cpi	r18, 0x02	; 2
     1e2:	31 05       	cpc	r19, r1
     1e4:	71 f1       	breq	.+92     	; 0x242 <DIO_u8SetPinValue+0x1b0>
     1e6:	8d 81       	ldd	r24, Y+5	; 0x05
     1e8:	9e 81       	ldd	r25, Y+6	; 0x06
     1ea:	83 30       	cpi	r24, 0x03	; 3
     1ec:	91 05       	cpc	r25, r1
     1ee:	e9 f1       	breq	.+122    	; 0x26a <DIO_u8SetPinValue+0x1d8>
     1f0:	50 c0       	rjmp	.+160    	; 0x292 <DIO_u8SetPinValue+0x200>
			case DIO_u8PORTA : SET_BIT(PORTA,Copy_u8Pin); break;
     1f2:	ab e3       	ldi	r26, 0x3B	; 59
     1f4:	b0 e0       	ldi	r27, 0x00	; 0
     1f6:	eb e3       	ldi	r30, 0x3B	; 59
     1f8:	f0 e0       	ldi	r31, 0x00	; 0
     1fa:	80 81       	ld	r24, Z
     1fc:	48 2f       	mov	r20, r24
     1fe:	8b 81       	ldd	r24, Y+3	; 0x03
     200:	28 2f       	mov	r18, r24
     202:	30 e0       	ldi	r19, 0x00	; 0
     204:	81 e0       	ldi	r24, 0x01	; 1
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	02 2e       	mov	r0, r18
     20a:	02 c0       	rjmp	.+4      	; 0x210 <DIO_u8SetPinValue+0x17e>
     20c:	88 0f       	add	r24, r24
     20e:	99 1f       	adc	r25, r25
     210:	0a 94       	dec	r0
     212:	e2 f7       	brpl	.-8      	; 0x20c <DIO_u8SetPinValue+0x17a>
     214:	84 2b       	or	r24, r20
     216:	8c 93       	st	X, r24
     218:	44 c0       	rjmp	.+136    	; 0x2a2 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB : SET_BIT(PORTB,Copy_u8Pin); break;
     21a:	a8 e3       	ldi	r26, 0x38	; 56
     21c:	b0 e0       	ldi	r27, 0x00	; 0
     21e:	e8 e3       	ldi	r30, 0x38	; 56
     220:	f0 e0       	ldi	r31, 0x00	; 0
     222:	80 81       	ld	r24, Z
     224:	48 2f       	mov	r20, r24
     226:	8b 81       	ldd	r24, Y+3	; 0x03
     228:	28 2f       	mov	r18, r24
     22a:	30 e0       	ldi	r19, 0x00	; 0
     22c:	81 e0       	ldi	r24, 0x01	; 1
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	02 2e       	mov	r0, r18
     232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_u8SetPinValue+0x1a6>
     234:	88 0f       	add	r24, r24
     236:	99 1f       	adc	r25, r25
     238:	0a 94       	dec	r0
     23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_u8SetPinValue+0x1a2>
     23c:	84 2b       	or	r24, r20
     23e:	8c 93       	st	X, r24
     240:	30 c0       	rjmp	.+96     	; 0x2a2 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC : SET_BIT(PORTC,Copy_u8Pin); break;
     242:	a5 e3       	ldi	r26, 0x35	; 53
     244:	b0 e0       	ldi	r27, 0x00	; 0
     246:	e5 e3       	ldi	r30, 0x35	; 53
     248:	f0 e0       	ldi	r31, 0x00	; 0
     24a:	80 81       	ld	r24, Z
     24c:	48 2f       	mov	r20, r24
     24e:	8b 81       	ldd	r24, Y+3	; 0x03
     250:	28 2f       	mov	r18, r24
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	81 e0       	ldi	r24, 0x01	; 1
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	02 2e       	mov	r0, r18
     25a:	02 c0       	rjmp	.+4      	; 0x260 <DIO_u8SetPinValue+0x1ce>
     25c:	88 0f       	add	r24, r24
     25e:	99 1f       	adc	r25, r25
     260:	0a 94       	dec	r0
     262:	e2 f7       	brpl	.-8      	; 0x25c <DIO_u8SetPinValue+0x1ca>
     264:	84 2b       	or	r24, r20
     266:	8c 93       	st	X, r24
     268:	1c c0       	rjmp	.+56     	; 0x2a2 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD : SET_BIT(PORTD,Copy_u8Pin); break;
     26a:	a2 e3       	ldi	r26, 0x32	; 50
     26c:	b0 e0       	ldi	r27, 0x00	; 0
     26e:	e2 e3       	ldi	r30, 0x32	; 50
     270:	f0 e0       	ldi	r31, 0x00	; 0
     272:	80 81       	ld	r24, Z
     274:	48 2f       	mov	r20, r24
     276:	8b 81       	ldd	r24, Y+3	; 0x03
     278:	28 2f       	mov	r18, r24
     27a:	30 e0       	ldi	r19, 0x00	; 0
     27c:	81 e0       	ldi	r24, 0x01	; 1
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	02 2e       	mov	r0, r18
     282:	02 c0       	rjmp	.+4      	; 0x288 <DIO_u8SetPinValue+0x1f6>
     284:	88 0f       	add	r24, r24
     286:	99 1f       	adc	r25, r25
     288:	0a 94       	dec	r0
     28a:	e2 f7       	brpl	.-8      	; 0x284 <DIO_u8SetPinValue+0x1f2>
     28c:	84 2b       	or	r24, r20
     28e:	8c 93       	st	X, r24
     290:	08 c0       	rjmp	.+16     	; 0x2a2 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1;
     292:	81 e0       	ldi	r24, 0x01	; 1
     294:	89 83       	std	Y+1, r24	; 0x01
     296:	05 c0       	rjmp	.+10     	; 0x2a2 <DIO_u8SetPinValue+0x210>
			}
		}
		else{
			Local_u8ErrorState=1;
     298:	81 e0       	ldi	r24, 0x01	; 1
     29a:	89 83       	std	Y+1, r24	; 0x01
     29c:	02 c0       	rjmp	.+4      	; 0x2a2 <DIO_u8SetPinValue+0x210>
		}
	}
	else{
		Local_u8ErrorState=1;
     29e:	81 e0       	ldi	r24, 0x01	; 1
     2a0:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState ;
     2a2:	89 81       	ldd	r24, Y+1	; 0x01
}
     2a4:	28 96       	adiw	r28, 0x08	; 8
     2a6:	0f b6       	in	r0, 0x3f	; 63
     2a8:	f8 94       	cli
     2aa:	de bf       	out	0x3e, r29	; 62
     2ac:	0f be       	out	0x3f, r0	; 63
     2ae:	cd bf       	out	0x3d, r28	; 61
     2b0:	cf 91       	pop	r28
     2b2:	df 91       	pop	r29
     2b4:	08 95       	ret

000002b6 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8Port,u8 Copy_u8Value){
     2b6:	df 93       	push	r29
     2b8:	cf 93       	push	r28
     2ba:	00 d0       	rcall	.+0      	; 0x2bc <DIO_u8SetPortValue+0x6>
     2bc:	00 d0       	rcall	.+0      	; 0x2be <DIO_u8SetPortValue+0x8>
     2be:	0f 92       	push	r0
     2c0:	cd b7       	in	r28, 0x3d	; 61
     2c2:	de b7       	in	r29, 0x3e	; 62
     2c4:	8a 83       	std	Y+2, r24	; 0x02
     2c6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
     2c8:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8Port)
     2ca:	8a 81       	ldd	r24, Y+2	; 0x02
     2cc:	28 2f       	mov	r18, r24
     2ce:	30 e0       	ldi	r19, 0x00	; 0
     2d0:	3d 83       	std	Y+5, r19	; 0x05
     2d2:	2c 83       	std	Y+4, r18	; 0x04
     2d4:	8c 81       	ldd	r24, Y+4	; 0x04
     2d6:	9d 81       	ldd	r25, Y+5	; 0x05
     2d8:	81 30       	cpi	r24, 0x01	; 1
     2da:	91 05       	cpc	r25, r1
     2dc:	d1 f0       	breq	.+52     	; 0x312 <DIO_u8SetPortValue+0x5c>
     2de:	2c 81       	ldd	r18, Y+4	; 0x04
     2e0:	3d 81       	ldd	r19, Y+5	; 0x05
     2e2:	22 30       	cpi	r18, 0x02	; 2
     2e4:	31 05       	cpc	r19, r1
     2e6:	2c f4       	brge	.+10     	; 0x2f2 <DIO_u8SetPortValue+0x3c>
     2e8:	8c 81       	ldd	r24, Y+4	; 0x04
     2ea:	9d 81       	ldd	r25, Y+5	; 0x05
     2ec:	00 97       	sbiw	r24, 0x00	; 0
     2ee:	61 f0       	breq	.+24     	; 0x308 <DIO_u8SetPortValue+0x52>
     2f0:	1f c0       	rjmp	.+62     	; 0x330 <DIO_u8SetPortValue+0x7a>
     2f2:	2c 81       	ldd	r18, Y+4	; 0x04
     2f4:	3d 81       	ldd	r19, Y+5	; 0x05
     2f6:	22 30       	cpi	r18, 0x02	; 2
     2f8:	31 05       	cpc	r19, r1
     2fa:	81 f0       	breq	.+32     	; 0x31c <DIO_u8SetPortValue+0x66>
     2fc:	8c 81       	ldd	r24, Y+4	; 0x04
     2fe:	9d 81       	ldd	r25, Y+5	; 0x05
     300:	83 30       	cpi	r24, 0x03	; 3
     302:	91 05       	cpc	r25, r1
     304:	81 f0       	breq	.+32     	; 0x326 <DIO_u8SetPortValue+0x70>
     306:	14 c0       	rjmp	.+40     	; 0x330 <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA: PORTA=Copy_u8Value; break;
     308:	eb e3       	ldi	r30, 0x3B	; 59
     30a:	f0 e0       	ldi	r31, 0x00	; 0
     30c:	8b 81       	ldd	r24, Y+3	; 0x03
     30e:	80 83       	st	Z, r24
     310:	11 c0       	rjmp	.+34     	; 0x334 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB: PORTB=Copy_u8Value; break;
     312:	e8 e3       	ldi	r30, 0x38	; 56
     314:	f0 e0       	ldi	r31, 0x00	; 0
     316:	8b 81       	ldd	r24, Y+3	; 0x03
     318:	80 83       	st	Z, r24
     31a:	0c c0       	rjmp	.+24     	; 0x334 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC: PORTC=Copy_u8Value; break;
     31c:	e5 e3       	ldi	r30, 0x35	; 53
     31e:	f0 e0       	ldi	r31, 0x00	; 0
     320:	8b 81       	ldd	r24, Y+3	; 0x03
     322:	80 83       	st	Z, r24
     324:	07 c0       	rjmp	.+14     	; 0x334 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD: PORTD=Copy_u8Value; break;
     326:	e2 e3       	ldi	r30, 0x32	; 50
     328:	f0 e0       	ldi	r31, 0x00	; 0
     32a:	8b 81       	ldd	r24, Y+3	; 0x03
     32c:	80 83       	st	Z, r24
     32e:	02 c0       	rjmp	.+4      	; 0x334 <DIO_u8SetPortValue+0x7e>
	default: Local_u8ErrorState=1 ;
     330:	81 e0       	ldi	r24, 0x01	; 1
     332:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState ;
     334:	89 81       	ldd	r24, Y+1	; 0x01
}
     336:	0f 90       	pop	r0
     338:	0f 90       	pop	r0
     33a:	0f 90       	pop	r0
     33c:	0f 90       	pop	r0
     33e:	0f 90       	pop	r0
     340:	cf 91       	pop	r28
     342:	df 91       	pop	r29
     344:	08 95       	ret

00000346 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin, u8* Copy_pu8Value){
     346:	df 93       	push	r29
     348:	cf 93       	push	r28
     34a:	cd b7       	in	r28, 0x3d	; 61
     34c:	de b7       	in	r29, 0x3e	; 62
     34e:	27 97       	sbiw	r28, 0x07	; 7
     350:	0f b6       	in	r0, 0x3f	; 63
     352:	f8 94       	cli
     354:	de bf       	out	0x3e, r29	; 62
     356:	0f be       	out	0x3f, r0	; 63
     358:	cd bf       	out	0x3d, r28	; 61
     35a:	8a 83       	std	Y+2, r24	; 0x02
     35c:	6b 83       	std	Y+3, r22	; 0x03
     35e:	5d 83       	std	Y+5, r21	; 0x05
     360:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
     362:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_pu8Value != NULL) && (Copy_u8Pin <= DIO_u8PIN7)){
     364:	8c 81       	ldd	r24, Y+4	; 0x04
     366:	9d 81       	ldd	r25, Y+5	; 0x05
     368:	00 97       	sbiw	r24, 0x00	; 0
     36a:	09 f4       	brne	.+2      	; 0x36e <DIO_u8GetPinValue+0x28>
     36c:	78 c0       	rjmp	.+240    	; 0x45e <DIO_u8GetPinValue+0x118>
     36e:	8b 81       	ldd	r24, Y+3	; 0x03
     370:	88 30       	cpi	r24, 0x08	; 8
     372:	08 f0       	brcs	.+2      	; 0x376 <DIO_u8GetPinValue+0x30>
     374:	74 c0       	rjmp	.+232    	; 0x45e <DIO_u8GetPinValue+0x118>
		switch (Copy_u8Port){
     376:	8a 81       	ldd	r24, Y+2	; 0x02
     378:	28 2f       	mov	r18, r24
     37a:	30 e0       	ldi	r19, 0x00	; 0
     37c:	3f 83       	std	Y+7, r19	; 0x07
     37e:	2e 83       	std	Y+6, r18	; 0x06
     380:	4e 81       	ldd	r20, Y+6	; 0x06
     382:	5f 81       	ldd	r21, Y+7	; 0x07
     384:	41 30       	cpi	r20, 0x01	; 1
     386:	51 05       	cpc	r21, r1
     388:	59 f1       	breq	.+86     	; 0x3e0 <DIO_u8GetPinValue+0x9a>
     38a:	8e 81       	ldd	r24, Y+6	; 0x06
     38c:	9f 81       	ldd	r25, Y+7	; 0x07
     38e:	82 30       	cpi	r24, 0x02	; 2
     390:	91 05       	cpc	r25, r1
     392:	34 f4       	brge	.+12     	; 0x3a0 <DIO_u8GetPinValue+0x5a>
     394:	2e 81       	ldd	r18, Y+6	; 0x06
     396:	3f 81       	ldd	r19, Y+7	; 0x07
     398:	21 15       	cp	r18, r1
     39a:	31 05       	cpc	r19, r1
     39c:	69 f0       	breq	.+26     	; 0x3b8 <DIO_u8GetPinValue+0x72>
     39e:	5c c0       	rjmp	.+184    	; 0x458 <DIO_u8GetPinValue+0x112>
     3a0:	4e 81       	ldd	r20, Y+6	; 0x06
     3a2:	5f 81       	ldd	r21, Y+7	; 0x07
     3a4:	42 30       	cpi	r20, 0x02	; 2
     3a6:	51 05       	cpc	r21, r1
     3a8:	79 f1       	breq	.+94     	; 0x408 <DIO_u8GetPinValue+0xc2>
     3aa:	8e 81       	ldd	r24, Y+6	; 0x06
     3ac:	9f 81       	ldd	r25, Y+7	; 0x07
     3ae:	83 30       	cpi	r24, 0x03	; 3
     3b0:	91 05       	cpc	r25, r1
     3b2:	09 f4       	brne	.+2      	; 0x3b6 <DIO_u8GetPinValue+0x70>
     3b4:	3d c0       	rjmp	.+122    	; 0x430 <DIO_u8GetPinValue+0xea>
     3b6:	50 c0       	rjmp	.+160    	; 0x458 <DIO_u8GetPinValue+0x112>
		case DIO_u8PORTA: *Copy_pu8Value = GET_BIT(PINA,Copy_u8Pin); break;
     3b8:	e9 e3       	ldi	r30, 0x39	; 57
     3ba:	f0 e0       	ldi	r31, 0x00	; 0
     3bc:	80 81       	ld	r24, Z
     3be:	28 2f       	mov	r18, r24
     3c0:	30 e0       	ldi	r19, 0x00	; 0
     3c2:	8b 81       	ldd	r24, Y+3	; 0x03
     3c4:	88 2f       	mov	r24, r24
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	a9 01       	movw	r20, r18
     3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <DIO_u8GetPinValue+0x8a>
     3cc:	55 95       	asr	r21
     3ce:	47 95       	ror	r20
     3d0:	8a 95       	dec	r24
     3d2:	e2 f7       	brpl	.-8      	; 0x3cc <DIO_u8GetPinValue+0x86>
     3d4:	ca 01       	movw	r24, r20
     3d6:	81 70       	andi	r24, 0x01	; 1
     3d8:	ec 81       	ldd	r30, Y+4	; 0x04
     3da:	fd 81       	ldd	r31, Y+5	; 0x05
     3dc:	80 83       	st	Z, r24
     3de:	41 c0       	rjmp	.+130    	; 0x462 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTB: *Copy_pu8Value = GET_BIT(PINB,Copy_u8Pin); break;
     3e0:	e6 e3       	ldi	r30, 0x36	; 54
     3e2:	f0 e0       	ldi	r31, 0x00	; 0
     3e4:	80 81       	ld	r24, Z
     3e6:	28 2f       	mov	r18, r24
     3e8:	30 e0       	ldi	r19, 0x00	; 0
     3ea:	8b 81       	ldd	r24, Y+3	; 0x03
     3ec:	88 2f       	mov	r24, r24
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	a9 01       	movw	r20, r18
     3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <DIO_u8GetPinValue+0xb2>
     3f4:	55 95       	asr	r21
     3f6:	47 95       	ror	r20
     3f8:	8a 95       	dec	r24
     3fa:	e2 f7       	brpl	.-8      	; 0x3f4 <DIO_u8GetPinValue+0xae>
     3fc:	ca 01       	movw	r24, r20
     3fe:	81 70       	andi	r24, 0x01	; 1
     400:	ec 81       	ldd	r30, Y+4	; 0x04
     402:	fd 81       	ldd	r31, Y+5	; 0x05
     404:	80 83       	st	Z, r24
     406:	2d c0       	rjmp	.+90     	; 0x462 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTC: *Copy_pu8Value = GET_BIT(PINC,Copy_u8Pin); break;
     408:	e3 e3       	ldi	r30, 0x33	; 51
     40a:	f0 e0       	ldi	r31, 0x00	; 0
     40c:	80 81       	ld	r24, Z
     40e:	28 2f       	mov	r18, r24
     410:	30 e0       	ldi	r19, 0x00	; 0
     412:	8b 81       	ldd	r24, Y+3	; 0x03
     414:	88 2f       	mov	r24, r24
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	a9 01       	movw	r20, r18
     41a:	02 c0       	rjmp	.+4      	; 0x420 <DIO_u8GetPinValue+0xda>
     41c:	55 95       	asr	r21
     41e:	47 95       	ror	r20
     420:	8a 95       	dec	r24
     422:	e2 f7       	brpl	.-8      	; 0x41c <DIO_u8GetPinValue+0xd6>
     424:	ca 01       	movw	r24, r20
     426:	81 70       	andi	r24, 0x01	; 1
     428:	ec 81       	ldd	r30, Y+4	; 0x04
     42a:	fd 81       	ldd	r31, Y+5	; 0x05
     42c:	80 83       	st	Z, r24
     42e:	19 c0       	rjmp	.+50     	; 0x462 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTD: *Copy_pu8Value = GET_BIT(PIND,Copy_u8Pin); break;
     430:	e0 e3       	ldi	r30, 0x30	; 48
     432:	f0 e0       	ldi	r31, 0x00	; 0
     434:	80 81       	ld	r24, Z
     436:	28 2f       	mov	r18, r24
     438:	30 e0       	ldi	r19, 0x00	; 0
     43a:	8b 81       	ldd	r24, Y+3	; 0x03
     43c:	88 2f       	mov	r24, r24
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	a9 01       	movw	r20, r18
     442:	02 c0       	rjmp	.+4      	; 0x448 <DIO_u8GetPinValue+0x102>
     444:	55 95       	asr	r21
     446:	47 95       	ror	r20
     448:	8a 95       	dec	r24
     44a:	e2 f7       	brpl	.-8      	; 0x444 <DIO_u8GetPinValue+0xfe>
     44c:	ca 01       	movw	r24, r20
     44e:	81 70       	andi	r24, 0x01	; 1
     450:	ec 81       	ldd	r30, Y+4	; 0x04
     452:	fd 81       	ldd	r31, Y+5	; 0x05
     454:	80 83       	st	Z, r24
     456:	05 c0       	rjmp	.+10     	; 0x462 <DIO_u8GetPinValue+0x11c>
		default:Local_u8ErrorState=1 ;
     458:	81 e0       	ldi	r24, 0x01	; 1
     45a:	89 83       	std	Y+1, r24	; 0x01
     45c:	02 c0       	rjmp	.+4      	; 0x462 <DIO_u8GetPinValue+0x11c>
		}
	}
	else{
		Local_u8ErrorState=1;
     45e:	81 e0       	ldi	r24, 0x01	; 1
     460:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState ;
     462:	89 81       	ldd	r24, Y+1	; 0x01
}
     464:	27 96       	adiw	r28, 0x07	; 7
     466:	0f b6       	in	r0, 0x3f	; 63
     468:	f8 94       	cli
     46a:	de bf       	out	0x3e, r29	; 62
     46c:	0f be       	out	0x3f, r0	; 63
     46e:	cd bf       	out	0x3d, r28	; 61
     470:	cf 91       	pop	r28
     472:	df 91       	pop	r29
     474:	08 95       	ret

00000476 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8Port,u8* Copy_pu8Value){
     476:	df 93       	push	r29
     478:	cf 93       	push	r28
     47a:	00 d0       	rcall	.+0      	; 0x47c <DIO_u8GetPortValue+0x6>
     47c:	00 d0       	rcall	.+0      	; 0x47e <DIO_u8GetPortValue+0x8>
     47e:	00 d0       	rcall	.+0      	; 0x480 <DIO_u8GetPortValue+0xa>
     480:	cd b7       	in	r28, 0x3d	; 61
     482:	de b7       	in	r29, 0x3e	; 62
     484:	8a 83       	std	Y+2, r24	; 0x02
     486:	7c 83       	std	Y+4, r23	; 0x04
     488:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
     48a:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8Port)
     48c:	8a 81       	ldd	r24, Y+2	; 0x02
     48e:	28 2f       	mov	r18, r24
     490:	30 e0       	ldi	r19, 0x00	; 0
     492:	3e 83       	std	Y+6, r19	; 0x06
     494:	2d 83       	std	Y+5, r18	; 0x05
     496:	8d 81       	ldd	r24, Y+5	; 0x05
     498:	9e 81       	ldd	r25, Y+6	; 0x06
     49a:	81 30       	cpi	r24, 0x01	; 1
     49c:	91 05       	cpc	r25, r1
     49e:	e1 f0       	breq	.+56     	; 0x4d8 <DIO_u8GetPortValue+0x62>
     4a0:	2d 81       	ldd	r18, Y+5	; 0x05
     4a2:	3e 81       	ldd	r19, Y+6	; 0x06
     4a4:	22 30       	cpi	r18, 0x02	; 2
     4a6:	31 05       	cpc	r19, r1
     4a8:	2c f4       	brge	.+10     	; 0x4b4 <DIO_u8GetPortValue+0x3e>
     4aa:	8d 81       	ldd	r24, Y+5	; 0x05
     4ac:	9e 81       	ldd	r25, Y+6	; 0x06
     4ae:	00 97       	sbiw	r24, 0x00	; 0
     4b0:	61 f0       	breq	.+24     	; 0x4ca <DIO_u8GetPortValue+0x54>
     4b2:	27 c0       	rjmp	.+78     	; 0x502 <DIO_u8GetPortValue+0x8c>
     4b4:	2d 81       	ldd	r18, Y+5	; 0x05
     4b6:	3e 81       	ldd	r19, Y+6	; 0x06
     4b8:	22 30       	cpi	r18, 0x02	; 2
     4ba:	31 05       	cpc	r19, r1
     4bc:	a1 f0       	breq	.+40     	; 0x4e6 <DIO_u8GetPortValue+0x70>
     4be:	8d 81       	ldd	r24, Y+5	; 0x05
     4c0:	9e 81       	ldd	r25, Y+6	; 0x06
     4c2:	83 30       	cpi	r24, 0x03	; 3
     4c4:	91 05       	cpc	r25, r1
     4c6:	b1 f0       	breq	.+44     	; 0x4f4 <DIO_u8GetPortValue+0x7e>
     4c8:	1c c0       	rjmp	.+56     	; 0x502 <DIO_u8GetPortValue+0x8c>
	{
	case DIO_u8PORTA: *Copy_pu8Value = PINA; break;
     4ca:	e9 e3       	ldi	r30, 0x39	; 57
     4cc:	f0 e0       	ldi	r31, 0x00	; 0
     4ce:	80 81       	ld	r24, Z
     4d0:	eb 81       	ldd	r30, Y+3	; 0x03
     4d2:	fc 81       	ldd	r31, Y+4	; 0x04
     4d4:	80 83       	st	Z, r24
     4d6:	17 c0       	rjmp	.+46     	; 0x506 <DIO_u8GetPortValue+0x90>
	case DIO_u8PORTB: *Copy_pu8Value = PINB; break;
     4d8:	e6 e3       	ldi	r30, 0x36	; 54
     4da:	f0 e0       	ldi	r31, 0x00	; 0
     4dc:	80 81       	ld	r24, Z
     4de:	eb 81       	ldd	r30, Y+3	; 0x03
     4e0:	fc 81       	ldd	r31, Y+4	; 0x04
     4e2:	80 83       	st	Z, r24
     4e4:	10 c0       	rjmp	.+32     	; 0x506 <DIO_u8GetPortValue+0x90>
	case DIO_u8PORTC: *Copy_pu8Value = PINC; break;
     4e6:	e3 e3       	ldi	r30, 0x33	; 51
     4e8:	f0 e0       	ldi	r31, 0x00	; 0
     4ea:	80 81       	ld	r24, Z
     4ec:	eb 81       	ldd	r30, Y+3	; 0x03
     4ee:	fc 81       	ldd	r31, Y+4	; 0x04
     4f0:	80 83       	st	Z, r24
     4f2:	09 c0       	rjmp	.+18     	; 0x506 <DIO_u8GetPortValue+0x90>
	case DIO_u8PORTD: *Copy_pu8Value = PIND; break;
     4f4:	e0 e3       	ldi	r30, 0x30	; 48
     4f6:	f0 e0       	ldi	r31, 0x00	; 0
     4f8:	80 81       	ld	r24, Z
     4fa:	eb 81       	ldd	r30, Y+3	; 0x03
     4fc:	fc 81       	ldd	r31, Y+4	; 0x04
     4fe:	80 83       	st	Z, r24
     500:	02 c0       	rjmp	.+4      	; 0x506 <DIO_u8GetPortValue+0x90>
	default: Local_u8ErrorState=1 ;
     502:	81 e0       	ldi	r24, 0x01	; 1
     504:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
     506:	89 81       	ldd	r24, Y+1	; 0x01
}
     508:	26 96       	adiw	r28, 0x06	; 6
     50a:	0f b6       	in	r0, 0x3f	; 63
     50c:	f8 94       	cli
     50e:	de bf       	out	0x3e, r29	; 62
     510:	0f be       	out	0x3f, r0	; 63
     512:	cd bf       	out	0x3d, r28	; 61
     514:	cf 91       	pop	r28
     516:	df 91       	pop	r29
     518:	08 95       	ret

0000051a <MATH_u32Power>:
#include "STD_TYPES.h"
#include "BIT_MATH.h"
#include "MATH_HELPER.h"

u32 MATH_u32Power(u32 Copy_u32Base,s32 Copy_u32Exponent){
     51a:	df 93       	push	r29
     51c:	cf 93       	push	r28
     51e:	cd b7       	in	r28, 0x3d	; 61
     520:	de b7       	in	r29, 0x3e	; 62
     522:	60 97       	sbiw	r28, 0x10	; 16
     524:	0f b6       	in	r0, 0x3f	; 63
     526:	f8 94       	cli
     528:	de bf       	out	0x3e, r29	; 62
     52a:	0f be       	out	0x3f, r0	; 63
     52c:	cd bf       	out	0x3d, r28	; 61
     52e:	69 87       	std	Y+9, r22	; 0x09
     530:	7a 87       	std	Y+10, r23	; 0x0a
     532:	8b 87       	std	Y+11, r24	; 0x0b
     534:	9c 87       	std	Y+12, r25	; 0x0c
     536:	2d 87       	std	Y+13, r18	; 0x0d
     538:	3e 87       	std	Y+14, r19	; 0x0e
     53a:	4f 87       	std	Y+15, r20	; 0x0f
     53c:	58 8b       	std	Y+16, r21	; 0x10
	u32 Local_u32Result=1;
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	8d 83       	std	Y+5, r24	; 0x05
     548:	9e 83       	std	Y+6, r25	; 0x06
     54a:	af 83       	std	Y+7, r26	; 0x07
     54c:	b8 87       	std	Y+8, r27	; 0x08
	for(u32 i=0;i<Copy_u32Exponent;i++){
     54e:	19 82       	std	Y+1, r1	; 0x01
     550:	1a 82       	std	Y+2, r1	; 0x02
     552:	1b 82       	std	Y+3, r1	; 0x03
     554:	1c 82       	std	Y+4, r1	; 0x04
     556:	1d c0       	rjmp	.+58     	; 0x592 <MATH_u32Power+0x78>
		Local_u32Result*=Copy_u32Base;
     558:	8d 81       	ldd	r24, Y+5	; 0x05
     55a:	9e 81       	ldd	r25, Y+6	; 0x06
     55c:	af 81       	ldd	r26, Y+7	; 0x07
     55e:	b8 85       	ldd	r27, Y+8	; 0x08
     560:	29 85       	ldd	r18, Y+9	; 0x09
     562:	3a 85       	ldd	r19, Y+10	; 0x0a
     564:	4b 85       	ldd	r20, Y+11	; 0x0b
     566:	5c 85       	ldd	r21, Y+12	; 0x0c
     568:	bc 01       	movw	r22, r24
     56a:	cd 01       	movw	r24, r26
     56c:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <__mulsi3>
     570:	dc 01       	movw	r26, r24
     572:	cb 01       	movw	r24, r22
     574:	8d 83       	std	Y+5, r24	; 0x05
     576:	9e 83       	std	Y+6, r25	; 0x06
     578:	af 83       	std	Y+7, r26	; 0x07
     57a:	b8 87       	std	Y+8, r27	; 0x08
#include "BIT_MATH.h"
#include "MATH_HELPER.h"

u32 MATH_u32Power(u32 Copy_u32Base,s32 Copy_u32Exponent){
	u32 Local_u32Result=1;
	for(u32 i=0;i<Copy_u32Exponent;i++){
     57c:	89 81       	ldd	r24, Y+1	; 0x01
     57e:	9a 81       	ldd	r25, Y+2	; 0x02
     580:	ab 81       	ldd	r26, Y+3	; 0x03
     582:	bc 81       	ldd	r27, Y+4	; 0x04
     584:	01 96       	adiw	r24, 0x01	; 1
     586:	a1 1d       	adc	r26, r1
     588:	b1 1d       	adc	r27, r1
     58a:	89 83       	std	Y+1, r24	; 0x01
     58c:	9a 83       	std	Y+2, r25	; 0x02
     58e:	ab 83       	std	Y+3, r26	; 0x03
     590:	bc 83       	std	Y+4, r27	; 0x04
     592:	2d 85       	ldd	r18, Y+13	; 0x0d
     594:	3e 85       	ldd	r19, Y+14	; 0x0e
     596:	4f 85       	ldd	r20, Y+15	; 0x0f
     598:	58 89       	ldd	r21, Y+16	; 0x10
     59a:	89 81       	ldd	r24, Y+1	; 0x01
     59c:	9a 81       	ldd	r25, Y+2	; 0x02
     59e:	ab 81       	ldd	r26, Y+3	; 0x03
     5a0:	bc 81       	ldd	r27, Y+4	; 0x04
     5a2:	82 17       	cp	r24, r18
     5a4:	93 07       	cpc	r25, r19
     5a6:	a4 07       	cpc	r26, r20
     5a8:	b5 07       	cpc	r27, r21
     5aa:	b0 f2       	brcs	.-84     	; 0x558 <MATH_u32Power+0x3e>
		Local_u32Result*=Copy_u32Base;
	}
	return Local_u32Result;
     5ac:	8d 81       	ldd	r24, Y+5	; 0x05
     5ae:	9e 81       	ldd	r25, Y+6	; 0x06
     5b0:	af 81       	ldd	r26, Y+7	; 0x07
     5b2:	b8 85       	ldd	r27, Y+8	; 0x08
}
     5b4:	bc 01       	movw	r22, r24
     5b6:	cd 01       	movw	r24, r26
     5b8:	60 96       	adiw	r28, 0x10	; 16
     5ba:	0f b6       	in	r0, 0x3f	; 63
     5bc:	f8 94       	cli
     5be:	de bf       	out	0x3e, r29	; 62
     5c0:	0f be       	out	0x3f, r0	; 63
     5c2:	cd bf       	out	0x3d, r28	; 61
     5c4:	cf 91       	pop	r28
     5c6:	df 91       	pop	r29
     5c8:	08 95       	ret

000005ca <MATH_s32Map>:

s32 MATH_s32Map(s32 Copy_s32InputMin,s32 Copy_s32InputMax,s32 Copy_s32OutputMin,s32 Copy_s32OutputMax,s32 Copy_s32InputVal){
     5ca:	af 92       	push	r10
     5cc:	bf 92       	push	r11
     5ce:	cf 92       	push	r12
     5d0:	df 92       	push	r13
     5d2:	ef 92       	push	r14
     5d4:	ff 92       	push	r15
     5d6:	0f 93       	push	r16
     5d8:	1f 93       	push	r17
     5da:	df 93       	push	r29
     5dc:	cf 93       	push	r28
     5de:	cd b7       	in	r28, 0x3d	; 61
     5e0:	de b7       	in	r29, 0x3e	; 62
     5e2:	64 97       	sbiw	r28, 0x14	; 20
     5e4:	0f b6       	in	r0, 0x3f	; 63
     5e6:	f8 94       	cli
     5e8:	de bf       	out	0x3e, r29	; 62
     5ea:	0f be       	out	0x3f, r0	; 63
     5ec:	cd bf       	out	0x3d, r28	; 61
     5ee:	6d 83       	std	Y+5, r22	; 0x05
     5f0:	7e 83       	std	Y+6, r23	; 0x06
     5f2:	8f 83       	std	Y+7, r24	; 0x07
     5f4:	98 87       	std	Y+8, r25	; 0x08
     5f6:	29 87       	std	Y+9, r18	; 0x09
     5f8:	3a 87       	std	Y+10, r19	; 0x0a
     5fa:	4b 87       	std	Y+11, r20	; 0x0b
     5fc:	5c 87       	std	Y+12, r21	; 0x0c
     5fe:	ed 86       	std	Y+13, r14	; 0x0d
     600:	fe 86       	std	Y+14, r15	; 0x0e
     602:	0f 87       	std	Y+15, r16	; 0x0f
     604:	18 8b       	std	Y+16, r17	; 0x10
     606:	a9 8a       	std	Y+17, r10	; 0x11
     608:	ba 8a       	std	Y+18, r11	; 0x12
     60a:	cb 8a       	std	Y+19, r12	; 0x13
     60c:	dc 8a       	std	Y+20, r13	; 0x14
    s32 Local_s32OutputVal;
    Local_s32OutputVal= (((Copy_s32OutputMax-Copy_s32OutputMin)*(Copy_s32InputVal-Copy_s32InputMin))/(Copy_s32InputMax-Copy_s32InputMin))+Copy_s32OutputMin;
     60e:	29 89       	ldd	r18, Y+17	; 0x11
     610:	3a 89       	ldd	r19, Y+18	; 0x12
     612:	4b 89       	ldd	r20, Y+19	; 0x13
     614:	5c 89       	ldd	r21, Y+20	; 0x14
     616:	8d 85       	ldd	r24, Y+13	; 0x0d
     618:	9e 85       	ldd	r25, Y+14	; 0x0e
     61a:	af 85       	ldd	r26, Y+15	; 0x0f
     61c:	b8 89       	ldd	r27, Y+16	; 0x10
     61e:	79 01       	movw	r14, r18
     620:	8a 01       	movw	r16, r20
     622:	e8 1a       	sub	r14, r24
     624:	f9 0a       	sbc	r15, r25
     626:	0a 0b       	sbc	r16, r26
     628:	1b 0b       	sbc	r17, r27
     62a:	29 a1       	ldd	r18, Y+33	; 0x21
     62c:	3a a1       	ldd	r19, Y+34	; 0x22
     62e:	4b a1       	ldd	r20, Y+35	; 0x23
     630:	5c a1       	ldd	r21, Y+36	; 0x24
     632:	8d 81       	ldd	r24, Y+5	; 0x05
     634:	9e 81       	ldd	r25, Y+6	; 0x06
     636:	af 81       	ldd	r26, Y+7	; 0x07
     638:	b8 85       	ldd	r27, Y+8	; 0x08
     63a:	28 1b       	sub	r18, r24
     63c:	39 0b       	sbc	r19, r25
     63e:	4a 0b       	sbc	r20, r26
     640:	5b 0b       	sbc	r21, r27
     642:	c8 01       	movw	r24, r16
     644:	b7 01       	movw	r22, r14
     646:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <__mulsi3>
     64a:	7b 01       	movw	r14, r22
     64c:	8c 01       	movw	r16, r24
     64e:	29 85       	ldd	r18, Y+9	; 0x09
     650:	3a 85       	ldd	r19, Y+10	; 0x0a
     652:	4b 85       	ldd	r20, Y+11	; 0x0b
     654:	5c 85       	ldd	r21, Y+12	; 0x0c
     656:	8d 81       	ldd	r24, Y+5	; 0x05
     658:	9e 81       	ldd	r25, Y+6	; 0x06
     65a:	af 81       	ldd	r26, Y+7	; 0x07
     65c:	b8 85       	ldd	r27, Y+8	; 0x08
     65e:	28 1b       	sub	r18, r24
     660:	39 0b       	sbc	r19, r25
     662:	4a 0b       	sbc	r20, r26
     664:	5b 0b       	sbc	r21, r27
     666:	c8 01       	movw	r24, r16
     668:	b7 01       	movw	r22, r14
     66a:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__divmodsi4>
     66e:	da 01       	movw	r26, r20
     670:	c9 01       	movw	r24, r18
     672:	9c 01       	movw	r18, r24
     674:	ad 01       	movw	r20, r26
     676:	8d 85       	ldd	r24, Y+13	; 0x0d
     678:	9e 85       	ldd	r25, Y+14	; 0x0e
     67a:	af 85       	ldd	r26, Y+15	; 0x0f
     67c:	b8 89       	ldd	r27, Y+16	; 0x10
     67e:	82 0f       	add	r24, r18
     680:	93 1f       	adc	r25, r19
     682:	a4 1f       	adc	r26, r20
     684:	b5 1f       	adc	r27, r21
     686:	89 83       	std	Y+1, r24	; 0x01
     688:	9a 83       	std	Y+2, r25	; 0x02
     68a:	ab 83       	std	Y+3, r26	; 0x03
     68c:	bc 83       	std	Y+4, r27	; 0x04
    return Local_s32OutputVal;
     68e:	89 81       	ldd	r24, Y+1	; 0x01
     690:	9a 81       	ldd	r25, Y+2	; 0x02
     692:	ab 81       	ldd	r26, Y+3	; 0x03
     694:	bc 81       	ldd	r27, Y+4	; 0x04
     696:	bc 01       	movw	r22, r24
     698:	cd 01       	movw	r24, r26
     69a:	64 96       	adiw	r28, 0x14	; 20
     69c:	0f b6       	in	r0, 0x3f	; 63
     69e:	f8 94       	cli
     6a0:	de bf       	out	0x3e, r29	; 62
     6a2:	0f be       	out	0x3f, r0	; 63
     6a4:	cd bf       	out	0x3d, r28	; 61
     6a6:	cf 91       	pop	r28
     6a8:	df 91       	pop	r29
     6aa:	1f 91       	pop	r17
     6ac:	0f 91       	pop	r16
     6ae:	ff 90       	pop	r15
     6b0:	ef 90       	pop	r14
     6b2:	df 90       	pop	r13
     6b4:	cf 90       	pop	r12
     6b6:	bf 90       	pop	r11
     6b8:	af 90       	pop	r10
     6ba:	08 95       	ret

000006bc <PORT_voidInit>:
#include "PORT_config.h"
#include "PORT_private.h"
#include "PORT_interface.h"
#include "PORT_register.h"

void PORT_voidInit(){
     6bc:	df 93       	push	r29
     6be:	cf 93       	push	r28
     6c0:	cd b7       	in	r28, 0x3d	; 61
     6c2:	de b7       	in	r29, 0x3e	; 62
    DDRA=PORTA_DIR;
     6c4:	ea e3       	ldi	r30, 0x3A	; 58
     6c6:	f0 e0       	ldi	r31, 0x00	; 0
     6c8:	8f ef       	ldi	r24, 0xFF	; 255
     6ca:	80 83       	st	Z, r24
    DDRB=PORTB_DIR;
     6cc:	e7 e3       	ldi	r30, 0x37	; 55
     6ce:	f0 e0       	ldi	r31, 0x00	; 0
     6d0:	8f e0       	ldi	r24, 0x0F	; 15
     6d2:	80 83       	st	Z, r24
    DDRC=PORTC_DIR;
     6d4:	e4 e3       	ldi	r30, 0x34	; 52
     6d6:	f0 e0       	ldi	r31, 0x00	; 0
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	80 83       	st	Z, r24
    DDRD=PORTD_DIR;
     6dc:	e1 e3       	ldi	r30, 0x31	; 49
     6de:	f0 e0       	ldi	r31, 0x00	; 0
     6e0:	8f ef       	ldi	r24, 0xFF	; 255
     6e2:	80 83       	st	Z, r24
    
    PORTA=PORTA_INIT_VAL;
     6e4:	eb e3       	ldi	r30, 0x3B	; 59
     6e6:	f0 e0       	ldi	r31, 0x00	; 0
     6e8:	10 82       	st	Z, r1
    PORTB=PORTB_INIT_VAL;
     6ea:	e8 e3       	ldi	r30, 0x38	; 56
     6ec:	f0 e0       	ldi	r31, 0x00	; 0
     6ee:	8f ef       	ldi	r24, 0xFF	; 255
     6f0:	80 83       	st	Z, r24
    PORTC=PORTC_INIT_VAL;
     6f2:	e5 e3       	ldi	r30, 0x35	; 53
     6f4:	f0 e0       	ldi	r31, 0x00	; 0
     6f6:	10 82       	st	Z, r1
    PORTD=PORTD_INIT_VAL;
     6f8:	e2 e3       	ldi	r30, 0x32	; 50
     6fa:	f0 e0       	ldi	r31, 0x00	; 0
     6fc:	10 82       	st	Z, r1
}
     6fe:	cf 91       	pop	r28
     700:	df 91       	pop	r29
     702:	08 95       	ret

00000704 <SERVO_u8Rotate>:
#include "STD_TYPES.h"
#include "MATH_HELPER.h"

#include "TIMER_interface.h"

u8 SERVO_u8Rotate(u8 Copy_u8ChannelID,u8 Copy_u8Degree,Timer1_t* Copy_psTimer){
     704:	af 92       	push	r10
     706:	bf 92       	push	r11
     708:	cf 92       	push	r12
     70a:	df 92       	push	r13
     70c:	ef 92       	push	r14
     70e:	ff 92       	push	r15
     710:	0f 93       	push	r16
     712:	1f 93       	push	r17
     714:	df 93       	push	r29
     716:	cf 93       	push	r28
     718:	cd b7       	in	r28, 0x3d	; 61
     71a:	de b7       	in	r29, 0x3e	; 62
     71c:	27 97       	sbiw	r28, 0x07	; 7
     71e:	0f b6       	in	r0, 0x3f	; 63
     720:	f8 94       	cli
     722:	de bf       	out	0x3e, r29	; 62
     724:	0f be       	out	0x3f, r0	; 63
     726:	cd bf       	out	0x3d, r28	; 61
     728:	8c 83       	std	Y+4, r24	; 0x04
     72a:	6d 83       	std	Y+5, r22	; 0x05
     72c:	5f 83       	std	Y+7, r21	; 0x07
     72e:	4e 83       	std	Y+6, r20	; 0x06
	u8 Local_u8ErrorState;
	if(Copy_psTimer!=NULL){
     730:	8e 81       	ldd	r24, Y+6	; 0x06
     732:	9f 81       	ldd	r25, Y+7	; 0x07
     734:	00 97       	sbiw	r24, 0x00	; 0
     736:	f1 f1       	breq	.+124    	; 0x7b4 <SERVO_u8Rotate+0xb0>
		u16 Local_u16OnTime=MATH_s32Map(0,180,400,2657,Copy_u8Degree);
     738:	8d 81       	ldd	r24, Y+5	; 0x05
     73a:	88 2f       	mov	r24, r24
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	a0 e0       	ldi	r26, 0x00	; 0
     740:	b0 e0       	ldi	r27, 0x00	; 0
     742:	00 d0       	rcall	.+0      	; 0x744 <SERVO_u8Rotate+0x40>
     744:	00 d0       	rcall	.+0      	; 0x746 <SERVO_u8Rotate+0x42>
     746:	ed b7       	in	r30, 0x3d	; 61
     748:	fe b7       	in	r31, 0x3e	; 62
     74a:	31 96       	adiw	r30, 0x01	; 1
     74c:	80 83       	st	Z, r24
     74e:	91 83       	std	Z+1, r25	; 0x01
     750:	a2 83       	std	Z+2, r26	; 0x02
     752:	b3 83       	std	Z+3, r27	; 0x03
     754:	60 e0       	ldi	r22, 0x00	; 0
     756:	70 e0       	ldi	r23, 0x00	; 0
     758:	80 e0       	ldi	r24, 0x00	; 0
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	24 eb       	ldi	r18, 0xB4	; 180
     75e:	30 e0       	ldi	r19, 0x00	; 0
     760:	40 e0       	ldi	r20, 0x00	; 0
     762:	50 e0       	ldi	r21, 0x00	; 0
     764:	0f 2e       	mov	r0, r31
     766:	f0 e9       	ldi	r31, 0x90	; 144
     768:	ef 2e       	mov	r14, r31
     76a:	f1 e0       	ldi	r31, 0x01	; 1
     76c:	ff 2e       	mov	r15, r31
     76e:	f0 e0       	ldi	r31, 0x00	; 0
     770:	0f 2f       	mov	r16, r31
     772:	f0 e0       	ldi	r31, 0x00	; 0
     774:	1f 2f       	mov	r17, r31
     776:	f0 2d       	mov	r31, r0
     778:	0f 2e       	mov	r0, r31
     77a:	f1 e6       	ldi	r31, 0x61	; 97
     77c:	af 2e       	mov	r10, r31
     77e:	fa e0       	ldi	r31, 0x0A	; 10
     780:	bf 2e       	mov	r11, r31
     782:	f0 e0       	ldi	r31, 0x00	; 0
     784:	cf 2e       	mov	r12, r31
     786:	f0 e0       	ldi	r31, 0x00	; 0
     788:	df 2e       	mov	r13, r31
     78a:	f0 2d       	mov	r31, r0
     78c:	0e 94 e5 02 	call	0x5ca	; 0x5ca <MATH_s32Map>
     790:	0f 90       	pop	r0
     792:	0f 90       	pop	r0
     794:	0f 90       	pop	r0
     796:	0f 90       	pop	r0
     798:	dc 01       	movw	r26, r24
     79a:	cb 01       	movw	r24, r22
     79c:	9a 83       	std	Y+2, r25	; 0x02
     79e:	89 83       	std	Y+1, r24	; 0x01
		TIMER_u8PWMGenerate(Copy_psTimer,Copy_u8ChannelID,20000,Local_u16OnTime);
     7a0:	8e 81       	ldd	r24, Y+6	; 0x06
     7a2:	9f 81       	ldd	r25, Y+7	; 0x07
     7a4:	29 81       	ldd	r18, Y+1	; 0x01
     7a6:	3a 81       	ldd	r19, Y+2	; 0x02
     7a8:	6c 81       	ldd	r22, Y+4	; 0x04
     7aa:	40 e2       	ldi	r20, 0x20	; 32
     7ac:	5e e4       	ldi	r21, 0x4E	; 78
     7ae:	0e 94 56 08 	call	0x10ac	; 0x10ac <TIMER_u8PWMGenerate>
     7b2:	02 c0       	rjmp	.+4      	; 0x7b8 <SERVO_u8Rotate+0xb4>
	}
	else{
		Local_u8ErrorState=NULL_POINTER;
     7b4:	82 e0       	ldi	r24, 0x02	; 2
     7b6:	8b 83       	std	Y+3, r24	; 0x03
	}
	return Local_u8ErrorState;
     7b8:	8b 81       	ldd	r24, Y+3	; 0x03
}
     7ba:	27 96       	adiw	r28, 0x07	; 7
     7bc:	0f b6       	in	r0, 0x3f	; 63
     7be:	f8 94       	cli
     7c0:	de bf       	out	0x3e, r29	; 62
     7c2:	0f be       	out	0x3f, r0	; 63
     7c4:	cd bf       	out	0x3d, r28	; 61
     7c6:	cf 91       	pop	r28
     7c8:	df 91       	pop	r29
     7ca:	1f 91       	pop	r17
     7cc:	0f 91       	pop	r16
     7ce:	ff 90       	pop	r15
     7d0:	ef 90       	pop	r14
     7d2:	df 90       	pop	r13
     7d4:	cf 90       	pop	r12
     7d6:	bf 90       	pop	r11
     7d8:	af 90       	pop	r10
     7da:	08 95       	ret

000007dc <TIMER_u8SetCompMatch>:
static void (*TIMER1B_pvCOMPCallBackFunc)(void)=NULL;
static void (*TIMER2_pvOVFCallBackFunc)(void)=NULL;
static void (*TIMER2_pvCOMPCallBackFunc)(void)=NULL;


u8 TIMER_u8SetCompMatch(u8 Copy_u8TimerID,u16 Copy_u16Value){
     7dc:	df 93       	push	r29
     7de:	cf 93       	push	r28
     7e0:	00 d0       	rcall	.+0      	; 0x7e2 <TIMER_u8SetCompMatch+0x6>
     7e2:	00 d0       	rcall	.+0      	; 0x7e4 <TIMER_u8SetCompMatch+0x8>
     7e4:	00 d0       	rcall	.+0      	; 0x7e6 <TIMER_u8SetCompMatch+0xa>
     7e6:	cd b7       	in	r28, 0x3d	; 61
     7e8:	de b7       	in	r29, 0x3e	; 62
     7ea:	8a 83       	std	Y+2, r24	; 0x02
     7ec:	7c 83       	std	Y+4, r23	; 0x04
     7ee:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=OK;
     7f0:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8TimerID){
     7f2:	8a 81       	ldd	r24, Y+2	; 0x02
     7f4:	28 2f       	mov	r18, r24
     7f6:	30 e0       	ldi	r19, 0x00	; 0
     7f8:	3e 83       	std	Y+6, r19	; 0x06
     7fa:	2d 83       	std	Y+5, r18	; 0x05
     7fc:	8d 81       	ldd	r24, Y+5	; 0x05
     7fe:	9e 81       	ldd	r25, Y+6	; 0x06
     800:	81 30       	cpi	r24, 0x01	; 1
     802:	91 05       	cpc	r25, r1
     804:	19 f1       	breq	.+70     	; 0x84c <TIMER_u8SetCompMatch+0x70>
     806:	2d 81       	ldd	r18, Y+5	; 0x05
     808:	3e 81       	ldd	r19, Y+6	; 0x06
     80a:	22 30       	cpi	r18, 0x02	; 2
     80c:	31 05       	cpc	r19, r1
     80e:	2c f4       	brge	.+10     	; 0x81a <TIMER_u8SetCompMatch+0x3e>
     810:	8d 81       	ldd	r24, Y+5	; 0x05
     812:	9e 81       	ldd	r25, Y+6	; 0x06
     814:	00 97       	sbiw	r24, 0x00	; 0
     816:	61 f0       	breq	.+24     	; 0x830 <TIMER_u8SetCompMatch+0x54>
     818:	35 c0       	rjmp	.+106    	; 0x884 <__stack+0x25>
     81a:	2d 81       	ldd	r18, Y+5	; 0x05
     81c:	3e 81       	ldd	r19, Y+6	; 0x06
     81e:	22 30       	cpi	r18, 0x02	; 2
     820:	31 05       	cpc	r19, r1
     822:	d9 f0       	breq	.+54     	; 0x85a <TIMER_u8SetCompMatch+0x7e>
     824:	8d 81       	ldd	r24, Y+5	; 0x05
     826:	9e 81       	ldd	r25, Y+6	; 0x06
     828:	83 30       	cpi	r24, 0x03	; 3
     82a:	91 05       	cpc	r25, r1
     82c:	e9 f0       	breq	.+58     	; 0x868 <__stack+0x9>
     82e:	2a c0       	rjmp	.+84     	; 0x884 <__stack+0x25>
	case TIMER0  : if(Copy_u16Value<256){OCR0  = Copy_u16Value;} else{Local_u8ErrorState=NOK;} break;
     830:	8b 81       	ldd	r24, Y+3	; 0x03
     832:	9c 81       	ldd	r25, Y+4	; 0x04
     834:	8f 3f       	cpi	r24, 0xFF	; 255
     836:	91 05       	cpc	r25, r1
     838:	09 f0       	breq	.+2      	; 0x83c <TIMER_u8SetCompMatch+0x60>
     83a:	28 f4       	brcc	.+10     	; 0x846 <TIMER_u8SetCompMatch+0x6a>
     83c:	ec e5       	ldi	r30, 0x5C	; 92
     83e:	f0 e0       	ldi	r31, 0x00	; 0
     840:	8b 81       	ldd	r24, Y+3	; 0x03
     842:	80 83       	st	Z, r24
     844:	21 c0       	rjmp	.+66     	; 0x888 <__stack+0x29>
     846:	81 e0       	ldi	r24, 0x01	; 1
     848:	89 83       	std	Y+1, r24	; 0x01
     84a:	1e c0       	rjmp	.+60     	; 0x888 <__stack+0x29>
	case TIMER1A : OCR1A = Copy_u16Value; break;
     84c:	ea e4       	ldi	r30, 0x4A	; 74
     84e:	f0 e0       	ldi	r31, 0x00	; 0
     850:	8b 81       	ldd	r24, Y+3	; 0x03
     852:	9c 81       	ldd	r25, Y+4	; 0x04
     854:	91 83       	std	Z+1, r25	; 0x01
     856:	80 83       	st	Z, r24
     858:	17 c0       	rjmp	.+46     	; 0x888 <__stack+0x29>
	case TIMER1B : OCR1B = Copy_u16Value; break;
     85a:	e8 e4       	ldi	r30, 0x48	; 72
     85c:	f0 e0       	ldi	r31, 0x00	; 0
     85e:	8b 81       	ldd	r24, Y+3	; 0x03
     860:	9c 81       	ldd	r25, Y+4	; 0x04
     862:	91 83       	std	Z+1, r25	; 0x01
     864:	80 83       	st	Z, r24
     866:	10 c0       	rjmp	.+32     	; 0x888 <__stack+0x29>
	case TIMER2  : if(Copy_u16Value<256){OCR2  = Copy_u16Value;} else{Local_u8ErrorState=NOK;} break;
     868:	8b 81       	ldd	r24, Y+3	; 0x03
     86a:	9c 81       	ldd	r25, Y+4	; 0x04
     86c:	8f 3f       	cpi	r24, 0xFF	; 255
     86e:	91 05       	cpc	r25, r1
     870:	09 f0       	breq	.+2      	; 0x874 <__stack+0x15>
     872:	28 f4       	brcc	.+10     	; 0x87e <__stack+0x1f>
     874:	e3 e4       	ldi	r30, 0x43	; 67
     876:	f0 e0       	ldi	r31, 0x00	; 0
     878:	8b 81       	ldd	r24, Y+3	; 0x03
     87a:	80 83       	st	Z, r24
     87c:	05 c0       	rjmp	.+10     	; 0x888 <__stack+0x29>
     87e:	81 e0       	ldi	r24, 0x01	; 1
     880:	89 83       	std	Y+1, r24	; 0x01
     882:	02 c0       	rjmp	.+4      	; 0x888 <__stack+0x29>
	default: Local_u8ErrorState=NOK;
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
     888:	89 81       	ldd	r24, Y+1	; 0x01
}
     88a:	26 96       	adiw	r28, 0x06	; 6
     88c:	0f b6       	in	r0, 0x3f	; 63
     88e:	f8 94       	cli
     890:	de bf       	out	0x3e, r29	; 62
     892:	0f be       	out	0x3f, r0	; 63
     894:	cd bf       	out	0x3d, r28	; 61
     896:	cf 91       	pop	r28
     898:	df 91       	pop	r29
     89a:	08 95       	ret

0000089c <TIMER_u8SetPreload>:

u8 TIMER_u8SetPreload(u8 Copy_u8TimerID,u16 Copy_u16Value){
     89c:	df 93       	push	r29
     89e:	cf 93       	push	r28
     8a0:	00 d0       	rcall	.+0      	; 0x8a2 <TIMER_u8SetPreload+0x6>
     8a2:	00 d0       	rcall	.+0      	; 0x8a4 <TIMER_u8SetPreload+0x8>
     8a4:	00 d0       	rcall	.+0      	; 0x8a6 <TIMER_u8SetPreload+0xa>
     8a6:	cd b7       	in	r28, 0x3d	; 61
     8a8:	de b7       	in	r29, 0x3e	; 62
     8aa:	8a 83       	std	Y+2, r24	; 0x02
     8ac:	7c 83       	std	Y+4, r23	; 0x04
     8ae:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=OK;
     8b0:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8TimerID){
     8b2:	8a 81       	ldd	r24, Y+2	; 0x02
     8b4:	28 2f       	mov	r18, r24
     8b6:	30 e0       	ldi	r19, 0x00	; 0
     8b8:	3e 83       	std	Y+6, r19	; 0x06
     8ba:	2d 83       	std	Y+5, r18	; 0x05
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	9e 81       	ldd	r25, Y+6	; 0x06
     8c0:	81 30       	cpi	r24, 0x01	; 1
     8c2:	91 05       	cpc	r25, r1
     8c4:	19 f1       	breq	.+70     	; 0x90c <TIMER_u8SetPreload+0x70>
     8c6:	2d 81       	ldd	r18, Y+5	; 0x05
     8c8:	3e 81       	ldd	r19, Y+6	; 0x06
     8ca:	22 30       	cpi	r18, 0x02	; 2
     8cc:	31 05       	cpc	r19, r1
     8ce:	2c f4       	brge	.+10     	; 0x8da <TIMER_u8SetPreload+0x3e>
     8d0:	8d 81       	ldd	r24, Y+5	; 0x05
     8d2:	9e 81       	ldd	r25, Y+6	; 0x06
     8d4:	00 97       	sbiw	r24, 0x00	; 0
     8d6:	61 f0       	breq	.+24     	; 0x8f0 <TIMER_u8SetPreload+0x54>
     8d8:	35 c0       	rjmp	.+106    	; 0x944 <TIMER_u8SetPreload+0xa8>
     8da:	2d 81       	ldd	r18, Y+5	; 0x05
     8dc:	3e 81       	ldd	r19, Y+6	; 0x06
     8de:	22 30       	cpi	r18, 0x02	; 2
     8e0:	31 05       	cpc	r19, r1
     8e2:	d9 f0       	breq	.+54     	; 0x91a <TIMER_u8SetPreload+0x7e>
     8e4:	8d 81       	ldd	r24, Y+5	; 0x05
     8e6:	9e 81       	ldd	r25, Y+6	; 0x06
     8e8:	83 30       	cpi	r24, 0x03	; 3
     8ea:	91 05       	cpc	r25, r1
     8ec:	e9 f0       	breq	.+58     	; 0x928 <TIMER_u8SetPreload+0x8c>
     8ee:	2a c0       	rjmp	.+84     	; 0x944 <TIMER_u8SetPreload+0xa8>
	case TIMER0  : if(Copy_u16Value<256){TCNT0  = Copy_u16Value;} else{Local_u8ErrorState=NOK;} break;
     8f0:	8b 81       	ldd	r24, Y+3	; 0x03
     8f2:	9c 81       	ldd	r25, Y+4	; 0x04
     8f4:	8f 3f       	cpi	r24, 0xFF	; 255
     8f6:	91 05       	cpc	r25, r1
     8f8:	09 f0       	breq	.+2      	; 0x8fc <TIMER_u8SetPreload+0x60>
     8fa:	28 f4       	brcc	.+10     	; 0x906 <TIMER_u8SetPreload+0x6a>
     8fc:	e2 e5       	ldi	r30, 0x52	; 82
     8fe:	f0 e0       	ldi	r31, 0x00	; 0
     900:	8b 81       	ldd	r24, Y+3	; 0x03
     902:	80 83       	st	Z, r24
     904:	21 c0       	rjmp	.+66     	; 0x948 <TIMER_u8SetPreload+0xac>
     906:	81 e0       	ldi	r24, 0x01	; 1
     908:	89 83       	std	Y+1, r24	; 0x01
     90a:	1e c0       	rjmp	.+60     	; 0x948 <TIMER_u8SetPreload+0xac>
	case TIMER1A : TCNT1 = Copy_u16Value; break;
     90c:	ec e4       	ldi	r30, 0x4C	; 76
     90e:	f0 e0       	ldi	r31, 0x00	; 0
     910:	8b 81       	ldd	r24, Y+3	; 0x03
     912:	9c 81       	ldd	r25, Y+4	; 0x04
     914:	91 83       	std	Z+1, r25	; 0x01
     916:	80 83       	st	Z, r24
     918:	17 c0       	rjmp	.+46     	; 0x948 <TIMER_u8SetPreload+0xac>
	case TIMER1B : TCNT1 = Copy_u16Value; break;
     91a:	ec e4       	ldi	r30, 0x4C	; 76
     91c:	f0 e0       	ldi	r31, 0x00	; 0
     91e:	8b 81       	ldd	r24, Y+3	; 0x03
     920:	9c 81       	ldd	r25, Y+4	; 0x04
     922:	91 83       	std	Z+1, r25	; 0x01
     924:	80 83       	st	Z, r24
     926:	10 c0       	rjmp	.+32     	; 0x948 <TIMER_u8SetPreload+0xac>
	case TIMER2  : if(Copy_u16Value<256){TCNT2  = Copy_u16Value;} else{Local_u8ErrorState=NOK;} break;
     928:	8b 81       	ldd	r24, Y+3	; 0x03
     92a:	9c 81       	ldd	r25, Y+4	; 0x04
     92c:	8f 3f       	cpi	r24, 0xFF	; 255
     92e:	91 05       	cpc	r25, r1
     930:	09 f0       	breq	.+2      	; 0x934 <TIMER_u8SetPreload+0x98>
     932:	28 f4       	brcc	.+10     	; 0x93e <TIMER_u8SetPreload+0xa2>
     934:	e4 e4       	ldi	r30, 0x44	; 68
     936:	f0 e0       	ldi	r31, 0x00	; 0
     938:	8b 81       	ldd	r24, Y+3	; 0x03
     93a:	80 83       	st	Z, r24
     93c:	05 c0       	rjmp	.+10     	; 0x948 <TIMER_u8SetPreload+0xac>
     93e:	81 e0       	ldi	r24, 0x01	; 1
     940:	89 83       	std	Y+1, r24	; 0x01
     942:	02 c0       	rjmp	.+4      	; 0x948 <TIMER_u8SetPreload+0xac>
	default: Local_u8ErrorState=NOK;
     944:	81 e0       	ldi	r24, 0x01	; 1
     946:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
     948:	89 81       	ldd	r24, Y+1	; 0x01
}
     94a:	26 96       	adiw	r28, 0x06	; 6
     94c:	0f b6       	in	r0, 0x3f	; 63
     94e:	f8 94       	cli
     950:	de bf       	out	0x3e, r29	; 62
     952:	0f be       	out	0x3f, r0	; 63
     954:	cd bf       	out	0x3d, r28	; 61
     956:	cf 91       	pop	r28
     958:	df 91       	pop	r29
     95a:	08 95       	ret

0000095c <TIMER0_u8Init>:

/********************************************************TIMER0**********************************************************
 ************************************************************************************************************************/


u8 TIMER0_u8Init(Timer_t* Copy_psTimer){
     95c:	df 93       	push	r29
     95e:	cf 93       	push	r28
     960:	00 d0       	rcall	.+0      	; 0x962 <TIMER0_u8Init+0x6>
     962:	0f 92       	push	r0
     964:	cd b7       	in	r28, 0x3d	; 61
     966:	de b7       	in	r29, 0x3e	; 62
     968:	9b 83       	std	Y+3, r25	; 0x03
     96a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
     96c:	19 82       	std	Y+1, r1	; 0x01
	//Initialize Wave Generation Mode
	if(Copy_psTimer!=NULL){
     96e:	8a 81       	ldd	r24, Y+2	; 0x02
     970:	9b 81       	ldd	r25, Y+3	; 0x03
     972:	00 97       	sbiw	r24, 0x00	; 0
     974:	09 f4       	brne	.+2      	; 0x978 <TIMER0_u8Init+0x1c>
     976:	b6 c0       	rjmp	.+364    	; 0xae4 <TIMER0_u8Init+0x188>
		if(Copy_psTimer->WaveGenMode==TIMER_NORMAL){
     978:	ea 81       	ldd	r30, Y+2	; 0x02
     97a:	fb 81       	ldd	r31, Y+3	; 0x03
     97c:	80 81       	ld	r24, Z
     97e:	81 30       	cpi	r24, 0x01	; 1
     980:	79 f4       	brne	.+30     	; 0x9a0 <TIMER0_u8Init+0x44>
			CLR_BIT(TCCR0,TCCR0_WGM01);
     982:	a3 e5       	ldi	r26, 0x53	; 83
     984:	b0 e0       	ldi	r27, 0x00	; 0
     986:	e3 e5       	ldi	r30, 0x53	; 83
     988:	f0 e0       	ldi	r31, 0x00	; 0
     98a:	80 81       	ld	r24, Z
     98c:	87 7f       	andi	r24, 0xF7	; 247
     98e:	8c 93       	st	X, r24
			CLR_BIT(TCCR0,TCCR0_WGM00);
     990:	a3 e5       	ldi	r26, 0x53	; 83
     992:	b0 e0       	ldi	r27, 0x00	; 0
     994:	e3 e5       	ldi	r30, 0x53	; 83
     996:	f0 e0       	ldi	r31, 0x00	; 0
     998:	80 81       	ld	r24, Z
     99a:	8f 7b       	andi	r24, 0xBF	; 191
     99c:	8c 93       	st	X, r24
     99e:	3e c0       	rjmp	.+124    	; 0xa1c <TIMER0_u8Init+0xc0>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER_PHC_PWM){
     9a0:	ea 81       	ldd	r30, Y+2	; 0x02
     9a2:	fb 81       	ldd	r31, Y+3	; 0x03
     9a4:	80 81       	ld	r24, Z
     9a6:	82 30       	cpi	r24, 0x02	; 2
     9a8:	79 f4       	brne	.+30     	; 0x9c8 <TIMER0_u8Init+0x6c>
			CLR_BIT(TCCR0,TCCR0_WGM01);
     9aa:	a3 e5       	ldi	r26, 0x53	; 83
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e3 e5       	ldi	r30, 0x53	; 83
     9b0:	f0 e0       	ldi	r31, 0x00	; 0
     9b2:	80 81       	ld	r24, Z
     9b4:	87 7f       	andi	r24, 0xF7	; 247
     9b6:	8c 93       	st	X, r24
			SET_BIT(TCCR0,TCCR0_WGM00);
     9b8:	a3 e5       	ldi	r26, 0x53	; 83
     9ba:	b0 e0       	ldi	r27, 0x00	; 0
     9bc:	e3 e5       	ldi	r30, 0x53	; 83
     9be:	f0 e0       	ldi	r31, 0x00	; 0
     9c0:	80 81       	ld	r24, Z
     9c2:	80 64       	ori	r24, 0x40	; 64
     9c4:	8c 93       	st	X, r24
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <TIMER0_u8Init+0xc0>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER_CTC){
     9c8:	ea 81       	ldd	r30, Y+2	; 0x02
     9ca:	fb 81       	ldd	r31, Y+3	; 0x03
     9cc:	80 81       	ld	r24, Z
     9ce:	83 30       	cpi	r24, 0x03	; 3
     9d0:	79 f4       	brne	.+30     	; 0x9f0 <TIMER0_u8Init+0x94>
			SET_BIT(TCCR0,TCCR0_WGM01);
     9d2:	a3 e5       	ldi	r26, 0x53	; 83
     9d4:	b0 e0       	ldi	r27, 0x00	; 0
     9d6:	e3 e5       	ldi	r30, 0x53	; 83
     9d8:	f0 e0       	ldi	r31, 0x00	; 0
     9da:	80 81       	ld	r24, Z
     9dc:	88 60       	ori	r24, 0x08	; 8
     9de:	8c 93       	st	X, r24
			CLR_BIT(TCCR0,TCCR0_WGM00);
     9e0:	a3 e5       	ldi	r26, 0x53	; 83
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	e3 e5       	ldi	r30, 0x53	; 83
     9e6:	f0 e0       	ldi	r31, 0x00	; 0
     9e8:	80 81       	ld	r24, Z
     9ea:	8f 7b       	andi	r24, 0xBF	; 191
     9ec:	8c 93       	st	X, r24
     9ee:	16 c0       	rjmp	.+44     	; 0xa1c <TIMER0_u8Init+0xc0>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER_FAST_PWM){
     9f0:	ea 81       	ldd	r30, Y+2	; 0x02
     9f2:	fb 81       	ldd	r31, Y+3	; 0x03
     9f4:	80 81       	ld	r24, Z
     9f6:	84 30       	cpi	r24, 0x04	; 4
     9f8:	79 f4       	brne	.+30     	; 0xa18 <TIMER0_u8Init+0xbc>
			SET_BIT(TCCR0,TCCR0_WGM01);
     9fa:	a3 e5       	ldi	r26, 0x53	; 83
     9fc:	b0 e0       	ldi	r27, 0x00	; 0
     9fe:	e3 e5       	ldi	r30, 0x53	; 83
     a00:	f0 e0       	ldi	r31, 0x00	; 0
     a02:	80 81       	ld	r24, Z
     a04:	88 60       	ori	r24, 0x08	; 8
     a06:	8c 93       	st	X, r24
			SET_BIT(TCCR0,TCCR0_WGM00);
     a08:	a3 e5       	ldi	r26, 0x53	; 83
     a0a:	b0 e0       	ldi	r27, 0x00	; 0
     a0c:	e3 e5       	ldi	r30, 0x53	; 83
     a0e:	f0 e0       	ldi	r31, 0x00	; 0
     a10:	80 81       	ld	r24, Z
     a12:	80 64       	ori	r24, 0x40	; 64
     a14:	8c 93       	st	X, r24
     a16:	02 c0       	rjmp	.+4      	; 0xa1c <TIMER0_u8Init+0xc0>
		}
		else{
			Local_u8ErrorState=NOK;
     a18:	81 e0       	ldi	r24, 0x01	; 1
     a1a:	89 83       	std	Y+1, r24	; 0x01
		}
		//Initialize Compare Match Output Mode
		TCCR0&=COMP_MATCH_OUT_MASK;
     a1c:	a3 e5       	ldi	r26, 0x53	; 83
     a1e:	b0 e0       	ldi	r27, 0x00	; 0
     a20:	e3 e5       	ldi	r30, 0x53	; 83
     a22:	f0 e0       	ldi	r31, 0x00	; 0
     a24:	80 81       	ld	r24, Z
     a26:	8f 7c       	andi	r24, 0xCF	; 207
     a28:	8c 93       	st	X, r24
		TCCR0|=((Copy_psTimer->CompareMatchOutputMode)<<4);
     a2a:	a3 e5       	ldi	r26, 0x53	; 83
     a2c:	b0 e0       	ldi	r27, 0x00	; 0
     a2e:	e3 e5       	ldi	r30, 0x53	; 83
     a30:	f0 e0       	ldi	r31, 0x00	; 0
     a32:	80 81       	ld	r24, Z
     a34:	28 2f       	mov	r18, r24
     a36:	ea 81       	ldd	r30, Y+2	; 0x02
     a38:	fb 81       	ldd	r31, Y+3	; 0x03
     a3a:	82 81       	ldd	r24, Z+2	; 0x02
     a3c:	88 2f       	mov	r24, r24
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	82 95       	swap	r24
     a42:	92 95       	swap	r25
     a44:	90 7f       	andi	r25, 0xF0	; 240
     a46:	98 27       	eor	r25, r24
     a48:	80 7f       	andi	r24, 0xF0	; 240
     a4a:	98 27       	eor	r25, r24
     a4c:	82 2b       	or	r24, r18
     a4e:	8c 93       	st	X, r24
		//Initialize Interrupt Enable pins
		if(Copy_psTimer->CompareMatchInterrupt==INT_ENABLE){
     a50:	ea 81       	ldd	r30, Y+2	; 0x02
     a52:	fb 81       	ldd	r31, Y+3	; 0x03
     a54:	83 81       	ldd	r24, Z+3	; 0x03
     a56:	81 30       	cpi	r24, 0x01	; 1
     a58:	41 f4       	brne	.+16     	; 0xa6a <TIMER0_u8Init+0x10e>
			SET_BIT(TIMSK,TIMSK_OCIE0);
     a5a:	a9 e5       	ldi	r26, 0x59	; 89
     a5c:	b0 e0       	ldi	r27, 0x00	; 0
     a5e:	e9 e5       	ldi	r30, 0x59	; 89
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	80 81       	ld	r24, Z
     a64:	82 60       	ori	r24, 0x02	; 2
     a66:	8c 93       	st	X, r24
     a68:	0f c0       	rjmp	.+30     	; 0xa88 <TIMER0_u8Init+0x12c>
		}
		else if(Copy_psTimer->CompareMatchInterrupt==INT_DISABLE){
     a6a:	ea 81       	ldd	r30, Y+2	; 0x02
     a6c:	fb 81       	ldd	r31, Y+3	; 0x03
     a6e:	83 81       	ldd	r24, Z+3	; 0x03
     a70:	82 30       	cpi	r24, 0x02	; 2
     a72:	41 f4       	brne	.+16     	; 0xa84 <TIMER0_u8Init+0x128>
			CLR_BIT(TIMSK,TIMSK_OCIE0);
     a74:	a9 e5       	ldi	r26, 0x59	; 89
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	e9 e5       	ldi	r30, 0x59	; 89
     a7a:	f0 e0       	ldi	r31, 0x00	; 0
     a7c:	80 81       	ld	r24, Z
     a7e:	8d 7f       	andi	r24, 0xFD	; 253
     a80:	8c 93       	st	X, r24
     a82:	02 c0       	rjmp	.+4      	; 0xa88 <TIMER0_u8Init+0x12c>
		}
		else{
			Local_u8ErrorState=NOK;
     a84:	81 e0       	ldi	r24, 0x01	; 1
     a86:	89 83       	std	Y+1, r24	; 0x01
		}

		if(Copy_psTimer->OverFlowInterrupt==INT_ENABLE){
     a88:	ea 81       	ldd	r30, Y+2	; 0x02
     a8a:	fb 81       	ldd	r31, Y+3	; 0x03
     a8c:	84 81       	ldd	r24, Z+4	; 0x04
     a8e:	81 30       	cpi	r24, 0x01	; 1
     a90:	41 f4       	brne	.+16     	; 0xaa2 <TIMER0_u8Init+0x146>
			SET_BIT(TIMSK,TIMSK_TOIE0);
     a92:	a9 e5       	ldi	r26, 0x59	; 89
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	e9 e5       	ldi	r30, 0x59	; 89
     a98:	f0 e0       	ldi	r31, 0x00	; 0
     a9a:	80 81       	ld	r24, Z
     a9c:	81 60       	ori	r24, 0x01	; 1
     a9e:	8c 93       	st	X, r24
     aa0:	0f c0       	rjmp	.+30     	; 0xac0 <TIMER0_u8Init+0x164>
		}
		else if(Copy_psTimer->OverFlowInterrupt==INT_DISABLE){
     aa2:	ea 81       	ldd	r30, Y+2	; 0x02
     aa4:	fb 81       	ldd	r31, Y+3	; 0x03
     aa6:	84 81       	ldd	r24, Z+4	; 0x04
     aa8:	82 30       	cpi	r24, 0x02	; 2
     aaa:	41 f4       	brne	.+16     	; 0xabc <TIMER0_u8Init+0x160>
			CLR_BIT(TIMSK,TIMSK_TOIE0);
     aac:	a9 e5       	ldi	r26, 0x59	; 89
     aae:	b0 e0       	ldi	r27, 0x00	; 0
     ab0:	e9 e5       	ldi	r30, 0x59	; 89
     ab2:	f0 e0       	ldi	r31, 0x00	; 0
     ab4:	80 81       	ld	r24, Z
     ab6:	8e 7f       	andi	r24, 0xFE	; 254
     ab8:	8c 93       	st	X, r24
     aba:	02 c0       	rjmp	.+4      	; 0xac0 <TIMER0_u8Init+0x164>
		}
		else{
			Local_u8ErrorState=NOK;
     abc:	81 e0       	ldi	r24, 0x01	; 1
     abe:	89 83       	std	Y+1, r24	; 0x01
		}

		//Initialize Prescaler
		TCCR0&=PRESCALER_MASK;
     ac0:	a3 e5       	ldi	r26, 0x53	; 83
     ac2:	b0 e0       	ldi	r27, 0x00	; 0
     ac4:	e3 e5       	ldi	r30, 0x53	; 83
     ac6:	f0 e0       	ldi	r31, 0x00	; 0
     ac8:	80 81       	ld	r24, Z
     aca:	88 7f       	andi	r24, 0xF8	; 248
     acc:	8c 93       	st	X, r24
		TCCR0|=Copy_psTimer->Prescaler;
     ace:	a3 e5       	ldi	r26, 0x53	; 83
     ad0:	b0 e0       	ldi	r27, 0x00	; 0
     ad2:	e3 e5       	ldi	r30, 0x53	; 83
     ad4:	f0 e0       	ldi	r31, 0x00	; 0
     ad6:	90 81       	ld	r25, Z
     ad8:	ea 81       	ldd	r30, Y+2	; 0x02
     ada:	fb 81       	ldd	r31, Y+3	; 0x03
     adc:	81 81       	ldd	r24, Z+1	; 0x01
     ade:	89 2b       	or	r24, r25
     ae0:	8c 93       	st	X, r24
     ae2:	02 c0       	rjmp	.+4      	; 0xae8 <TIMER0_u8Init+0x18c>
	}
	else{
		Local_u8ErrorState=NULL_POINTER;
     ae4:	82 e0       	ldi	r24, 0x02	; 2
     ae6:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
     ae8:	89 81       	ldd	r24, Y+1	; 0x01
}
     aea:	0f 90       	pop	r0
     aec:	0f 90       	pop	r0
     aee:	0f 90       	pop	r0
     af0:	cf 91       	pop	r28
     af2:	df 91       	pop	r29
     af4:	08 95       	ret

00000af6 <TIMER1_u8Init>:

/********************************************************TIMER1**********************************************************
 ************************************************************************************************************************/


u8 TIMER1_u8Init(Timer1_t* Copy_psTimer){
     af6:	df 93       	push	r29
     af8:	cf 93       	push	r28
     afa:	00 d0       	rcall	.+0      	; 0xafc <TIMER1_u8Init+0x6>
     afc:	0f 92       	push	r0
     afe:	cd b7       	in	r28, 0x3d	; 61
     b00:	de b7       	in	r29, 0x3e	; 62
     b02:	9b 83       	std	Y+3, r25	; 0x03
     b04:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
     b06:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_psTimer!=NULL){
     b08:	8a 81       	ldd	r24, Y+2	; 0x02
     b0a:	9b 81       	ldd	r25, Y+3	; 0x03
     b0c:	00 97       	sbiw	r24, 0x00	; 0
     b0e:	09 f4       	brne	.+2      	; 0xb12 <TIMER1_u8Init+0x1c>
     b10:	b2 c2       	rjmp	.+1380   	; 0x1076 <TIMER1_u8Init+0x580>
		//initialize wave generation mode
		if(Copy_psTimer->WaveGenMode==TIMER1_NORMAL){
     b12:	ea 81       	ldd	r30, Y+2	; 0x02
     b14:	fb 81       	ldd	r31, Y+3	; 0x03
     b16:	80 81       	ld	r24, Z
     b18:	81 30       	cpi	r24, 0x01	; 1
     b1a:	e9 f4       	brne	.+58     	; 0xb56 <TIMER1_u8Init+0x60>
			CLR_BIT(TCCR1B,TCCR1B_WGM13);
     b1c:	ae e4       	ldi	r26, 0x4E	; 78
     b1e:	b0 e0       	ldi	r27, 0x00	; 0
     b20:	ee e4       	ldi	r30, 0x4E	; 78
     b22:	f0 e0       	ldi	r31, 0x00	; 0
     b24:	80 81       	ld	r24, Z
     b26:	8f 7e       	andi	r24, 0xEF	; 239
     b28:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B,TCCR1B_WGM12);
     b2a:	ae e4       	ldi	r26, 0x4E	; 78
     b2c:	b0 e0       	ldi	r27, 0x00	; 0
     b2e:	ee e4       	ldi	r30, 0x4E	; 78
     b30:	f0 e0       	ldi	r31, 0x00	; 0
     b32:	80 81       	ld	r24, Z
     b34:	87 7f       	andi	r24, 0xF7	; 247
     b36:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM11);
     b38:	af e4       	ldi	r26, 0x4F	; 79
     b3a:	b0 e0       	ldi	r27, 0x00	; 0
     b3c:	ef e4       	ldi	r30, 0x4F	; 79
     b3e:	f0 e0       	ldi	r31, 0x00	; 0
     b40:	80 81       	ld	r24, Z
     b42:	8d 7f       	andi	r24, 0xFD	; 253
     b44:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM10);
     b46:	af e4       	ldi	r26, 0x4F	; 79
     b48:	b0 e0       	ldi	r27, 0x00	; 0
     b4a:	ef e4       	ldi	r30, 0x4F	; 79
     b4c:	f0 e0       	ldi	r31, 0x00	; 0
     b4e:	80 81       	ld	r24, Z
     b50:	8e 7f       	andi	r24, 0xFE	; 254
     b52:	8c 93       	st	X, r24
     b54:	de c1       	rjmp	.+956    	; 0xf12 <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_PHC_PWM_8_BIT){
     b56:	ea 81       	ldd	r30, Y+2	; 0x02
     b58:	fb 81       	ldd	r31, Y+3	; 0x03
     b5a:	80 81       	ld	r24, Z
     b5c:	82 30       	cpi	r24, 0x02	; 2
     b5e:	e9 f4       	brne	.+58     	; 0xb9a <TIMER1_u8Init+0xa4>
			CLR_BIT(TCCR1B,TCCR1B_WGM13);
     b60:	ae e4       	ldi	r26, 0x4E	; 78
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	ee e4       	ldi	r30, 0x4E	; 78
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	80 81       	ld	r24, Z
     b6a:	8f 7e       	andi	r24, 0xEF	; 239
     b6c:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B,TCCR1B_WGM12);
     b6e:	ae e4       	ldi	r26, 0x4E	; 78
     b70:	b0 e0       	ldi	r27, 0x00	; 0
     b72:	ee e4       	ldi	r30, 0x4E	; 78
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	80 81       	ld	r24, Z
     b78:	87 7f       	andi	r24, 0xF7	; 247
     b7a:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM11);
     b7c:	af e4       	ldi	r26, 0x4F	; 79
     b7e:	b0 e0       	ldi	r27, 0x00	; 0
     b80:	ef e4       	ldi	r30, 0x4F	; 79
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	80 81       	ld	r24, Z
     b86:	8d 7f       	andi	r24, 0xFD	; 253
     b88:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM10);
     b8a:	af e4       	ldi	r26, 0x4F	; 79
     b8c:	b0 e0       	ldi	r27, 0x00	; 0
     b8e:	ef e4       	ldi	r30, 0x4F	; 79
     b90:	f0 e0       	ldi	r31, 0x00	; 0
     b92:	80 81       	ld	r24, Z
     b94:	81 60       	ori	r24, 0x01	; 1
     b96:	8c 93       	st	X, r24
     b98:	bc c1       	rjmp	.+888    	; 0xf12 <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_PHC_PWM_9_BIT){
     b9a:	ea 81       	ldd	r30, Y+2	; 0x02
     b9c:	fb 81       	ldd	r31, Y+3	; 0x03
     b9e:	80 81       	ld	r24, Z
     ba0:	83 30       	cpi	r24, 0x03	; 3
     ba2:	e9 f4       	brne	.+58     	; 0xbde <TIMER1_u8Init+0xe8>
			CLR_BIT(TCCR1B,TCCR1B_WGM13);
     ba4:	ae e4       	ldi	r26, 0x4E	; 78
     ba6:	b0 e0       	ldi	r27, 0x00	; 0
     ba8:	ee e4       	ldi	r30, 0x4E	; 78
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	80 81       	ld	r24, Z
     bae:	8f 7e       	andi	r24, 0xEF	; 239
     bb0:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B,TCCR1B_WGM12);
     bb2:	ae e4       	ldi	r26, 0x4E	; 78
     bb4:	b0 e0       	ldi	r27, 0x00	; 0
     bb6:	ee e4       	ldi	r30, 0x4E	; 78
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	80 81       	ld	r24, Z
     bbc:	87 7f       	andi	r24, 0xF7	; 247
     bbe:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM11);
     bc0:	af e4       	ldi	r26, 0x4F	; 79
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	ef e4       	ldi	r30, 0x4F	; 79
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	80 81       	ld	r24, Z
     bca:	82 60       	ori	r24, 0x02	; 2
     bcc:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM10);
     bce:	af e4       	ldi	r26, 0x4F	; 79
     bd0:	b0 e0       	ldi	r27, 0x00	; 0
     bd2:	ef e4       	ldi	r30, 0x4F	; 79
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	80 81       	ld	r24, Z
     bd8:	8e 7f       	andi	r24, 0xFE	; 254
     bda:	8c 93       	st	X, r24
     bdc:	9a c1       	rjmp	.+820    	; 0xf12 <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_PHC_PWM_10_BIT){
     bde:	ea 81       	ldd	r30, Y+2	; 0x02
     be0:	fb 81       	ldd	r31, Y+3	; 0x03
     be2:	80 81       	ld	r24, Z
     be4:	84 30       	cpi	r24, 0x04	; 4
     be6:	e9 f4       	brne	.+58     	; 0xc22 <TIMER1_u8Init+0x12c>
			CLR_BIT(TCCR1B,TCCR1B_WGM13);
     be8:	ae e4       	ldi	r26, 0x4E	; 78
     bea:	b0 e0       	ldi	r27, 0x00	; 0
     bec:	ee e4       	ldi	r30, 0x4E	; 78
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	80 81       	ld	r24, Z
     bf2:	8f 7e       	andi	r24, 0xEF	; 239
     bf4:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B,TCCR1B_WGM12);
     bf6:	ae e4       	ldi	r26, 0x4E	; 78
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	ee e4       	ldi	r30, 0x4E	; 78
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	87 7f       	andi	r24, 0xF7	; 247
     c02:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM11);
     c04:	af e4       	ldi	r26, 0x4F	; 79
     c06:	b0 e0       	ldi	r27, 0x00	; 0
     c08:	ef e4       	ldi	r30, 0x4F	; 79
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	82 60       	ori	r24, 0x02	; 2
     c10:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM10);
     c12:	af e4       	ldi	r26, 0x4F	; 79
     c14:	b0 e0       	ldi	r27, 0x00	; 0
     c16:	ef e4       	ldi	r30, 0x4F	; 79
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	80 81       	ld	r24, Z
     c1c:	81 60       	ori	r24, 0x01	; 1
     c1e:	8c 93       	st	X, r24
     c20:	78 c1       	rjmp	.+752    	; 0xf12 <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_CTC){
     c22:	ea 81       	ldd	r30, Y+2	; 0x02
     c24:	fb 81       	ldd	r31, Y+3	; 0x03
     c26:	80 81       	ld	r24, Z
     c28:	85 30       	cpi	r24, 0x05	; 5
     c2a:	e9 f4       	brne	.+58     	; 0xc66 <TIMER1_u8Init+0x170>
			CLR_BIT(TCCR1B,TCCR1B_WGM13);
     c2c:	ae e4       	ldi	r26, 0x4E	; 78
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	ee e4       	ldi	r30, 0x4E	; 78
     c32:	f0 e0       	ldi	r31, 0x00	; 0
     c34:	80 81       	ld	r24, Z
     c36:	8f 7e       	andi	r24, 0xEF	; 239
     c38:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,TCCR1B_WGM12);
     c3a:	ae e4       	ldi	r26, 0x4E	; 78
     c3c:	b0 e0       	ldi	r27, 0x00	; 0
     c3e:	ee e4       	ldi	r30, 0x4E	; 78
     c40:	f0 e0       	ldi	r31, 0x00	; 0
     c42:	80 81       	ld	r24, Z
     c44:	88 60       	ori	r24, 0x08	; 8
     c46:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM11);
     c48:	af e4       	ldi	r26, 0x4F	; 79
     c4a:	b0 e0       	ldi	r27, 0x00	; 0
     c4c:	ef e4       	ldi	r30, 0x4F	; 79
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	80 81       	ld	r24, Z
     c52:	8d 7f       	andi	r24, 0xFD	; 253
     c54:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM10);
     c56:	af e4       	ldi	r26, 0x4F	; 79
     c58:	b0 e0       	ldi	r27, 0x00	; 0
     c5a:	ef e4       	ldi	r30, 0x4F	; 79
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	80 81       	ld	r24, Z
     c60:	8e 7f       	andi	r24, 0xFE	; 254
     c62:	8c 93       	st	X, r24
     c64:	56 c1       	rjmp	.+684    	; 0xf12 <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_FAST_PWM_8_BIT){
     c66:	ea 81       	ldd	r30, Y+2	; 0x02
     c68:	fb 81       	ldd	r31, Y+3	; 0x03
     c6a:	80 81       	ld	r24, Z
     c6c:	86 30       	cpi	r24, 0x06	; 6
     c6e:	e9 f4       	brne	.+58     	; 0xcaa <TIMER1_u8Init+0x1b4>
			CLR_BIT(TCCR1B,TCCR1B_WGM13);
     c70:	ae e4       	ldi	r26, 0x4E	; 78
     c72:	b0 e0       	ldi	r27, 0x00	; 0
     c74:	ee e4       	ldi	r30, 0x4E	; 78
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	80 81       	ld	r24, Z
     c7a:	8f 7e       	andi	r24, 0xEF	; 239
     c7c:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,TCCR1B_WGM12);
     c7e:	ae e4       	ldi	r26, 0x4E	; 78
     c80:	b0 e0       	ldi	r27, 0x00	; 0
     c82:	ee e4       	ldi	r30, 0x4E	; 78
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	80 81       	ld	r24, Z
     c88:	88 60       	ori	r24, 0x08	; 8
     c8a:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM11);
     c8c:	af e4       	ldi	r26, 0x4F	; 79
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	ef e4       	ldi	r30, 0x4F	; 79
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	8d 7f       	andi	r24, 0xFD	; 253
     c98:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM10);
     c9a:	af e4       	ldi	r26, 0x4F	; 79
     c9c:	b0 e0       	ldi	r27, 0x00	; 0
     c9e:	ef e4       	ldi	r30, 0x4F	; 79
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	80 81       	ld	r24, Z
     ca4:	81 60       	ori	r24, 0x01	; 1
     ca6:	8c 93       	st	X, r24
     ca8:	34 c1       	rjmp	.+616    	; 0xf12 <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_FAST_PWM_9_BIT){
     caa:	ea 81       	ldd	r30, Y+2	; 0x02
     cac:	fb 81       	ldd	r31, Y+3	; 0x03
     cae:	80 81       	ld	r24, Z
     cb0:	87 30       	cpi	r24, 0x07	; 7
     cb2:	e9 f4       	brne	.+58     	; 0xcee <TIMER1_u8Init+0x1f8>
			CLR_BIT(TCCR1B,TCCR1B_WGM13);
     cb4:	ae e4       	ldi	r26, 0x4E	; 78
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	ee e4       	ldi	r30, 0x4E	; 78
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	8f 7e       	andi	r24, 0xEF	; 239
     cc0:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,TCCR1B_WGM12);
     cc2:	ae e4       	ldi	r26, 0x4E	; 78
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	ee e4       	ldi	r30, 0x4E	; 78
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	88 60       	ori	r24, 0x08	; 8
     cce:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM11);
     cd0:	af e4       	ldi	r26, 0x4F	; 79
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	ef e4       	ldi	r30, 0x4F	; 79
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	82 60       	ori	r24, 0x02	; 2
     cdc:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM10);
     cde:	af e4       	ldi	r26, 0x4F	; 79
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	ef e4       	ldi	r30, 0x4F	; 79
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	8e 7f       	andi	r24, 0xFE	; 254
     cea:	8c 93       	st	X, r24
     cec:	12 c1       	rjmp	.+548    	; 0xf12 <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_FAST_PWM_10_BIT){
     cee:	ea 81       	ldd	r30, Y+2	; 0x02
     cf0:	fb 81       	ldd	r31, Y+3	; 0x03
     cf2:	80 81       	ld	r24, Z
     cf4:	88 30       	cpi	r24, 0x08	; 8
     cf6:	e9 f4       	brne	.+58     	; 0xd32 <TIMER1_u8Init+0x23c>
			CLR_BIT(TCCR1B,TCCR1B_WGM13);
     cf8:	ae e4       	ldi	r26, 0x4E	; 78
     cfa:	b0 e0       	ldi	r27, 0x00	; 0
     cfc:	ee e4       	ldi	r30, 0x4E	; 78
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	80 81       	ld	r24, Z
     d02:	8f 7e       	andi	r24, 0xEF	; 239
     d04:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,TCCR1B_WGM12);
     d06:	ae e4       	ldi	r26, 0x4E	; 78
     d08:	b0 e0       	ldi	r27, 0x00	; 0
     d0a:	ee e4       	ldi	r30, 0x4E	; 78
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	80 81       	ld	r24, Z
     d10:	88 60       	ori	r24, 0x08	; 8
     d12:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM11);
     d14:	af e4       	ldi	r26, 0x4F	; 79
     d16:	b0 e0       	ldi	r27, 0x00	; 0
     d18:	ef e4       	ldi	r30, 0x4F	; 79
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	80 81       	ld	r24, Z
     d1e:	82 60       	ori	r24, 0x02	; 2
     d20:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM10);
     d22:	af e4       	ldi	r26, 0x4F	; 79
     d24:	b0 e0       	ldi	r27, 0x00	; 0
     d26:	ef e4       	ldi	r30, 0x4F	; 79
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	80 81       	ld	r24, Z
     d2c:	81 60       	ori	r24, 0x01	; 1
     d2e:	8c 93       	st	X, r24
     d30:	f0 c0       	rjmp	.+480    	; 0xf12 <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_PHFC_PWM_CUSTOM_TOP){
     d32:	ea 81       	ldd	r30, Y+2	; 0x02
     d34:	fb 81       	ldd	r31, Y+3	; 0x03
     d36:	80 81       	ld	r24, Z
     d38:	89 30       	cpi	r24, 0x09	; 9
     d3a:	e9 f4       	brne	.+58     	; 0xd76 <TIMER1_u8Init+0x280>
			SET_BIT(TCCR1B,TCCR1B_WGM13);
     d3c:	ae e4       	ldi	r26, 0x4E	; 78
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	ee e4       	ldi	r30, 0x4E	; 78
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	80 81       	ld	r24, Z
     d46:	80 61       	ori	r24, 0x10	; 16
     d48:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B,TCCR1B_WGM12);
     d4a:	ae e4       	ldi	r26, 0x4E	; 78
     d4c:	b0 e0       	ldi	r27, 0x00	; 0
     d4e:	ee e4       	ldi	r30, 0x4E	; 78
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	80 81       	ld	r24, Z
     d54:	87 7f       	andi	r24, 0xF7	; 247
     d56:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM11);
     d58:	af e4       	ldi	r26, 0x4F	; 79
     d5a:	b0 e0       	ldi	r27, 0x00	; 0
     d5c:	ef e4       	ldi	r30, 0x4F	; 79
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	80 81       	ld	r24, Z
     d62:	8d 7f       	andi	r24, 0xFD	; 253
     d64:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM10);
     d66:	af e4       	ldi	r26, 0x4F	; 79
     d68:	b0 e0       	ldi	r27, 0x00	; 0
     d6a:	ef e4       	ldi	r30, 0x4F	; 79
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	80 81       	ld	r24, Z
     d70:	8e 7f       	andi	r24, 0xFE	; 254
     d72:	8c 93       	st	X, r24
     d74:	ce c0       	rjmp	.+412    	; 0xf12 <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_PHFC_PWM){
     d76:	ea 81       	ldd	r30, Y+2	; 0x02
     d78:	fb 81       	ldd	r31, Y+3	; 0x03
     d7a:	80 81       	ld	r24, Z
     d7c:	8a 30       	cpi	r24, 0x0A	; 10
     d7e:	e9 f4       	brne	.+58     	; 0xdba <TIMER1_u8Init+0x2c4>
			SET_BIT(TCCR1B,TCCR1B_WGM13);
     d80:	ae e4       	ldi	r26, 0x4E	; 78
     d82:	b0 e0       	ldi	r27, 0x00	; 0
     d84:	ee e4       	ldi	r30, 0x4E	; 78
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	80 81       	ld	r24, Z
     d8a:	80 61       	ori	r24, 0x10	; 16
     d8c:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B,TCCR1B_WGM12);
     d8e:	ae e4       	ldi	r26, 0x4E	; 78
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	ee e4       	ldi	r30, 0x4E	; 78
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	87 7f       	andi	r24, 0xF7	; 247
     d9a:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM11);
     d9c:	af e4       	ldi	r26, 0x4F	; 79
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	ef e4       	ldi	r30, 0x4F	; 79
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	8d 7f       	andi	r24, 0xFD	; 253
     da8:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM10);
     daa:	af e4       	ldi	r26, 0x4F	; 79
     dac:	b0 e0       	ldi	r27, 0x00	; 0
     dae:	ef e4       	ldi	r30, 0x4F	; 79
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	80 81       	ld	r24, Z
     db4:	81 60       	ori	r24, 0x01	; 1
     db6:	8c 93       	st	X, r24
     db8:	ac c0       	rjmp	.+344    	; 0xf12 <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_PHC_PWM_CUSTOM_TOP){
     dba:	ea 81       	ldd	r30, Y+2	; 0x02
     dbc:	fb 81       	ldd	r31, Y+3	; 0x03
     dbe:	80 81       	ld	r24, Z
     dc0:	8b 30       	cpi	r24, 0x0B	; 11
     dc2:	e9 f4       	brne	.+58     	; 0xdfe <TIMER1_u8Init+0x308>
			SET_BIT(TCCR1B,TCCR1B_WGM13);
     dc4:	ae e4       	ldi	r26, 0x4E	; 78
     dc6:	b0 e0       	ldi	r27, 0x00	; 0
     dc8:	ee e4       	ldi	r30, 0x4E	; 78
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	80 81       	ld	r24, Z
     dce:	80 61       	ori	r24, 0x10	; 16
     dd0:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B,TCCR1B_WGM12);
     dd2:	ae e4       	ldi	r26, 0x4E	; 78
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	ee e4       	ldi	r30, 0x4E	; 78
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	87 7f       	andi	r24, 0xF7	; 247
     dde:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM11);
     de0:	af e4       	ldi	r26, 0x4F	; 79
     de2:	b0 e0       	ldi	r27, 0x00	; 0
     de4:	ef e4       	ldi	r30, 0x4F	; 79
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 81       	ld	r24, Z
     dea:	82 60       	ori	r24, 0x02	; 2
     dec:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM10);
     dee:	af e4       	ldi	r26, 0x4F	; 79
     df0:	b0 e0       	ldi	r27, 0x00	; 0
     df2:	ef e4       	ldi	r30, 0x4F	; 79
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	8e 7f       	andi	r24, 0xFE	; 254
     dfa:	8c 93       	st	X, r24
     dfc:	8a c0       	rjmp	.+276    	; 0xf12 <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_PHC_PWM){
     dfe:	ea 81       	ldd	r30, Y+2	; 0x02
     e00:	fb 81       	ldd	r31, Y+3	; 0x03
     e02:	80 81       	ld	r24, Z
     e04:	8c 30       	cpi	r24, 0x0C	; 12
     e06:	e9 f4       	brne	.+58     	; 0xe42 <TIMER1_u8Init+0x34c>
			SET_BIT(TCCR1B,TCCR1B_WGM13);
     e08:	ae e4       	ldi	r26, 0x4E	; 78
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	ee e4       	ldi	r30, 0x4E	; 78
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
     e12:	80 61       	ori	r24, 0x10	; 16
     e14:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B,TCCR1B_WGM12);
     e16:	ae e4       	ldi	r26, 0x4E	; 78
     e18:	b0 e0       	ldi	r27, 0x00	; 0
     e1a:	ee e4       	ldi	r30, 0x4E	; 78
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	80 81       	ld	r24, Z
     e20:	87 7f       	andi	r24, 0xF7	; 247
     e22:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM11);
     e24:	af e4       	ldi	r26, 0x4F	; 79
     e26:	b0 e0       	ldi	r27, 0x00	; 0
     e28:	ef e4       	ldi	r30, 0x4F	; 79
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	80 81       	ld	r24, Z
     e2e:	82 60       	ori	r24, 0x02	; 2
     e30:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM10);
     e32:	af e4       	ldi	r26, 0x4F	; 79
     e34:	b0 e0       	ldi	r27, 0x00	; 0
     e36:	ef e4       	ldi	r30, 0x4F	; 79
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 81       	ld	r24, Z
     e3c:	81 60       	ori	r24, 0x01	; 1
     e3e:	8c 93       	st	X, r24
     e40:	68 c0       	rjmp	.+208    	; 0xf12 <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_CTC_CUSTOM_TOP){
     e42:	ea 81       	ldd	r30, Y+2	; 0x02
     e44:	fb 81       	ldd	r31, Y+3	; 0x03
     e46:	80 81       	ld	r24, Z
     e48:	8d 30       	cpi	r24, 0x0D	; 13
     e4a:	e9 f4       	brne	.+58     	; 0xe86 <TIMER1_u8Init+0x390>
			SET_BIT(TCCR1B,TCCR1B_WGM13);
     e4c:	ae e4       	ldi	r26, 0x4E	; 78
     e4e:	b0 e0       	ldi	r27, 0x00	; 0
     e50:	ee e4       	ldi	r30, 0x4E	; 78
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	80 81       	ld	r24, Z
     e56:	80 61       	ori	r24, 0x10	; 16
     e58:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,TCCR1B_WGM12);
     e5a:	ae e4       	ldi	r26, 0x4E	; 78
     e5c:	b0 e0       	ldi	r27, 0x00	; 0
     e5e:	ee e4       	ldi	r30, 0x4E	; 78
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	80 81       	ld	r24, Z
     e64:	88 60       	ori	r24, 0x08	; 8
     e66:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM11);
     e68:	af e4       	ldi	r26, 0x4F	; 79
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	ef e4       	ldi	r30, 0x4F	; 79
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	8d 7f       	andi	r24, 0xFD	; 253
     e74:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM10);
     e76:	af e4       	ldi	r26, 0x4F	; 79
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	ef e4       	ldi	r30, 0x4F	; 79
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	80 81       	ld	r24, Z
     e80:	8e 7f       	andi	r24, 0xFE	; 254
     e82:	8c 93       	st	X, r24
     e84:	46 c0       	rjmp	.+140    	; 0xf12 <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_FAST_PWM_CUSTOM_TOP){
     e86:	ea 81       	ldd	r30, Y+2	; 0x02
     e88:	fb 81       	ldd	r31, Y+3	; 0x03
     e8a:	80 81       	ld	r24, Z
     e8c:	8e 30       	cpi	r24, 0x0E	; 14
     e8e:	e9 f4       	brne	.+58     	; 0xeca <TIMER1_u8Init+0x3d4>
			SET_BIT(TCCR1B,TCCR1B_WGM13);
     e90:	ae e4       	ldi	r26, 0x4E	; 78
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	ee e4       	ldi	r30, 0x4E	; 78
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	80 61       	ori	r24, 0x10	; 16
     e9c:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,TCCR1B_WGM12);
     e9e:	ae e4       	ldi	r26, 0x4E	; 78
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	ee e4       	ldi	r30, 0x4E	; 78
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	88 60       	ori	r24, 0x08	; 8
     eaa:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM11);
     eac:	af e4       	ldi	r26, 0x4F	; 79
     eae:	b0 e0       	ldi	r27, 0x00	; 0
     eb0:	ef e4       	ldi	r30, 0x4F	; 79
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	80 81       	ld	r24, Z
     eb6:	82 60       	ori	r24, 0x02	; 2
     eb8:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM10);
     eba:	af e4       	ldi	r26, 0x4F	; 79
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	ef e4       	ldi	r30, 0x4F	; 79
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	8e 7f       	andi	r24, 0xFE	; 254
     ec6:	8c 93       	st	X, r24
     ec8:	24 c0       	rjmp	.+72     	; 0xf12 <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_FAST_PWM){
     eca:	ea 81       	ldd	r30, Y+2	; 0x02
     ecc:	fb 81       	ldd	r31, Y+3	; 0x03
     ece:	80 81       	ld	r24, Z
     ed0:	8f 30       	cpi	r24, 0x0F	; 15
     ed2:	e9 f4       	brne	.+58     	; 0xf0e <TIMER1_u8Init+0x418>
			SET_BIT(TCCR1B,TCCR1B_WGM13);
     ed4:	ae e4       	ldi	r26, 0x4E	; 78
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	ee e4       	ldi	r30, 0x4E	; 78
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	80 61       	ori	r24, 0x10	; 16
     ee0:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,TCCR1B_WGM12);
     ee2:	ae e4       	ldi	r26, 0x4E	; 78
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	ee e4       	ldi	r30, 0x4E	; 78
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	88 60       	ori	r24, 0x08	; 8
     eee:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM11);
     ef0:	af e4       	ldi	r26, 0x4F	; 79
     ef2:	b0 e0       	ldi	r27, 0x00	; 0
     ef4:	ef e4       	ldi	r30, 0x4F	; 79
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	82 60       	ori	r24, 0x02	; 2
     efc:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM10);
     efe:	af e4       	ldi	r26, 0x4F	; 79
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	ef e4       	ldi	r30, 0x4F	; 79
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	81 60       	ori	r24, 0x01	; 1
     f0a:	8c 93       	st	X, r24
     f0c:	02 c0       	rjmp	.+4      	; 0xf12 <TIMER1_u8Init+0x41c>
		}
		else{
			Local_u8ErrorState=NOK;
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	89 83       	std	Y+1, r24	; 0x01
		}
		//Set Match Compare Output Mode for both channel A and B
		TCCR1A&=T1_COMP_MATCH_OUT_MASK;
     f12:	af e4       	ldi	r26, 0x4F	; 79
     f14:	b0 e0       	ldi	r27, 0x00	; 0
     f16:	ef e4       	ldi	r30, 0x4F	; 79
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	80 81       	ld	r24, Z
     f1c:	8f 70       	andi	r24, 0x0F	; 15
     f1e:	8c 93       	st	X, r24
		TCCR1A|=((Copy_psTimer->CompareMatchOutputMode_B)<<4);
     f20:	af e4       	ldi	r26, 0x4F	; 79
     f22:	b0 e0       	ldi	r27, 0x00	; 0
     f24:	ef e4       	ldi	r30, 0x4F	; 79
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
     f2a:	28 2f       	mov	r18, r24
     f2c:	ea 81       	ldd	r30, Y+2	; 0x02
     f2e:	fb 81       	ldd	r31, Y+3	; 0x03
     f30:	83 81       	ldd	r24, Z+3	; 0x03
     f32:	88 2f       	mov	r24, r24
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	82 95       	swap	r24
     f38:	92 95       	swap	r25
     f3a:	90 7f       	andi	r25, 0xF0	; 240
     f3c:	98 27       	eor	r25, r24
     f3e:	80 7f       	andi	r24, 0xF0	; 240
     f40:	98 27       	eor	r25, r24
     f42:	82 2b       	or	r24, r18
     f44:	8c 93       	st	X, r24
		TCCR1A|=((Copy_psTimer->CompareMatchOutputMode_A)<<6);
     f46:	af e4       	ldi	r26, 0x4F	; 79
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	ef e4       	ldi	r30, 0x4F	; 79
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	28 2f       	mov	r18, r24
     f52:	ea 81       	ldd	r30, Y+2	; 0x02
     f54:	fb 81       	ldd	r31, Y+3	; 0x03
     f56:	82 81       	ldd	r24, Z+2	; 0x02
     f58:	88 2f       	mov	r24, r24
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	00 24       	eor	r0, r0
     f5e:	96 95       	lsr	r25
     f60:	87 95       	ror	r24
     f62:	07 94       	ror	r0
     f64:	96 95       	lsr	r25
     f66:	87 95       	ror	r24
     f68:	07 94       	ror	r0
     f6a:	98 2f       	mov	r25, r24
     f6c:	80 2d       	mov	r24, r0
     f6e:	82 2b       	or	r24, r18
     f70:	8c 93       	st	X, r24
		//Initialize Interrupt Enable pins
		if(Copy_psTimer->CompareMatchInterrupt_A==INT_ENABLE){
     f72:	ea 81       	ldd	r30, Y+2	; 0x02
     f74:	fb 81       	ldd	r31, Y+3	; 0x03
     f76:	84 81       	ldd	r24, Z+4	; 0x04
     f78:	81 30       	cpi	r24, 0x01	; 1
     f7a:	41 f4       	brne	.+16     	; 0xf8c <TIMER1_u8Init+0x496>
			SET_BIT(TIMSK,TIMSK_OCIE1A);
     f7c:	a9 e5       	ldi	r26, 0x59	; 89
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	e9 e5       	ldi	r30, 0x59	; 89
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	80 61       	ori	r24, 0x10	; 16
     f88:	8c 93       	st	X, r24
     f8a:	0f c0       	rjmp	.+30     	; 0xfaa <TIMER1_u8Init+0x4b4>
		}
		else if(Copy_psTimer->CompareMatchInterrupt_A==INT_DISABLE){
     f8c:	ea 81       	ldd	r30, Y+2	; 0x02
     f8e:	fb 81       	ldd	r31, Y+3	; 0x03
     f90:	84 81       	ldd	r24, Z+4	; 0x04
     f92:	82 30       	cpi	r24, 0x02	; 2
     f94:	41 f4       	brne	.+16     	; 0xfa6 <TIMER1_u8Init+0x4b0>
			CLR_BIT(TIMSK,TIMSK_OCIE1A);
     f96:	a9 e5       	ldi	r26, 0x59	; 89
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	e9 e5       	ldi	r30, 0x59	; 89
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	8f 7e       	andi	r24, 0xEF	; 239
     fa2:	8c 93       	st	X, r24
     fa4:	02 c0       	rjmp	.+4      	; 0xfaa <TIMER1_u8Init+0x4b4>
		}
		else{
			Local_u8ErrorState=NOK;
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	89 83       	std	Y+1, r24	; 0x01
		}

		if(Copy_psTimer->CompareMatchInterrupt_B==INT_ENABLE){
     faa:	ea 81       	ldd	r30, Y+2	; 0x02
     fac:	fb 81       	ldd	r31, Y+3	; 0x03
     fae:	85 81       	ldd	r24, Z+5	; 0x05
     fb0:	81 30       	cpi	r24, 0x01	; 1
     fb2:	41 f4       	brne	.+16     	; 0xfc4 <TIMER1_u8Init+0x4ce>
			SET_BIT(TIMSK,TIMSK_OCIE1B);
     fb4:	a9 e5       	ldi	r26, 0x59	; 89
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	e9 e5       	ldi	r30, 0x59	; 89
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	88 60       	ori	r24, 0x08	; 8
     fc0:	8c 93       	st	X, r24
     fc2:	0f c0       	rjmp	.+30     	; 0xfe2 <TIMER1_u8Init+0x4ec>
		}
		else if(Copy_psTimer->CompareMatchInterrupt_B==INT_DISABLE){
     fc4:	ea 81       	ldd	r30, Y+2	; 0x02
     fc6:	fb 81       	ldd	r31, Y+3	; 0x03
     fc8:	85 81       	ldd	r24, Z+5	; 0x05
     fca:	82 30       	cpi	r24, 0x02	; 2
     fcc:	41 f4       	brne	.+16     	; 0xfde <TIMER1_u8Init+0x4e8>
			CLR_BIT(TIMSK,TIMSK_OCIE1B);
     fce:	a9 e5       	ldi	r26, 0x59	; 89
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	e9 e5       	ldi	r30, 0x59	; 89
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	87 7f       	andi	r24, 0xF7	; 247
     fda:	8c 93       	st	X, r24
     fdc:	02 c0       	rjmp	.+4      	; 0xfe2 <TIMER1_u8Init+0x4ec>
		}
		else{
			Local_u8ErrorState=NOK;
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	89 83       	std	Y+1, r24	; 0x01
		}


		if(Copy_psTimer->OverFlowInterrupt==INT_ENABLE){
     fe2:	ea 81       	ldd	r30, Y+2	; 0x02
     fe4:	fb 81       	ldd	r31, Y+3	; 0x03
     fe6:	86 81       	ldd	r24, Z+6	; 0x06
     fe8:	81 30       	cpi	r24, 0x01	; 1
     fea:	41 f4       	brne	.+16     	; 0xffc <TIMER1_u8Init+0x506>
			SET_BIT(TIMSK,TIMSK_TOIE1);
     fec:	a9 e5       	ldi	r26, 0x59	; 89
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	e9 e5       	ldi	r30, 0x59	; 89
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	84 60       	ori	r24, 0x04	; 4
     ff8:	8c 93       	st	X, r24
     ffa:	0f c0       	rjmp	.+30     	; 0x101a <TIMER1_u8Init+0x524>
		}
		else if(Copy_psTimer->OverFlowInterrupt==INT_DISABLE){
     ffc:	ea 81       	ldd	r30, Y+2	; 0x02
     ffe:	fb 81       	ldd	r31, Y+3	; 0x03
    1000:	86 81       	ldd	r24, Z+6	; 0x06
    1002:	82 30       	cpi	r24, 0x02	; 2
    1004:	41 f4       	brne	.+16     	; 0x1016 <TIMER1_u8Init+0x520>
			CLR_BIT(TIMSK,TIMSK_TOIE1);
    1006:	a9 e5       	ldi	r26, 0x59	; 89
    1008:	b0 e0       	ldi	r27, 0x00	; 0
    100a:	e9 e5       	ldi	r30, 0x59	; 89
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	8b 7f       	andi	r24, 0xFB	; 251
    1012:	8c 93       	st	X, r24
    1014:	02 c0       	rjmp	.+4      	; 0x101a <TIMER1_u8Init+0x524>
		}
		else{
			Local_u8ErrorState=NOK;
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	89 83       	std	Y+1, r24	; 0x01
		}

		if(Copy_psTimer->InputCapInterrupt==INT_ENABLE){
    101a:	ea 81       	ldd	r30, Y+2	; 0x02
    101c:	fb 81       	ldd	r31, Y+3	; 0x03
    101e:	87 81       	ldd	r24, Z+7	; 0x07
    1020:	81 30       	cpi	r24, 0x01	; 1
    1022:	41 f4       	brne	.+16     	; 0x1034 <TIMER1_u8Init+0x53e>
			SET_BIT(TIMSK,TIMSK_TICIE1);
    1024:	a9 e5       	ldi	r26, 0x59	; 89
    1026:	b0 e0       	ldi	r27, 0x00	; 0
    1028:	e9 e5       	ldi	r30, 0x59	; 89
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	80 81       	ld	r24, Z
    102e:	80 62       	ori	r24, 0x20	; 32
    1030:	8c 93       	st	X, r24
    1032:	0f c0       	rjmp	.+30     	; 0x1052 <TIMER1_u8Init+0x55c>
		}
		else if(Copy_psTimer->InputCapInterrupt==INT_DISABLE){
    1034:	ea 81       	ldd	r30, Y+2	; 0x02
    1036:	fb 81       	ldd	r31, Y+3	; 0x03
    1038:	87 81       	ldd	r24, Z+7	; 0x07
    103a:	82 30       	cpi	r24, 0x02	; 2
    103c:	41 f4       	brne	.+16     	; 0x104e <TIMER1_u8Init+0x558>
			CLR_BIT(TIMSK,TIMSK_TICIE1);
    103e:	a9 e5       	ldi	r26, 0x59	; 89
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	e9 e5       	ldi	r30, 0x59	; 89
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	8f 7d       	andi	r24, 0xDF	; 223
    104a:	8c 93       	st	X, r24
    104c:	02 c0       	rjmp	.+4      	; 0x1052 <TIMER1_u8Init+0x55c>
		}
		else{
			Local_u8ErrorState=NOK;
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	89 83       	std	Y+1, r24	; 0x01
		}

		//Initialize Prescaler
		TCCR1B&=PRESCALER_MASK;
    1052:	ae e4       	ldi	r26, 0x4E	; 78
    1054:	b0 e0       	ldi	r27, 0x00	; 0
    1056:	ee e4       	ldi	r30, 0x4E	; 78
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	80 81       	ld	r24, Z
    105c:	88 7f       	andi	r24, 0xF8	; 248
    105e:	8c 93       	st	X, r24
		TCCR1B|=Copy_psTimer->Prescaler;
    1060:	ae e4       	ldi	r26, 0x4E	; 78
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	ee e4       	ldi	r30, 0x4E	; 78
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	90 81       	ld	r25, Z
    106a:	ea 81       	ldd	r30, Y+2	; 0x02
    106c:	fb 81       	ldd	r31, Y+3	; 0x03
    106e:	81 81       	ldd	r24, Z+1	; 0x01
    1070:	89 2b       	or	r24, r25
    1072:	8c 93       	st	X, r24
    1074:	02 c0       	rjmp	.+4      	; 0x107a <TIMER1_u8Init+0x584>
	}
	else{
		Local_u8ErrorState=NULL_POINTER;
    1076:	82 e0       	ldi	r24, 0x02	; 2
    1078:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    107a:	89 81       	ldd	r24, Y+1	; 0x01

}
    107c:	0f 90       	pop	r0
    107e:	0f 90       	pop	r0
    1080:	0f 90       	pop	r0
    1082:	cf 91       	pop	r28
    1084:	df 91       	pop	r29
    1086:	08 95       	ret

00001088 <TIMER1_voidSetTopValue>:


void TIMER1_voidSetTopValue(u16 Copy_u16Value){
    1088:	df 93       	push	r29
    108a:	cf 93       	push	r28
    108c:	00 d0       	rcall	.+0      	; 0x108e <TIMER1_voidSetTopValue+0x6>
    108e:	cd b7       	in	r28, 0x3d	; 61
    1090:	de b7       	in	r29, 0x3e	; 62
    1092:	9a 83       	std	Y+2, r25	; 0x02
    1094:	89 83       	std	Y+1, r24	; 0x01
	ICR1=Copy_u16Value;
    1096:	e6 e4       	ldi	r30, 0x46	; 70
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	89 81       	ldd	r24, Y+1	; 0x01
    109c:	9a 81       	ldd	r25, Y+2	; 0x02
    109e:	91 83       	std	Z+1, r25	; 0x01
    10a0:	80 83       	st	Z, r24
}
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	cf 91       	pop	r28
    10a8:	df 91       	pop	r29
    10aa:	08 95       	ret

000010ac <TIMER_u8PWMGenerate>:

u8 TIMER_u8PWMGenerate(Timer1_t* Copy_psTimer,u8 Copy_u8ChannelID,u16 Copy_u16PeriodTime,u16 Copy_u16OnTime){
    10ac:	df 93       	push	r29
    10ae:	cf 93       	push	r28
    10b0:	cd b7       	in	r28, 0x3d	; 61
    10b2:	de b7       	in	r29, 0x3e	; 62
    10b4:	2a 97       	sbiw	r28, 0x0a	; 10
    10b6:	0f b6       	in	r0, 0x3f	; 63
    10b8:	f8 94       	cli
    10ba:	de bf       	out	0x3e, r29	; 62
    10bc:	0f be       	out	0x3f, r0	; 63
    10be:	cd bf       	out	0x3d, r28	; 61
    10c0:	9b 83       	std	Y+3, r25	; 0x03
    10c2:	8a 83       	std	Y+2, r24	; 0x02
    10c4:	6c 83       	std	Y+4, r22	; 0x04
    10c6:	5e 83       	std	Y+6, r21	; 0x06
    10c8:	4d 83       	std	Y+5, r20	; 0x05
    10ca:	38 87       	std	Y+8, r19	; 0x08
    10cc:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8ErrorState=OK;
    10ce:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_psTimer!=NULL){
    10d0:	8a 81       	ldd	r24, Y+2	; 0x02
    10d2:	9b 81       	ldd	r25, Y+3	; 0x03
    10d4:	00 97       	sbiw	r24, 0x00	; 0
    10d6:	09 f4       	brne	.+2      	; 0x10da <TIMER_u8PWMGenerate+0x2e>
    10d8:	8f c0       	rjmp	.+286    	; 0x11f8 <TIMER_u8PWMGenerate+0x14c>
		if((Copy_psTimer->WaveGenMode)==TIMER1_FAST_PWM_CUSTOM_TOP){
    10da:	ea 81       	ldd	r30, Y+2	; 0x02
    10dc:	fb 81       	ldd	r31, Y+3	; 0x03
    10de:	80 81       	ld	r24, Z
    10e0:	8e 30       	cpi	r24, 0x0E	; 14
    10e2:	09 f0       	breq	.+2      	; 0x10e6 <TIMER_u8PWMGenerate+0x3a>
    10e4:	86 c0       	rjmp	.+268    	; 0x11f2 <TIMER_u8PWMGenerate+0x146>

			switch(Copy_psTimer->Prescaler){
    10e6:	ea 81       	ldd	r30, Y+2	; 0x02
    10e8:	fb 81       	ldd	r31, Y+3	; 0x03
    10ea:	81 81       	ldd	r24, Z+1	; 0x01
    10ec:	28 2f       	mov	r18, r24
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	3a 87       	std	Y+10, r19	; 0x0a
    10f2:	29 87       	std	Y+9, r18	; 0x09
    10f4:	89 85       	ldd	r24, Y+9	; 0x09
    10f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    10f8:	83 30       	cpi	r24, 0x03	; 3
    10fa:	91 05       	cpc	r25, r1
    10fc:	79 f1       	breq	.+94     	; 0x115c <TIMER_u8PWMGenerate+0xb0>
    10fe:	29 85       	ldd	r18, Y+9	; 0x09
    1100:	3a 85       	ldd	r19, Y+10	; 0x0a
    1102:	24 30       	cpi	r18, 0x04	; 4
    1104:	31 05       	cpc	r19, r1
    1106:	5c f4       	brge	.+22     	; 0x111e <TIMER_u8PWMGenerate+0x72>
    1108:	89 85       	ldd	r24, Y+9	; 0x09
    110a:	9a 85       	ldd	r25, Y+10	; 0x0a
    110c:	81 30       	cpi	r24, 0x01	; 1
    110e:	91 05       	cpc	r25, r1
    1110:	89 f0       	breq	.+34     	; 0x1134 <TIMER_u8PWMGenerate+0x88>
    1112:	29 85       	ldd	r18, Y+9	; 0x09
    1114:	3a 85       	ldd	r19, Y+10	; 0x0a
    1116:	22 30       	cpi	r18, 0x02	; 2
    1118:	31 05       	cpc	r19, r1
    111a:	c9 f0       	breq	.+50     	; 0x114e <TIMER_u8PWMGenerate+0xa2>
    111c:	47 c0       	rjmp	.+142    	; 0x11ac <TIMER_u8PWMGenerate+0x100>
    111e:	89 85       	ldd	r24, Y+9	; 0x09
    1120:	9a 85       	ldd	r25, Y+10	; 0x0a
    1122:	84 30       	cpi	r24, 0x04	; 4
    1124:	91 05       	cpc	r25, r1
    1126:	39 f1       	breq	.+78     	; 0x1176 <TIMER_u8PWMGenerate+0xca>
    1128:	29 85       	ldd	r18, Y+9	; 0x09
    112a:	3a 85       	ldd	r19, Y+10	; 0x0a
    112c:	25 30       	cpi	r18, 0x05	; 5
    112e:	31 05       	cpc	r19, r1
    1130:	89 f1       	breq	.+98     	; 0x1194 <TIMER_u8PWMGenerate+0xe8>
    1132:	3c c0       	rjmp	.+120    	; 0x11ac <TIMER_u8PWMGenerate+0x100>
			case TIMER_DIV_BY_1    : ICR1 = Copy_u16PeriodTime*8   ; break;
    1134:	e6 e4       	ldi	r30, 0x46	; 70
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	8d 81       	ldd	r24, Y+5	; 0x05
    113a:	9e 81       	ldd	r25, Y+6	; 0x06
    113c:	88 0f       	add	r24, r24
    113e:	99 1f       	adc	r25, r25
    1140:	88 0f       	add	r24, r24
    1142:	99 1f       	adc	r25, r25
    1144:	88 0f       	add	r24, r24
    1146:	99 1f       	adc	r25, r25
    1148:	91 83       	std	Z+1, r25	; 0x01
    114a:	80 83       	st	Z, r24
    114c:	31 c0       	rjmp	.+98     	; 0x11b0 <TIMER_u8PWMGenerate+0x104>
			case TIMER_DIV_BY_8    : ICR1 = Copy_u16PeriodTime     ; break;
    114e:	e6 e4       	ldi	r30, 0x46	; 70
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	8d 81       	ldd	r24, Y+5	; 0x05
    1154:	9e 81       	ldd	r25, Y+6	; 0x06
    1156:	91 83       	std	Z+1, r25	; 0x01
    1158:	80 83       	st	Z, r24
    115a:	2a c0       	rjmp	.+84     	; 0x11b0 <TIMER_u8PWMGenerate+0x104>
			case TIMER_DIV_BY_64   : ICR1 = Copy_u16PeriodTime/8   ; break;
    115c:	e6 e4       	ldi	r30, 0x46	; 70
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	8d 81       	ldd	r24, Y+5	; 0x05
    1162:	9e 81       	ldd	r25, Y+6	; 0x06
    1164:	96 95       	lsr	r25
    1166:	87 95       	ror	r24
    1168:	96 95       	lsr	r25
    116a:	87 95       	ror	r24
    116c:	96 95       	lsr	r25
    116e:	87 95       	ror	r24
    1170:	91 83       	std	Z+1, r25	; 0x01
    1172:	80 83       	st	Z, r24
    1174:	1d c0       	rjmp	.+58     	; 0x11b0 <TIMER_u8PWMGenerate+0x104>
			case TIMER_DIV_BY_256  : ICR1 = Copy_u16PeriodTime/32  ; break;
    1176:	e6 e4       	ldi	r30, 0x46	; 70
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	8d 81       	ldd	r24, Y+5	; 0x05
    117c:	9e 81       	ldd	r25, Y+6	; 0x06
    117e:	96 95       	lsr	r25
    1180:	87 95       	ror	r24
    1182:	92 95       	swap	r25
    1184:	82 95       	swap	r24
    1186:	8f 70       	andi	r24, 0x0F	; 15
    1188:	89 27       	eor	r24, r25
    118a:	9f 70       	andi	r25, 0x0F	; 15
    118c:	89 27       	eor	r24, r25
    118e:	91 83       	std	Z+1, r25	; 0x01
    1190:	80 83       	st	Z, r24
    1192:	0e c0       	rjmp	.+28     	; 0x11b0 <TIMER_u8PWMGenerate+0x104>
			case TIMER_DIV_BY_1024 : ICR1 = Copy_u16PeriodTime/128 ; break;
    1194:	e6 e4       	ldi	r30, 0x46	; 70
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	8d 81       	ldd	r24, Y+5	; 0x05
    119a:	9e 81       	ldd	r25, Y+6	; 0x06
    119c:	88 0f       	add	r24, r24
    119e:	89 2f       	mov	r24, r25
    11a0:	88 1f       	adc	r24, r24
    11a2:	99 0b       	sbc	r25, r25
    11a4:	91 95       	neg	r25
    11a6:	91 83       	std	Z+1, r25	; 0x01
    11a8:	80 83       	st	Z, r24
    11aa:	02 c0       	rjmp	.+4      	; 0x11b0 <TIMER_u8PWMGenerate+0x104>
			default: Local_u8ErrorState=NOK;
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	89 83       	std	Y+1, r24	; 0x01
			}

			if(Copy_u16OnTime<=Copy_u16PeriodTime){
    11b0:	2f 81       	ldd	r18, Y+7	; 0x07
    11b2:	38 85       	ldd	r19, Y+8	; 0x08
    11b4:	8d 81       	ldd	r24, Y+5	; 0x05
    11b6:	9e 81       	ldd	r25, Y+6	; 0x06
    11b8:	82 17       	cp	r24, r18
    11ba:	93 07       	cpc	r25, r19
    11bc:	b8 f0       	brcs	.+46     	; 0x11ec <TIMER_u8PWMGenerate+0x140>
				if(Copy_u8ChannelID==CHANNEL_A){
    11be:	8c 81       	ldd	r24, Y+4	; 0x04
    11c0:	81 30       	cpi	r24, 0x01	; 1
    11c2:	39 f4       	brne	.+14     	; 0x11d2 <TIMER_u8PWMGenerate+0x126>
					OCR1A=Copy_u16OnTime;
    11c4:	ea e4       	ldi	r30, 0x4A	; 74
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	8f 81       	ldd	r24, Y+7	; 0x07
    11ca:	98 85       	ldd	r25, Y+8	; 0x08
    11cc:	91 83       	std	Z+1, r25	; 0x01
    11ce:	80 83       	st	Z, r24
    11d0:	15 c0       	rjmp	.+42     	; 0x11fc <TIMER_u8PWMGenerate+0x150>
				}
				else if(Copy_u8ChannelID==CHANNEL_B){
    11d2:	8c 81       	ldd	r24, Y+4	; 0x04
    11d4:	82 30       	cpi	r24, 0x02	; 2
    11d6:	39 f4       	brne	.+14     	; 0x11e6 <TIMER_u8PWMGenerate+0x13a>
					OCR1B=Copy_u16OnTime;
    11d8:	e8 e4       	ldi	r30, 0x48	; 72
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	8f 81       	ldd	r24, Y+7	; 0x07
    11de:	98 85       	ldd	r25, Y+8	; 0x08
    11e0:	91 83       	std	Z+1, r25	; 0x01
    11e2:	80 83       	st	Z, r24
    11e4:	0b c0       	rjmp	.+22     	; 0x11fc <TIMER_u8PWMGenerate+0x150>
				}
				else{
					Local_u8ErrorState=NOK;
    11e6:	81 e0       	ldi	r24, 0x01	; 1
    11e8:	89 83       	std	Y+1, r24	; 0x01
    11ea:	08 c0       	rjmp	.+16     	; 0x11fc <TIMER_u8PWMGenerate+0x150>
				}
			}
			else{
				Local_u8ErrorState=NOK;
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	89 83       	std	Y+1, r24	; 0x01
    11f0:	05 c0       	rjmp	.+10     	; 0x11fc <TIMER_u8PWMGenerate+0x150>

			}
		}
		else{
			Local_u8ErrorState=NOK;
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	89 83       	std	Y+1, r24	; 0x01
    11f6:	02 c0       	rjmp	.+4      	; 0x11fc <TIMER_u8PWMGenerate+0x150>
		}
	}
	else{
		Local_u8ErrorState=NULL_POINTER;
    11f8:	82 e0       	ldi	r24, 0x02	; 2
    11fa:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErrorState;
    11fc:	89 81       	ldd	r24, Y+1	; 0x01

}
    11fe:	2a 96       	adiw	r28, 0x0a	; 10
    1200:	0f b6       	in	r0, 0x3f	; 63
    1202:	f8 94       	cli
    1204:	de bf       	out	0x3e, r29	; 62
    1206:	0f be       	out	0x3f, r0	; 63
    1208:	cd bf       	out	0x3d, r28	; 61
    120a:	cf 91       	pop	r28
    120c:	df 91       	pop	r29
    120e:	08 95       	ret

00001210 <TIMER2_u8Init>:


/********************************************************TIMER2**********************************************************
 ************************************************************************************************************************/

u8 TIMER2_u8Init(Timer_t* Copy_psTimer){
    1210:	df 93       	push	r29
    1212:	cf 93       	push	r28
    1214:	00 d0       	rcall	.+0      	; 0x1216 <TIMER2_u8Init+0x6>
    1216:	0f 92       	push	r0
    1218:	cd b7       	in	r28, 0x3d	; 61
    121a:	de b7       	in	r29, 0x3e	; 62
    121c:	9b 83       	std	Y+3, r25	; 0x03
    121e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
    1220:	19 82       	std	Y+1, r1	; 0x01
	//Initialize Wave Generation Mode
	if(Copy_psTimer!=NULL){
    1222:	8a 81       	ldd	r24, Y+2	; 0x02
    1224:	9b 81       	ldd	r25, Y+3	; 0x03
    1226:	00 97       	sbiw	r24, 0x00	; 0
    1228:	09 f4       	brne	.+2      	; 0x122c <TIMER2_u8Init+0x1c>
    122a:	b6 c0       	rjmp	.+364    	; 0x1398 <TIMER2_u8Init+0x188>
		if(Copy_psTimer->WaveGenMode==TIMER_NORMAL){
    122c:	ea 81       	ldd	r30, Y+2	; 0x02
    122e:	fb 81       	ldd	r31, Y+3	; 0x03
    1230:	80 81       	ld	r24, Z
    1232:	81 30       	cpi	r24, 0x01	; 1
    1234:	79 f4       	brne	.+30     	; 0x1254 <TIMER2_u8Init+0x44>
			CLR_BIT(TCCR2,TCCR2_WGM21);
    1236:	a5 e4       	ldi	r26, 0x45	; 69
    1238:	b0 e0       	ldi	r27, 0x00	; 0
    123a:	e5 e4       	ldi	r30, 0x45	; 69
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	80 81       	ld	r24, Z
    1240:	87 7f       	andi	r24, 0xF7	; 247
    1242:	8c 93       	st	X, r24
			CLR_BIT(TCCR2,TCCR2_WGM20);
    1244:	a5 e4       	ldi	r26, 0x45	; 69
    1246:	b0 e0       	ldi	r27, 0x00	; 0
    1248:	e5 e4       	ldi	r30, 0x45	; 69
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	80 81       	ld	r24, Z
    124e:	8f 7b       	andi	r24, 0xBF	; 191
    1250:	8c 93       	st	X, r24
    1252:	3e c0       	rjmp	.+124    	; 0x12d0 <TIMER2_u8Init+0xc0>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER_PHC_PWM){
    1254:	ea 81       	ldd	r30, Y+2	; 0x02
    1256:	fb 81       	ldd	r31, Y+3	; 0x03
    1258:	80 81       	ld	r24, Z
    125a:	82 30       	cpi	r24, 0x02	; 2
    125c:	79 f4       	brne	.+30     	; 0x127c <TIMER2_u8Init+0x6c>
			CLR_BIT(TCCR2,TCCR2_WGM21);
    125e:	a5 e4       	ldi	r26, 0x45	; 69
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	e5 e4       	ldi	r30, 0x45	; 69
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	87 7f       	andi	r24, 0xF7	; 247
    126a:	8c 93       	st	X, r24
			SET_BIT(TCCR2,TCCR2_WGM20);
    126c:	a5 e4       	ldi	r26, 0x45	; 69
    126e:	b0 e0       	ldi	r27, 0x00	; 0
    1270:	e5 e4       	ldi	r30, 0x45	; 69
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	80 64       	ori	r24, 0x40	; 64
    1278:	8c 93       	st	X, r24
    127a:	2a c0       	rjmp	.+84     	; 0x12d0 <TIMER2_u8Init+0xc0>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER_CTC){
    127c:	ea 81       	ldd	r30, Y+2	; 0x02
    127e:	fb 81       	ldd	r31, Y+3	; 0x03
    1280:	80 81       	ld	r24, Z
    1282:	83 30       	cpi	r24, 0x03	; 3
    1284:	79 f4       	brne	.+30     	; 0x12a4 <TIMER2_u8Init+0x94>
			SET_BIT(TCCR2,TCCR2_WGM21);
    1286:	a5 e4       	ldi	r26, 0x45	; 69
    1288:	b0 e0       	ldi	r27, 0x00	; 0
    128a:	e5 e4       	ldi	r30, 0x45	; 69
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	88 60       	ori	r24, 0x08	; 8
    1292:	8c 93       	st	X, r24
			CLR_BIT(TCCR2,TCCR2_WGM20);
    1294:	a5 e4       	ldi	r26, 0x45	; 69
    1296:	b0 e0       	ldi	r27, 0x00	; 0
    1298:	e5 e4       	ldi	r30, 0x45	; 69
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	80 81       	ld	r24, Z
    129e:	8f 7b       	andi	r24, 0xBF	; 191
    12a0:	8c 93       	st	X, r24
    12a2:	16 c0       	rjmp	.+44     	; 0x12d0 <TIMER2_u8Init+0xc0>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER_FAST_PWM){
    12a4:	ea 81       	ldd	r30, Y+2	; 0x02
    12a6:	fb 81       	ldd	r31, Y+3	; 0x03
    12a8:	80 81       	ld	r24, Z
    12aa:	84 30       	cpi	r24, 0x04	; 4
    12ac:	79 f4       	brne	.+30     	; 0x12cc <TIMER2_u8Init+0xbc>
			SET_BIT(TCCR2,TCCR2_WGM21);
    12ae:	a5 e4       	ldi	r26, 0x45	; 69
    12b0:	b0 e0       	ldi	r27, 0x00	; 0
    12b2:	e5 e4       	ldi	r30, 0x45	; 69
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	80 81       	ld	r24, Z
    12b8:	88 60       	ori	r24, 0x08	; 8
    12ba:	8c 93       	st	X, r24
			SET_BIT(TCCR2,TCCR2_WGM20);
    12bc:	a5 e4       	ldi	r26, 0x45	; 69
    12be:	b0 e0       	ldi	r27, 0x00	; 0
    12c0:	e5 e4       	ldi	r30, 0x45	; 69
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	80 81       	ld	r24, Z
    12c6:	80 64       	ori	r24, 0x40	; 64
    12c8:	8c 93       	st	X, r24
    12ca:	02 c0       	rjmp	.+4      	; 0x12d0 <TIMER2_u8Init+0xc0>
		}
		else{
			Local_u8ErrorState=NOK;
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	89 83       	std	Y+1, r24	; 0x01
		}
		//Initialize Compare Match Output Mode
		TCCR2&=COMP_MATCH_OUT_MASK;
    12d0:	a5 e4       	ldi	r26, 0x45	; 69
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	e5 e4       	ldi	r30, 0x45	; 69
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	8f 7c       	andi	r24, 0xCF	; 207
    12dc:	8c 93       	st	X, r24
		TCCR2|=((Copy_psTimer->CompareMatchOutputMode)<<4);
    12de:	a5 e4       	ldi	r26, 0x45	; 69
    12e0:	b0 e0       	ldi	r27, 0x00	; 0
    12e2:	e5 e4       	ldi	r30, 0x45	; 69
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	80 81       	ld	r24, Z
    12e8:	28 2f       	mov	r18, r24
    12ea:	ea 81       	ldd	r30, Y+2	; 0x02
    12ec:	fb 81       	ldd	r31, Y+3	; 0x03
    12ee:	82 81       	ldd	r24, Z+2	; 0x02
    12f0:	88 2f       	mov	r24, r24
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	82 95       	swap	r24
    12f6:	92 95       	swap	r25
    12f8:	90 7f       	andi	r25, 0xF0	; 240
    12fa:	98 27       	eor	r25, r24
    12fc:	80 7f       	andi	r24, 0xF0	; 240
    12fe:	98 27       	eor	r25, r24
    1300:	82 2b       	or	r24, r18
    1302:	8c 93       	st	X, r24
		//Initialize Interrupt Enable pins
		if(Copy_psTimer->CompareMatchInterrupt==INT_ENABLE){
    1304:	ea 81       	ldd	r30, Y+2	; 0x02
    1306:	fb 81       	ldd	r31, Y+3	; 0x03
    1308:	83 81       	ldd	r24, Z+3	; 0x03
    130a:	81 30       	cpi	r24, 0x01	; 1
    130c:	41 f4       	brne	.+16     	; 0x131e <TIMER2_u8Init+0x10e>
			SET_BIT(TIMSK,TIMSK_OCIE2);
    130e:	a9 e5       	ldi	r26, 0x59	; 89
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	e9 e5       	ldi	r30, 0x59	; 89
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	80 68       	ori	r24, 0x80	; 128
    131a:	8c 93       	st	X, r24
    131c:	0f c0       	rjmp	.+30     	; 0x133c <TIMER2_u8Init+0x12c>
		}
		else if(Copy_psTimer->CompareMatchInterrupt==INT_DISABLE){
    131e:	ea 81       	ldd	r30, Y+2	; 0x02
    1320:	fb 81       	ldd	r31, Y+3	; 0x03
    1322:	83 81       	ldd	r24, Z+3	; 0x03
    1324:	82 30       	cpi	r24, 0x02	; 2
    1326:	41 f4       	brne	.+16     	; 0x1338 <TIMER2_u8Init+0x128>
			CLR_BIT(TIMSK,TIMSK_OCIE2);
    1328:	a9 e5       	ldi	r26, 0x59	; 89
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	e9 e5       	ldi	r30, 0x59	; 89
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	8f 77       	andi	r24, 0x7F	; 127
    1334:	8c 93       	st	X, r24
    1336:	02 c0       	rjmp	.+4      	; 0x133c <TIMER2_u8Init+0x12c>
		}
		else{
			Local_u8ErrorState=NOK;
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	89 83       	std	Y+1, r24	; 0x01
		}

		if(Copy_psTimer->OverFlowInterrupt==INT_ENABLE){
    133c:	ea 81       	ldd	r30, Y+2	; 0x02
    133e:	fb 81       	ldd	r31, Y+3	; 0x03
    1340:	84 81       	ldd	r24, Z+4	; 0x04
    1342:	81 30       	cpi	r24, 0x01	; 1
    1344:	41 f4       	brne	.+16     	; 0x1356 <TIMER2_u8Init+0x146>
			SET_BIT(TIMSK,TIMSK_TOIE2);
    1346:	a9 e5       	ldi	r26, 0x59	; 89
    1348:	b0 e0       	ldi	r27, 0x00	; 0
    134a:	e9 e5       	ldi	r30, 0x59	; 89
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	80 81       	ld	r24, Z
    1350:	80 64       	ori	r24, 0x40	; 64
    1352:	8c 93       	st	X, r24
    1354:	0f c0       	rjmp	.+30     	; 0x1374 <TIMER2_u8Init+0x164>
		}
		else if(Copy_psTimer->OverFlowInterrupt==INT_DISABLE){
    1356:	ea 81       	ldd	r30, Y+2	; 0x02
    1358:	fb 81       	ldd	r31, Y+3	; 0x03
    135a:	84 81       	ldd	r24, Z+4	; 0x04
    135c:	82 30       	cpi	r24, 0x02	; 2
    135e:	41 f4       	brne	.+16     	; 0x1370 <TIMER2_u8Init+0x160>
			CLR_BIT(TIMSK,TIMSK_TOIE2);
    1360:	a9 e5       	ldi	r26, 0x59	; 89
    1362:	b0 e0       	ldi	r27, 0x00	; 0
    1364:	e9 e5       	ldi	r30, 0x59	; 89
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	80 81       	ld	r24, Z
    136a:	8f 7b       	andi	r24, 0xBF	; 191
    136c:	8c 93       	st	X, r24
    136e:	02 c0       	rjmp	.+4      	; 0x1374 <TIMER2_u8Init+0x164>
		}
		else{
			Local_u8ErrorState=NOK;
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	89 83       	std	Y+1, r24	; 0x01
		}

		//Initialize Prescaler
		TCCR2&=PRESCALER_MASK;
    1374:	a5 e4       	ldi	r26, 0x45	; 69
    1376:	b0 e0       	ldi	r27, 0x00	; 0
    1378:	e5 e4       	ldi	r30, 0x45	; 69
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	80 81       	ld	r24, Z
    137e:	88 7f       	andi	r24, 0xF8	; 248
    1380:	8c 93       	st	X, r24
		TCCR2|=Copy_psTimer->Prescaler;
    1382:	a5 e4       	ldi	r26, 0x45	; 69
    1384:	b0 e0       	ldi	r27, 0x00	; 0
    1386:	e5 e4       	ldi	r30, 0x45	; 69
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	90 81       	ld	r25, Z
    138c:	ea 81       	ldd	r30, Y+2	; 0x02
    138e:	fb 81       	ldd	r31, Y+3	; 0x03
    1390:	81 81       	ldd	r24, Z+1	; 0x01
    1392:	89 2b       	or	r24, r25
    1394:	8c 93       	st	X, r24
    1396:	02 c0       	rjmp	.+4      	; 0x139c <TIMER2_u8Init+0x18c>
	}
	else{
		Local_u8ErrorState=NULL_POINTER;
    1398:	82 e0       	ldi	r24, 0x02	; 2
    139a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    139c:	89 81       	ldd	r24, Y+1	; 0x01
}
    139e:	0f 90       	pop	r0
    13a0:	0f 90       	pop	r0
    13a2:	0f 90       	pop	r0
    13a4:	cf 91       	pop	r28
    13a6:	df 91       	pop	r29
    13a8:	08 95       	ret

000013aa <TIMER2_delay_ms>:

u8 TIMER2_delay_ms(Timer_t* Copy_psTimer,u16 Copy_u16Time){
    13aa:	df 93       	push	r29
    13ac:	cf 93       	push	r28
    13ae:	cd b7       	in	r28, 0x3d	; 61
    13b0:	de b7       	in	r29, 0x3e	; 62
    13b2:	6a 97       	sbiw	r28, 0x1a	; 26
    13b4:	0f b6       	in	r0, 0x3f	; 63
    13b6:	f8 94       	cli
    13b8:	de bf       	out	0x3e, r29	; 62
    13ba:	0f be       	out	0x3f, r0	; 63
    13bc:	cd bf       	out	0x3d, r28	; 61
    13be:	9b 8b       	std	Y+19, r25	; 0x13
    13c0:	8a 8b       	std	Y+18, r24	; 0x12
    13c2:	7d 8b       	std	Y+21, r23	; 0x15
    13c4:	6c 8b       	std	Y+20, r22	; 0x14
	u8 Local_u8ErrorState=OK,Local_u8Break=1; u16 Local_u16Counter=0;u32 Local_u32usTime,Local_u32CompMatchCount;
    13c6:	1c 86       	std	Y+12, r1	; 0x0c
    13c8:	81 e0       	ldi	r24, 0x01	; 1
    13ca:	8b 87       	std	Y+11, r24	; 0x0b
    13cc:	1a 86       	std	Y+10, r1	; 0x0a
    13ce:	19 86       	std	Y+9, r1	; 0x09
	if(Copy_psTimer!=NULL){
    13d0:	8a 89       	ldd	r24, Y+18	; 0x12
    13d2:	9b 89       	ldd	r25, Y+19	; 0x13
    13d4:	00 97       	sbiw	r24, 0x00	; 0
    13d6:	09 f4       	brne	.+2      	; 0x13da <TIMER2_delay_ms+0x30>
    13d8:	82 c0       	rjmp	.+260    	; 0x14de <TIMER2_delay_ms+0x134>
		Timer_t Timer ={TIMER_CTC,TIMER_DIV_BY_8,TIMER_DISCONNECT,INT_DISABLE,INT_DISABLE};
    13da:	ce 01       	movw	r24, r28
    13dc:	0d 96       	adiw	r24, 0x0d	; 13
    13de:	9f 8b       	std	Y+23, r25	; 0x17
    13e0:	8e 8b       	std	Y+22, r24	; 0x16
    13e2:	e0 e6       	ldi	r30, 0x60	; 96
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	f9 8f       	std	Y+25, r31	; 0x19
    13e8:	e8 8f       	std	Y+24, r30	; 0x18
    13ea:	f5 e0       	ldi	r31, 0x05	; 5
    13ec:	fa 8f       	std	Y+26, r31	; 0x1a
    13ee:	e8 8d       	ldd	r30, Y+24	; 0x18
    13f0:	f9 8d       	ldd	r31, Y+25	; 0x19
    13f2:	00 80       	ld	r0, Z
    13f4:	88 8d       	ldd	r24, Y+24	; 0x18
    13f6:	99 8d       	ldd	r25, Y+25	; 0x19
    13f8:	01 96       	adiw	r24, 0x01	; 1
    13fa:	99 8f       	std	Y+25, r25	; 0x19
    13fc:	88 8f       	std	Y+24, r24	; 0x18
    13fe:	ee 89       	ldd	r30, Y+22	; 0x16
    1400:	ff 89       	ldd	r31, Y+23	; 0x17
    1402:	00 82       	st	Z, r0
    1404:	8e 89       	ldd	r24, Y+22	; 0x16
    1406:	9f 89       	ldd	r25, Y+23	; 0x17
    1408:	01 96       	adiw	r24, 0x01	; 1
    140a:	9f 8b       	std	Y+23, r25	; 0x17
    140c:	8e 8b       	std	Y+22, r24	; 0x16
    140e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1410:	91 50       	subi	r25, 0x01	; 1
    1412:	9a 8f       	std	Y+26, r25	; 0x1a
    1414:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1416:	ee 23       	and	r30, r30
    1418:	51 f7       	brne	.-44     	; 0x13ee <TIMER2_delay_ms+0x44>
		TIMER2_u8Init(&Timer);
    141a:	ce 01       	movw	r24, r28
    141c:	0d 96       	adiw	r24, 0x0d	; 13
    141e:	0e 94 08 09 	call	0x1210	; 0x1210 <TIMER2_u8Init>
		TIMER_u8SetCompMatch(TIMER2,250);
    1422:	83 e0       	ldi	r24, 0x03	; 3
    1424:	6a ef       	ldi	r22, 0xFA	; 250
    1426:	70 e0       	ldi	r23, 0x00	; 0
    1428:	0e 94 ee 03 	call	0x7dc	; 0x7dc <TIMER_u8SetCompMatch>
		Local_u32usTime=(u32)Copy_u16Time*1000UL;
    142c:	8c 89       	ldd	r24, Y+20	; 0x14
    142e:	9d 89       	ldd	r25, Y+21	; 0x15
    1430:	cc 01       	movw	r24, r24
    1432:	a0 e0       	ldi	r26, 0x00	; 0
    1434:	b0 e0       	ldi	r27, 0x00	; 0
    1436:	28 ee       	ldi	r18, 0xE8	; 232
    1438:	33 e0       	ldi	r19, 0x03	; 3
    143a:	40 e0       	ldi	r20, 0x00	; 0
    143c:	50 e0       	ldi	r21, 0x00	; 0
    143e:	bc 01       	movw	r22, r24
    1440:	cd 01       	movw	r24, r26
    1442:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <__mulsi3>
    1446:	dc 01       	movw	r26, r24
    1448:	cb 01       	movw	r24, r22
    144a:	8d 83       	std	Y+5, r24	; 0x05
    144c:	9e 83       	std	Y+6, r25	; 0x06
    144e:	af 83       	std	Y+7, r26	; 0x07
    1450:	b8 87       	std	Y+8, r27	; 0x08
		Local_u32CompMatchCount=Local_u32usTime/250;
    1452:	8d 81       	ldd	r24, Y+5	; 0x05
    1454:	9e 81       	ldd	r25, Y+6	; 0x06
    1456:	af 81       	ldd	r26, Y+7	; 0x07
    1458:	b8 85       	ldd	r27, Y+8	; 0x08
    145a:	2a ef       	ldi	r18, 0xFA	; 250
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	40 e0       	ldi	r20, 0x00	; 0
    1460:	50 e0       	ldi	r21, 0x00	; 0
    1462:	bc 01       	movw	r22, r24
    1464:	cd 01       	movw	r24, r26
    1466:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <__udivmodsi4>
    146a:	da 01       	movw	r26, r20
    146c:	c9 01       	movw	r24, r18
    146e:	89 83       	std	Y+1, r24	; 0x01
    1470:	9a 83       	std	Y+2, r25	; 0x02
    1472:	ab 83       	std	Y+3, r26	; 0x03
    1474:	bc 83       	std	Y+4, r27	; 0x04
    1476:	2b c0       	rjmp	.+86     	; 0x14ce <TIMER2_delay_ms+0x124>
		while(Local_u8Break==1){
			if(GET_BIT(TIFR,TIFR_OCF2)==1){
    1478:	e8 e5       	ldi	r30, 0x58	; 88
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	80 81       	ld	r24, Z
    147e:	88 1f       	adc	r24, r24
    1480:	88 27       	eor	r24, r24
    1482:	88 1f       	adc	r24, r24
    1484:	81 30       	cpi	r24, 0x01	; 1
    1486:	19 f5       	brne	.+70     	; 0x14ce <TIMER2_delay_ms+0x124>
				if(Local_u16Counter==Local_u32CompMatchCount){
    1488:	89 85       	ldd	r24, Y+9	; 0x09
    148a:	9a 85       	ldd	r25, Y+10	; 0x0a
    148c:	9c 01       	movw	r18, r24
    148e:	40 e0       	ldi	r20, 0x00	; 0
    1490:	50 e0       	ldi	r21, 0x00	; 0
    1492:	89 81       	ldd	r24, Y+1	; 0x01
    1494:	9a 81       	ldd	r25, Y+2	; 0x02
    1496:	ab 81       	ldd	r26, Y+3	; 0x03
    1498:	bc 81       	ldd	r27, Y+4	; 0x04
    149a:	28 17       	cp	r18, r24
    149c:	39 07       	cpc	r19, r25
    149e:	4a 07       	cpc	r20, r26
    14a0:	5b 07       	cpc	r21, r27
    14a2:	49 f4       	brne	.+18     	; 0x14b6 <TIMER2_delay_ms+0x10c>
					Local_u8Break=0;
    14a4:	1b 86       	std	Y+11, r1	; 0x0b
					SET_BIT(TIFR,TIFR_OCF2);
    14a6:	a8 e5       	ldi	r26, 0x58	; 88
    14a8:	b0 e0       	ldi	r27, 0x00	; 0
    14aa:	e8 e5       	ldi	r30, 0x58	; 88
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	80 81       	ld	r24, Z
    14b0:	80 68       	ori	r24, 0x80	; 128
    14b2:	8c 93       	st	X, r24
    14b4:	0c c0       	rjmp	.+24     	; 0x14ce <TIMER2_delay_ms+0x124>
				}
				else{
					Local_u16Counter++;
    14b6:	89 85       	ldd	r24, Y+9	; 0x09
    14b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    14ba:	01 96       	adiw	r24, 0x01	; 1
    14bc:	9a 87       	std	Y+10, r25	; 0x0a
    14be:	89 87       	std	Y+9, r24	; 0x09
					SET_BIT(TIFR,TIFR_OCF2);
    14c0:	a8 e5       	ldi	r26, 0x58	; 88
    14c2:	b0 e0       	ldi	r27, 0x00	; 0
    14c4:	e8 e5       	ldi	r30, 0x58	; 88
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	80 81       	ld	r24, Z
    14ca:	80 68       	ori	r24, 0x80	; 128
    14cc:	8c 93       	st	X, r24
		Timer_t Timer ={TIMER_CTC,TIMER_DIV_BY_8,TIMER_DISCONNECT,INT_DISABLE,INT_DISABLE};
		TIMER2_u8Init(&Timer);
		TIMER_u8SetCompMatch(TIMER2,250);
		Local_u32usTime=(u32)Copy_u16Time*1000UL;
		Local_u32CompMatchCount=Local_u32usTime/250;
		while(Local_u8Break==1){
    14ce:	8b 85       	ldd	r24, Y+11	; 0x0b
    14d0:	81 30       	cpi	r24, 0x01	; 1
    14d2:	91 f2       	breq	.-92     	; 0x1478 <TIMER2_delay_ms+0xce>
					Local_u16Counter++;
					SET_BIT(TIFR,TIFR_OCF2);
				}
			}
		}
		TIMER2_u8Init(Copy_psTimer);
    14d4:	8a 89       	ldd	r24, Y+18	; 0x12
    14d6:	9b 89       	ldd	r25, Y+19	; 0x13
    14d8:	0e 94 08 09 	call	0x1210	; 0x1210 <TIMER2_u8Init>
    14dc:	02 c0       	rjmp	.+4      	; 0x14e2 <TIMER2_delay_ms+0x138>

	}
	else{
		Local_u8ErrorState=NULL_POINTER;
    14de:	82 e0       	ldi	r24, 0x02	; 2
    14e0:	8c 87       	std	Y+12, r24	; 0x0c
	}
	return Local_u8ErrorState;
    14e2:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    14e4:	6a 96       	adiw	r28, 0x1a	; 26
    14e6:	0f b6       	in	r0, 0x3f	; 63
    14e8:	f8 94       	cli
    14ea:	de bf       	out	0x3e, r29	; 62
    14ec:	0f be       	out	0x3f, r0	; 63
    14ee:	cd bf       	out	0x3d, r28	; 61
    14f0:	cf 91       	pop	r28
    14f2:	df 91       	pop	r29
    14f4:	08 95       	ret

000014f6 <TIMER_u8SetCallBack>:


/********************************************************ISRs************************************************************
 ************************************************************************************************************************/

u8 TIMER_u8SetCallBack(u8 Copy_u8InterruptID,void(*Copy_pvCallBackFunc)(void)){
    14f6:	df 93       	push	r29
    14f8:	cf 93       	push	r28
    14fa:	00 d0       	rcall	.+0      	; 0x14fc <TIMER_u8SetCallBack+0x6>
    14fc:	00 d0       	rcall	.+0      	; 0x14fe <TIMER_u8SetCallBack+0x8>
    14fe:	00 d0       	rcall	.+0      	; 0x1500 <TIMER_u8SetCallBack+0xa>
    1500:	cd b7       	in	r28, 0x3d	; 61
    1502:	de b7       	in	r29, 0x3e	; 62
    1504:	8a 83       	std	Y+2, r24	; 0x02
    1506:	7c 83       	std	Y+4, r23	; 0x04
    1508:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=OK;
    150a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvCallBackFunc!=NULL){
    150c:	8b 81       	ldd	r24, Y+3	; 0x03
    150e:	9c 81       	ldd	r25, Y+4	; 0x04
    1510:	00 97       	sbiw	r24, 0x00	; 0
    1512:	09 f4       	brne	.+2      	; 0x1516 <TIMER_u8SetCallBack+0x20>
    1514:	70 c0       	rjmp	.+224    	; 0x15f6 <TIMER_u8SetCallBack+0x100>
		switch(Copy_u8InterruptID){
    1516:	8a 81       	ldd	r24, Y+2	; 0x02
    1518:	28 2f       	mov	r18, r24
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	3e 83       	std	Y+6, r19	; 0x06
    151e:	2d 83       	std	Y+5, r18	; 0x05
    1520:	8d 81       	ldd	r24, Y+5	; 0x05
    1522:	9e 81       	ldd	r25, Y+6	; 0x06
    1524:	84 30       	cpi	r24, 0x04	; 4
    1526:	91 05       	cpc	r25, r1
    1528:	09 f4       	brne	.+2      	; 0x152c <TIMER_u8SetCallBack+0x36>
    152a:	3f c0       	rjmp	.+126    	; 0x15aa <TIMER_u8SetCallBack+0xb4>
    152c:	2d 81       	ldd	r18, Y+5	; 0x05
    152e:	3e 81       	ldd	r19, Y+6	; 0x06
    1530:	25 30       	cpi	r18, 0x05	; 5
    1532:	31 05       	cpc	r19, r1
    1534:	84 f4       	brge	.+32     	; 0x1556 <TIMER_u8SetCallBack+0x60>
    1536:	8d 81       	ldd	r24, Y+5	; 0x05
    1538:	9e 81       	ldd	r25, Y+6	; 0x06
    153a:	82 30       	cpi	r24, 0x02	; 2
    153c:	91 05       	cpc	r25, r1
    153e:	39 f1       	breq	.+78     	; 0x158e <TIMER_u8SetCallBack+0x98>
    1540:	2d 81       	ldd	r18, Y+5	; 0x05
    1542:	3e 81       	ldd	r19, Y+6	; 0x06
    1544:	23 30       	cpi	r18, 0x03	; 3
    1546:	31 05       	cpc	r19, r1
    1548:	4c f5       	brge	.+82     	; 0x159c <TIMER_u8SetCallBack+0xa6>
    154a:	8d 81       	ldd	r24, Y+5	; 0x05
    154c:	9e 81       	ldd	r25, Y+6	; 0x06
    154e:	81 30       	cpi	r24, 0x01	; 1
    1550:	91 05       	cpc	r25, r1
    1552:	b1 f0       	breq	.+44     	; 0x1580 <TIMER_u8SetCallBack+0x8a>
    1554:	4d c0       	rjmp	.+154    	; 0x15f0 <TIMER_u8SetCallBack+0xfa>
    1556:	2d 81       	ldd	r18, Y+5	; 0x05
    1558:	3e 81       	ldd	r19, Y+6	; 0x06
    155a:	26 30       	cpi	r18, 0x06	; 6
    155c:	31 05       	cpc	r19, r1
    155e:	99 f1       	breq	.+102    	; 0x15c6 <TIMER_u8SetCallBack+0xd0>
    1560:	8d 81       	ldd	r24, Y+5	; 0x05
    1562:	9e 81       	ldd	r25, Y+6	; 0x06
    1564:	86 30       	cpi	r24, 0x06	; 6
    1566:	91 05       	cpc	r25, r1
    1568:	3c f1       	brlt	.+78     	; 0x15b8 <TIMER_u8SetCallBack+0xc2>
    156a:	2d 81       	ldd	r18, Y+5	; 0x05
    156c:	3e 81       	ldd	r19, Y+6	; 0x06
    156e:	27 30       	cpi	r18, 0x07	; 7
    1570:	31 05       	cpc	r19, r1
    1572:	81 f1       	breq	.+96     	; 0x15d4 <TIMER_u8SetCallBack+0xde>
    1574:	8d 81       	ldd	r24, Y+5	; 0x05
    1576:	9e 81       	ldd	r25, Y+6	; 0x06
    1578:	88 30       	cpi	r24, 0x08	; 8
    157a:	91 05       	cpc	r25, r1
    157c:	91 f1       	breq	.+100    	; 0x15e2 <TIMER_u8SetCallBack+0xec>
    157e:	38 c0       	rjmp	.+112    	; 0x15f0 <TIMER_u8SetCallBack+0xfa>
		case TIMER0_OVF  : TIMER0_pvOVFCallBackFunc   = Copy_pvCallBackFunc; break;
    1580:	8b 81       	ldd	r24, Y+3	; 0x03
    1582:	9c 81       	ldd	r25, Y+4	; 0x04
    1584:	90 93 73 00 	sts	0x0073, r25
    1588:	80 93 72 00 	sts	0x0072, r24
    158c:	36 c0       	rjmp	.+108    	; 0x15fa <TIMER_u8SetCallBack+0x104>
		case TIMER0_COMP : TIMER0_pvCOMPCallBackFunc  = Copy_pvCallBackFunc; break;
    158e:	8b 81       	ldd	r24, Y+3	; 0x03
    1590:	9c 81       	ldd	r25, Y+4	; 0x04
    1592:	90 93 75 00 	sts	0x0075, r25
    1596:	80 93 74 00 	sts	0x0074, r24
    159a:	2f c0       	rjmp	.+94     	; 0x15fa <TIMER_u8SetCallBack+0x104>
		case TIMER1_OVF  : TIMER1_pvOVFCallBackFunc   = Copy_pvCallBackFunc; break;
    159c:	8b 81       	ldd	r24, Y+3	; 0x03
    159e:	9c 81       	ldd	r25, Y+4	; 0x04
    15a0:	90 93 77 00 	sts	0x0077, r25
    15a4:	80 93 76 00 	sts	0x0076, r24
    15a8:	28 c0       	rjmp	.+80     	; 0x15fa <TIMER_u8SetCallBack+0x104>
		case TIMER1_CAPT : TIMER1_pvCAPTCallBackFunc  = Copy_pvCallBackFunc; break;
    15aa:	8b 81       	ldd	r24, Y+3	; 0x03
    15ac:	9c 81       	ldd	r25, Y+4	; 0x04
    15ae:	90 93 79 00 	sts	0x0079, r25
    15b2:	80 93 78 00 	sts	0x0078, r24
    15b6:	21 c0       	rjmp	.+66     	; 0x15fa <TIMER_u8SetCallBack+0x104>
		case TIMER1A_COMP: TIMER1A_pvCOMPCallBackFunc = Copy_pvCallBackFunc; break;
    15b8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ba:	9c 81       	ldd	r25, Y+4	; 0x04
    15bc:	90 93 7b 00 	sts	0x007B, r25
    15c0:	80 93 7a 00 	sts	0x007A, r24
    15c4:	1a c0       	rjmp	.+52     	; 0x15fa <TIMER_u8SetCallBack+0x104>
		case TIMER1B_COMP: TIMER1B_pvCOMPCallBackFunc = Copy_pvCallBackFunc; break;
    15c6:	8b 81       	ldd	r24, Y+3	; 0x03
    15c8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ca:	90 93 7d 00 	sts	0x007D, r25
    15ce:	80 93 7c 00 	sts	0x007C, r24
    15d2:	13 c0       	rjmp	.+38     	; 0x15fa <TIMER_u8SetCallBack+0x104>
		case TIMER2_OVF	 : TIMER2_pvOVFCallBackFunc   = Copy_pvCallBackFunc; break;
    15d4:	8b 81       	ldd	r24, Y+3	; 0x03
    15d6:	9c 81       	ldd	r25, Y+4	; 0x04
    15d8:	90 93 7f 00 	sts	0x007F, r25
    15dc:	80 93 7e 00 	sts	0x007E, r24
    15e0:	0c c0       	rjmp	.+24     	; 0x15fa <TIMER_u8SetCallBack+0x104>
		case TIMER2_COMP : TIMER2_pvCOMPCallBackFunc  = Copy_pvCallBackFunc; break;
    15e2:	8b 81       	ldd	r24, Y+3	; 0x03
    15e4:	9c 81       	ldd	r25, Y+4	; 0x04
    15e6:	90 93 81 00 	sts	0x0081, r25
    15ea:	80 93 80 00 	sts	0x0080, r24
    15ee:	05 c0       	rjmp	.+10     	; 0x15fa <TIMER_u8SetCallBack+0x104>
		default: Local_u8ErrorState=NOK;
    15f0:	81 e0       	ldi	r24, 0x01	; 1
    15f2:	89 83       	std	Y+1, r24	; 0x01
    15f4:	02 c0       	rjmp	.+4      	; 0x15fa <TIMER_u8SetCallBack+0x104>
		}
	}
	else{
		Local_u8ErrorState=NULL_POINTER;
    15f6:	82 e0       	ldi	r24, 0x02	; 2
    15f8:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    15fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    15fc:	26 96       	adiw	r28, 0x06	; 6
    15fe:	0f b6       	in	r0, 0x3f	; 63
    1600:	f8 94       	cli
    1602:	de bf       	out	0x3e, r29	; 62
    1604:	0f be       	out	0x3f, r0	; 63
    1606:	cd bf       	out	0x3d, r28	; 61
    1608:	cf 91       	pop	r28
    160a:	df 91       	pop	r29
    160c:	08 95       	ret

0000160e <__vector_4>:



//TIMER2 Compare Match ISR
void __vector_4(void)  __attribute__((signal));
void __vector_4(void){
    160e:	1f 92       	push	r1
    1610:	0f 92       	push	r0
    1612:	0f b6       	in	r0, 0x3f	; 63
    1614:	0f 92       	push	r0
    1616:	11 24       	eor	r1, r1
    1618:	2f 93       	push	r18
    161a:	3f 93       	push	r19
    161c:	4f 93       	push	r20
    161e:	5f 93       	push	r21
    1620:	6f 93       	push	r22
    1622:	7f 93       	push	r23
    1624:	8f 93       	push	r24
    1626:	9f 93       	push	r25
    1628:	af 93       	push	r26
    162a:	bf 93       	push	r27
    162c:	ef 93       	push	r30
    162e:	ff 93       	push	r31
    1630:	df 93       	push	r29
    1632:	cf 93       	push	r28
    1634:	cd b7       	in	r28, 0x3d	; 61
    1636:	de b7       	in	r29, 0x3e	; 62
	if(TIMER2_pvCOMPCallBackFunc!=NULL){
    1638:	80 91 80 00 	lds	r24, 0x0080
    163c:	90 91 81 00 	lds	r25, 0x0081
    1640:	00 97       	sbiw	r24, 0x00	; 0
    1642:	29 f0       	breq	.+10     	; 0x164e <__vector_4+0x40>
		TIMER2_pvCOMPCallBackFunc();
    1644:	e0 91 80 00 	lds	r30, 0x0080
    1648:	f0 91 81 00 	lds	r31, 0x0081
    164c:	09 95       	icall
	}
}
    164e:	cf 91       	pop	r28
    1650:	df 91       	pop	r29
    1652:	ff 91       	pop	r31
    1654:	ef 91       	pop	r30
    1656:	bf 91       	pop	r27
    1658:	af 91       	pop	r26
    165a:	9f 91       	pop	r25
    165c:	8f 91       	pop	r24
    165e:	7f 91       	pop	r23
    1660:	6f 91       	pop	r22
    1662:	5f 91       	pop	r21
    1664:	4f 91       	pop	r20
    1666:	3f 91       	pop	r19
    1668:	2f 91       	pop	r18
    166a:	0f 90       	pop	r0
    166c:	0f be       	out	0x3f, r0	; 63
    166e:	0f 90       	pop	r0
    1670:	1f 90       	pop	r1
    1672:	18 95       	reti

00001674 <__vector_5>:

//TIMER2 Overflow ISR
void __vector_5(void)  __attribute__((signal));
void __vector_5(void){
    1674:	1f 92       	push	r1
    1676:	0f 92       	push	r0
    1678:	0f b6       	in	r0, 0x3f	; 63
    167a:	0f 92       	push	r0
    167c:	11 24       	eor	r1, r1
    167e:	2f 93       	push	r18
    1680:	3f 93       	push	r19
    1682:	4f 93       	push	r20
    1684:	5f 93       	push	r21
    1686:	6f 93       	push	r22
    1688:	7f 93       	push	r23
    168a:	8f 93       	push	r24
    168c:	9f 93       	push	r25
    168e:	af 93       	push	r26
    1690:	bf 93       	push	r27
    1692:	ef 93       	push	r30
    1694:	ff 93       	push	r31
    1696:	df 93       	push	r29
    1698:	cf 93       	push	r28
    169a:	cd b7       	in	r28, 0x3d	; 61
    169c:	de b7       	in	r29, 0x3e	; 62
	if(TIMER2_pvOVFCallBackFunc!=NULL){
    169e:	80 91 7e 00 	lds	r24, 0x007E
    16a2:	90 91 7f 00 	lds	r25, 0x007F
    16a6:	00 97       	sbiw	r24, 0x00	; 0
    16a8:	29 f0       	breq	.+10     	; 0x16b4 <__vector_5+0x40>
		TIMER2_pvOVFCallBackFunc();
    16aa:	e0 91 7e 00 	lds	r30, 0x007E
    16ae:	f0 91 7f 00 	lds	r31, 0x007F
    16b2:	09 95       	icall
	}
}
    16b4:	cf 91       	pop	r28
    16b6:	df 91       	pop	r29
    16b8:	ff 91       	pop	r31
    16ba:	ef 91       	pop	r30
    16bc:	bf 91       	pop	r27
    16be:	af 91       	pop	r26
    16c0:	9f 91       	pop	r25
    16c2:	8f 91       	pop	r24
    16c4:	7f 91       	pop	r23
    16c6:	6f 91       	pop	r22
    16c8:	5f 91       	pop	r21
    16ca:	4f 91       	pop	r20
    16cc:	3f 91       	pop	r19
    16ce:	2f 91       	pop	r18
    16d0:	0f 90       	pop	r0
    16d2:	0f be       	out	0x3f, r0	; 63
    16d4:	0f 90       	pop	r0
    16d6:	1f 90       	pop	r1
    16d8:	18 95       	reti

000016da <__vector_6>:

//TIMER1 Capture Event ISR
void __vector_6(void)  __attribute__((signal));
void __vector_6(void){
    16da:	1f 92       	push	r1
    16dc:	0f 92       	push	r0
    16de:	0f b6       	in	r0, 0x3f	; 63
    16e0:	0f 92       	push	r0
    16e2:	11 24       	eor	r1, r1
    16e4:	2f 93       	push	r18
    16e6:	3f 93       	push	r19
    16e8:	4f 93       	push	r20
    16ea:	5f 93       	push	r21
    16ec:	6f 93       	push	r22
    16ee:	7f 93       	push	r23
    16f0:	8f 93       	push	r24
    16f2:	9f 93       	push	r25
    16f4:	af 93       	push	r26
    16f6:	bf 93       	push	r27
    16f8:	ef 93       	push	r30
    16fa:	ff 93       	push	r31
    16fc:	df 93       	push	r29
    16fe:	cf 93       	push	r28
    1700:	cd b7       	in	r28, 0x3d	; 61
    1702:	de b7       	in	r29, 0x3e	; 62
	if(TIMER1_pvCAPTCallBackFunc!=NULL){
    1704:	80 91 78 00 	lds	r24, 0x0078
    1708:	90 91 79 00 	lds	r25, 0x0079
    170c:	00 97       	sbiw	r24, 0x00	; 0
    170e:	29 f0       	breq	.+10     	; 0x171a <__vector_6+0x40>
		TIMER1_pvCAPTCallBackFunc();
    1710:	e0 91 78 00 	lds	r30, 0x0078
    1714:	f0 91 79 00 	lds	r31, 0x0079
    1718:	09 95       	icall
	}
}
    171a:	cf 91       	pop	r28
    171c:	df 91       	pop	r29
    171e:	ff 91       	pop	r31
    1720:	ef 91       	pop	r30
    1722:	bf 91       	pop	r27
    1724:	af 91       	pop	r26
    1726:	9f 91       	pop	r25
    1728:	8f 91       	pop	r24
    172a:	7f 91       	pop	r23
    172c:	6f 91       	pop	r22
    172e:	5f 91       	pop	r21
    1730:	4f 91       	pop	r20
    1732:	3f 91       	pop	r19
    1734:	2f 91       	pop	r18
    1736:	0f 90       	pop	r0
    1738:	0f be       	out	0x3f, r0	; 63
    173a:	0f 90       	pop	r0
    173c:	1f 90       	pop	r1
    173e:	18 95       	reti

00001740 <__vector_7>:


//TIMER1 Compare Match A ISR
void __vector_7(void)  __attribute__((signal));
void __vector_7(void){
    1740:	1f 92       	push	r1
    1742:	0f 92       	push	r0
    1744:	0f b6       	in	r0, 0x3f	; 63
    1746:	0f 92       	push	r0
    1748:	11 24       	eor	r1, r1
    174a:	2f 93       	push	r18
    174c:	3f 93       	push	r19
    174e:	4f 93       	push	r20
    1750:	5f 93       	push	r21
    1752:	6f 93       	push	r22
    1754:	7f 93       	push	r23
    1756:	8f 93       	push	r24
    1758:	9f 93       	push	r25
    175a:	af 93       	push	r26
    175c:	bf 93       	push	r27
    175e:	ef 93       	push	r30
    1760:	ff 93       	push	r31
    1762:	df 93       	push	r29
    1764:	cf 93       	push	r28
    1766:	cd b7       	in	r28, 0x3d	; 61
    1768:	de b7       	in	r29, 0x3e	; 62
	if(TIMER1A_pvCOMPCallBackFunc!=NULL){
    176a:	80 91 7a 00 	lds	r24, 0x007A
    176e:	90 91 7b 00 	lds	r25, 0x007B
    1772:	00 97       	sbiw	r24, 0x00	; 0
    1774:	29 f0       	breq	.+10     	; 0x1780 <__vector_7+0x40>
		TIMER1A_pvCOMPCallBackFunc();
    1776:	e0 91 7a 00 	lds	r30, 0x007A
    177a:	f0 91 7b 00 	lds	r31, 0x007B
    177e:	09 95       	icall
	}
}
    1780:	cf 91       	pop	r28
    1782:	df 91       	pop	r29
    1784:	ff 91       	pop	r31
    1786:	ef 91       	pop	r30
    1788:	bf 91       	pop	r27
    178a:	af 91       	pop	r26
    178c:	9f 91       	pop	r25
    178e:	8f 91       	pop	r24
    1790:	7f 91       	pop	r23
    1792:	6f 91       	pop	r22
    1794:	5f 91       	pop	r21
    1796:	4f 91       	pop	r20
    1798:	3f 91       	pop	r19
    179a:	2f 91       	pop	r18
    179c:	0f 90       	pop	r0
    179e:	0f be       	out	0x3f, r0	; 63
    17a0:	0f 90       	pop	r0
    17a2:	1f 90       	pop	r1
    17a4:	18 95       	reti

000017a6 <__vector_8>:

//TIMER1 Compare Match B ISR
void __vector_8(void)  __attribute__((signal));
void __vector_8(void){
    17a6:	1f 92       	push	r1
    17a8:	0f 92       	push	r0
    17aa:	0f b6       	in	r0, 0x3f	; 63
    17ac:	0f 92       	push	r0
    17ae:	11 24       	eor	r1, r1
    17b0:	2f 93       	push	r18
    17b2:	3f 93       	push	r19
    17b4:	4f 93       	push	r20
    17b6:	5f 93       	push	r21
    17b8:	6f 93       	push	r22
    17ba:	7f 93       	push	r23
    17bc:	8f 93       	push	r24
    17be:	9f 93       	push	r25
    17c0:	af 93       	push	r26
    17c2:	bf 93       	push	r27
    17c4:	ef 93       	push	r30
    17c6:	ff 93       	push	r31
    17c8:	df 93       	push	r29
    17ca:	cf 93       	push	r28
    17cc:	cd b7       	in	r28, 0x3d	; 61
    17ce:	de b7       	in	r29, 0x3e	; 62
	if(TIMER1B_pvCOMPCallBackFunc!=NULL){
    17d0:	80 91 7c 00 	lds	r24, 0x007C
    17d4:	90 91 7d 00 	lds	r25, 0x007D
    17d8:	00 97       	sbiw	r24, 0x00	; 0
    17da:	29 f0       	breq	.+10     	; 0x17e6 <__vector_8+0x40>
		TIMER1B_pvCOMPCallBackFunc();
    17dc:	e0 91 7c 00 	lds	r30, 0x007C
    17e0:	f0 91 7d 00 	lds	r31, 0x007D
    17e4:	09 95       	icall
	}
}
    17e6:	cf 91       	pop	r28
    17e8:	df 91       	pop	r29
    17ea:	ff 91       	pop	r31
    17ec:	ef 91       	pop	r30
    17ee:	bf 91       	pop	r27
    17f0:	af 91       	pop	r26
    17f2:	9f 91       	pop	r25
    17f4:	8f 91       	pop	r24
    17f6:	7f 91       	pop	r23
    17f8:	6f 91       	pop	r22
    17fa:	5f 91       	pop	r21
    17fc:	4f 91       	pop	r20
    17fe:	3f 91       	pop	r19
    1800:	2f 91       	pop	r18
    1802:	0f 90       	pop	r0
    1804:	0f be       	out	0x3f, r0	; 63
    1806:	0f 90       	pop	r0
    1808:	1f 90       	pop	r1
    180a:	18 95       	reti

0000180c <__vector_9>:

//TIMER1 Overflow ISR
void __vector_9(void)  __attribute__((signal));
void __vector_9(void){
    180c:	1f 92       	push	r1
    180e:	0f 92       	push	r0
    1810:	0f b6       	in	r0, 0x3f	; 63
    1812:	0f 92       	push	r0
    1814:	11 24       	eor	r1, r1
    1816:	2f 93       	push	r18
    1818:	3f 93       	push	r19
    181a:	4f 93       	push	r20
    181c:	5f 93       	push	r21
    181e:	6f 93       	push	r22
    1820:	7f 93       	push	r23
    1822:	8f 93       	push	r24
    1824:	9f 93       	push	r25
    1826:	af 93       	push	r26
    1828:	bf 93       	push	r27
    182a:	ef 93       	push	r30
    182c:	ff 93       	push	r31
    182e:	df 93       	push	r29
    1830:	cf 93       	push	r28
    1832:	cd b7       	in	r28, 0x3d	; 61
    1834:	de b7       	in	r29, 0x3e	; 62
	if(TIMER1_pvOVFCallBackFunc!=NULL){
    1836:	80 91 76 00 	lds	r24, 0x0076
    183a:	90 91 77 00 	lds	r25, 0x0077
    183e:	00 97       	sbiw	r24, 0x00	; 0
    1840:	29 f0       	breq	.+10     	; 0x184c <__vector_9+0x40>
		TIMER1_pvOVFCallBackFunc();
    1842:	e0 91 76 00 	lds	r30, 0x0076
    1846:	f0 91 77 00 	lds	r31, 0x0077
    184a:	09 95       	icall
	}
}
    184c:	cf 91       	pop	r28
    184e:	df 91       	pop	r29
    1850:	ff 91       	pop	r31
    1852:	ef 91       	pop	r30
    1854:	bf 91       	pop	r27
    1856:	af 91       	pop	r26
    1858:	9f 91       	pop	r25
    185a:	8f 91       	pop	r24
    185c:	7f 91       	pop	r23
    185e:	6f 91       	pop	r22
    1860:	5f 91       	pop	r21
    1862:	4f 91       	pop	r20
    1864:	3f 91       	pop	r19
    1866:	2f 91       	pop	r18
    1868:	0f 90       	pop	r0
    186a:	0f be       	out	0x3f, r0	; 63
    186c:	0f 90       	pop	r0
    186e:	1f 90       	pop	r1
    1870:	18 95       	reti

00001872 <__vector_10>:

//TIMER0 Compare Match ISR
void __vector_10(void)  __attribute__((signal));
void __vector_10(void){
    1872:	1f 92       	push	r1
    1874:	0f 92       	push	r0
    1876:	0f b6       	in	r0, 0x3f	; 63
    1878:	0f 92       	push	r0
    187a:	11 24       	eor	r1, r1
    187c:	2f 93       	push	r18
    187e:	3f 93       	push	r19
    1880:	4f 93       	push	r20
    1882:	5f 93       	push	r21
    1884:	6f 93       	push	r22
    1886:	7f 93       	push	r23
    1888:	8f 93       	push	r24
    188a:	9f 93       	push	r25
    188c:	af 93       	push	r26
    188e:	bf 93       	push	r27
    1890:	ef 93       	push	r30
    1892:	ff 93       	push	r31
    1894:	df 93       	push	r29
    1896:	cf 93       	push	r28
    1898:	cd b7       	in	r28, 0x3d	; 61
    189a:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_pvCOMPCallBackFunc!=NULL){
    189c:	80 91 74 00 	lds	r24, 0x0074
    18a0:	90 91 75 00 	lds	r25, 0x0075
    18a4:	00 97       	sbiw	r24, 0x00	; 0
    18a6:	29 f0       	breq	.+10     	; 0x18b2 <__vector_10+0x40>
		TIMER0_pvCOMPCallBackFunc();
    18a8:	e0 91 74 00 	lds	r30, 0x0074
    18ac:	f0 91 75 00 	lds	r31, 0x0075
    18b0:	09 95       	icall
	}
}
    18b2:	cf 91       	pop	r28
    18b4:	df 91       	pop	r29
    18b6:	ff 91       	pop	r31
    18b8:	ef 91       	pop	r30
    18ba:	bf 91       	pop	r27
    18bc:	af 91       	pop	r26
    18be:	9f 91       	pop	r25
    18c0:	8f 91       	pop	r24
    18c2:	7f 91       	pop	r23
    18c4:	6f 91       	pop	r22
    18c6:	5f 91       	pop	r21
    18c8:	4f 91       	pop	r20
    18ca:	3f 91       	pop	r19
    18cc:	2f 91       	pop	r18
    18ce:	0f 90       	pop	r0
    18d0:	0f be       	out	0x3f, r0	; 63
    18d2:	0f 90       	pop	r0
    18d4:	1f 90       	pop	r1
    18d6:	18 95       	reti

000018d8 <__vector_11>:

//TIMER0 Overflow ISR
void __vector_11(void)  __attribute__((signal));
void __vector_11(void){
    18d8:	1f 92       	push	r1
    18da:	0f 92       	push	r0
    18dc:	0f b6       	in	r0, 0x3f	; 63
    18de:	0f 92       	push	r0
    18e0:	11 24       	eor	r1, r1
    18e2:	2f 93       	push	r18
    18e4:	3f 93       	push	r19
    18e6:	4f 93       	push	r20
    18e8:	5f 93       	push	r21
    18ea:	6f 93       	push	r22
    18ec:	7f 93       	push	r23
    18ee:	8f 93       	push	r24
    18f0:	9f 93       	push	r25
    18f2:	af 93       	push	r26
    18f4:	bf 93       	push	r27
    18f6:	ef 93       	push	r30
    18f8:	ff 93       	push	r31
    18fa:	df 93       	push	r29
    18fc:	cf 93       	push	r28
    18fe:	cd b7       	in	r28, 0x3d	; 61
    1900:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_pvOVFCallBackFunc!=NULL){
    1902:	80 91 72 00 	lds	r24, 0x0072
    1906:	90 91 73 00 	lds	r25, 0x0073
    190a:	00 97       	sbiw	r24, 0x00	; 0
    190c:	29 f0       	breq	.+10     	; 0x1918 <__vector_11+0x40>
		TIMER0_pvOVFCallBackFunc();
    190e:	e0 91 72 00 	lds	r30, 0x0072
    1912:	f0 91 73 00 	lds	r31, 0x0073
    1916:	09 95       	icall
	}
}
    1918:	cf 91       	pop	r28
    191a:	df 91       	pop	r29
    191c:	ff 91       	pop	r31
    191e:	ef 91       	pop	r30
    1920:	bf 91       	pop	r27
    1922:	af 91       	pop	r26
    1924:	9f 91       	pop	r25
    1926:	8f 91       	pop	r24
    1928:	7f 91       	pop	r23
    192a:	6f 91       	pop	r22
    192c:	5f 91       	pop	r21
    192e:	4f 91       	pop	r20
    1930:	3f 91       	pop	r19
    1932:	2f 91       	pop	r18
    1934:	0f 90       	pop	r0
    1936:	0f be       	out	0x3f, r0	; 63
    1938:	0f 90       	pop	r0
    193a:	1f 90       	pop	r1
    193c:	18 95       	reti

0000193e <main>:
#include "PORT_interface.h"
#include "TIMER_interface.h"

#include "SERVO_interface.h"

void main(void){
    193e:	df 93       	push	r29
    1940:	cf 93       	push	r28
    1942:	cd b7       	in	r28, 0x3d	; 61
    1944:	de b7       	in	r29, 0x3e	; 62
    1946:	69 97       	sbiw	r28, 0x19	; 25
    1948:	0f b6       	in	r0, 0x3f	; 63
    194a:	f8 94       	cli
    194c:	de bf       	out	0x3e, r29	; 62
    194e:	0f be       	out	0x3f, r0	; 63
    1950:	cd bf       	out	0x3d, r28	; 61
	Timer1_t Local_Timer1={TIMER1_FAST_PWM_CUSTOM_TOP,TIMER_DIV_BY_8,TIMER_FAST_PWM_NON_INVERTED,TIMER_DISCONNECT,INT_DISABLE,INT_DISABLE,INT_DISABLE,INT_DISABLE};
    1952:	ce 01       	movw	r24, r28
    1954:	03 96       	adiw	r24, 0x03	; 3
    1956:	99 8b       	std	Y+17, r25	; 0x11
    1958:	88 8b       	std	Y+16, r24	; 0x10
    195a:	ea e6       	ldi	r30, 0x6A	; 106
    195c:	f0 e0       	ldi	r31, 0x00	; 0
    195e:	fb 8b       	std	Y+19, r31	; 0x13
    1960:	ea 8b       	std	Y+18, r30	; 0x12
    1962:	f8 e0       	ldi	r31, 0x08	; 8
    1964:	fc 8b       	std	Y+20, r31	; 0x14
    1966:	ea 89       	ldd	r30, Y+18	; 0x12
    1968:	fb 89       	ldd	r31, Y+19	; 0x13
    196a:	00 80       	ld	r0, Z
    196c:	8a 89       	ldd	r24, Y+18	; 0x12
    196e:	9b 89       	ldd	r25, Y+19	; 0x13
    1970:	01 96       	adiw	r24, 0x01	; 1
    1972:	9b 8b       	std	Y+19, r25	; 0x13
    1974:	8a 8b       	std	Y+18, r24	; 0x12
    1976:	e8 89       	ldd	r30, Y+16	; 0x10
    1978:	f9 89       	ldd	r31, Y+17	; 0x11
    197a:	00 82       	st	Z, r0
    197c:	88 89       	ldd	r24, Y+16	; 0x10
    197e:	99 89       	ldd	r25, Y+17	; 0x11
    1980:	01 96       	adiw	r24, 0x01	; 1
    1982:	99 8b       	std	Y+17, r25	; 0x11
    1984:	88 8b       	std	Y+16, r24	; 0x10
    1986:	9c 89       	ldd	r25, Y+20	; 0x14
    1988:	91 50       	subi	r25, 0x01	; 1
    198a:	9c 8b       	std	Y+20, r25	; 0x14
    198c:	ec 89       	ldd	r30, Y+20	; 0x14
    198e:	ee 23       	and	r30, r30
    1990:	51 f7       	brne	.-44     	; 0x1966 <main+0x28>
	Timer_t Local_Timer2={TIMER_CTC,TIMER_DIV_BY_8,TIMER_DISCONNECT,INT_DISABLE,INT_DISABLE};
    1992:	ce 01       	movw	r24, r28
    1994:	0b 96       	adiw	r24, 0x0b	; 11
    1996:	9e 8b       	std	Y+22, r25	; 0x16
    1998:	8d 8b       	std	Y+21, r24	; 0x15
    199a:	e5 e6       	ldi	r30, 0x65	; 101
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	f8 8f       	std	Y+24, r31	; 0x18
    19a0:	ef 8b       	std	Y+23, r30	; 0x17
    19a2:	f5 e0       	ldi	r31, 0x05	; 5
    19a4:	f9 8f       	std	Y+25, r31	; 0x19
    19a6:	ef 89       	ldd	r30, Y+23	; 0x17
    19a8:	f8 8d       	ldd	r31, Y+24	; 0x18
    19aa:	00 80       	ld	r0, Z
    19ac:	8f 89       	ldd	r24, Y+23	; 0x17
    19ae:	98 8d       	ldd	r25, Y+24	; 0x18
    19b0:	01 96       	adiw	r24, 0x01	; 1
    19b2:	98 8f       	std	Y+24, r25	; 0x18
    19b4:	8f 8b       	std	Y+23, r24	; 0x17
    19b6:	ed 89       	ldd	r30, Y+21	; 0x15
    19b8:	fe 89       	ldd	r31, Y+22	; 0x16
    19ba:	00 82       	st	Z, r0
    19bc:	8d 89       	ldd	r24, Y+21	; 0x15
    19be:	9e 89       	ldd	r25, Y+22	; 0x16
    19c0:	01 96       	adiw	r24, 0x01	; 1
    19c2:	9e 8b       	std	Y+22, r25	; 0x16
    19c4:	8d 8b       	std	Y+21, r24	; 0x15
    19c6:	99 8d       	ldd	r25, Y+25	; 0x19
    19c8:	91 50       	subi	r25, 0x01	; 1
    19ca:	99 8f       	std	Y+25, r25	; 0x19
    19cc:	e9 8d       	ldd	r30, Y+25	; 0x19
    19ce:	ee 23       	and	r30, r30
    19d0:	51 f7       	brne	.-44     	; 0x19a6 <main+0x68>
	PORT_voidInit();
    19d2:	0e 94 5e 03 	call	0x6bc	; 0x6bc <PORT_voidInit>
	TIMER1_u8Init(&Local_Timer1);
    19d6:	ce 01       	movw	r24, r28
    19d8:	03 96       	adiw	r24, 0x03	; 3
    19da:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <TIMER1_u8Init>
	TIMER2_u8Init(&Local_Timer2);
    19de:	ce 01       	movw	r24, r28
    19e0:	0b 96       	adiw	r24, 0x0b	; 11
    19e2:	0e 94 08 09 	call	0x1210	; 0x1210 <TIMER2_u8Init>
	while(1){
//		DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN0,DIO_u8PIN_HIGH);
//		TIMER2_delay_ms(&Local_Timer2,1000);
//		DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN0,DIO_u8PIN_LOW);
//		TIMER2_delay_ms(&Local_Timer2,1000);
		for(u8 i=0;i<=180;i++){
    19e6:	1a 82       	std	Y+2, r1	; 0x02
    19e8:	11 c0       	rjmp	.+34     	; 0x1a0c <main+0xce>
			SERVO_u8Rotate(CHANNEL_A,i,&Local_Timer1);
    19ea:	9e 01       	movw	r18, r28
    19ec:	2d 5f       	subi	r18, 0xFD	; 253
    19ee:	3f 4f       	sbci	r19, 0xFF	; 255
    19f0:	81 e0       	ldi	r24, 0x01	; 1
    19f2:	6a 81       	ldd	r22, Y+2	; 0x02
    19f4:	a9 01       	movw	r20, r18
    19f6:	0e 94 82 03 	call	0x704	; 0x704 <SERVO_u8Rotate>
			TIMER2_delay_ms(&Local_Timer2,15);
    19fa:	ce 01       	movw	r24, r28
    19fc:	0b 96       	adiw	r24, 0x0b	; 11
    19fe:	6f e0       	ldi	r22, 0x0F	; 15
    1a00:	70 e0       	ldi	r23, 0x00	; 0
    1a02:	0e 94 d5 09 	call	0x13aa	; 0x13aa <TIMER2_delay_ms>
	while(1){
//		DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN0,DIO_u8PIN_HIGH);
//		TIMER2_delay_ms(&Local_Timer2,1000);
//		DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN0,DIO_u8PIN_LOW);
//		TIMER2_delay_ms(&Local_Timer2,1000);
		for(u8 i=0;i<=180;i++){
    1a06:	8a 81       	ldd	r24, Y+2	; 0x02
    1a08:	8f 5f       	subi	r24, 0xFF	; 255
    1a0a:	8a 83       	std	Y+2, r24	; 0x02
    1a0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0e:	85 3b       	cpi	r24, 0xB5	; 181
    1a10:	60 f3       	brcs	.-40     	; 0x19ea <main+0xac>
			SERVO_u8Rotate(CHANNEL_A,i,&Local_Timer1);
			TIMER2_delay_ms(&Local_Timer2,15);
		}
		for(u8 i=0;i<=180;i++){
    1a12:	19 82       	std	Y+1, r1	; 0x01
    1a14:	14 c0       	rjmp	.+40     	; 0x1a3e <main+0x100>
			SERVO_u8Rotate(CHANNEL_A,180-i,&Local_Timer1);
    1a16:	94 eb       	ldi	r25, 0xB4	; 180
    1a18:	89 81       	ldd	r24, Y+1	; 0x01
    1a1a:	98 1b       	sub	r25, r24
    1a1c:	9e 01       	movw	r18, r28
    1a1e:	2d 5f       	subi	r18, 0xFD	; 253
    1a20:	3f 4f       	sbci	r19, 0xFF	; 255
    1a22:	81 e0       	ldi	r24, 0x01	; 1
    1a24:	69 2f       	mov	r22, r25
    1a26:	a9 01       	movw	r20, r18
    1a28:	0e 94 82 03 	call	0x704	; 0x704 <SERVO_u8Rotate>
			TIMER2_delay_ms(&Local_Timer2,15);
    1a2c:	ce 01       	movw	r24, r28
    1a2e:	0b 96       	adiw	r24, 0x0b	; 11
    1a30:	6f e0       	ldi	r22, 0x0F	; 15
    1a32:	70 e0       	ldi	r23, 0x00	; 0
    1a34:	0e 94 d5 09 	call	0x13aa	; 0x13aa <TIMER2_delay_ms>
//		TIMER2_delay_ms(&Local_Timer2,1000);
		for(u8 i=0;i<=180;i++){
			SERVO_u8Rotate(CHANNEL_A,i,&Local_Timer1);
			TIMER2_delay_ms(&Local_Timer2,15);
		}
		for(u8 i=0;i<=180;i++){
    1a38:	89 81       	ldd	r24, Y+1	; 0x01
    1a3a:	8f 5f       	subi	r24, 0xFF	; 255
    1a3c:	89 83       	std	Y+1, r24	; 0x01
    1a3e:	89 81       	ldd	r24, Y+1	; 0x01
    1a40:	85 3b       	cpi	r24, 0xB5	; 181
    1a42:	48 f3       	brcs	.-46     	; 0x1a16 <main+0xd8>
    1a44:	d0 cf       	rjmp	.-96     	; 0x19e6 <main+0xa8>

00001a46 <__mulsi3>:
    1a46:	62 9f       	mul	r22, r18
    1a48:	d0 01       	movw	r26, r0
    1a4a:	73 9f       	mul	r23, r19
    1a4c:	f0 01       	movw	r30, r0
    1a4e:	82 9f       	mul	r24, r18
    1a50:	e0 0d       	add	r30, r0
    1a52:	f1 1d       	adc	r31, r1
    1a54:	64 9f       	mul	r22, r20
    1a56:	e0 0d       	add	r30, r0
    1a58:	f1 1d       	adc	r31, r1
    1a5a:	92 9f       	mul	r25, r18
    1a5c:	f0 0d       	add	r31, r0
    1a5e:	83 9f       	mul	r24, r19
    1a60:	f0 0d       	add	r31, r0
    1a62:	74 9f       	mul	r23, r20
    1a64:	f0 0d       	add	r31, r0
    1a66:	65 9f       	mul	r22, r21
    1a68:	f0 0d       	add	r31, r0
    1a6a:	99 27       	eor	r25, r25
    1a6c:	72 9f       	mul	r23, r18
    1a6e:	b0 0d       	add	r27, r0
    1a70:	e1 1d       	adc	r30, r1
    1a72:	f9 1f       	adc	r31, r25
    1a74:	63 9f       	mul	r22, r19
    1a76:	b0 0d       	add	r27, r0
    1a78:	e1 1d       	adc	r30, r1
    1a7a:	f9 1f       	adc	r31, r25
    1a7c:	bd 01       	movw	r22, r26
    1a7e:	cf 01       	movw	r24, r30
    1a80:	11 24       	eor	r1, r1
    1a82:	08 95       	ret

00001a84 <__udivmodsi4>:
    1a84:	a1 e2       	ldi	r26, 0x21	; 33
    1a86:	1a 2e       	mov	r1, r26
    1a88:	aa 1b       	sub	r26, r26
    1a8a:	bb 1b       	sub	r27, r27
    1a8c:	fd 01       	movw	r30, r26
    1a8e:	0d c0       	rjmp	.+26     	; 0x1aaa <__udivmodsi4_ep>

00001a90 <__udivmodsi4_loop>:
    1a90:	aa 1f       	adc	r26, r26
    1a92:	bb 1f       	adc	r27, r27
    1a94:	ee 1f       	adc	r30, r30
    1a96:	ff 1f       	adc	r31, r31
    1a98:	a2 17       	cp	r26, r18
    1a9a:	b3 07       	cpc	r27, r19
    1a9c:	e4 07       	cpc	r30, r20
    1a9e:	f5 07       	cpc	r31, r21
    1aa0:	20 f0       	brcs	.+8      	; 0x1aaa <__udivmodsi4_ep>
    1aa2:	a2 1b       	sub	r26, r18
    1aa4:	b3 0b       	sbc	r27, r19
    1aa6:	e4 0b       	sbc	r30, r20
    1aa8:	f5 0b       	sbc	r31, r21

00001aaa <__udivmodsi4_ep>:
    1aaa:	66 1f       	adc	r22, r22
    1aac:	77 1f       	adc	r23, r23
    1aae:	88 1f       	adc	r24, r24
    1ab0:	99 1f       	adc	r25, r25
    1ab2:	1a 94       	dec	r1
    1ab4:	69 f7       	brne	.-38     	; 0x1a90 <__udivmodsi4_loop>
    1ab6:	60 95       	com	r22
    1ab8:	70 95       	com	r23
    1aba:	80 95       	com	r24
    1abc:	90 95       	com	r25
    1abe:	9b 01       	movw	r18, r22
    1ac0:	ac 01       	movw	r20, r24
    1ac2:	bd 01       	movw	r22, r26
    1ac4:	cf 01       	movw	r24, r30
    1ac6:	08 95       	ret

00001ac8 <__divmodsi4>:
    1ac8:	97 fb       	bst	r25, 7
    1aca:	09 2e       	mov	r0, r25
    1acc:	05 26       	eor	r0, r21
    1ace:	0e d0       	rcall	.+28     	; 0x1aec <__divmodsi4_neg1>
    1ad0:	57 fd       	sbrc	r21, 7
    1ad2:	04 d0       	rcall	.+8      	; 0x1adc <__divmodsi4_neg2>
    1ad4:	d7 df       	rcall	.-82     	; 0x1a84 <__udivmodsi4>
    1ad6:	0a d0       	rcall	.+20     	; 0x1aec <__divmodsi4_neg1>
    1ad8:	00 1c       	adc	r0, r0
    1ada:	38 f4       	brcc	.+14     	; 0x1aea <__divmodsi4_exit>

00001adc <__divmodsi4_neg2>:
    1adc:	50 95       	com	r21
    1ade:	40 95       	com	r20
    1ae0:	30 95       	com	r19
    1ae2:	21 95       	neg	r18
    1ae4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ae6:	4f 4f       	sbci	r20, 0xFF	; 255
    1ae8:	5f 4f       	sbci	r21, 0xFF	; 255

00001aea <__divmodsi4_exit>:
    1aea:	08 95       	ret

00001aec <__divmodsi4_neg1>:
    1aec:	f6 f7       	brtc	.-4      	; 0x1aea <__divmodsi4_exit>
    1aee:	90 95       	com	r25
    1af0:	80 95       	com	r24
    1af2:	70 95       	com	r23
    1af4:	61 95       	neg	r22
    1af6:	7f 4f       	sbci	r23, 0xFF	; 255
    1af8:	8f 4f       	sbci	r24, 0xFF	; 255
    1afa:	9f 4f       	sbci	r25, 0xFF	; 255
    1afc:	08 95       	ret

00001afe <_exit>:
    1afe:	f8 94       	cli

00001b00 <__stop_program>:
    1b00:	ff cf       	rjmp	.-2      	; 0x1b00 <__stop_program>
