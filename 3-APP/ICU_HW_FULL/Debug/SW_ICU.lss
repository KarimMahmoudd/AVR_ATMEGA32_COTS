
SW_ICU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000034e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000038  00800060  000034e0  00003574  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001b  00800098  00800098  000035ac  2**0
                  ALLOC
  3 .stab         00003408  00000000  00000000  000035ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001632  00000000  00000000  000069b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007fe6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008126  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008296  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009edf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000adca  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000bb78  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000bcd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000bf65  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c733  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 d6 0c 	jmp	0x19ac	; 0x19ac <__vector_1>
       8:	0c 94 09 0d 	jmp	0x1a12	; 0x1a12 <__vector_2>
       c:	0c 94 3c 0d 	jmp	0x1a78	; 0x1a78 <__vector_3>
      10:	0c 94 5a 17 	jmp	0x2eb4	; 0x2eb4 <__vector_4>
      14:	0c 94 8d 17 	jmp	0x2f1a	; 0x2f1a <__vector_5>
      18:	0c 94 c0 17 	jmp	0x2f80	; 0x2f80 <__vector_6>
      1c:	0c 94 f3 17 	jmp	0x2fe6	; 0x2fe6 <__vector_7>
      20:	0c 94 26 18 	jmp	0x304c	; 0x304c <__vector_8>
      24:	0c 94 59 18 	jmp	0x30b2	; 0x30b2 <__vector_9>
      28:	0c 94 8c 18 	jmp	0x3118	; 0x3118 <__vector_10>
      2c:	0c 94 bf 18 	jmp	0x317e	; 0x317e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ee       	ldi	r30, 0xE0	; 224
      68:	f4 e3       	ldi	r31, 0x34	; 52
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 39       	cpi	r26, 0x98	; 152
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e9       	ldi	r26, 0x98	; 152
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 3b       	cpi	r26, 0xB3	; 179
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f2 18 	call	0x31e4	; 0x31e4 <main>
      8a:	0c 94 6e 1a 	jmp	0x34dc	; 0x34dc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 37 1a 	jmp	0x346e	; 0x346e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 e7       	ldi	r26, 0x78	; 120
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 53 1a 	jmp	0x34a6	; 0x34a6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 43 1a 	jmp	0x3486	; 0x3486 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 5f 1a 	jmp	0x34be	; 0x34be <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 43 1a 	jmp	0x3486	; 0x3486 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 5f 1a 	jmp	0x34be	; 0x34be <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 37 1a 	jmp	0x346e	; 0x346e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	88 e7       	ldi	r24, 0x78	; 120
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 53 1a 	jmp	0x34a6	; 0x34a6 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 43 1a 	jmp	0x3486	; 0x3486 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 5f 1a 	jmp	0x34be	; 0x34be <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 43 1a 	jmp	0x3486	; 0x3486 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 5f 1a 	jmp	0x34be	; 0x34be <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 43 1a 	jmp	0x3486	; 0x3486 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 5f 1a 	jmp	0x34be	; 0x34be <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 47 1a 	jmp	0x348e	; 0x348e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 63 1a 	jmp	0x34c6	; 0x34c6 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <CLCD_voidSendCommand>:
#include "CLCD_private.h"
#include "CLCD_config.h"



void CLCD_voidSendCommand(u8 Copy_u8Command){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2f 97       	sbiw	r28, 0x0f	; 15
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	8f 87       	std	Y+15, r24	; 0x0f
	/*set RS pin to low for command*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
     b5c:	80 e0       	ldi	r24, 0x00	; 0
     b5e:	67 e0       	ldi	r22, 0x07	; 7
     b60:	40 e0       	ldi	r20, 0x00	; 0
     b62:	0e 94 8d 08 	call	0x111a	; 0x111a <DIO_u8SetPinValue>
	/*set RW pin to low for write*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	66 e0       	ldi	r22, 0x06	; 6
     b6a:	40 e0       	ldi	r20, 0x00	; 0
     b6c:	0e 94 8d 08 	call	0x111a	; 0x111a <DIO_u8SetPinValue>
	/*set data port to command*/
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Command);
     b70:	82 e0       	ldi	r24, 0x02	; 2
     b72:	6f 85       	ldd	r22, Y+15	; 0x0f
     b74:	0e 94 9f 09 	call	0x133e	; 0x133e <DIO_u8SetPortValue>
	/*send enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	65 e0       	ldi	r22, 0x05	; 5
     b7c:	41 e0       	ldi	r20, 0x01	; 1
     b7e:	0e 94 8d 08 	call	0x111a	; 0x111a <DIO_u8SetPinValue>
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	a0 e0       	ldi	r26, 0x00	; 0
     b88:	b0 e4       	ldi	r27, 0x40	; 64
     b8a:	8b 87       	std	Y+11, r24	; 0x0b
     b8c:	9c 87       	std	Y+12, r25	; 0x0c
     b8e:	ad 87       	std	Y+13, r26	; 0x0d
     b90:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b92:	6b 85       	ldd	r22, Y+11	; 0x0b
     b94:	7c 85       	ldd	r23, Y+12	; 0x0c
     b96:	8d 85       	ldd	r24, Y+13	; 0x0d
     b98:	9e 85       	ldd	r25, Y+14	; 0x0e
     b9a:	20 e0       	ldi	r18, 0x00	; 0
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	4a ef       	ldi	r20, 0xFA	; 250
     ba0:	54 e4       	ldi	r21, 0x44	; 68
     ba2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ba6:	dc 01       	movw	r26, r24
     ba8:	cb 01       	movw	r24, r22
     baa:	8f 83       	std	Y+7, r24	; 0x07
     bac:	98 87       	std	Y+8, r25	; 0x08
     bae:	a9 87       	std	Y+9, r26	; 0x09
     bb0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bb2:	6f 81       	ldd	r22, Y+7	; 0x07
     bb4:	78 85       	ldd	r23, Y+8	; 0x08
     bb6:	89 85       	ldd	r24, Y+9	; 0x09
     bb8:	9a 85       	ldd	r25, Y+10	; 0x0a
     bba:	20 e0       	ldi	r18, 0x00	; 0
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	40 e8       	ldi	r20, 0x80	; 128
     bc0:	5f e3       	ldi	r21, 0x3F	; 63
     bc2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bc6:	88 23       	and	r24, r24
     bc8:	2c f4       	brge	.+10     	; 0xbd4 <CLCD_voidSendCommand+0x8e>
		__ticks = 1;
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	9e 83       	std	Y+6, r25	; 0x06
     bd0:	8d 83       	std	Y+5, r24	; 0x05
     bd2:	3f c0       	rjmp	.+126    	; 0xc52 <CLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
     bd4:	6f 81       	ldd	r22, Y+7	; 0x07
     bd6:	78 85       	ldd	r23, Y+8	; 0x08
     bd8:	89 85       	ldd	r24, Y+9	; 0x09
     bda:	9a 85       	ldd	r25, Y+10	; 0x0a
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	3f ef       	ldi	r19, 0xFF	; 255
     be0:	4f e7       	ldi	r20, 0x7F	; 127
     be2:	57 e4       	ldi	r21, 0x47	; 71
     be4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     be8:	18 16       	cp	r1, r24
     bea:	4c f5       	brge	.+82     	; 0xc3e <CLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bec:	6b 85       	ldd	r22, Y+11	; 0x0b
     bee:	7c 85       	ldd	r23, Y+12	; 0x0c
     bf0:	8d 85       	ldd	r24, Y+13	; 0x0d
     bf2:	9e 85       	ldd	r25, Y+14	; 0x0e
     bf4:	20 e0       	ldi	r18, 0x00	; 0
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	40 e2       	ldi	r20, 0x20	; 32
     bfa:	51 e4       	ldi	r21, 0x41	; 65
     bfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c00:	dc 01       	movw	r26, r24
     c02:	cb 01       	movw	r24, r22
     c04:	bc 01       	movw	r22, r24
     c06:	cd 01       	movw	r24, r26
     c08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c0c:	dc 01       	movw	r26, r24
     c0e:	cb 01       	movw	r24, r22
     c10:	9e 83       	std	Y+6, r25	; 0x06
     c12:	8d 83       	std	Y+5, r24	; 0x05
     c14:	0f c0       	rjmp	.+30     	; 0xc34 <CLCD_voidSendCommand+0xee>
     c16:	88 ec       	ldi	r24, 0xC8	; 200
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	9c 83       	std	Y+4, r25	; 0x04
     c1c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c1e:	8b 81       	ldd	r24, Y+3	; 0x03
     c20:	9c 81       	ldd	r25, Y+4	; 0x04
     c22:	01 97       	sbiw	r24, 0x01	; 1
     c24:	f1 f7       	brne	.-4      	; 0xc22 <CLCD_voidSendCommand+0xdc>
     c26:	9c 83       	std	Y+4, r25	; 0x04
     c28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c2a:	8d 81       	ldd	r24, Y+5	; 0x05
     c2c:	9e 81       	ldd	r25, Y+6	; 0x06
     c2e:	01 97       	sbiw	r24, 0x01	; 1
     c30:	9e 83       	std	Y+6, r25	; 0x06
     c32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c34:	8d 81       	ldd	r24, Y+5	; 0x05
     c36:	9e 81       	ldd	r25, Y+6	; 0x06
     c38:	00 97       	sbiw	r24, 0x00	; 0
     c3a:	69 f7       	brne	.-38     	; 0xc16 <CLCD_voidSendCommand+0xd0>
     c3c:	14 c0       	rjmp	.+40     	; 0xc66 <CLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c3e:	6f 81       	ldd	r22, Y+7	; 0x07
     c40:	78 85       	ldd	r23, Y+8	; 0x08
     c42:	89 85       	ldd	r24, Y+9	; 0x09
     c44:	9a 85       	ldd	r25, Y+10	; 0x0a
     c46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c4a:	dc 01       	movw	r26, r24
     c4c:	cb 01       	movw	r24, r22
     c4e:	9e 83       	std	Y+6, r25	; 0x06
     c50:	8d 83       	std	Y+5, r24	; 0x05
     c52:	8d 81       	ldd	r24, Y+5	; 0x05
     c54:	9e 81       	ldd	r25, Y+6	; 0x06
     c56:	9a 83       	std	Y+2, r25	; 0x02
     c58:	89 83       	std	Y+1, r24	; 0x01
     c5a:	89 81       	ldd	r24, Y+1	; 0x01
     c5c:	9a 81       	ldd	r25, Y+2	; 0x02
     c5e:	01 97       	sbiw	r24, 0x01	; 1
     c60:	f1 f7       	brne	.-4      	; 0xc5e <CLCD_voidSendCommand+0x118>
     c62:	9a 83       	std	Y+2, r25	; 0x02
     c64:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
     c66:	80 e0       	ldi	r24, 0x00	; 0
     c68:	65 e0       	ldi	r22, 0x05	; 5
     c6a:	40 e0       	ldi	r20, 0x00	; 0
     c6c:	0e 94 8d 08 	call	0x111a	; 0x111a <DIO_u8SetPinValue>
}
     c70:	2f 96       	adiw	r28, 0x0f	; 15
     c72:	0f b6       	in	r0, 0x3f	; 63
     c74:	f8 94       	cli
     c76:	de bf       	out	0x3e, r29	; 62
     c78:	0f be       	out	0x3f, r0	; 63
     c7a:	cd bf       	out	0x3d, r28	; 61
     c7c:	cf 91       	pop	r28
     c7e:	df 91       	pop	r29
     c80:	08 95       	ret

00000c82 <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data){
     c82:	df 93       	push	r29
     c84:	cf 93       	push	r28
     c86:	cd b7       	in	r28, 0x3d	; 61
     c88:	de b7       	in	r29, 0x3e	; 62
     c8a:	2f 97       	sbiw	r28, 0x0f	; 15
     c8c:	0f b6       	in	r0, 0x3f	; 63
     c8e:	f8 94       	cli
     c90:	de bf       	out	0x3e, r29	; 62
     c92:	0f be       	out	0x3f, r0	; 63
     c94:	cd bf       	out	0x3d, r28	; 61
     c96:	8f 87       	std	Y+15, r24	; 0x0f
	/*set RS pin to high for data*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
     c98:	80 e0       	ldi	r24, 0x00	; 0
     c9a:	67 e0       	ldi	r22, 0x07	; 7
     c9c:	41 e0       	ldi	r20, 0x01	; 1
     c9e:	0e 94 8d 08 	call	0x111a	; 0x111a <DIO_u8SetPinValue>
	/*set RW pin to low for write*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
     ca2:	80 e0       	ldi	r24, 0x00	; 0
     ca4:	66 e0       	ldi	r22, 0x06	; 6
     ca6:	40 e0       	ldi	r20, 0x00	; 0
     ca8:	0e 94 8d 08 	call	0x111a	; 0x111a <DIO_u8SetPinValue>
	/*set data port to data*/
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Data);
     cac:	82 e0       	ldi	r24, 0x02	; 2
     cae:	6f 85       	ldd	r22, Y+15	; 0x0f
     cb0:	0e 94 9f 09 	call	0x133e	; 0x133e <DIO_u8SetPortValue>
	/*send enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     cb4:	80 e0       	ldi	r24, 0x00	; 0
     cb6:	65 e0       	ldi	r22, 0x05	; 5
     cb8:	41 e0       	ldi	r20, 0x01	; 1
     cba:	0e 94 8d 08 	call	0x111a	; 0x111a <DIO_u8SetPinValue>
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	a0 e0       	ldi	r26, 0x00	; 0
     cc4:	b0 e4       	ldi	r27, 0x40	; 64
     cc6:	8b 87       	std	Y+11, r24	; 0x0b
     cc8:	9c 87       	std	Y+12, r25	; 0x0c
     cca:	ad 87       	std	Y+13, r26	; 0x0d
     ccc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cce:	6b 85       	ldd	r22, Y+11	; 0x0b
     cd0:	7c 85       	ldd	r23, Y+12	; 0x0c
     cd2:	8d 85       	ldd	r24, Y+13	; 0x0d
     cd4:	9e 85       	ldd	r25, Y+14	; 0x0e
     cd6:	20 e0       	ldi	r18, 0x00	; 0
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	4a ef       	ldi	r20, 0xFA	; 250
     cdc:	54 e4       	ldi	r21, 0x44	; 68
     cde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ce2:	dc 01       	movw	r26, r24
     ce4:	cb 01       	movw	r24, r22
     ce6:	8f 83       	std	Y+7, r24	; 0x07
     ce8:	98 87       	std	Y+8, r25	; 0x08
     cea:	a9 87       	std	Y+9, r26	; 0x09
     cec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cee:	6f 81       	ldd	r22, Y+7	; 0x07
     cf0:	78 85       	ldd	r23, Y+8	; 0x08
     cf2:	89 85       	ldd	r24, Y+9	; 0x09
     cf4:	9a 85       	ldd	r25, Y+10	; 0x0a
     cf6:	20 e0       	ldi	r18, 0x00	; 0
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	40 e8       	ldi	r20, 0x80	; 128
     cfc:	5f e3       	ldi	r21, 0x3F	; 63
     cfe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d02:	88 23       	and	r24, r24
     d04:	2c f4       	brge	.+10     	; 0xd10 <CLCD_voidSendData+0x8e>
		__ticks = 1;
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	9e 83       	std	Y+6, r25	; 0x06
     d0c:	8d 83       	std	Y+5, r24	; 0x05
     d0e:	3f c0       	rjmp	.+126    	; 0xd8e <CLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
     d10:	6f 81       	ldd	r22, Y+7	; 0x07
     d12:	78 85       	ldd	r23, Y+8	; 0x08
     d14:	89 85       	ldd	r24, Y+9	; 0x09
     d16:	9a 85       	ldd	r25, Y+10	; 0x0a
     d18:	20 e0       	ldi	r18, 0x00	; 0
     d1a:	3f ef       	ldi	r19, 0xFF	; 255
     d1c:	4f e7       	ldi	r20, 0x7F	; 127
     d1e:	57 e4       	ldi	r21, 0x47	; 71
     d20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d24:	18 16       	cp	r1, r24
     d26:	4c f5       	brge	.+82     	; 0xd7a <CLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d28:	6b 85       	ldd	r22, Y+11	; 0x0b
     d2a:	7c 85       	ldd	r23, Y+12	; 0x0c
     d2c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d2e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d30:	20 e0       	ldi	r18, 0x00	; 0
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	40 e2       	ldi	r20, 0x20	; 32
     d36:	51 e4       	ldi	r21, 0x41	; 65
     d38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d3c:	dc 01       	movw	r26, r24
     d3e:	cb 01       	movw	r24, r22
     d40:	bc 01       	movw	r22, r24
     d42:	cd 01       	movw	r24, r26
     d44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d48:	dc 01       	movw	r26, r24
     d4a:	cb 01       	movw	r24, r22
     d4c:	9e 83       	std	Y+6, r25	; 0x06
     d4e:	8d 83       	std	Y+5, r24	; 0x05
     d50:	0f c0       	rjmp	.+30     	; 0xd70 <CLCD_voidSendData+0xee>
     d52:	88 ec       	ldi	r24, 0xC8	; 200
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	9c 83       	std	Y+4, r25	; 0x04
     d58:	8b 83       	std	Y+3, r24	; 0x03
     d5a:	8b 81       	ldd	r24, Y+3	; 0x03
     d5c:	9c 81       	ldd	r25, Y+4	; 0x04
     d5e:	01 97       	sbiw	r24, 0x01	; 1
     d60:	f1 f7       	brne	.-4      	; 0xd5e <CLCD_voidSendData+0xdc>
     d62:	9c 83       	std	Y+4, r25	; 0x04
     d64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d66:	8d 81       	ldd	r24, Y+5	; 0x05
     d68:	9e 81       	ldd	r25, Y+6	; 0x06
     d6a:	01 97       	sbiw	r24, 0x01	; 1
     d6c:	9e 83       	std	Y+6, r25	; 0x06
     d6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d70:	8d 81       	ldd	r24, Y+5	; 0x05
     d72:	9e 81       	ldd	r25, Y+6	; 0x06
     d74:	00 97       	sbiw	r24, 0x00	; 0
     d76:	69 f7       	brne	.-38     	; 0xd52 <CLCD_voidSendData+0xd0>
     d78:	14 c0       	rjmp	.+40     	; 0xda2 <CLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d7a:	6f 81       	ldd	r22, Y+7	; 0x07
     d7c:	78 85       	ldd	r23, Y+8	; 0x08
     d7e:	89 85       	ldd	r24, Y+9	; 0x09
     d80:	9a 85       	ldd	r25, Y+10	; 0x0a
     d82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d86:	dc 01       	movw	r26, r24
     d88:	cb 01       	movw	r24, r22
     d8a:	9e 83       	std	Y+6, r25	; 0x06
     d8c:	8d 83       	std	Y+5, r24	; 0x05
     d8e:	8d 81       	ldd	r24, Y+5	; 0x05
     d90:	9e 81       	ldd	r25, Y+6	; 0x06
     d92:	9a 83       	std	Y+2, r25	; 0x02
     d94:	89 83       	std	Y+1, r24	; 0x01
     d96:	89 81       	ldd	r24, Y+1	; 0x01
     d98:	9a 81       	ldd	r25, Y+2	; 0x02
     d9a:	01 97       	sbiw	r24, 0x01	; 1
     d9c:	f1 f7       	brne	.-4      	; 0xd9a <CLCD_voidSendData+0x118>
     d9e:	9a 83       	std	Y+2, r25	; 0x02
     da0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
     da2:	80 e0       	ldi	r24, 0x00	; 0
     da4:	65 e0       	ldi	r22, 0x05	; 5
     da6:	40 e0       	ldi	r20, 0x00	; 0
     da8:	0e 94 8d 08 	call	0x111a	; 0x111a <DIO_u8SetPinValue>
}
     dac:	2f 96       	adiw	r28, 0x0f	; 15
     dae:	0f b6       	in	r0, 0x3f	; 63
     db0:	f8 94       	cli
     db2:	de bf       	out	0x3e, r29	; 62
     db4:	0f be       	out	0x3f, r0	; 63
     db6:	cd bf       	out	0x3d, r28	; 61
     db8:	cf 91       	pop	r28
     dba:	df 91       	pop	r29
     dbc:	08 95       	ret

00000dbe <CLCD_voidSendString>:
void CLCD_voidSendString(const char* Copy_pcString){
     dbe:	df 93       	push	r29
     dc0:	cf 93       	push	r28
     dc2:	00 d0       	rcall	.+0      	; 0xdc4 <CLCD_voidSendString+0x6>
     dc4:	cd b7       	in	r28, 0x3d	; 61
     dc6:	de b7       	in	r29, 0x3e	; 62
     dc8:	9a 83       	std	Y+2, r25	; 0x02
     dca:	89 83       	std	Y+1, r24	; 0x01
     dcc:	0a c0       	rjmp	.+20     	; 0xde2 <CLCD_voidSendString+0x24>
	while(*Copy_pcString != '\0'){
		CLCD_voidSendData(*Copy_pcString);
     dce:	e9 81       	ldd	r30, Y+1	; 0x01
     dd0:	fa 81       	ldd	r31, Y+2	; 0x02
     dd2:	80 81       	ld	r24, Z
     dd4:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
		Copy_pcString++;
     dd8:	89 81       	ldd	r24, Y+1	; 0x01
     dda:	9a 81       	ldd	r25, Y+2	; 0x02
     ddc:	01 96       	adiw	r24, 0x01	; 1
     dde:	9a 83       	std	Y+2, r25	; 0x02
     de0:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
}
void CLCD_voidSendString(const char* Copy_pcString){
	while(*Copy_pcString != '\0'){
     de2:	e9 81       	ldd	r30, Y+1	; 0x01
     de4:	fa 81       	ldd	r31, Y+2	; 0x02
     de6:	80 81       	ld	r24, Z
     de8:	88 23       	and	r24, r24
     dea:	89 f7       	brne	.-30     	; 0xdce <CLCD_voidSendString+0x10>
		CLCD_voidSendData(*Copy_pcString);
		Copy_pcString++;
	}
}
     dec:	0f 90       	pop	r0
     dee:	0f 90       	pop	r0
     df0:	cf 91       	pop	r28
     df2:	df 91       	pop	r29
     df4:	08 95       	ret

00000df6 <CLCD_voidInit>:
void CLCD_voidInit(void){
     df6:	df 93       	push	r29
     df8:	cf 93       	push	r28
     dfa:	cd b7       	in	r28, 0x3d	; 61
     dfc:	de b7       	in	r29, 0x3e	; 62
     dfe:	2e 97       	sbiw	r28, 0x0e	; 14
     e00:	0f b6       	in	r0, 0x3f	; 63
     e02:	f8 94       	cli
     e04:	de bf       	out	0x3e, r29	; 62
     e06:	0f be       	out	0x3f, r0	; 63
     e08:	cd bf       	out	0x3d, r28	; 61
     e0a:	80 e0       	ldi	r24, 0x00	; 0
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	a0 e2       	ldi	r26, 0x20	; 32
     e10:	b2 e4       	ldi	r27, 0x42	; 66
     e12:	8b 87       	std	Y+11, r24	; 0x0b
     e14:	9c 87       	std	Y+12, r25	; 0x0c
     e16:	ad 87       	std	Y+13, r26	; 0x0d
     e18:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e1a:	6b 85       	ldd	r22, Y+11	; 0x0b
     e1c:	7c 85       	ldd	r23, Y+12	; 0x0c
     e1e:	8d 85       	ldd	r24, Y+13	; 0x0d
     e20:	9e 85       	ldd	r25, Y+14	; 0x0e
     e22:	20 e0       	ldi	r18, 0x00	; 0
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	4a ef       	ldi	r20, 0xFA	; 250
     e28:	54 e4       	ldi	r21, 0x44	; 68
     e2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e2e:	dc 01       	movw	r26, r24
     e30:	cb 01       	movw	r24, r22
     e32:	8f 83       	std	Y+7, r24	; 0x07
     e34:	98 87       	std	Y+8, r25	; 0x08
     e36:	a9 87       	std	Y+9, r26	; 0x09
     e38:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e3a:	6f 81       	ldd	r22, Y+7	; 0x07
     e3c:	78 85       	ldd	r23, Y+8	; 0x08
     e3e:	89 85       	ldd	r24, Y+9	; 0x09
     e40:	9a 85       	ldd	r25, Y+10	; 0x0a
     e42:	20 e0       	ldi	r18, 0x00	; 0
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	40 e8       	ldi	r20, 0x80	; 128
     e48:	5f e3       	ldi	r21, 0x3F	; 63
     e4a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e4e:	88 23       	and	r24, r24
     e50:	2c f4       	brge	.+10     	; 0xe5c <CLCD_voidInit+0x66>
		__ticks = 1;
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	9e 83       	std	Y+6, r25	; 0x06
     e58:	8d 83       	std	Y+5, r24	; 0x05
     e5a:	3f c0       	rjmp	.+126    	; 0xeda <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
     e5c:	6f 81       	ldd	r22, Y+7	; 0x07
     e5e:	78 85       	ldd	r23, Y+8	; 0x08
     e60:	89 85       	ldd	r24, Y+9	; 0x09
     e62:	9a 85       	ldd	r25, Y+10	; 0x0a
     e64:	20 e0       	ldi	r18, 0x00	; 0
     e66:	3f ef       	ldi	r19, 0xFF	; 255
     e68:	4f e7       	ldi	r20, 0x7F	; 127
     e6a:	57 e4       	ldi	r21, 0x47	; 71
     e6c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e70:	18 16       	cp	r1, r24
     e72:	4c f5       	brge	.+82     	; 0xec6 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e74:	6b 85       	ldd	r22, Y+11	; 0x0b
     e76:	7c 85       	ldd	r23, Y+12	; 0x0c
     e78:	8d 85       	ldd	r24, Y+13	; 0x0d
     e7a:	9e 85       	ldd	r25, Y+14	; 0x0e
     e7c:	20 e0       	ldi	r18, 0x00	; 0
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	40 e2       	ldi	r20, 0x20	; 32
     e82:	51 e4       	ldi	r21, 0x41	; 65
     e84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e88:	dc 01       	movw	r26, r24
     e8a:	cb 01       	movw	r24, r22
     e8c:	bc 01       	movw	r22, r24
     e8e:	cd 01       	movw	r24, r26
     e90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e94:	dc 01       	movw	r26, r24
     e96:	cb 01       	movw	r24, r22
     e98:	9e 83       	std	Y+6, r25	; 0x06
     e9a:	8d 83       	std	Y+5, r24	; 0x05
     e9c:	0f c0       	rjmp	.+30     	; 0xebc <CLCD_voidInit+0xc6>
     e9e:	88 ec       	ldi	r24, 0xC8	; 200
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	9c 83       	std	Y+4, r25	; 0x04
     ea4:	8b 83       	std	Y+3, r24	; 0x03
     ea6:	8b 81       	ldd	r24, Y+3	; 0x03
     ea8:	9c 81       	ldd	r25, Y+4	; 0x04
     eaa:	01 97       	sbiw	r24, 0x01	; 1
     eac:	f1 f7       	brne	.-4      	; 0xeaa <CLCD_voidInit+0xb4>
     eae:	9c 83       	std	Y+4, r25	; 0x04
     eb0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eb2:	8d 81       	ldd	r24, Y+5	; 0x05
     eb4:	9e 81       	ldd	r25, Y+6	; 0x06
     eb6:	01 97       	sbiw	r24, 0x01	; 1
     eb8:	9e 83       	std	Y+6, r25	; 0x06
     eba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ebc:	8d 81       	ldd	r24, Y+5	; 0x05
     ebe:	9e 81       	ldd	r25, Y+6	; 0x06
     ec0:	00 97       	sbiw	r24, 0x00	; 0
     ec2:	69 f7       	brne	.-38     	; 0xe9e <CLCD_voidInit+0xa8>
     ec4:	14 c0       	rjmp	.+40     	; 0xeee <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ec6:	6f 81       	ldd	r22, Y+7	; 0x07
     ec8:	78 85       	ldd	r23, Y+8	; 0x08
     eca:	89 85       	ldd	r24, Y+9	; 0x09
     ecc:	9a 85       	ldd	r25, Y+10	; 0x0a
     ece:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ed2:	dc 01       	movw	r26, r24
     ed4:	cb 01       	movw	r24, r22
     ed6:	9e 83       	std	Y+6, r25	; 0x06
     ed8:	8d 83       	std	Y+5, r24	; 0x05
     eda:	8d 81       	ldd	r24, Y+5	; 0x05
     edc:	9e 81       	ldd	r25, Y+6	; 0x06
     ede:	9a 83       	std	Y+2, r25	; 0x02
     ee0:	89 83       	std	Y+1, r24	; 0x01
     ee2:	89 81       	ldd	r24, Y+1	; 0x01
     ee4:	9a 81       	ldd	r25, Y+2	; 0x02
     ee6:	01 97       	sbiw	r24, 0x01	; 1
     ee8:	f1 f7       	brne	.-4      	; 0xee6 <CLCD_voidInit+0xf0>
     eea:	9a 83       	std	Y+2, r25	; 0x02
     eec:	89 83       	std	Y+1, r24	; 0x01
	/*wait for more than 30 ms*/
	_delay_ms(40);
	/*Function Set Command: 2 lines, 5*8 Font Size*/
	CLCD_voidSendCommand(0b00111000);
     eee:	88 e3       	ldi	r24, 0x38	; 56
     ef0:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
	/*Display control on off: enable display disable cursor no blinking cursor*/
	CLCD_voidSendCommand(0b00001100);
     ef4:	8c e0       	ldi	r24, 0x0C	; 12
     ef6:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
	/*clear display*/
	CLCD_voidSendCommand(1);
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>


}
     f00:	2e 96       	adiw	r28, 0x0e	; 14
     f02:	0f b6       	in	r0, 0x3f	; 63
     f04:	f8 94       	cli
     f06:	de bf       	out	0x3e, r29	; 62
     f08:	0f be       	out	0x3f, r0	; 63
     f0a:	cd bf       	out	0x3d, r28	; 61
     f0c:	cf 91       	pop	r28
     f0e:	df 91       	pop	r29
     f10:	08 95       	ret

00000f12 <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(u8 Copy_u8XPos,u8 Copy_u8YPos){
     f12:	df 93       	push	r29
     f14:	cf 93       	push	r28
     f16:	00 d0       	rcall	.+0      	; 0xf18 <CLCD_voidGoToXY+0x6>
     f18:	0f 92       	push	r0
     f1a:	cd b7       	in	r28, 0x3d	; 61
     f1c:	de b7       	in	r29, 0x3e	; 62
     f1e:	8a 83       	std	Y+2, r24	; 0x02
     f20:	6b 83       	std	Y+3, r22	; 0x03
	/*converting the position into an address*/
	u8 Local_u8Adress;
	if(Copy_u8XPos==0){
     f22:	8a 81       	ldd	r24, Y+2	; 0x02
     f24:	88 23       	and	r24, r24
     f26:	19 f4       	brne	.+6      	; 0xf2e <CLCD_voidGoToXY+0x1c>
		Local_u8Adress = Copy_u8YPos;
     f28:	8b 81       	ldd	r24, Y+3	; 0x03
     f2a:	89 83       	std	Y+1, r24	; 0x01
     f2c:	06 c0       	rjmp	.+12     	; 0xf3a <CLCD_voidGoToXY+0x28>
	}
	else if(Copy_u8XPos==1){
     f2e:	8a 81       	ldd	r24, Y+2	; 0x02
     f30:	81 30       	cpi	r24, 0x01	; 1
     f32:	19 f4       	brne	.+6      	; 0xf3a <CLCD_voidGoToXY+0x28>
		Local_u8Adress = Copy_u8YPos+0x40;
     f34:	8b 81       	ldd	r24, Y+3	; 0x03
     f36:	80 5c       	subi	r24, 0xC0	; 192
     f38:	89 83       	std	Y+1, r24	; 0x01
	}
	/*setting the 7th bit so we can send the set ddram address command*/
	SET_BIT(Local_u8Adress,7);
     f3a:	89 81       	ldd	r24, Y+1	; 0x01
     f3c:	80 68       	ori	r24, 0x80	; 128
     f3e:	89 83       	std	Y+1, r24	; 0x01
	CLCD_voidSendCommand(Local_u8Adress);
     f40:	89 81       	ldd	r24, Y+1	; 0x01
     f42:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
}
     f46:	0f 90       	pop	r0
     f48:	0f 90       	pop	r0
     f4a:	0f 90       	pop	r0
     f4c:	cf 91       	pop	r28
     f4e:	df 91       	pop	r29
     f50:	08 95       	ret

00000f52 <CLCD_voidWriteSpecialCharacter>:

void CLCD_voidWriteSpecialCharacter(u8* Copy_pu8Arr,u8 Copy_u8PatternNumber){
     f52:	df 93       	push	r29
     f54:	cf 93       	push	r28
     f56:	00 d0       	rcall	.+0      	; 0xf58 <CLCD_voidWriteSpecialCharacter+0x6>
     f58:	00 d0       	rcall	.+0      	; 0xf5a <CLCD_voidWriteSpecialCharacter+0x8>
     f5a:	0f 92       	push	r0
     f5c:	cd b7       	in	r28, 0x3d	; 61
     f5e:	de b7       	in	r29, 0x3e	; 62
     f60:	9c 83       	std	Y+4, r25	; 0x04
     f62:	8b 83       	std	Y+3, r24	; 0x03
     f64:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8Iterator;
	/*calculate CGRAM address of block 8 bytes*/
	u8 Local_u8CGRAMAdress = Copy_u8PatternNumber*8;
     f66:	8d 81       	ldd	r24, Y+5	; 0x05
     f68:	88 2f       	mov	r24, r24
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	88 0f       	add	r24, r24
     f6e:	99 1f       	adc	r25, r25
     f70:	88 0f       	add	r24, r24
     f72:	99 1f       	adc	r25, r25
     f74:	88 0f       	add	r24, r24
     f76:	99 1f       	adc	r25, r25
     f78:	89 83       	std	Y+1, r24	; 0x01
	/*set bit 6 for command and set the CGRAM address command*/
	SET_BIT(Local_u8CGRAMAdress,6);
     f7a:	89 81       	ldd	r24, Y+1	; 0x01
     f7c:	80 64       	ori	r24, 0x40	; 64
     f7e:	89 83       	std	Y+1, r24	; 0x01
	CLCD_voidSendCommand(Local_u8CGRAMAdress);
     f80:	89 81       	ldd	r24, Y+1	; 0x01
     f82:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
	/*write the pattern on CGRAM*/
	for(Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++){
     f86:	1a 82       	std	Y+2, r1	; 0x02
     f88:	0e c0       	rjmp	.+28     	; 0xfa6 <CLCD_voidWriteSpecialCharacter+0x54>
		CLCD_voidSendData(Copy_pu8Arr[Local_u8Iterator]);
     f8a:	8a 81       	ldd	r24, Y+2	; 0x02
     f8c:	28 2f       	mov	r18, r24
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	8b 81       	ldd	r24, Y+3	; 0x03
     f92:	9c 81       	ldd	r25, Y+4	; 0x04
     f94:	fc 01       	movw	r30, r24
     f96:	e2 0f       	add	r30, r18
     f98:	f3 1f       	adc	r31, r19
     f9a:	80 81       	ld	r24, Z
     f9c:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
	u8 Local_u8CGRAMAdress = Copy_u8PatternNumber*8;
	/*set bit 6 for command and set the CGRAM address command*/
	SET_BIT(Local_u8CGRAMAdress,6);
	CLCD_voidSendCommand(Local_u8CGRAMAdress);
	/*write the pattern on CGRAM*/
	for(Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++){
     fa0:	8a 81       	ldd	r24, Y+2	; 0x02
     fa2:	8f 5f       	subi	r24, 0xFF	; 255
     fa4:	8a 83       	std	Y+2, r24	; 0x02
     fa6:	8a 81       	ldd	r24, Y+2	; 0x02
     fa8:	88 30       	cpi	r24, 0x08	; 8
     faa:	78 f3       	brcs	.-34     	; 0xf8a <CLCD_voidWriteSpecialCharacter+0x38>
		CLCD_voidSendData(Copy_pu8Arr[Local_u8Iterator]);
	}
}
     fac:	0f 90       	pop	r0
     fae:	0f 90       	pop	r0
     fb0:	0f 90       	pop	r0
     fb2:	0f 90       	pop	r0
     fb4:	0f 90       	pop	r0
     fb6:	cf 91       	pop	r28
     fb8:	df 91       	pop	r29
     fba:	08 95       	ret

00000fbc <CLCD_voidSendSpecialCharacter>:
void CLCD_voidSendSpecialCharacter(u8 Copy_u8PatternNumber,u8 Copy_u8XPos,u8 Copy_u8YPos){
     fbc:	df 93       	push	r29
     fbe:	cf 93       	push	r28
     fc0:	00 d0       	rcall	.+0      	; 0xfc2 <CLCD_voidSendSpecialCharacter+0x6>
     fc2:	0f 92       	push	r0
     fc4:	cd b7       	in	r28, 0x3d	; 61
     fc6:	de b7       	in	r29, 0x3e	; 62
     fc8:	89 83       	std	Y+1, r24	; 0x01
     fca:	6a 83       	std	Y+2, r22	; 0x02
     fcc:	4b 83       	std	Y+3, r20	; 0x03
	/*go back to ddram to display pattern and send pattern by choosing battern blovk*/
	CLCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
     fce:	8a 81       	ldd	r24, Y+2	; 0x02
     fd0:	6b 81       	ldd	r22, Y+3	; 0x03
     fd2:	0e 94 89 07 	call	0xf12	; 0xf12 <CLCD_voidGoToXY>
	CLCD_voidSendData(Copy_u8PatternNumber);
     fd6:	89 81       	ldd	r24, Y+1	; 0x01
     fd8:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
}
     fdc:	0f 90       	pop	r0
     fde:	0f 90       	pop	r0
     fe0:	0f 90       	pop	r0
     fe2:	cf 91       	pop	r28
     fe4:	df 91       	pop	r29
     fe6:	08 95       	ret

00000fe8 <CLCD_voidSendNumber>:


void CLCD_voidSendNumber(u32 Copy_u32Number){
     fe8:	df 93       	push	r29
     fea:	cf 93       	push	r28
     fec:	cd b7       	in	r28, 0x3d	; 61
     fee:	de b7       	in	r29, 0x3e	; 62
     ff0:	2b 97       	sbiw	r28, 0x0b	; 11
     ff2:	0f b6       	in	r0, 0x3f	; 63
     ff4:	f8 94       	cli
     ff6:	de bf       	out	0x3e, r29	; 62
     ff8:	0f be       	out	0x3f, r0	; 63
     ffa:	cd bf       	out	0x3d, r28	; 61
     ffc:	68 87       	std	Y+8, r22	; 0x08
     ffe:	79 87       	std	Y+9, r23	; 0x09
    1000:	8a 87       	std	Y+10, r24	; 0x0a
    1002:	9b 87       	std	Y+11, r25	; 0x0b
	/*set local variables to know the number of digits and the digit to print*/
	u8 Local_u8Quotient=1;
    1004:	81 e0       	ldi	r24, 0x01	; 1
    1006:	8f 83       	std	Y+7, r24	; 0x07
	u8 Local_u8NumOfDigits=0;
    1008:	1e 82       	std	Y+6, r1	; 0x06
    100a:	1b c0       	rjmp	.+54     	; 0x1042 <CLCD_voidSendNumber+0x5a>
    u8 Local_u8Digit;
    /*calculating the number of digits in the number*/
	while(Local_u8Quotient!=0){
		Local_u8Quotient = Copy_u32Number/MATH_u32Power(10,++Local_u8NumOfDigits);
    100c:	8e 81       	ldd	r24, Y+6	; 0x06
    100e:	8f 5f       	subi	r24, 0xFF	; 255
    1010:	8e 83       	std	Y+6, r24	; 0x06
    1012:	8e 81       	ldd	r24, Y+6	; 0x06
    1014:	28 2f       	mov	r18, r24
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	40 e0       	ldi	r20, 0x00	; 0
    101a:	50 e0       	ldi	r21, 0x00	; 0
    101c:	6a e0       	ldi	r22, 0x0A	; 10
    101e:	70 e0       	ldi	r23, 0x00	; 0
    1020:	80 e0       	ldi	r24, 0x00	; 0
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <MATH_u32Power>
    1028:	9b 01       	movw	r18, r22
    102a:	ac 01       	movw	r20, r24
    102c:	88 85       	ldd	r24, Y+8	; 0x08
    102e:	99 85       	ldd	r25, Y+9	; 0x09
    1030:	aa 85       	ldd	r26, Y+10	; 0x0a
    1032:	bb 85       	ldd	r27, Y+11	; 0x0b
    1034:	bc 01       	movw	r22, r24
    1036:	cd 01       	movw	r24, r26
    1038:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <__udivmodsi4>
    103c:	da 01       	movw	r26, r20
    103e:	c9 01       	movw	r24, r18
    1040:	8f 83       	std	Y+7, r24	; 0x07
	/*set local variables to know the number of digits and the digit to print*/
	u8 Local_u8Quotient=1;
	u8 Local_u8NumOfDigits=0;
    u8 Local_u8Digit;
    /*calculating the number of digits in the number*/
	while(Local_u8Quotient!=0){
    1042:	8f 81       	ldd	r24, Y+7	; 0x07
    1044:	88 23       	and	r24, r24
    1046:	11 f7       	brne	.-60     	; 0x100c <CLCD_voidSendNumber+0x24>
		Local_u8Quotient = Copy_u32Number/MATH_u32Power(10,++Local_u8NumOfDigits);
	}
	/*separating each digit then sending then sending them separately to the CLCD*/
	for(s32 Local_u8Power =Local_u8NumOfDigits-1;Local_u8Power>=0;Local_u8Power--){
    1048:	8e 81       	ldd	r24, Y+6	; 0x06
    104a:	88 2f       	mov	r24, r24
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	01 97       	sbiw	r24, 0x01	; 1
    1050:	aa 27       	eor	r26, r26
    1052:	97 fd       	sbrc	r25, 7
    1054:	a0 95       	com	r26
    1056:	ba 2f       	mov	r27, r26
    1058:	89 83       	std	Y+1, r24	; 0x01
    105a:	9a 83       	std	Y+2, r25	; 0x02
    105c:	ab 83       	std	Y+3, r26	; 0x03
    105e:	bc 83       	std	Y+4, r27	; 0x04
    1060:	42 c0       	rjmp	.+132    	; 0x10e6 <CLCD_voidSendNumber+0xfe>
	        Local_u8Digit=Copy_u32Number/MATH_u32Power(10,Local_u8Power);
    1062:	29 81       	ldd	r18, Y+1	; 0x01
    1064:	3a 81       	ldd	r19, Y+2	; 0x02
    1066:	4b 81       	ldd	r20, Y+3	; 0x03
    1068:	5c 81       	ldd	r21, Y+4	; 0x04
    106a:	6a e0       	ldi	r22, 0x0A	; 10
    106c:	70 e0       	ldi	r23, 0x00	; 0
    106e:	80 e0       	ldi	r24, 0x00	; 0
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <MATH_u32Power>
    1076:	9b 01       	movw	r18, r22
    1078:	ac 01       	movw	r20, r24
    107a:	88 85       	ldd	r24, Y+8	; 0x08
    107c:	99 85       	ldd	r25, Y+9	; 0x09
    107e:	aa 85       	ldd	r26, Y+10	; 0x0a
    1080:	bb 85       	ldd	r27, Y+11	; 0x0b
    1082:	bc 01       	movw	r22, r24
    1084:	cd 01       	movw	r24, r26
    1086:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <__udivmodsi4>
    108a:	da 01       	movw	r26, r20
    108c:	c9 01       	movw	r24, r18
    108e:	8d 83       	std	Y+5, r24	; 0x05
	        Copy_u32Number %= MATH_u32Power(10,Local_u8Power);
    1090:	29 81       	ldd	r18, Y+1	; 0x01
    1092:	3a 81       	ldd	r19, Y+2	; 0x02
    1094:	4b 81       	ldd	r20, Y+3	; 0x03
    1096:	5c 81       	ldd	r21, Y+4	; 0x04
    1098:	6a e0       	ldi	r22, 0x0A	; 10
    109a:	70 e0       	ldi	r23, 0x00	; 0
    109c:	80 e0       	ldi	r24, 0x00	; 0
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <MATH_u32Power>
    10a4:	9b 01       	movw	r18, r22
    10a6:	ac 01       	movw	r20, r24
    10a8:	88 85       	ldd	r24, Y+8	; 0x08
    10aa:	99 85       	ldd	r25, Y+9	; 0x09
    10ac:	aa 85       	ldd	r26, Y+10	; 0x0a
    10ae:	bb 85       	ldd	r27, Y+11	; 0x0b
    10b0:	bc 01       	movw	r22, r24
    10b2:	cd 01       	movw	r24, r26
    10b4:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <__udivmodsi4>
    10b8:	dc 01       	movw	r26, r24
    10ba:	cb 01       	movw	r24, r22
    10bc:	88 87       	std	Y+8, r24	; 0x08
    10be:	99 87       	std	Y+9, r25	; 0x09
    10c0:	aa 87       	std	Y+10, r26	; 0x0a
    10c2:	bb 87       	std	Y+11, r27	; 0x0b
	        Local_u8Digit+=48;
    10c4:	8d 81       	ldd	r24, Y+5	; 0x05
    10c6:	80 5d       	subi	r24, 0xD0	; 208
    10c8:	8d 83       	std	Y+5, r24	; 0x05
	        CLCD_voidSendData(Local_u8Digit);
    10ca:	8d 81       	ldd	r24, Y+5	; 0x05
    10cc:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    /*calculating the number of digits in the number*/
	while(Local_u8Quotient!=0){
		Local_u8Quotient = Copy_u32Number/MATH_u32Power(10,++Local_u8NumOfDigits);
	}
	/*separating each digit then sending then sending them separately to the CLCD*/
	for(s32 Local_u8Power =Local_u8NumOfDigits-1;Local_u8Power>=0;Local_u8Power--){
    10d0:	89 81       	ldd	r24, Y+1	; 0x01
    10d2:	9a 81       	ldd	r25, Y+2	; 0x02
    10d4:	ab 81       	ldd	r26, Y+3	; 0x03
    10d6:	bc 81       	ldd	r27, Y+4	; 0x04
    10d8:	01 97       	sbiw	r24, 0x01	; 1
    10da:	a1 09       	sbc	r26, r1
    10dc:	b1 09       	sbc	r27, r1
    10de:	89 83       	std	Y+1, r24	; 0x01
    10e0:	9a 83       	std	Y+2, r25	; 0x02
    10e2:	ab 83       	std	Y+3, r26	; 0x03
    10e4:	bc 83       	std	Y+4, r27	; 0x04
    10e6:	89 81       	ldd	r24, Y+1	; 0x01
    10e8:	9a 81       	ldd	r25, Y+2	; 0x02
    10ea:	ab 81       	ldd	r26, Y+3	; 0x03
    10ec:	bc 81       	ldd	r27, Y+4	; 0x04
    10ee:	bb 23       	and	r27, r27
    10f0:	0c f0       	brlt	.+2      	; 0x10f4 <CLCD_voidSendNumber+0x10c>
    10f2:	b7 cf       	rjmp	.-146    	; 0x1062 <CLCD_voidSendNumber+0x7a>
	        Local_u8Digit=Copy_u32Number/MATH_u32Power(10,Local_u8Power);
	        Copy_u32Number %= MATH_u32Power(10,Local_u8Power);
	        Local_u8Digit+=48;
	        CLCD_voidSendData(Local_u8Digit);
	    }
}
    10f4:	2b 96       	adiw	r28, 0x0b	; 11
    10f6:	0f b6       	in	r0, 0x3f	; 63
    10f8:	f8 94       	cli
    10fa:	de bf       	out	0x3e, r29	; 62
    10fc:	0f be       	out	0x3f, r0	; 63
    10fe:	cd bf       	out	0x3d, r28	; 61
    1100:	cf 91       	pop	r28
    1102:	df 91       	pop	r29
    1104:	08 95       	ret

00001106 <CLCD_voidCLR>:

void CLCD_voidCLR(void){
    1106:	df 93       	push	r29
    1108:	cf 93       	push	r28
    110a:	cd b7       	in	r28, 0x3d	; 61
    110c:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSendCommand(CLCD_CLR);
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
}
    1114:	cf 91       	pop	r28
    1116:	df 91       	pop	r29
    1118:	08 95       	ret

0000111a <DIO_u8SetPinValue>:
#include "DIO_private.h"
#include "DIO_config.h"



u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value){
    111a:	df 93       	push	r29
    111c:	cf 93       	push	r28
    111e:	cd b7       	in	r28, 0x3d	; 61
    1120:	de b7       	in	r29, 0x3e	; 62
    1122:	28 97       	sbiw	r28, 0x08	; 8
    1124:	0f b6       	in	r0, 0x3f	; 63
    1126:	f8 94       	cli
    1128:	de bf       	out	0x3e, r29	; 62
    112a:	0f be       	out	0x3f, r0	; 63
    112c:	cd bf       	out	0x3d, r28	; 61
    112e:	8a 83       	std	Y+2, r24	; 0x02
    1130:	6b 83       	std	Y+3, r22	; 0x03
    1132:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    1134:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin <= DIO_u8PIN7){
    1136:	8b 81       	ldd	r24, Y+3	; 0x03
    1138:	88 30       	cpi	r24, 0x08	; 8
    113a:	08 f0       	brcs	.+2      	; 0x113e <DIO_u8SetPinValue+0x24>
    113c:	f4 c0       	rjmp	.+488    	; 0x1326 <DIO_u8SetPinValue+0x20c>
		if(Copy_u8Value == DIO_u8PIN_LOW){
    113e:	8c 81       	ldd	r24, Y+4	; 0x04
    1140:	88 23       	and	r24, r24
    1142:	09 f0       	breq	.+2      	; 0x1146 <DIO_u8SetPinValue+0x2c>
    1144:	77 c0       	rjmp	.+238    	; 0x1234 <DIO_u8SetPinValue+0x11a>
			switch(Copy_u8Port){
    1146:	8a 81       	ldd	r24, Y+2	; 0x02
    1148:	28 2f       	mov	r18, r24
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	38 87       	std	Y+8, r19	; 0x08
    114e:	2f 83       	std	Y+7, r18	; 0x07
    1150:	8f 81       	ldd	r24, Y+7	; 0x07
    1152:	98 85       	ldd	r25, Y+8	; 0x08
    1154:	81 30       	cpi	r24, 0x01	; 1
    1156:	91 05       	cpc	r25, r1
    1158:	59 f1       	breq	.+86     	; 0x11b0 <DIO_u8SetPinValue+0x96>
    115a:	2f 81       	ldd	r18, Y+7	; 0x07
    115c:	38 85       	ldd	r19, Y+8	; 0x08
    115e:	22 30       	cpi	r18, 0x02	; 2
    1160:	31 05       	cpc	r19, r1
    1162:	2c f4       	brge	.+10     	; 0x116e <DIO_u8SetPinValue+0x54>
    1164:	8f 81       	ldd	r24, Y+7	; 0x07
    1166:	98 85       	ldd	r25, Y+8	; 0x08
    1168:	00 97       	sbiw	r24, 0x00	; 0
    116a:	69 f0       	breq	.+26     	; 0x1186 <DIO_u8SetPinValue+0x6c>
    116c:	60 c0       	rjmp	.+192    	; 0x122e <DIO_u8SetPinValue+0x114>
    116e:	2f 81       	ldd	r18, Y+7	; 0x07
    1170:	38 85       	ldd	r19, Y+8	; 0x08
    1172:	22 30       	cpi	r18, 0x02	; 2
    1174:	31 05       	cpc	r19, r1
    1176:	89 f1       	breq	.+98     	; 0x11da <DIO_u8SetPinValue+0xc0>
    1178:	8f 81       	ldd	r24, Y+7	; 0x07
    117a:	98 85       	ldd	r25, Y+8	; 0x08
    117c:	83 30       	cpi	r24, 0x03	; 3
    117e:	91 05       	cpc	r25, r1
    1180:	09 f4       	brne	.+2      	; 0x1184 <DIO_u8SetPinValue+0x6a>
    1182:	40 c0       	rjmp	.+128    	; 0x1204 <DIO_u8SetPinValue+0xea>
    1184:	54 c0       	rjmp	.+168    	; 0x122e <DIO_u8SetPinValue+0x114>
			case DIO_u8PORTA : CLR_BIT(PORTA,Copy_u8Pin); break;
    1186:	ab e3       	ldi	r26, 0x3B	; 59
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	eb e3       	ldi	r30, 0x3B	; 59
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	48 2f       	mov	r20, r24
    1192:	8b 81       	ldd	r24, Y+3	; 0x03
    1194:	28 2f       	mov	r18, r24
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	02 2e       	mov	r0, r18
    119e:	02 c0       	rjmp	.+4      	; 0x11a4 <DIO_u8SetPinValue+0x8a>
    11a0:	88 0f       	add	r24, r24
    11a2:	99 1f       	adc	r25, r25
    11a4:	0a 94       	dec	r0
    11a6:	e2 f7       	brpl	.-8      	; 0x11a0 <DIO_u8SetPinValue+0x86>
    11a8:	80 95       	com	r24
    11aa:	84 23       	and	r24, r20
    11ac:	8c 93       	st	X, r24
    11ae:	bd c0       	rjmp	.+378    	; 0x132a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB : CLR_BIT(PORTB,Copy_u8Pin); break;
    11b0:	a8 e3       	ldi	r26, 0x38	; 56
    11b2:	b0 e0       	ldi	r27, 0x00	; 0
    11b4:	e8 e3       	ldi	r30, 0x38	; 56
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	48 2f       	mov	r20, r24
    11bc:	8b 81       	ldd	r24, Y+3	; 0x03
    11be:	28 2f       	mov	r18, r24
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	02 2e       	mov	r0, r18
    11c8:	02 c0       	rjmp	.+4      	; 0x11ce <DIO_u8SetPinValue+0xb4>
    11ca:	88 0f       	add	r24, r24
    11cc:	99 1f       	adc	r25, r25
    11ce:	0a 94       	dec	r0
    11d0:	e2 f7       	brpl	.-8      	; 0x11ca <DIO_u8SetPinValue+0xb0>
    11d2:	80 95       	com	r24
    11d4:	84 23       	and	r24, r20
    11d6:	8c 93       	st	X, r24
    11d8:	a8 c0       	rjmp	.+336    	; 0x132a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC : CLR_BIT(PORTC,Copy_u8Pin); break;
    11da:	a5 e3       	ldi	r26, 0x35	; 53
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	e5 e3       	ldi	r30, 0x35	; 53
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	48 2f       	mov	r20, r24
    11e6:	8b 81       	ldd	r24, Y+3	; 0x03
    11e8:	28 2f       	mov	r18, r24
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	02 2e       	mov	r0, r18
    11f2:	02 c0       	rjmp	.+4      	; 0x11f8 <DIO_u8SetPinValue+0xde>
    11f4:	88 0f       	add	r24, r24
    11f6:	99 1f       	adc	r25, r25
    11f8:	0a 94       	dec	r0
    11fa:	e2 f7       	brpl	.-8      	; 0x11f4 <DIO_u8SetPinValue+0xda>
    11fc:	80 95       	com	r24
    11fe:	84 23       	and	r24, r20
    1200:	8c 93       	st	X, r24
    1202:	93 c0       	rjmp	.+294    	; 0x132a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD : CLR_BIT(PORTD,Copy_u8Pin); break;
    1204:	a2 e3       	ldi	r26, 0x32	; 50
    1206:	b0 e0       	ldi	r27, 0x00	; 0
    1208:	e2 e3       	ldi	r30, 0x32	; 50
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	80 81       	ld	r24, Z
    120e:	48 2f       	mov	r20, r24
    1210:	8b 81       	ldd	r24, Y+3	; 0x03
    1212:	28 2f       	mov	r18, r24
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	81 e0       	ldi	r24, 0x01	; 1
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	02 2e       	mov	r0, r18
    121c:	02 c0       	rjmp	.+4      	; 0x1222 <DIO_u8SetPinValue+0x108>
    121e:	88 0f       	add	r24, r24
    1220:	99 1f       	adc	r25, r25
    1222:	0a 94       	dec	r0
    1224:	e2 f7       	brpl	.-8      	; 0x121e <DIO_u8SetPinValue+0x104>
    1226:	80 95       	com	r24
    1228:	84 23       	and	r24, r20
    122a:	8c 93       	st	X, r24
    122c:	7e c0       	rjmp	.+252    	; 0x132a <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1;
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	89 83       	std	Y+1, r24	; 0x01
    1232:	7b c0       	rjmp	.+246    	; 0x132a <DIO_u8SetPinValue+0x210>
			}
		}
		else if(Copy_u8Value == DIO_u8PIN_HIGH){
    1234:	8c 81       	ldd	r24, Y+4	; 0x04
    1236:	81 30       	cpi	r24, 0x01	; 1
    1238:	09 f0       	breq	.+2      	; 0x123c <DIO_u8SetPinValue+0x122>
    123a:	72 c0       	rjmp	.+228    	; 0x1320 <DIO_u8SetPinValue+0x206>
			switch(Copy_u8Port){
    123c:	8a 81       	ldd	r24, Y+2	; 0x02
    123e:	28 2f       	mov	r18, r24
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	3e 83       	std	Y+6, r19	; 0x06
    1244:	2d 83       	std	Y+5, r18	; 0x05
    1246:	8d 81       	ldd	r24, Y+5	; 0x05
    1248:	9e 81       	ldd	r25, Y+6	; 0x06
    124a:	81 30       	cpi	r24, 0x01	; 1
    124c:	91 05       	cpc	r25, r1
    124e:	49 f1       	breq	.+82     	; 0x12a2 <DIO_u8SetPinValue+0x188>
    1250:	2d 81       	ldd	r18, Y+5	; 0x05
    1252:	3e 81       	ldd	r19, Y+6	; 0x06
    1254:	22 30       	cpi	r18, 0x02	; 2
    1256:	31 05       	cpc	r19, r1
    1258:	2c f4       	brge	.+10     	; 0x1264 <DIO_u8SetPinValue+0x14a>
    125a:	8d 81       	ldd	r24, Y+5	; 0x05
    125c:	9e 81       	ldd	r25, Y+6	; 0x06
    125e:	00 97       	sbiw	r24, 0x00	; 0
    1260:	61 f0       	breq	.+24     	; 0x127a <DIO_u8SetPinValue+0x160>
    1262:	5b c0       	rjmp	.+182    	; 0x131a <DIO_u8SetPinValue+0x200>
    1264:	2d 81       	ldd	r18, Y+5	; 0x05
    1266:	3e 81       	ldd	r19, Y+6	; 0x06
    1268:	22 30       	cpi	r18, 0x02	; 2
    126a:	31 05       	cpc	r19, r1
    126c:	71 f1       	breq	.+92     	; 0x12ca <DIO_u8SetPinValue+0x1b0>
    126e:	8d 81       	ldd	r24, Y+5	; 0x05
    1270:	9e 81       	ldd	r25, Y+6	; 0x06
    1272:	83 30       	cpi	r24, 0x03	; 3
    1274:	91 05       	cpc	r25, r1
    1276:	e9 f1       	breq	.+122    	; 0x12f2 <DIO_u8SetPinValue+0x1d8>
    1278:	50 c0       	rjmp	.+160    	; 0x131a <DIO_u8SetPinValue+0x200>
			case DIO_u8PORTA : SET_BIT(PORTA,Copy_u8Pin); break;
    127a:	ab e3       	ldi	r26, 0x3B	; 59
    127c:	b0 e0       	ldi	r27, 0x00	; 0
    127e:	eb e3       	ldi	r30, 0x3B	; 59
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	80 81       	ld	r24, Z
    1284:	48 2f       	mov	r20, r24
    1286:	8b 81       	ldd	r24, Y+3	; 0x03
    1288:	28 2f       	mov	r18, r24
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	02 2e       	mov	r0, r18
    1292:	02 c0       	rjmp	.+4      	; 0x1298 <DIO_u8SetPinValue+0x17e>
    1294:	88 0f       	add	r24, r24
    1296:	99 1f       	adc	r25, r25
    1298:	0a 94       	dec	r0
    129a:	e2 f7       	brpl	.-8      	; 0x1294 <DIO_u8SetPinValue+0x17a>
    129c:	84 2b       	or	r24, r20
    129e:	8c 93       	st	X, r24
    12a0:	44 c0       	rjmp	.+136    	; 0x132a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB : SET_BIT(PORTB,Copy_u8Pin); break;
    12a2:	a8 e3       	ldi	r26, 0x38	; 56
    12a4:	b0 e0       	ldi	r27, 0x00	; 0
    12a6:	e8 e3       	ldi	r30, 0x38	; 56
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	48 2f       	mov	r20, r24
    12ae:	8b 81       	ldd	r24, Y+3	; 0x03
    12b0:	28 2f       	mov	r18, r24
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	02 2e       	mov	r0, r18
    12ba:	02 c0       	rjmp	.+4      	; 0x12c0 <DIO_u8SetPinValue+0x1a6>
    12bc:	88 0f       	add	r24, r24
    12be:	99 1f       	adc	r25, r25
    12c0:	0a 94       	dec	r0
    12c2:	e2 f7       	brpl	.-8      	; 0x12bc <DIO_u8SetPinValue+0x1a2>
    12c4:	84 2b       	or	r24, r20
    12c6:	8c 93       	st	X, r24
    12c8:	30 c0       	rjmp	.+96     	; 0x132a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC : SET_BIT(PORTC,Copy_u8Pin); break;
    12ca:	a5 e3       	ldi	r26, 0x35	; 53
    12cc:	b0 e0       	ldi	r27, 0x00	; 0
    12ce:	e5 e3       	ldi	r30, 0x35	; 53
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	80 81       	ld	r24, Z
    12d4:	48 2f       	mov	r20, r24
    12d6:	8b 81       	ldd	r24, Y+3	; 0x03
    12d8:	28 2f       	mov	r18, r24
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	02 2e       	mov	r0, r18
    12e2:	02 c0       	rjmp	.+4      	; 0x12e8 <DIO_u8SetPinValue+0x1ce>
    12e4:	88 0f       	add	r24, r24
    12e6:	99 1f       	adc	r25, r25
    12e8:	0a 94       	dec	r0
    12ea:	e2 f7       	brpl	.-8      	; 0x12e4 <DIO_u8SetPinValue+0x1ca>
    12ec:	84 2b       	or	r24, r20
    12ee:	8c 93       	st	X, r24
    12f0:	1c c0       	rjmp	.+56     	; 0x132a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD : SET_BIT(PORTD,Copy_u8Pin); break;
    12f2:	a2 e3       	ldi	r26, 0x32	; 50
    12f4:	b0 e0       	ldi	r27, 0x00	; 0
    12f6:	e2 e3       	ldi	r30, 0x32	; 50
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	80 81       	ld	r24, Z
    12fc:	48 2f       	mov	r20, r24
    12fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1300:	28 2f       	mov	r18, r24
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	81 e0       	ldi	r24, 0x01	; 1
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	02 2e       	mov	r0, r18
    130a:	02 c0       	rjmp	.+4      	; 0x1310 <DIO_u8SetPinValue+0x1f6>
    130c:	88 0f       	add	r24, r24
    130e:	99 1f       	adc	r25, r25
    1310:	0a 94       	dec	r0
    1312:	e2 f7       	brpl	.-8      	; 0x130c <DIO_u8SetPinValue+0x1f2>
    1314:	84 2b       	or	r24, r20
    1316:	8c 93       	st	X, r24
    1318:	08 c0       	rjmp	.+16     	; 0x132a <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1;
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	89 83       	std	Y+1, r24	; 0x01
    131e:	05 c0       	rjmp	.+10     	; 0x132a <DIO_u8SetPinValue+0x210>
			}
		}
		else{
			Local_u8ErrorState=1;
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	89 83       	std	Y+1, r24	; 0x01
    1324:	02 c0       	rjmp	.+4      	; 0x132a <DIO_u8SetPinValue+0x210>
		}
	}
	else{
		Local_u8ErrorState=1;
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState ;
    132a:	89 81       	ldd	r24, Y+1	; 0x01
}
    132c:	28 96       	adiw	r28, 0x08	; 8
    132e:	0f b6       	in	r0, 0x3f	; 63
    1330:	f8 94       	cli
    1332:	de bf       	out	0x3e, r29	; 62
    1334:	0f be       	out	0x3f, r0	; 63
    1336:	cd bf       	out	0x3d, r28	; 61
    1338:	cf 91       	pop	r28
    133a:	df 91       	pop	r29
    133c:	08 95       	ret

0000133e <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8Port,u8 Copy_u8Value){
    133e:	df 93       	push	r29
    1340:	cf 93       	push	r28
    1342:	00 d0       	rcall	.+0      	; 0x1344 <DIO_u8SetPortValue+0x6>
    1344:	00 d0       	rcall	.+0      	; 0x1346 <DIO_u8SetPortValue+0x8>
    1346:	0f 92       	push	r0
    1348:	cd b7       	in	r28, 0x3d	; 61
    134a:	de b7       	in	r29, 0x3e	; 62
    134c:	8a 83       	std	Y+2, r24	; 0x02
    134e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    1350:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8Port)
    1352:	8a 81       	ldd	r24, Y+2	; 0x02
    1354:	28 2f       	mov	r18, r24
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	3d 83       	std	Y+5, r19	; 0x05
    135a:	2c 83       	std	Y+4, r18	; 0x04
    135c:	8c 81       	ldd	r24, Y+4	; 0x04
    135e:	9d 81       	ldd	r25, Y+5	; 0x05
    1360:	81 30       	cpi	r24, 0x01	; 1
    1362:	91 05       	cpc	r25, r1
    1364:	d1 f0       	breq	.+52     	; 0x139a <DIO_u8SetPortValue+0x5c>
    1366:	2c 81       	ldd	r18, Y+4	; 0x04
    1368:	3d 81       	ldd	r19, Y+5	; 0x05
    136a:	22 30       	cpi	r18, 0x02	; 2
    136c:	31 05       	cpc	r19, r1
    136e:	2c f4       	brge	.+10     	; 0x137a <DIO_u8SetPortValue+0x3c>
    1370:	8c 81       	ldd	r24, Y+4	; 0x04
    1372:	9d 81       	ldd	r25, Y+5	; 0x05
    1374:	00 97       	sbiw	r24, 0x00	; 0
    1376:	61 f0       	breq	.+24     	; 0x1390 <DIO_u8SetPortValue+0x52>
    1378:	1f c0       	rjmp	.+62     	; 0x13b8 <DIO_u8SetPortValue+0x7a>
    137a:	2c 81       	ldd	r18, Y+4	; 0x04
    137c:	3d 81       	ldd	r19, Y+5	; 0x05
    137e:	22 30       	cpi	r18, 0x02	; 2
    1380:	31 05       	cpc	r19, r1
    1382:	81 f0       	breq	.+32     	; 0x13a4 <DIO_u8SetPortValue+0x66>
    1384:	8c 81       	ldd	r24, Y+4	; 0x04
    1386:	9d 81       	ldd	r25, Y+5	; 0x05
    1388:	83 30       	cpi	r24, 0x03	; 3
    138a:	91 05       	cpc	r25, r1
    138c:	81 f0       	breq	.+32     	; 0x13ae <DIO_u8SetPortValue+0x70>
    138e:	14 c0       	rjmp	.+40     	; 0x13b8 <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA: PORTA=Copy_u8Value; break;
    1390:	eb e3       	ldi	r30, 0x3B	; 59
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	8b 81       	ldd	r24, Y+3	; 0x03
    1396:	80 83       	st	Z, r24
    1398:	11 c0       	rjmp	.+34     	; 0x13bc <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB: PORTB=Copy_u8Value; break;
    139a:	e8 e3       	ldi	r30, 0x38	; 56
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	8b 81       	ldd	r24, Y+3	; 0x03
    13a0:	80 83       	st	Z, r24
    13a2:	0c c0       	rjmp	.+24     	; 0x13bc <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC: PORTC=Copy_u8Value; break;
    13a4:	e5 e3       	ldi	r30, 0x35	; 53
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	8b 81       	ldd	r24, Y+3	; 0x03
    13aa:	80 83       	st	Z, r24
    13ac:	07 c0       	rjmp	.+14     	; 0x13bc <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD: PORTD=Copy_u8Value; break;
    13ae:	e2 e3       	ldi	r30, 0x32	; 50
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	8b 81       	ldd	r24, Y+3	; 0x03
    13b4:	80 83       	st	Z, r24
    13b6:	02 c0       	rjmp	.+4      	; 0x13bc <DIO_u8SetPortValue+0x7e>
	default: Local_u8ErrorState=1 ;
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState ;
    13bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    13be:	0f 90       	pop	r0
    13c0:	0f 90       	pop	r0
    13c2:	0f 90       	pop	r0
    13c4:	0f 90       	pop	r0
    13c6:	0f 90       	pop	r0
    13c8:	cf 91       	pop	r28
    13ca:	df 91       	pop	r29
    13cc:	08 95       	ret

000013ce <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin, u8* Copy_pu8Value){
    13ce:	df 93       	push	r29
    13d0:	cf 93       	push	r28
    13d2:	cd b7       	in	r28, 0x3d	; 61
    13d4:	de b7       	in	r29, 0x3e	; 62
    13d6:	27 97       	sbiw	r28, 0x07	; 7
    13d8:	0f b6       	in	r0, 0x3f	; 63
    13da:	f8 94       	cli
    13dc:	de bf       	out	0x3e, r29	; 62
    13de:	0f be       	out	0x3f, r0	; 63
    13e0:	cd bf       	out	0x3d, r28	; 61
    13e2:	8a 83       	std	Y+2, r24	; 0x02
    13e4:	6b 83       	std	Y+3, r22	; 0x03
    13e6:	5d 83       	std	Y+5, r21	; 0x05
    13e8:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    13ea:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_pu8Value != NULL) && (Copy_u8Pin <= DIO_u8PIN7)){
    13ec:	8c 81       	ldd	r24, Y+4	; 0x04
    13ee:	9d 81       	ldd	r25, Y+5	; 0x05
    13f0:	00 97       	sbiw	r24, 0x00	; 0
    13f2:	09 f4       	brne	.+2      	; 0x13f6 <DIO_u8GetPinValue+0x28>
    13f4:	78 c0       	rjmp	.+240    	; 0x14e6 <DIO_u8GetPinValue+0x118>
    13f6:	8b 81       	ldd	r24, Y+3	; 0x03
    13f8:	88 30       	cpi	r24, 0x08	; 8
    13fa:	08 f0       	brcs	.+2      	; 0x13fe <DIO_u8GetPinValue+0x30>
    13fc:	74 c0       	rjmp	.+232    	; 0x14e6 <DIO_u8GetPinValue+0x118>
		switch (Copy_u8Port){
    13fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1400:	28 2f       	mov	r18, r24
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	3f 83       	std	Y+7, r19	; 0x07
    1406:	2e 83       	std	Y+6, r18	; 0x06
    1408:	4e 81       	ldd	r20, Y+6	; 0x06
    140a:	5f 81       	ldd	r21, Y+7	; 0x07
    140c:	41 30       	cpi	r20, 0x01	; 1
    140e:	51 05       	cpc	r21, r1
    1410:	59 f1       	breq	.+86     	; 0x1468 <DIO_u8GetPinValue+0x9a>
    1412:	8e 81       	ldd	r24, Y+6	; 0x06
    1414:	9f 81       	ldd	r25, Y+7	; 0x07
    1416:	82 30       	cpi	r24, 0x02	; 2
    1418:	91 05       	cpc	r25, r1
    141a:	34 f4       	brge	.+12     	; 0x1428 <DIO_u8GetPinValue+0x5a>
    141c:	2e 81       	ldd	r18, Y+6	; 0x06
    141e:	3f 81       	ldd	r19, Y+7	; 0x07
    1420:	21 15       	cp	r18, r1
    1422:	31 05       	cpc	r19, r1
    1424:	69 f0       	breq	.+26     	; 0x1440 <DIO_u8GetPinValue+0x72>
    1426:	5c c0       	rjmp	.+184    	; 0x14e0 <DIO_u8GetPinValue+0x112>
    1428:	4e 81       	ldd	r20, Y+6	; 0x06
    142a:	5f 81       	ldd	r21, Y+7	; 0x07
    142c:	42 30       	cpi	r20, 0x02	; 2
    142e:	51 05       	cpc	r21, r1
    1430:	79 f1       	breq	.+94     	; 0x1490 <DIO_u8GetPinValue+0xc2>
    1432:	8e 81       	ldd	r24, Y+6	; 0x06
    1434:	9f 81       	ldd	r25, Y+7	; 0x07
    1436:	83 30       	cpi	r24, 0x03	; 3
    1438:	91 05       	cpc	r25, r1
    143a:	09 f4       	brne	.+2      	; 0x143e <DIO_u8GetPinValue+0x70>
    143c:	3d c0       	rjmp	.+122    	; 0x14b8 <DIO_u8GetPinValue+0xea>
    143e:	50 c0       	rjmp	.+160    	; 0x14e0 <DIO_u8GetPinValue+0x112>
		case DIO_u8PORTA: *Copy_pu8Value = GET_BIT(PINA,Copy_u8Pin); break;
    1440:	e9 e3       	ldi	r30, 0x39	; 57
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
    1446:	28 2f       	mov	r18, r24
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	8b 81       	ldd	r24, Y+3	; 0x03
    144c:	88 2f       	mov	r24, r24
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	a9 01       	movw	r20, r18
    1452:	02 c0       	rjmp	.+4      	; 0x1458 <DIO_u8GetPinValue+0x8a>
    1454:	55 95       	asr	r21
    1456:	47 95       	ror	r20
    1458:	8a 95       	dec	r24
    145a:	e2 f7       	brpl	.-8      	; 0x1454 <DIO_u8GetPinValue+0x86>
    145c:	ca 01       	movw	r24, r20
    145e:	81 70       	andi	r24, 0x01	; 1
    1460:	ec 81       	ldd	r30, Y+4	; 0x04
    1462:	fd 81       	ldd	r31, Y+5	; 0x05
    1464:	80 83       	st	Z, r24
    1466:	41 c0       	rjmp	.+130    	; 0x14ea <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTB: *Copy_pu8Value = GET_BIT(PINB,Copy_u8Pin); break;
    1468:	e6 e3       	ldi	r30, 0x36	; 54
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	28 2f       	mov	r18, r24
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	8b 81       	ldd	r24, Y+3	; 0x03
    1474:	88 2f       	mov	r24, r24
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	a9 01       	movw	r20, r18
    147a:	02 c0       	rjmp	.+4      	; 0x1480 <DIO_u8GetPinValue+0xb2>
    147c:	55 95       	asr	r21
    147e:	47 95       	ror	r20
    1480:	8a 95       	dec	r24
    1482:	e2 f7       	brpl	.-8      	; 0x147c <DIO_u8GetPinValue+0xae>
    1484:	ca 01       	movw	r24, r20
    1486:	81 70       	andi	r24, 0x01	; 1
    1488:	ec 81       	ldd	r30, Y+4	; 0x04
    148a:	fd 81       	ldd	r31, Y+5	; 0x05
    148c:	80 83       	st	Z, r24
    148e:	2d c0       	rjmp	.+90     	; 0x14ea <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTC: *Copy_pu8Value = GET_BIT(PINC,Copy_u8Pin); break;
    1490:	e3 e3       	ldi	r30, 0x33	; 51
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	80 81       	ld	r24, Z
    1496:	28 2f       	mov	r18, r24
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	8b 81       	ldd	r24, Y+3	; 0x03
    149c:	88 2f       	mov	r24, r24
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	a9 01       	movw	r20, r18
    14a2:	02 c0       	rjmp	.+4      	; 0x14a8 <DIO_u8GetPinValue+0xda>
    14a4:	55 95       	asr	r21
    14a6:	47 95       	ror	r20
    14a8:	8a 95       	dec	r24
    14aa:	e2 f7       	brpl	.-8      	; 0x14a4 <DIO_u8GetPinValue+0xd6>
    14ac:	ca 01       	movw	r24, r20
    14ae:	81 70       	andi	r24, 0x01	; 1
    14b0:	ec 81       	ldd	r30, Y+4	; 0x04
    14b2:	fd 81       	ldd	r31, Y+5	; 0x05
    14b4:	80 83       	st	Z, r24
    14b6:	19 c0       	rjmp	.+50     	; 0x14ea <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTD: *Copy_pu8Value = GET_BIT(PIND,Copy_u8Pin); break;
    14b8:	e0 e3       	ldi	r30, 0x30	; 48
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	80 81       	ld	r24, Z
    14be:	28 2f       	mov	r18, r24
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	8b 81       	ldd	r24, Y+3	; 0x03
    14c4:	88 2f       	mov	r24, r24
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	a9 01       	movw	r20, r18
    14ca:	02 c0       	rjmp	.+4      	; 0x14d0 <DIO_u8GetPinValue+0x102>
    14cc:	55 95       	asr	r21
    14ce:	47 95       	ror	r20
    14d0:	8a 95       	dec	r24
    14d2:	e2 f7       	brpl	.-8      	; 0x14cc <DIO_u8GetPinValue+0xfe>
    14d4:	ca 01       	movw	r24, r20
    14d6:	81 70       	andi	r24, 0x01	; 1
    14d8:	ec 81       	ldd	r30, Y+4	; 0x04
    14da:	fd 81       	ldd	r31, Y+5	; 0x05
    14dc:	80 83       	st	Z, r24
    14de:	05 c0       	rjmp	.+10     	; 0x14ea <DIO_u8GetPinValue+0x11c>
		default:Local_u8ErrorState=1 ;
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	89 83       	std	Y+1, r24	; 0x01
    14e4:	02 c0       	rjmp	.+4      	; 0x14ea <DIO_u8GetPinValue+0x11c>
		}
	}
	else{
		Local_u8ErrorState=1;
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState ;
    14ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    14ec:	27 96       	adiw	r28, 0x07	; 7
    14ee:	0f b6       	in	r0, 0x3f	; 63
    14f0:	f8 94       	cli
    14f2:	de bf       	out	0x3e, r29	; 62
    14f4:	0f be       	out	0x3f, r0	; 63
    14f6:	cd bf       	out	0x3d, r28	; 61
    14f8:	cf 91       	pop	r28
    14fa:	df 91       	pop	r29
    14fc:	08 95       	ret

000014fe <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8Port,u8* Copy_pu8Value){
    14fe:	df 93       	push	r29
    1500:	cf 93       	push	r28
    1502:	00 d0       	rcall	.+0      	; 0x1504 <DIO_u8GetPortValue+0x6>
    1504:	00 d0       	rcall	.+0      	; 0x1506 <DIO_u8GetPortValue+0x8>
    1506:	00 d0       	rcall	.+0      	; 0x1508 <DIO_u8GetPortValue+0xa>
    1508:	cd b7       	in	r28, 0x3d	; 61
    150a:	de b7       	in	r29, 0x3e	; 62
    150c:	8a 83       	std	Y+2, r24	; 0x02
    150e:	7c 83       	std	Y+4, r23	; 0x04
    1510:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    1512:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8Port)
    1514:	8a 81       	ldd	r24, Y+2	; 0x02
    1516:	28 2f       	mov	r18, r24
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	3e 83       	std	Y+6, r19	; 0x06
    151c:	2d 83       	std	Y+5, r18	; 0x05
    151e:	8d 81       	ldd	r24, Y+5	; 0x05
    1520:	9e 81       	ldd	r25, Y+6	; 0x06
    1522:	81 30       	cpi	r24, 0x01	; 1
    1524:	91 05       	cpc	r25, r1
    1526:	e1 f0       	breq	.+56     	; 0x1560 <DIO_u8GetPortValue+0x62>
    1528:	2d 81       	ldd	r18, Y+5	; 0x05
    152a:	3e 81       	ldd	r19, Y+6	; 0x06
    152c:	22 30       	cpi	r18, 0x02	; 2
    152e:	31 05       	cpc	r19, r1
    1530:	2c f4       	brge	.+10     	; 0x153c <DIO_u8GetPortValue+0x3e>
    1532:	8d 81       	ldd	r24, Y+5	; 0x05
    1534:	9e 81       	ldd	r25, Y+6	; 0x06
    1536:	00 97       	sbiw	r24, 0x00	; 0
    1538:	61 f0       	breq	.+24     	; 0x1552 <DIO_u8GetPortValue+0x54>
    153a:	27 c0       	rjmp	.+78     	; 0x158a <DIO_u8GetPortValue+0x8c>
    153c:	2d 81       	ldd	r18, Y+5	; 0x05
    153e:	3e 81       	ldd	r19, Y+6	; 0x06
    1540:	22 30       	cpi	r18, 0x02	; 2
    1542:	31 05       	cpc	r19, r1
    1544:	a1 f0       	breq	.+40     	; 0x156e <DIO_u8GetPortValue+0x70>
    1546:	8d 81       	ldd	r24, Y+5	; 0x05
    1548:	9e 81       	ldd	r25, Y+6	; 0x06
    154a:	83 30       	cpi	r24, 0x03	; 3
    154c:	91 05       	cpc	r25, r1
    154e:	b1 f0       	breq	.+44     	; 0x157c <DIO_u8GetPortValue+0x7e>
    1550:	1c c0       	rjmp	.+56     	; 0x158a <DIO_u8GetPortValue+0x8c>
	{
	case DIO_u8PORTA: *Copy_pu8Value = PINA; break;
    1552:	e9 e3       	ldi	r30, 0x39	; 57
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	80 81       	ld	r24, Z
    1558:	eb 81       	ldd	r30, Y+3	; 0x03
    155a:	fc 81       	ldd	r31, Y+4	; 0x04
    155c:	80 83       	st	Z, r24
    155e:	17 c0       	rjmp	.+46     	; 0x158e <DIO_u8GetPortValue+0x90>
	case DIO_u8PORTB: *Copy_pu8Value = PINB; break;
    1560:	e6 e3       	ldi	r30, 0x36	; 54
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	80 81       	ld	r24, Z
    1566:	eb 81       	ldd	r30, Y+3	; 0x03
    1568:	fc 81       	ldd	r31, Y+4	; 0x04
    156a:	80 83       	st	Z, r24
    156c:	10 c0       	rjmp	.+32     	; 0x158e <DIO_u8GetPortValue+0x90>
	case DIO_u8PORTC: *Copy_pu8Value = PINC; break;
    156e:	e3 e3       	ldi	r30, 0x33	; 51
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	80 81       	ld	r24, Z
    1574:	eb 81       	ldd	r30, Y+3	; 0x03
    1576:	fc 81       	ldd	r31, Y+4	; 0x04
    1578:	80 83       	st	Z, r24
    157a:	09 c0       	rjmp	.+18     	; 0x158e <DIO_u8GetPortValue+0x90>
	case DIO_u8PORTD: *Copy_pu8Value = PIND; break;
    157c:	e0 e3       	ldi	r30, 0x30	; 48
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	eb 81       	ldd	r30, Y+3	; 0x03
    1584:	fc 81       	ldd	r31, Y+4	; 0x04
    1586:	80 83       	st	Z, r24
    1588:	02 c0       	rjmp	.+4      	; 0x158e <DIO_u8GetPortValue+0x90>
	default: Local_u8ErrorState=1 ;
    158a:	81 e0       	ldi	r24, 0x01	; 1
    158c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    158e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1590:	26 96       	adiw	r28, 0x06	; 6
    1592:	0f b6       	in	r0, 0x3f	; 63
    1594:	f8 94       	cli
    1596:	de bf       	out	0x3e, r29	; 62
    1598:	0f be       	out	0x3f, r0	; 63
    159a:	cd bf       	out	0x3d, r28	; 61
    159c:	cf 91       	pop	r28
    159e:	df 91       	pop	r29
    15a0:	08 95       	ret

000015a2 <EXTI_voidInt0Init>:
/*Global Pointer to Function to hold INT0,INT2,INT3 ISR addresses*/
void (*EXTI_pvInt0Func)(void)=NULL;
void (*EXTI_pvInt1Func)(void)=NULL;
void (*EXTI_pvInt2Func)(void)=NULL;

void EXTI_voidInt0Init(void){
    15a2:	df 93       	push	r29
    15a4:	cf 93       	push	r28
    15a6:	cd b7       	in	r28, 0x3d	; 61
    15a8:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(MCUCR,MCUCR_ISC01);
#elif INT0_SENSE==FALLING_EDGE
	CLR_BIT(MCUCR,MCUCR_ISC00);
	SET_BIT(MCUCR,MCUCR_ISC01);
#elif INT0_SENSE==RISING_EDGE
	SET_BIT(MCUCR,MCUCR_ISC00);
    15aa:	a5 e5       	ldi	r26, 0x55	; 85
    15ac:	b0 e0       	ldi	r27, 0x00	; 0
    15ae:	e5 e5       	ldi	r30, 0x55	; 85
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	80 81       	ld	r24, Z
    15b4:	81 60       	ori	r24, 0x01	; 1
    15b6:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC01);
    15b8:	a5 e5       	ldi	r26, 0x55	; 85
    15ba:	b0 e0       	ldi	r27, 0x00	; 0
    15bc:	e5 e5       	ldi	r30, 0x55	; 85
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	80 81       	ld	r24, Z
    15c2:	82 60       	ori	r24, 0x02	; 2
    15c4:	8c 93       	st	X, r24
#error "Wrong INT0_SENSE configuration option"

#endif
	//peripheral interrupt enable
#if INT0_INITIAL_STATE==ENABLED
	SET_BIT(GICR,GICR_INT0);
    15c6:	ab e5       	ldi	r26, 0x5B	; 91
    15c8:	b0 e0       	ldi	r27, 0x00	; 0
    15ca:	eb e5       	ldi	r30, 0x5B	; 91
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	80 81       	ld	r24, Z
    15d0:	80 64       	ori	r24, 0x40	; 64
    15d2:	8c 93       	st	X, r24
#elif INT0_INITIAL_STATE==DISABLED
	CLR_BIT(GICR,GICR_INT0);
#else
#error "Wrong INT0_INITIAL_STATE configuration option"
#endif
}
    15d4:	cf 91       	pop	r28
    15d6:	df 91       	pop	r29
    15d8:	08 95       	ret

000015da <EXTI_voidInt1Init>:

void EXTI_voidInt1Init(void){
    15da:	df 93       	push	r29
    15dc:	cf 93       	push	r28
    15de:	cd b7       	in	r28, 0x3d	; 61
    15e0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(MCUCR,MCUCR_ISC11);
#elif INT1_SENSE == ON_CHANGE
	SET_BIT(MCUCR,MCUCR_ISC10);
	CLR_BIT(MCUCR,MCUCR_ISC11);
#elif INT1_SENSE == FALLING_EDGE
	CLR_BIT(MCUCR,MCUCR_ISC10);
    15e2:	a5 e5       	ldi	r26, 0x55	; 85
    15e4:	b0 e0       	ldi	r27, 0x00	; 0
    15e6:	e5 e5       	ldi	r30, 0x55	; 85
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	80 81       	ld	r24, Z
    15ec:	8b 7f       	andi	r24, 0xFB	; 251
    15ee:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC11);
    15f0:	a5 e5       	ldi	r26, 0x55	; 85
    15f2:	b0 e0       	ldi	r27, 0x00	; 0
    15f4:	e5 e5       	ldi	r30, 0x55	; 85
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	80 81       	ld	r24, Z
    15fa:	88 60       	ori	r24, 0x08	; 8
    15fc:	8c 93       	st	X, r24
#endif
	//peripheral interrupt enable
#if INT1_INITIAL_STATE==ENABLED
	SET_BIT(GICR,GICR_INT1);
#elif INT1_INITIAL_STATE==DISABLED
	CLR_BIT(GICR,GICR_INT1);
    15fe:	ab e5       	ldi	r26, 0x5B	; 91
    1600:	b0 e0       	ldi	r27, 0x00	; 0
    1602:	eb e5       	ldi	r30, 0x5B	; 91
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	8f 77       	andi	r24, 0x7F	; 127
    160a:	8c 93       	st	X, r24
#else
#error "Wrong INT1_INITIAL_STATE configuration option"

#endif
}
    160c:	cf 91       	pop	r28
    160e:	df 91       	pop	r29
    1610:	08 95       	ret

00001612 <EXTI_voidInt2Init>:

void EXTI_voidInt2Init(void){
    1612:	df 93       	push	r29
    1614:	cf 93       	push	r28
    1616:	cd b7       	in	r28, 0x3d	; 61
    1618:	de b7       	in	r29, 0x3e	; 62
	// Set sense control for int0

#if INT2_SENSE == FALLING_EDGE
	CLR_BIT(MCUCSR,MCUCSR_INT2);
#elif INT2_SENSE == RISING_EDGE
	SET_BIT(MCUCSR,MCUCSR_INT2);
    161a:	a4 e5       	ldi	r26, 0x54	; 84
    161c:	b0 e0       	ldi	r27, 0x00	; 0
    161e:	e4 e5       	ldi	r30, 0x54	; 84
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	80 81       	ld	r24, Z
    1624:	80 64       	ori	r24, 0x40	; 64
    1626:	8c 93       	st	X, r24
#endif
#if INT0_INITIAL_STATE==ENABLED
	SET_BIT(GICR,GICR_INT2);
    1628:	ab e5       	ldi	r26, 0x5B	; 91
    162a:	b0 e0       	ldi	r27, 0x00	; 0
    162c:	eb e5       	ldi	r30, 0x5B	; 91
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	80 81       	ld	r24, Z
    1632:	80 62       	ori	r24, 0x20	; 32
    1634:	8c 93       	st	X, r24
#elif INT0_INITIAL_STATE==DISABLED
	CLR_BIT(GICR,GICR_INT2);
#else
#error "Wrong INT2_INITIAL_STATE configuration option"
#endif
}
    1636:	cf 91       	pop	r28
    1638:	df 91       	pop	r29
    163a:	08 95       	ret

0000163c <EXTI_u8SetSenseControl>:

u8 EXTI_u8SetSenseControl(u8 Copy_u8Interrupt, u8 Copy_u8Sense){
    163c:	df 93       	push	r29
    163e:	cf 93       	push	r28
    1640:	cd b7       	in	r28, 0x3d	; 61
    1642:	de b7       	in	r29, 0x3e	; 62
    1644:	27 97       	sbiw	r28, 0x07	; 7
    1646:	0f b6       	in	r0, 0x3f	; 63
    1648:	f8 94       	cli
    164a:	de bf       	out	0x3e, r29	; 62
    164c:	0f be       	out	0x3f, r0	; 63
    164e:	cd bf       	out	0x3d, r28	; 61
    1650:	8a 83       	std	Y+2, r24	; 0x02
    1652:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = OK;
    1654:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Interrupt==EXTI_INT0){
    1656:	8a 81       	ldd	r24, Y+2	; 0x02
    1658:	81 30       	cpi	r24, 0x01	; 1
    165a:	09 f0       	breq	.+2      	; 0x165e <EXTI_u8SetSenseControl+0x22>
    165c:	5f c0       	rjmp	.+190    	; 0x171c <EXTI_u8SetSenseControl+0xe0>
		switch (Copy_u8Sense){
    165e:	8b 81       	ldd	r24, Y+3	; 0x03
    1660:	28 2f       	mov	r18, r24
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	3f 83       	std	Y+7, r19	; 0x07
    1666:	2e 83       	std	Y+6, r18	; 0x06
    1668:	8e 81       	ldd	r24, Y+6	; 0x06
    166a:	9f 81       	ldd	r25, Y+7	; 0x07
    166c:	82 30       	cpi	r24, 0x02	; 2
    166e:	91 05       	cpc	r25, r1
    1670:	29 f1       	breq	.+74     	; 0x16bc <EXTI_u8SetSenseControl+0x80>
    1672:	2e 81       	ldd	r18, Y+6	; 0x06
    1674:	3f 81       	ldd	r19, Y+7	; 0x07
    1676:	23 30       	cpi	r18, 0x03	; 3
    1678:	31 05       	cpc	r19, r1
    167a:	34 f4       	brge	.+12     	; 0x1688 <EXTI_u8SetSenseControl+0x4c>
    167c:	8e 81       	ldd	r24, Y+6	; 0x06
    167e:	9f 81       	ldd	r25, Y+7	; 0x07
    1680:	81 30       	cpi	r24, 0x01	; 1
    1682:	91 05       	cpc	r25, r1
    1684:	61 f0       	breq	.+24     	; 0x169e <EXTI_u8SetSenseControl+0x62>
    1686:	47 c0       	rjmp	.+142    	; 0x1716 <EXTI_u8SetSenseControl+0xda>
    1688:	2e 81       	ldd	r18, Y+6	; 0x06
    168a:	3f 81       	ldd	r19, Y+7	; 0x07
    168c:	23 30       	cpi	r18, 0x03	; 3
    168e:	31 05       	cpc	r19, r1
    1690:	21 f1       	breq	.+72     	; 0x16da <EXTI_u8SetSenseControl+0x9e>
    1692:	8e 81       	ldd	r24, Y+6	; 0x06
    1694:	9f 81       	ldd	r25, Y+7	; 0x07
    1696:	84 30       	cpi	r24, 0x04	; 4
    1698:	91 05       	cpc	r25, r1
    169a:	71 f1       	breq	.+92     	; 0x16f8 <EXTI_u8SetSenseControl+0xbc>
    169c:	3c c0       	rjmp	.+120    	; 0x1716 <EXTI_u8SetSenseControl+0xda>
		case EXTI_LOW_LEVEL:
			CLR_BIT(MCUCR,MCUCR_ISC00);
    169e:	a5 e5       	ldi	r26, 0x55	; 85
    16a0:	b0 e0       	ldi	r27, 0x00	; 0
    16a2:	e5 e5       	ldi	r30, 0x55	; 85
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	80 81       	ld	r24, Z
    16a8:	8e 7f       	andi	r24, 0xFE	; 254
    16aa:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,MCUCR_ISC01);
    16ac:	a5 e5       	ldi	r26, 0x55	; 85
    16ae:	b0 e0       	ldi	r27, 0x00	; 0
    16b0:	e5 e5       	ldi	r30, 0x55	; 85
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	80 81       	ld	r24, Z
    16b6:	8d 7f       	andi	r24, 0xFD	; 253
    16b8:	8c 93       	st	X, r24
    16ba:	b1 c0       	rjmp	.+354    	; 0x181e <EXTI_u8SetSenseControl+0x1e2>
			break;
		case EXTI_ON_CHANGE:
			SET_BIT(MCUCR,MCUCR_ISC00);
    16bc:	a5 e5       	ldi	r26, 0x55	; 85
    16be:	b0 e0       	ldi	r27, 0x00	; 0
    16c0:	e5 e5       	ldi	r30, 0x55	; 85
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	80 81       	ld	r24, Z
    16c6:	81 60       	ori	r24, 0x01	; 1
    16c8:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,MCUCR_ISC01);
    16ca:	a5 e5       	ldi	r26, 0x55	; 85
    16cc:	b0 e0       	ldi	r27, 0x00	; 0
    16ce:	e5 e5       	ldi	r30, 0x55	; 85
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	80 81       	ld	r24, Z
    16d4:	8d 7f       	andi	r24, 0xFD	; 253
    16d6:	8c 93       	st	X, r24
    16d8:	a2 c0       	rjmp	.+324    	; 0x181e <EXTI_u8SetSenseControl+0x1e2>
			break;
		case EXTI_FALLING_EDGE:
			CLR_BIT(MCUCR,MCUCR_ISC00);
    16da:	a5 e5       	ldi	r26, 0x55	; 85
    16dc:	b0 e0       	ldi	r27, 0x00	; 0
    16de:	e5 e5       	ldi	r30, 0x55	; 85
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	80 81       	ld	r24, Z
    16e4:	8e 7f       	andi	r24, 0xFE	; 254
    16e6:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC01);
    16e8:	a5 e5       	ldi	r26, 0x55	; 85
    16ea:	b0 e0       	ldi	r27, 0x00	; 0
    16ec:	e5 e5       	ldi	r30, 0x55	; 85
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	80 81       	ld	r24, Z
    16f2:	82 60       	ori	r24, 0x02	; 2
    16f4:	8c 93       	st	X, r24
    16f6:	93 c0       	rjmp	.+294    	; 0x181e <EXTI_u8SetSenseControl+0x1e2>
			break;
		case EXTI_RISING_EDGE:
			SET_BIT(MCUCR,MCUCR_ISC00);
    16f8:	a5 e5       	ldi	r26, 0x55	; 85
    16fa:	b0 e0       	ldi	r27, 0x00	; 0
    16fc:	e5 e5       	ldi	r30, 0x55	; 85
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	80 81       	ld	r24, Z
    1702:	81 60       	ori	r24, 0x01	; 1
    1704:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC01);
    1706:	a5 e5       	ldi	r26, 0x55	; 85
    1708:	b0 e0       	ldi	r27, 0x00	; 0
    170a:	e5 e5       	ldi	r30, 0x55	; 85
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	80 81       	ld	r24, Z
    1710:	82 60       	ori	r24, 0x02	; 2
    1712:	8c 93       	st	X, r24
    1714:	84 c0       	rjmp	.+264    	; 0x181e <EXTI_u8SetSenseControl+0x1e2>
			break;
		default: Local_u8ErrorState=NOK;
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	89 83       	std	Y+1, r24	; 0x01
    171a:	81 c0       	rjmp	.+258    	; 0x181e <EXTI_u8SetSenseControl+0x1e2>
		}
	}
	else if(Copy_u8Interrupt==EXTI_INT1){
    171c:	8a 81       	ldd	r24, Y+2	; 0x02
    171e:	82 30       	cpi	r24, 0x02	; 2
    1720:	09 f0       	breq	.+2      	; 0x1724 <EXTI_u8SetSenseControl+0xe8>
    1722:	5f c0       	rjmp	.+190    	; 0x17e2 <EXTI_u8SetSenseControl+0x1a6>
		switch (Copy_u8Sense){
    1724:	8b 81       	ldd	r24, Y+3	; 0x03
    1726:	28 2f       	mov	r18, r24
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	3d 83       	std	Y+5, r19	; 0x05
    172c:	2c 83       	std	Y+4, r18	; 0x04
    172e:	8c 81       	ldd	r24, Y+4	; 0x04
    1730:	9d 81       	ldd	r25, Y+5	; 0x05
    1732:	82 30       	cpi	r24, 0x02	; 2
    1734:	91 05       	cpc	r25, r1
    1736:	29 f1       	breq	.+74     	; 0x1782 <EXTI_u8SetSenseControl+0x146>
    1738:	2c 81       	ldd	r18, Y+4	; 0x04
    173a:	3d 81       	ldd	r19, Y+5	; 0x05
    173c:	23 30       	cpi	r18, 0x03	; 3
    173e:	31 05       	cpc	r19, r1
    1740:	34 f4       	brge	.+12     	; 0x174e <EXTI_u8SetSenseControl+0x112>
    1742:	8c 81       	ldd	r24, Y+4	; 0x04
    1744:	9d 81       	ldd	r25, Y+5	; 0x05
    1746:	81 30       	cpi	r24, 0x01	; 1
    1748:	91 05       	cpc	r25, r1
    174a:	61 f0       	breq	.+24     	; 0x1764 <EXTI_u8SetSenseControl+0x128>
    174c:	47 c0       	rjmp	.+142    	; 0x17dc <EXTI_u8SetSenseControl+0x1a0>
    174e:	2c 81       	ldd	r18, Y+4	; 0x04
    1750:	3d 81       	ldd	r19, Y+5	; 0x05
    1752:	23 30       	cpi	r18, 0x03	; 3
    1754:	31 05       	cpc	r19, r1
    1756:	21 f1       	breq	.+72     	; 0x17a0 <EXTI_u8SetSenseControl+0x164>
    1758:	8c 81       	ldd	r24, Y+4	; 0x04
    175a:	9d 81       	ldd	r25, Y+5	; 0x05
    175c:	84 30       	cpi	r24, 0x04	; 4
    175e:	91 05       	cpc	r25, r1
    1760:	71 f1       	breq	.+92     	; 0x17be <EXTI_u8SetSenseControl+0x182>
    1762:	3c c0       	rjmp	.+120    	; 0x17dc <EXTI_u8SetSenseControl+0x1a0>
		case EXTI_LOW_LEVEL:
			CLR_BIT(MCUCR,MCUCR_ISC10);
    1764:	a5 e5       	ldi	r26, 0x55	; 85
    1766:	b0 e0       	ldi	r27, 0x00	; 0
    1768:	e5 e5       	ldi	r30, 0x55	; 85
    176a:	f0 e0       	ldi	r31, 0x00	; 0
    176c:	80 81       	ld	r24, Z
    176e:	8b 7f       	andi	r24, 0xFB	; 251
    1770:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,MCUCR_ISC11);
    1772:	a5 e5       	ldi	r26, 0x55	; 85
    1774:	b0 e0       	ldi	r27, 0x00	; 0
    1776:	e5 e5       	ldi	r30, 0x55	; 85
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	80 81       	ld	r24, Z
    177c:	87 7f       	andi	r24, 0xF7	; 247
    177e:	8c 93       	st	X, r24
    1780:	4e c0       	rjmp	.+156    	; 0x181e <EXTI_u8SetSenseControl+0x1e2>
			break;
		case EXTI_ON_CHANGE:
			SET_BIT(MCUCR,MCUCR_ISC10);
    1782:	a5 e5       	ldi	r26, 0x55	; 85
    1784:	b0 e0       	ldi	r27, 0x00	; 0
    1786:	e5 e5       	ldi	r30, 0x55	; 85
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	80 81       	ld	r24, Z
    178c:	84 60       	ori	r24, 0x04	; 4
    178e:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,MCUCR_ISC11);
    1790:	a5 e5       	ldi	r26, 0x55	; 85
    1792:	b0 e0       	ldi	r27, 0x00	; 0
    1794:	e5 e5       	ldi	r30, 0x55	; 85
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	80 81       	ld	r24, Z
    179a:	87 7f       	andi	r24, 0xF7	; 247
    179c:	8c 93       	st	X, r24
    179e:	3f c0       	rjmp	.+126    	; 0x181e <EXTI_u8SetSenseControl+0x1e2>
			break;
		case EXTI_FALLING_EDGE:
			CLR_BIT(MCUCR,MCUCR_ISC10);
    17a0:	a5 e5       	ldi	r26, 0x55	; 85
    17a2:	b0 e0       	ldi	r27, 0x00	; 0
    17a4:	e5 e5       	ldi	r30, 0x55	; 85
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	80 81       	ld	r24, Z
    17aa:	8b 7f       	andi	r24, 0xFB	; 251
    17ac:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC11);
    17ae:	a5 e5       	ldi	r26, 0x55	; 85
    17b0:	b0 e0       	ldi	r27, 0x00	; 0
    17b2:	e5 e5       	ldi	r30, 0x55	; 85
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	80 81       	ld	r24, Z
    17b8:	88 60       	ori	r24, 0x08	; 8
    17ba:	8c 93       	st	X, r24
    17bc:	30 c0       	rjmp	.+96     	; 0x181e <EXTI_u8SetSenseControl+0x1e2>
			break;
		case EXTI_RISING_EDGE:
			SET_BIT(MCUCR,MCUCR_ISC10);
    17be:	a5 e5       	ldi	r26, 0x55	; 85
    17c0:	b0 e0       	ldi	r27, 0x00	; 0
    17c2:	e5 e5       	ldi	r30, 0x55	; 85
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	80 81       	ld	r24, Z
    17c8:	84 60       	ori	r24, 0x04	; 4
    17ca:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC11);
    17cc:	a5 e5       	ldi	r26, 0x55	; 85
    17ce:	b0 e0       	ldi	r27, 0x00	; 0
    17d0:	e5 e5       	ldi	r30, 0x55	; 85
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	80 81       	ld	r24, Z
    17d6:	88 60       	ori	r24, 0x08	; 8
    17d8:	8c 93       	st	X, r24
    17da:	21 c0       	rjmp	.+66     	; 0x181e <EXTI_u8SetSenseControl+0x1e2>
			break;
		default: Local_u8ErrorState=NOK;
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	89 83       	std	Y+1, r24	; 0x01
    17e0:	1e c0       	rjmp	.+60     	; 0x181e <EXTI_u8SetSenseControl+0x1e2>
		}

	}
	else if(Copy_u8Interrupt==EXTI_INT2){
    17e2:	8a 81       	ldd	r24, Y+2	; 0x02
    17e4:	83 30       	cpi	r24, 0x03	; 3
    17e6:	c9 f4       	brne	.+50     	; 0x181a <EXTI_u8SetSenseControl+0x1de>

		if(Copy_u8Sense==EXTI_FALLING_EDGE){
    17e8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ea:	83 30       	cpi	r24, 0x03	; 3
    17ec:	41 f4       	brne	.+16     	; 0x17fe <EXTI_u8SetSenseControl+0x1c2>
			CLR_BIT(MCUCSR,MCUCSR_INT2);
    17ee:	a4 e5       	ldi	r26, 0x54	; 84
    17f0:	b0 e0       	ldi	r27, 0x00	; 0
    17f2:	e4 e5       	ldi	r30, 0x54	; 84
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	80 81       	ld	r24, Z
    17f8:	8f 7b       	andi	r24, 0xBF	; 191
    17fa:	8c 93       	st	X, r24
    17fc:	10 c0       	rjmp	.+32     	; 0x181e <EXTI_u8SetSenseControl+0x1e2>
		}
		else if(Copy_u8Sense==EXTI_RISING_EDGE){
    17fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1800:	84 30       	cpi	r24, 0x04	; 4
    1802:	41 f4       	brne	.+16     	; 0x1814 <EXTI_u8SetSenseControl+0x1d8>
			SET_BIT(MCUCSR,MCUCSR_INT2);
    1804:	a4 e5       	ldi	r26, 0x54	; 84
    1806:	b0 e0       	ldi	r27, 0x00	; 0
    1808:	e4 e5       	ldi	r30, 0x54	; 84
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	80 81       	ld	r24, Z
    180e:	80 64       	ori	r24, 0x40	; 64
    1810:	8c 93       	st	X, r24
    1812:	05 c0       	rjmp	.+10     	; 0x181e <EXTI_u8SetSenseControl+0x1e2>
		}
		else{
			Local_u8ErrorState=NOK;
    1814:	81 e0       	ldi	r24, 0x01	; 1
    1816:	89 83       	std	Y+1, r24	; 0x01
    1818:	02 c0       	rjmp	.+4      	; 0x181e <EXTI_u8SetSenseControl+0x1e2>
		}
	}
	else{
		Local_u8ErrorState=NOK;
    181a:	81 e0       	ldi	r24, 0x01	; 1
    181c:	89 83       	std	Y+1, r24	; 0x01
	}



	return Local_u8ErrorState;
    181e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1820:	27 96       	adiw	r28, 0x07	; 7
    1822:	0f b6       	in	r0, 0x3f	; 63
    1824:	f8 94       	cli
    1826:	de bf       	out	0x3e, r29	; 62
    1828:	0f be       	out	0x3f, r0	; 63
    182a:	cd bf       	out	0x3d, r28	; 61
    182c:	cf 91       	pop	r28
    182e:	df 91       	pop	r29
    1830:	08 95       	ret

00001832 <EXTI_u8SetInterruptStatus>:

u8 EXTI_u8SetInterruptStatus(u8 Copy_u8Interrupt, u8 Copy_u8Status){
    1832:	df 93       	push	r29
    1834:	cf 93       	push	r28
    1836:	00 d0       	rcall	.+0      	; 0x1838 <EXTI_u8SetInterruptStatus+0x6>
    1838:	0f 92       	push	r0
    183a:	cd b7       	in	r28, 0x3d	; 61
    183c:	de b7       	in	r29, 0x3e	; 62
    183e:	8a 83       	std	Y+2, r24	; 0x02
    1840:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=OK;
    1842:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Interrupt==EXTI_INT0){
    1844:	8a 81       	ldd	r24, Y+2	; 0x02
    1846:	81 30       	cpi	r24, 0x01	; 1
    1848:	c9 f4       	brne	.+50     	; 0x187c <EXTI_u8SetInterruptStatus+0x4a>
		if(Copy_u8Status==EXTI_ENABLE){
    184a:	8b 81       	ldd	r24, Y+3	; 0x03
    184c:	81 30       	cpi	r24, 0x01	; 1
    184e:	41 f4       	brne	.+16     	; 0x1860 <EXTI_u8SetInterruptStatus+0x2e>
			SET_BIT(GICR,GICR_INT0);
    1850:	ab e5       	ldi	r26, 0x5B	; 91
    1852:	b0 e0       	ldi	r27, 0x00	; 0
    1854:	eb e5       	ldi	r30, 0x5B	; 91
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	80 81       	ld	r24, Z
    185a:	80 64       	ori	r24, 0x40	; 64
    185c:	8c 93       	st	X, r24
    185e:	48 c0       	rjmp	.+144    	; 0x18f0 <EXTI_u8SetInterruptStatus+0xbe>
		}
		else if(Copy_u8Status==EXTI_DISABLE){
    1860:	8b 81       	ldd	r24, Y+3	; 0x03
    1862:	82 30       	cpi	r24, 0x02	; 2
    1864:	41 f4       	brne	.+16     	; 0x1876 <EXTI_u8SetInterruptStatus+0x44>
			CLR_BIT(GICR,GICR_INT0);
    1866:	ab e5       	ldi	r26, 0x5B	; 91
    1868:	b0 e0       	ldi	r27, 0x00	; 0
    186a:	eb e5       	ldi	r30, 0x5B	; 91
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	80 81       	ld	r24, Z
    1870:	8f 7b       	andi	r24, 0xBF	; 191
    1872:	8c 93       	st	X, r24
    1874:	3d c0       	rjmp	.+122    	; 0x18f0 <EXTI_u8SetInterruptStatus+0xbe>
		}
		else{
			Local_u8ErrorState=NOK;
    1876:	81 e0       	ldi	r24, 0x01	; 1
    1878:	89 83       	std	Y+1, r24	; 0x01
    187a:	3a c0       	rjmp	.+116    	; 0x18f0 <EXTI_u8SetInterruptStatus+0xbe>
		}
	}
	else if(Copy_u8Interrupt==EXTI_INT1){
    187c:	8a 81       	ldd	r24, Y+2	; 0x02
    187e:	82 30       	cpi	r24, 0x02	; 2
    1880:	c9 f4       	brne	.+50     	; 0x18b4 <EXTI_u8SetInterruptStatus+0x82>
		if(Copy_u8Status==EXTI_ENABLE){
    1882:	8b 81       	ldd	r24, Y+3	; 0x03
    1884:	81 30       	cpi	r24, 0x01	; 1
    1886:	41 f4       	brne	.+16     	; 0x1898 <EXTI_u8SetInterruptStatus+0x66>
			SET_BIT(GICR,GICR_INT1);
    1888:	ab e5       	ldi	r26, 0x5B	; 91
    188a:	b0 e0       	ldi	r27, 0x00	; 0
    188c:	eb e5       	ldi	r30, 0x5B	; 91
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	80 81       	ld	r24, Z
    1892:	80 68       	ori	r24, 0x80	; 128
    1894:	8c 93       	st	X, r24
    1896:	2c c0       	rjmp	.+88     	; 0x18f0 <EXTI_u8SetInterruptStatus+0xbe>
		}
		else if(Copy_u8Status==EXTI_DISABLE){
    1898:	8b 81       	ldd	r24, Y+3	; 0x03
    189a:	82 30       	cpi	r24, 0x02	; 2
    189c:	41 f4       	brne	.+16     	; 0x18ae <EXTI_u8SetInterruptStatus+0x7c>
			CLR_BIT(GICR,GICR_INT1);
    189e:	ab e5       	ldi	r26, 0x5B	; 91
    18a0:	b0 e0       	ldi	r27, 0x00	; 0
    18a2:	eb e5       	ldi	r30, 0x5B	; 91
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	80 81       	ld	r24, Z
    18a8:	8f 77       	andi	r24, 0x7F	; 127
    18aa:	8c 93       	st	X, r24
    18ac:	21 c0       	rjmp	.+66     	; 0x18f0 <EXTI_u8SetInterruptStatus+0xbe>
		}
		else{
			Local_u8ErrorState=NOK;
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	89 83       	std	Y+1, r24	; 0x01
    18b2:	1e c0       	rjmp	.+60     	; 0x18f0 <EXTI_u8SetInterruptStatus+0xbe>
		}
	}
	else if(Copy_u8Interrupt==EXTI_INT2){
    18b4:	8a 81       	ldd	r24, Y+2	; 0x02
    18b6:	83 30       	cpi	r24, 0x03	; 3
    18b8:	c9 f4       	brne	.+50     	; 0x18ec <EXTI_u8SetInterruptStatus+0xba>

		if(Copy_u8Status==EXTI_ENABLE){
    18ba:	8b 81       	ldd	r24, Y+3	; 0x03
    18bc:	81 30       	cpi	r24, 0x01	; 1
    18be:	41 f4       	brne	.+16     	; 0x18d0 <EXTI_u8SetInterruptStatus+0x9e>
			SET_BIT(GICR,GICR_INT2);
    18c0:	ab e5       	ldi	r26, 0x5B	; 91
    18c2:	b0 e0       	ldi	r27, 0x00	; 0
    18c4:	eb e5       	ldi	r30, 0x5B	; 91
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	80 81       	ld	r24, Z
    18ca:	80 62       	ori	r24, 0x20	; 32
    18cc:	8c 93       	st	X, r24
    18ce:	10 c0       	rjmp	.+32     	; 0x18f0 <EXTI_u8SetInterruptStatus+0xbe>
		}
		else if(Copy_u8Status==EXTI_DISABLE){
    18d0:	8b 81       	ldd	r24, Y+3	; 0x03
    18d2:	82 30       	cpi	r24, 0x02	; 2
    18d4:	41 f4       	brne	.+16     	; 0x18e6 <EXTI_u8SetInterruptStatus+0xb4>
			CLR_BIT(GICR,GICR_INT2);
    18d6:	ab e5       	ldi	r26, 0x5B	; 91
    18d8:	b0 e0       	ldi	r27, 0x00	; 0
    18da:	eb e5       	ldi	r30, 0x5B	; 91
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	80 81       	ld	r24, Z
    18e0:	8f 7d       	andi	r24, 0xDF	; 223
    18e2:	8c 93       	st	X, r24
    18e4:	05 c0       	rjmp	.+10     	; 0x18f0 <EXTI_u8SetInterruptStatus+0xbe>
		}
		else{
			Local_u8ErrorState=NOK;
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	89 83       	std	Y+1, r24	; 0x01
    18ea:	02 c0       	rjmp	.+4      	; 0x18f0 <EXTI_u8SetInterruptStatus+0xbe>
		}
	}
	else{
		Local_u8ErrorState=NOK;
    18ec:	81 e0       	ldi	r24, 0x01	; 1
    18ee:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    18f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    18f2:	0f 90       	pop	r0
    18f4:	0f 90       	pop	r0
    18f6:	0f 90       	pop	r0
    18f8:	cf 91       	pop	r28
    18fa:	df 91       	pop	r29
    18fc:	08 95       	ret

000018fe <EXTI_u8Int0SetCallBack>:

u8 EXTI_u8Int0SetCallBack(void(*Copy_pvInt0Func)(void)){
    18fe:	df 93       	push	r29
    1900:	cf 93       	push	r28
    1902:	00 d0       	rcall	.+0      	; 0x1904 <EXTI_u8Int0SetCallBack+0x6>
    1904:	0f 92       	push	r0
    1906:	cd b7       	in	r28, 0x3d	; 61
    1908:	de b7       	in	r29, 0x3e	; 62
    190a:	9b 83       	std	Y+3, r25	; 0x03
    190c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
    190e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvInt0Func!=NULL){
    1910:	8a 81       	ldd	r24, Y+2	; 0x02
    1912:	9b 81       	ldd	r25, Y+3	; 0x03
    1914:	00 97       	sbiw	r24, 0x00	; 0
    1916:	39 f0       	breq	.+14     	; 0x1926 <EXTI_u8Int0SetCallBack+0x28>
		EXTI_pvInt0Func=Copy_pvInt0Func;
    1918:	8a 81       	ldd	r24, Y+2	; 0x02
    191a:	9b 81       	ldd	r25, Y+3	; 0x03
    191c:	90 93 99 00 	sts	0x0099, r25
    1920:	80 93 98 00 	sts	0x0098, r24
    1924:	02 c0       	rjmp	.+4      	; 0x192a <EXTI_u8Int0SetCallBack+0x2c>
	}
	else{
		Local_u8ErrorState=NULL_POINTER;
    1926:	82 e0       	ldi	r24, 0x02	; 2
    1928:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    192a:	89 81       	ldd	r24, Y+1	; 0x01
}
    192c:	0f 90       	pop	r0
    192e:	0f 90       	pop	r0
    1930:	0f 90       	pop	r0
    1932:	cf 91       	pop	r28
    1934:	df 91       	pop	r29
    1936:	08 95       	ret

00001938 <EXTI_u8Int1SetCallBack>:

u8 EXTI_u8Int1SetCallBack(void(*Copy_pvInt1Func)(void)){
    1938:	df 93       	push	r29
    193a:	cf 93       	push	r28
    193c:	00 d0       	rcall	.+0      	; 0x193e <EXTI_u8Int1SetCallBack+0x6>
    193e:	0f 92       	push	r0
    1940:	cd b7       	in	r28, 0x3d	; 61
    1942:	de b7       	in	r29, 0x3e	; 62
    1944:	9b 83       	std	Y+3, r25	; 0x03
    1946:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
    1948:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvInt1Func!=NULL){
    194a:	8a 81       	ldd	r24, Y+2	; 0x02
    194c:	9b 81       	ldd	r25, Y+3	; 0x03
    194e:	00 97       	sbiw	r24, 0x00	; 0
    1950:	39 f0       	breq	.+14     	; 0x1960 <EXTI_u8Int1SetCallBack+0x28>
		EXTI_pvInt1Func=Copy_pvInt1Func;
    1952:	8a 81       	ldd	r24, Y+2	; 0x02
    1954:	9b 81       	ldd	r25, Y+3	; 0x03
    1956:	90 93 9b 00 	sts	0x009B, r25
    195a:	80 93 9a 00 	sts	0x009A, r24
    195e:	02 c0       	rjmp	.+4      	; 0x1964 <EXTI_u8Int1SetCallBack+0x2c>
	}
	else{
		Local_u8ErrorState=NULL_POINTER;
    1960:	82 e0       	ldi	r24, 0x02	; 2
    1962:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1964:	89 81       	ldd	r24, Y+1	; 0x01
}
    1966:	0f 90       	pop	r0
    1968:	0f 90       	pop	r0
    196a:	0f 90       	pop	r0
    196c:	cf 91       	pop	r28
    196e:	df 91       	pop	r29
    1970:	08 95       	ret

00001972 <EXTI_u8Int2SetCallBack>:

u8 EXTI_u8Int2SetCallBack(void(*Copy_pvInt2Func)(void)){
    1972:	df 93       	push	r29
    1974:	cf 93       	push	r28
    1976:	00 d0       	rcall	.+0      	; 0x1978 <EXTI_u8Int2SetCallBack+0x6>
    1978:	0f 92       	push	r0
    197a:	cd b7       	in	r28, 0x3d	; 61
    197c:	de b7       	in	r29, 0x3e	; 62
    197e:	9b 83       	std	Y+3, r25	; 0x03
    1980:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
    1982:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvInt2Func!=NULL){
    1984:	8a 81       	ldd	r24, Y+2	; 0x02
    1986:	9b 81       	ldd	r25, Y+3	; 0x03
    1988:	00 97       	sbiw	r24, 0x00	; 0
    198a:	39 f0       	breq	.+14     	; 0x199a <EXTI_u8Int2SetCallBack+0x28>
		EXTI_pvInt2Func=Copy_pvInt2Func;
    198c:	8a 81       	ldd	r24, Y+2	; 0x02
    198e:	9b 81       	ldd	r25, Y+3	; 0x03
    1990:	90 93 9d 00 	sts	0x009D, r25
    1994:	80 93 9c 00 	sts	0x009C, r24
    1998:	02 c0       	rjmp	.+4      	; 0x199e <EXTI_u8Int2SetCallBack+0x2c>
	}
	else{
		Local_u8ErrorState=NULL_POINTER;
    199a:	82 e0       	ldi	r24, 0x02	; 2
    199c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    199e:	89 81       	ldd	r24, Y+1	; 0x01
}
    19a0:	0f 90       	pop	r0
    19a2:	0f 90       	pop	r0
    19a4:	0f 90       	pop	r0
    19a6:	cf 91       	pop	r28
    19a8:	df 91       	pop	r29
    19aa:	08 95       	ret

000019ac <__vector_1>:

/*ISR For INT0*/
void __vector_1(void)    __attribute__((signal));
void __vector_1(void){
    19ac:	1f 92       	push	r1
    19ae:	0f 92       	push	r0
    19b0:	0f b6       	in	r0, 0x3f	; 63
    19b2:	0f 92       	push	r0
    19b4:	11 24       	eor	r1, r1
    19b6:	2f 93       	push	r18
    19b8:	3f 93       	push	r19
    19ba:	4f 93       	push	r20
    19bc:	5f 93       	push	r21
    19be:	6f 93       	push	r22
    19c0:	7f 93       	push	r23
    19c2:	8f 93       	push	r24
    19c4:	9f 93       	push	r25
    19c6:	af 93       	push	r26
    19c8:	bf 93       	push	r27
    19ca:	ef 93       	push	r30
    19cc:	ff 93       	push	r31
    19ce:	df 93       	push	r29
    19d0:	cf 93       	push	r28
    19d2:	cd b7       	in	r28, 0x3d	; 61
    19d4:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvInt0Func!=NULL){
    19d6:	80 91 98 00 	lds	r24, 0x0098
    19da:	90 91 99 00 	lds	r25, 0x0099
    19de:	00 97       	sbiw	r24, 0x00	; 0
    19e0:	29 f0       	breq	.+10     	; 0x19ec <__vector_1+0x40>
		EXTI_pvInt0Func();
    19e2:	e0 91 98 00 	lds	r30, 0x0098
    19e6:	f0 91 99 00 	lds	r31, 0x0099
    19ea:	09 95       	icall
	}
}
    19ec:	cf 91       	pop	r28
    19ee:	df 91       	pop	r29
    19f0:	ff 91       	pop	r31
    19f2:	ef 91       	pop	r30
    19f4:	bf 91       	pop	r27
    19f6:	af 91       	pop	r26
    19f8:	9f 91       	pop	r25
    19fa:	8f 91       	pop	r24
    19fc:	7f 91       	pop	r23
    19fe:	6f 91       	pop	r22
    1a00:	5f 91       	pop	r21
    1a02:	4f 91       	pop	r20
    1a04:	3f 91       	pop	r19
    1a06:	2f 91       	pop	r18
    1a08:	0f 90       	pop	r0
    1a0a:	0f be       	out	0x3f, r0	; 63
    1a0c:	0f 90       	pop	r0
    1a0e:	1f 90       	pop	r1
    1a10:	18 95       	reti

00001a12 <__vector_2>:

void __vector_2(void)    __attribute__((signal));
void __vector_2(void){
    1a12:	1f 92       	push	r1
    1a14:	0f 92       	push	r0
    1a16:	0f b6       	in	r0, 0x3f	; 63
    1a18:	0f 92       	push	r0
    1a1a:	11 24       	eor	r1, r1
    1a1c:	2f 93       	push	r18
    1a1e:	3f 93       	push	r19
    1a20:	4f 93       	push	r20
    1a22:	5f 93       	push	r21
    1a24:	6f 93       	push	r22
    1a26:	7f 93       	push	r23
    1a28:	8f 93       	push	r24
    1a2a:	9f 93       	push	r25
    1a2c:	af 93       	push	r26
    1a2e:	bf 93       	push	r27
    1a30:	ef 93       	push	r30
    1a32:	ff 93       	push	r31
    1a34:	df 93       	push	r29
    1a36:	cf 93       	push	r28
    1a38:	cd b7       	in	r28, 0x3d	; 61
    1a3a:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvInt1Func!=NULL){
    1a3c:	80 91 9a 00 	lds	r24, 0x009A
    1a40:	90 91 9b 00 	lds	r25, 0x009B
    1a44:	00 97       	sbiw	r24, 0x00	; 0
    1a46:	29 f0       	breq	.+10     	; 0x1a52 <__vector_2+0x40>
		EXTI_pvInt1Func();
    1a48:	e0 91 9a 00 	lds	r30, 0x009A
    1a4c:	f0 91 9b 00 	lds	r31, 0x009B
    1a50:	09 95       	icall
	}
}
    1a52:	cf 91       	pop	r28
    1a54:	df 91       	pop	r29
    1a56:	ff 91       	pop	r31
    1a58:	ef 91       	pop	r30
    1a5a:	bf 91       	pop	r27
    1a5c:	af 91       	pop	r26
    1a5e:	9f 91       	pop	r25
    1a60:	8f 91       	pop	r24
    1a62:	7f 91       	pop	r23
    1a64:	6f 91       	pop	r22
    1a66:	5f 91       	pop	r21
    1a68:	4f 91       	pop	r20
    1a6a:	3f 91       	pop	r19
    1a6c:	2f 91       	pop	r18
    1a6e:	0f 90       	pop	r0
    1a70:	0f be       	out	0x3f, r0	; 63
    1a72:	0f 90       	pop	r0
    1a74:	1f 90       	pop	r1
    1a76:	18 95       	reti

00001a78 <__vector_3>:

void __vector_3(void)    __attribute__((signal));
void __vector_3(void){
    1a78:	1f 92       	push	r1
    1a7a:	0f 92       	push	r0
    1a7c:	0f b6       	in	r0, 0x3f	; 63
    1a7e:	0f 92       	push	r0
    1a80:	11 24       	eor	r1, r1
    1a82:	2f 93       	push	r18
    1a84:	3f 93       	push	r19
    1a86:	4f 93       	push	r20
    1a88:	5f 93       	push	r21
    1a8a:	6f 93       	push	r22
    1a8c:	7f 93       	push	r23
    1a8e:	8f 93       	push	r24
    1a90:	9f 93       	push	r25
    1a92:	af 93       	push	r26
    1a94:	bf 93       	push	r27
    1a96:	ef 93       	push	r30
    1a98:	ff 93       	push	r31
    1a9a:	df 93       	push	r29
    1a9c:	cf 93       	push	r28
    1a9e:	cd b7       	in	r28, 0x3d	; 61
    1aa0:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvInt2Func!=NULL){
    1aa2:	80 91 9c 00 	lds	r24, 0x009C
    1aa6:	90 91 9d 00 	lds	r25, 0x009D
    1aaa:	00 97       	sbiw	r24, 0x00	; 0
    1aac:	29 f0       	breq	.+10     	; 0x1ab8 <__vector_3+0x40>
		EXTI_pvInt2Func();
    1aae:	e0 91 9c 00 	lds	r30, 0x009C
    1ab2:	f0 91 9d 00 	lds	r31, 0x009D
    1ab6:	09 95       	icall
	}
}
    1ab8:	cf 91       	pop	r28
    1aba:	df 91       	pop	r29
    1abc:	ff 91       	pop	r31
    1abe:	ef 91       	pop	r30
    1ac0:	bf 91       	pop	r27
    1ac2:	af 91       	pop	r26
    1ac4:	9f 91       	pop	r25
    1ac6:	8f 91       	pop	r24
    1ac8:	7f 91       	pop	r23
    1aca:	6f 91       	pop	r22
    1acc:	5f 91       	pop	r21
    1ace:	4f 91       	pop	r20
    1ad0:	3f 91       	pop	r19
    1ad2:	2f 91       	pop	r18
    1ad4:	0f 90       	pop	r0
    1ad6:	0f be       	out	0x3f, r0	; 63
    1ad8:	0f 90       	pop	r0
    1ada:	1f 90       	pop	r1
    1adc:	18 95       	reti

00001ade <GIE_voidEnable>:
#include "BIT_MATH.h"

#include "GIE_interface.h"
#include "GIE_register.h"

void GIE_voidEnable(void){
    1ade:	df 93       	push	r29
    1ae0:	cf 93       	push	r28
    1ae2:	cd b7       	in	r28, 0x3d	; 61
    1ae4:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(SREG,SREG_I);
    1ae6:	af e5       	ldi	r26, 0x5F	; 95
    1ae8:	b0 e0       	ldi	r27, 0x00	; 0
    1aea:	ef e5       	ldi	r30, 0x5F	; 95
    1aec:	f0 e0       	ldi	r31, 0x00	; 0
    1aee:	80 81       	ld	r24, Z
    1af0:	80 68       	ori	r24, 0x80	; 128
    1af2:	8c 93       	st	X, r24
}
    1af4:	cf 91       	pop	r28
    1af6:	df 91       	pop	r29
    1af8:	08 95       	ret

00001afa <GIE_voidDisable>:

void GIE_voidDisable(void){
    1afa:	df 93       	push	r29
    1afc:	cf 93       	push	r28
    1afe:	cd b7       	in	r28, 0x3d	; 61
    1b00:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(SREG,SREG_I);
    1b02:	af e5       	ldi	r26, 0x5F	; 95
    1b04:	b0 e0       	ldi	r27, 0x00	; 0
    1b06:	ef e5       	ldi	r30, 0x5F	; 95
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	80 81       	ld	r24, Z
    1b0c:	8f 77       	andi	r24, 0x7F	; 127
    1b0e:	8c 93       	st	X, r24
    1b10:	cf 91       	pop	r28
    1b12:	df 91       	pop	r29
    1b14:	08 95       	ret

00001b16 <MATH_u32Power>:
#include "STD_TYPES.h"
#include "BIT_MATH.h"
#include "MATH_HELPER.h"

u32 MATH_u32Power(u32 Copy_u32Base,s32 Copy_u32Exponent){
    1b16:	df 93       	push	r29
    1b18:	cf 93       	push	r28
    1b1a:	cd b7       	in	r28, 0x3d	; 61
    1b1c:	de b7       	in	r29, 0x3e	; 62
    1b1e:	60 97       	sbiw	r28, 0x10	; 16
    1b20:	0f b6       	in	r0, 0x3f	; 63
    1b22:	f8 94       	cli
    1b24:	de bf       	out	0x3e, r29	; 62
    1b26:	0f be       	out	0x3f, r0	; 63
    1b28:	cd bf       	out	0x3d, r28	; 61
    1b2a:	69 87       	std	Y+9, r22	; 0x09
    1b2c:	7a 87       	std	Y+10, r23	; 0x0a
    1b2e:	8b 87       	std	Y+11, r24	; 0x0b
    1b30:	9c 87       	std	Y+12, r25	; 0x0c
    1b32:	2d 87       	std	Y+13, r18	; 0x0d
    1b34:	3e 87       	std	Y+14, r19	; 0x0e
    1b36:	4f 87       	std	Y+15, r20	; 0x0f
    1b38:	58 8b       	std	Y+16, r21	; 0x10
	u32 Local_u32Result=1;
    1b3a:	81 e0       	ldi	r24, 0x01	; 1
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	a0 e0       	ldi	r26, 0x00	; 0
    1b40:	b0 e0       	ldi	r27, 0x00	; 0
    1b42:	8d 83       	std	Y+5, r24	; 0x05
    1b44:	9e 83       	std	Y+6, r25	; 0x06
    1b46:	af 83       	std	Y+7, r26	; 0x07
    1b48:	b8 87       	std	Y+8, r27	; 0x08
	for(u32 i=0;i<Copy_u32Exponent;i++){
    1b4a:	19 82       	std	Y+1, r1	; 0x01
    1b4c:	1a 82       	std	Y+2, r1	; 0x02
    1b4e:	1b 82       	std	Y+3, r1	; 0x03
    1b50:	1c 82       	std	Y+4, r1	; 0x04
    1b52:	1d c0       	rjmp	.+58     	; 0x1b8e <MATH_u32Power+0x78>
		Local_u32Result*=Copy_u32Base;
    1b54:	8d 81       	ldd	r24, Y+5	; 0x05
    1b56:	9e 81       	ldd	r25, Y+6	; 0x06
    1b58:	af 81       	ldd	r26, Y+7	; 0x07
    1b5a:	b8 85       	ldd	r27, Y+8	; 0x08
    1b5c:	29 85       	ldd	r18, Y+9	; 0x09
    1b5e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1b60:	4b 85       	ldd	r20, Y+11	; 0x0b
    1b62:	5c 85       	ldd	r21, Y+12	; 0x0c
    1b64:	bc 01       	movw	r22, r24
    1b66:	cd 01       	movw	r24, r26
    1b68:	0e 94 c7 19 	call	0x338e	; 0x338e <__mulsi3>
    1b6c:	dc 01       	movw	r26, r24
    1b6e:	cb 01       	movw	r24, r22
    1b70:	8d 83       	std	Y+5, r24	; 0x05
    1b72:	9e 83       	std	Y+6, r25	; 0x06
    1b74:	af 83       	std	Y+7, r26	; 0x07
    1b76:	b8 87       	std	Y+8, r27	; 0x08
#include "BIT_MATH.h"
#include "MATH_HELPER.h"

u32 MATH_u32Power(u32 Copy_u32Base,s32 Copy_u32Exponent){
	u32 Local_u32Result=1;
	for(u32 i=0;i<Copy_u32Exponent;i++){
    1b78:	89 81       	ldd	r24, Y+1	; 0x01
    1b7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b7c:	ab 81       	ldd	r26, Y+3	; 0x03
    1b7e:	bc 81       	ldd	r27, Y+4	; 0x04
    1b80:	01 96       	adiw	r24, 0x01	; 1
    1b82:	a1 1d       	adc	r26, r1
    1b84:	b1 1d       	adc	r27, r1
    1b86:	89 83       	std	Y+1, r24	; 0x01
    1b88:	9a 83       	std	Y+2, r25	; 0x02
    1b8a:	ab 83       	std	Y+3, r26	; 0x03
    1b8c:	bc 83       	std	Y+4, r27	; 0x04
    1b8e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1b90:	3e 85       	ldd	r19, Y+14	; 0x0e
    1b92:	4f 85       	ldd	r20, Y+15	; 0x0f
    1b94:	58 89       	ldd	r21, Y+16	; 0x10
    1b96:	89 81       	ldd	r24, Y+1	; 0x01
    1b98:	9a 81       	ldd	r25, Y+2	; 0x02
    1b9a:	ab 81       	ldd	r26, Y+3	; 0x03
    1b9c:	bc 81       	ldd	r27, Y+4	; 0x04
    1b9e:	82 17       	cp	r24, r18
    1ba0:	93 07       	cpc	r25, r19
    1ba2:	a4 07       	cpc	r26, r20
    1ba4:	b5 07       	cpc	r27, r21
    1ba6:	b0 f2       	brcs	.-84     	; 0x1b54 <MATH_u32Power+0x3e>
		Local_u32Result*=Copy_u32Base;
	}
	return Local_u32Result;
    1ba8:	8d 81       	ldd	r24, Y+5	; 0x05
    1baa:	9e 81       	ldd	r25, Y+6	; 0x06
    1bac:	af 81       	ldd	r26, Y+7	; 0x07
    1bae:	b8 85       	ldd	r27, Y+8	; 0x08
}
    1bb0:	bc 01       	movw	r22, r24
    1bb2:	cd 01       	movw	r24, r26
    1bb4:	60 96       	adiw	r28, 0x10	; 16
    1bb6:	0f b6       	in	r0, 0x3f	; 63
    1bb8:	f8 94       	cli
    1bba:	de bf       	out	0x3e, r29	; 62
    1bbc:	0f be       	out	0x3f, r0	; 63
    1bbe:	cd bf       	out	0x3d, r28	; 61
    1bc0:	cf 91       	pop	r28
    1bc2:	df 91       	pop	r29
    1bc4:	08 95       	ret

00001bc6 <MATH_s32Map>:

s32 MATH_s32Map(s32 Copy_s32InputMin,s32 Copy_s32InputMax,s32 Copy_s32OutputMin,s32 Copy_s32OutputMax,s32 Copy_s32InputVal){
    1bc6:	af 92       	push	r10
    1bc8:	bf 92       	push	r11
    1bca:	cf 92       	push	r12
    1bcc:	df 92       	push	r13
    1bce:	ef 92       	push	r14
    1bd0:	ff 92       	push	r15
    1bd2:	0f 93       	push	r16
    1bd4:	1f 93       	push	r17
    1bd6:	df 93       	push	r29
    1bd8:	cf 93       	push	r28
    1bda:	cd b7       	in	r28, 0x3d	; 61
    1bdc:	de b7       	in	r29, 0x3e	; 62
    1bde:	64 97       	sbiw	r28, 0x14	; 20
    1be0:	0f b6       	in	r0, 0x3f	; 63
    1be2:	f8 94       	cli
    1be4:	de bf       	out	0x3e, r29	; 62
    1be6:	0f be       	out	0x3f, r0	; 63
    1be8:	cd bf       	out	0x3d, r28	; 61
    1bea:	6d 83       	std	Y+5, r22	; 0x05
    1bec:	7e 83       	std	Y+6, r23	; 0x06
    1bee:	8f 83       	std	Y+7, r24	; 0x07
    1bf0:	98 87       	std	Y+8, r25	; 0x08
    1bf2:	29 87       	std	Y+9, r18	; 0x09
    1bf4:	3a 87       	std	Y+10, r19	; 0x0a
    1bf6:	4b 87       	std	Y+11, r20	; 0x0b
    1bf8:	5c 87       	std	Y+12, r21	; 0x0c
    1bfa:	ed 86       	std	Y+13, r14	; 0x0d
    1bfc:	fe 86       	std	Y+14, r15	; 0x0e
    1bfe:	0f 87       	std	Y+15, r16	; 0x0f
    1c00:	18 8b       	std	Y+16, r17	; 0x10
    1c02:	a9 8a       	std	Y+17, r10	; 0x11
    1c04:	ba 8a       	std	Y+18, r11	; 0x12
    1c06:	cb 8a       	std	Y+19, r12	; 0x13
    1c08:	dc 8a       	std	Y+20, r13	; 0x14
    s32 Local_s32OutputVal;
    Local_s32OutputVal= (((Copy_s32OutputMax-Copy_s32OutputMin)*(Copy_s32InputVal-Copy_s32InputMin))/(Copy_s32InputMax-Copy_s32InputMin))+Copy_s32OutputMin;
    1c0a:	29 89       	ldd	r18, Y+17	; 0x11
    1c0c:	3a 89       	ldd	r19, Y+18	; 0x12
    1c0e:	4b 89       	ldd	r20, Y+19	; 0x13
    1c10:	5c 89       	ldd	r21, Y+20	; 0x14
    1c12:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c14:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c16:	af 85       	ldd	r26, Y+15	; 0x0f
    1c18:	b8 89       	ldd	r27, Y+16	; 0x10
    1c1a:	79 01       	movw	r14, r18
    1c1c:	8a 01       	movw	r16, r20
    1c1e:	e8 1a       	sub	r14, r24
    1c20:	f9 0a       	sbc	r15, r25
    1c22:	0a 0b       	sbc	r16, r26
    1c24:	1b 0b       	sbc	r17, r27
    1c26:	29 a1       	ldd	r18, Y+33	; 0x21
    1c28:	3a a1       	ldd	r19, Y+34	; 0x22
    1c2a:	4b a1       	ldd	r20, Y+35	; 0x23
    1c2c:	5c a1       	ldd	r21, Y+36	; 0x24
    1c2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c30:	9e 81       	ldd	r25, Y+6	; 0x06
    1c32:	af 81       	ldd	r26, Y+7	; 0x07
    1c34:	b8 85       	ldd	r27, Y+8	; 0x08
    1c36:	28 1b       	sub	r18, r24
    1c38:	39 0b       	sbc	r19, r25
    1c3a:	4a 0b       	sbc	r20, r26
    1c3c:	5b 0b       	sbc	r21, r27
    1c3e:	c8 01       	movw	r24, r16
    1c40:	b7 01       	movw	r22, r14
    1c42:	0e 94 c7 19 	call	0x338e	; 0x338e <__mulsi3>
    1c46:	7b 01       	movw	r14, r22
    1c48:	8c 01       	movw	r16, r24
    1c4a:	29 85       	ldd	r18, Y+9	; 0x09
    1c4c:	3a 85       	ldd	r19, Y+10	; 0x0a
    1c4e:	4b 85       	ldd	r20, Y+11	; 0x0b
    1c50:	5c 85       	ldd	r21, Y+12	; 0x0c
    1c52:	8d 81       	ldd	r24, Y+5	; 0x05
    1c54:	9e 81       	ldd	r25, Y+6	; 0x06
    1c56:	af 81       	ldd	r26, Y+7	; 0x07
    1c58:	b8 85       	ldd	r27, Y+8	; 0x08
    1c5a:	28 1b       	sub	r18, r24
    1c5c:	39 0b       	sbc	r19, r25
    1c5e:	4a 0b       	sbc	r20, r26
    1c60:	5b 0b       	sbc	r21, r27
    1c62:	c8 01       	movw	r24, r16
    1c64:	b7 01       	movw	r22, r14
    1c66:	0e 94 1c 1a 	call	0x3438	; 0x3438 <__divmodsi4>
    1c6a:	da 01       	movw	r26, r20
    1c6c:	c9 01       	movw	r24, r18
    1c6e:	9c 01       	movw	r18, r24
    1c70:	ad 01       	movw	r20, r26
    1c72:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c74:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c76:	af 85       	ldd	r26, Y+15	; 0x0f
    1c78:	b8 89       	ldd	r27, Y+16	; 0x10
    1c7a:	82 0f       	add	r24, r18
    1c7c:	93 1f       	adc	r25, r19
    1c7e:	a4 1f       	adc	r26, r20
    1c80:	b5 1f       	adc	r27, r21
    1c82:	89 83       	std	Y+1, r24	; 0x01
    1c84:	9a 83       	std	Y+2, r25	; 0x02
    1c86:	ab 83       	std	Y+3, r26	; 0x03
    1c88:	bc 83       	std	Y+4, r27	; 0x04
    return Local_s32OutputVal;
    1c8a:	89 81       	ldd	r24, Y+1	; 0x01
    1c8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c8e:	ab 81       	ldd	r26, Y+3	; 0x03
    1c90:	bc 81       	ldd	r27, Y+4	; 0x04
    1c92:	bc 01       	movw	r22, r24
    1c94:	cd 01       	movw	r24, r26
    1c96:	64 96       	adiw	r28, 0x14	; 20
    1c98:	0f b6       	in	r0, 0x3f	; 63
    1c9a:	f8 94       	cli
    1c9c:	de bf       	out	0x3e, r29	; 62
    1c9e:	0f be       	out	0x3f, r0	; 63
    1ca0:	cd bf       	out	0x3d, r28	; 61
    1ca2:	cf 91       	pop	r28
    1ca4:	df 91       	pop	r29
    1ca6:	1f 91       	pop	r17
    1ca8:	0f 91       	pop	r16
    1caa:	ff 90       	pop	r15
    1cac:	ef 90       	pop	r14
    1cae:	df 90       	pop	r13
    1cb0:	cf 90       	pop	r12
    1cb2:	bf 90       	pop	r11
    1cb4:	af 90       	pop	r10
    1cb6:	08 95       	ret

00001cb8 <PORT_voidInit>:
#include "PORT_config.h"
#include "PORT_private.h"
#include "PORT_interface.h"
#include "PORT_register.h"

void PORT_voidInit(){
    1cb8:	df 93       	push	r29
    1cba:	cf 93       	push	r28
    1cbc:	cd b7       	in	r28, 0x3d	; 61
    1cbe:	de b7       	in	r29, 0x3e	; 62
    DDRA=PORTA_DIR;
    1cc0:	ea e3       	ldi	r30, 0x3A	; 58
    1cc2:	f0 e0       	ldi	r31, 0x00	; 0
    1cc4:	8f ef       	ldi	r24, 0xFF	; 255
    1cc6:	80 83       	st	Z, r24
    DDRB=PORTB_DIR;
    1cc8:	e7 e3       	ldi	r30, 0x37	; 55
    1cca:	f0 e0       	ldi	r31, 0x00	; 0
    1ccc:	8f e0       	ldi	r24, 0x0F	; 15
    1cce:	80 83       	st	Z, r24
    DDRC=PORTC_DIR;
    1cd0:	e4 e3       	ldi	r30, 0x34	; 52
    1cd2:	f0 e0       	ldi	r31, 0x00	; 0
    1cd4:	8f ef       	ldi	r24, 0xFF	; 255
    1cd6:	80 83       	st	Z, r24
    DDRD=PORTD_DIR;
    1cd8:	e1 e3       	ldi	r30, 0x31	; 49
    1cda:	f0 e0       	ldi	r31, 0x00	; 0
    1cdc:	8b ef       	ldi	r24, 0xFB	; 251
    1cde:	80 83       	st	Z, r24
    
    PORTA=PORTA_INIT_VAL;
    1ce0:	eb e3       	ldi	r30, 0x3B	; 59
    1ce2:	f0 e0       	ldi	r31, 0x00	; 0
    1ce4:	10 82       	st	Z, r1
    PORTB=PORTB_INIT_VAL;
    1ce6:	e8 e3       	ldi	r30, 0x38	; 56
    1ce8:	f0 e0       	ldi	r31, 0x00	; 0
    1cea:	10 82       	st	Z, r1
    PORTC=PORTC_INIT_VAL;
    1cec:	e5 e3       	ldi	r30, 0x35	; 53
    1cee:	f0 e0       	ldi	r31, 0x00	; 0
    1cf0:	10 82       	st	Z, r1
    PORTD=PORTD_INIT_VAL;
    1cf2:	e2 e3       	ldi	r30, 0x32	; 50
    1cf4:	f0 e0       	ldi	r31, 0x00	; 0
    1cf6:	10 82       	st	Z, r1
}
    1cf8:	cf 91       	pop	r28
    1cfa:	df 91       	pop	r29
    1cfc:	08 95       	ret

00001cfe <SERVO_u8Rotate>:
#include "STD_TYPES.h"
#include "MATH_HELPER.h"

#include "TIMER_interface.h"

u8 SERVO_u8Rotate(u8 Copy_u8Degree,Timer1_t* Copy_psTimer){
    1cfe:	af 92       	push	r10
    1d00:	bf 92       	push	r11
    1d02:	cf 92       	push	r12
    1d04:	df 92       	push	r13
    1d06:	ef 92       	push	r14
    1d08:	ff 92       	push	r15
    1d0a:	0f 93       	push	r16
    1d0c:	1f 93       	push	r17
    1d0e:	df 93       	push	r29
    1d10:	cf 93       	push	r28
    1d12:	00 d0       	rcall	.+0      	; 0x1d14 <SERVO_u8Rotate+0x16>
    1d14:	00 d0       	rcall	.+0      	; 0x1d16 <SERVO_u8Rotate+0x18>
    1d16:	00 d0       	rcall	.+0      	; 0x1d18 <SERVO_u8Rotate+0x1a>
    1d18:	cd b7       	in	r28, 0x3d	; 61
    1d1a:	de b7       	in	r29, 0x3e	; 62
    1d1c:	8c 83       	std	Y+4, r24	; 0x04
    1d1e:	7e 83       	std	Y+6, r23	; 0x06
    1d20:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8ErrorState;
	if(Copy_psTimer!=NULL){
    1d22:	8d 81       	ldd	r24, Y+5	; 0x05
    1d24:	9e 81       	ldd	r25, Y+6	; 0x06
    1d26:	00 97       	sbiw	r24, 0x00	; 0
    1d28:	f1 f1       	breq	.+124    	; 0x1da6 <SERVO_u8Rotate+0xa8>
		u16 Local_u16OnTime=MATH_s32Map(0,180,400,2657,Copy_u8Degree);
    1d2a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d2c:	88 2f       	mov	r24, r24
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	a0 e0       	ldi	r26, 0x00	; 0
    1d32:	b0 e0       	ldi	r27, 0x00	; 0
    1d34:	00 d0       	rcall	.+0      	; 0x1d36 <SERVO_u8Rotate+0x38>
    1d36:	00 d0       	rcall	.+0      	; 0x1d38 <SERVO_u8Rotate+0x3a>
    1d38:	ed b7       	in	r30, 0x3d	; 61
    1d3a:	fe b7       	in	r31, 0x3e	; 62
    1d3c:	31 96       	adiw	r30, 0x01	; 1
    1d3e:	80 83       	st	Z, r24
    1d40:	91 83       	std	Z+1, r25	; 0x01
    1d42:	a2 83       	std	Z+2, r26	; 0x02
    1d44:	b3 83       	std	Z+3, r27	; 0x03
    1d46:	60 e0       	ldi	r22, 0x00	; 0
    1d48:	70 e0       	ldi	r23, 0x00	; 0
    1d4a:	80 e0       	ldi	r24, 0x00	; 0
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	24 eb       	ldi	r18, 0xB4	; 180
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	40 e0       	ldi	r20, 0x00	; 0
    1d54:	50 e0       	ldi	r21, 0x00	; 0
    1d56:	0f 2e       	mov	r0, r31
    1d58:	f0 e9       	ldi	r31, 0x90	; 144
    1d5a:	ef 2e       	mov	r14, r31
    1d5c:	f1 e0       	ldi	r31, 0x01	; 1
    1d5e:	ff 2e       	mov	r15, r31
    1d60:	f0 e0       	ldi	r31, 0x00	; 0
    1d62:	0f 2f       	mov	r16, r31
    1d64:	f0 e0       	ldi	r31, 0x00	; 0
    1d66:	1f 2f       	mov	r17, r31
    1d68:	f0 2d       	mov	r31, r0
    1d6a:	0f 2e       	mov	r0, r31
    1d6c:	f1 e6       	ldi	r31, 0x61	; 97
    1d6e:	af 2e       	mov	r10, r31
    1d70:	fa e0       	ldi	r31, 0x0A	; 10
    1d72:	bf 2e       	mov	r11, r31
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	cf 2e       	mov	r12, r31
    1d78:	f0 e0       	ldi	r31, 0x00	; 0
    1d7a:	df 2e       	mov	r13, r31
    1d7c:	f0 2d       	mov	r31, r0
    1d7e:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <MATH_s32Map>
    1d82:	0f 90       	pop	r0
    1d84:	0f 90       	pop	r0
    1d86:	0f 90       	pop	r0
    1d88:	0f 90       	pop	r0
    1d8a:	dc 01       	movw	r26, r24
    1d8c:	cb 01       	movw	r24, r22
    1d8e:	9a 83       	std	Y+2, r25	; 0x02
    1d90:	89 83       	std	Y+1, r24	; 0x01
		TIMER_u8PWMGenerate(Copy_psTimer,20000,Local_u16OnTime);
    1d92:	8d 81       	ldd	r24, Y+5	; 0x05
    1d94:	9e 81       	ldd	r25, Y+6	; 0x06
    1d96:	29 81       	ldd	r18, Y+1	; 0x01
    1d98:	3a 81       	ldd	r19, Y+2	; 0x02
    1d9a:	60 e2       	ldi	r22, 0x20	; 32
    1d9c:	7e e4       	ldi	r23, 0x4E	; 78
    1d9e:	a9 01       	movw	r20, r18
    1da0:	0e 94 83 13 	call	0x2706	; 0x2706 <TIMER_u8PWMGenerate>
    1da4:	02 c0       	rjmp	.+4      	; 0x1daa <SERVO_u8Rotate+0xac>
	}
	else{
		Local_u8ErrorState=NULL_POINTER;
    1da6:	82 e0       	ldi	r24, 0x02	; 2
    1da8:	8b 83       	std	Y+3, r24	; 0x03
	}
	return Local_u8ErrorState;
    1daa:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1dac:	26 96       	adiw	r28, 0x06	; 6
    1dae:	0f b6       	in	r0, 0x3f	; 63
    1db0:	f8 94       	cli
    1db2:	de bf       	out	0x3e, r29	; 62
    1db4:	0f be       	out	0x3f, r0	; 63
    1db6:	cd bf       	out	0x3d, r28	; 61
    1db8:	cf 91       	pop	r28
    1dba:	df 91       	pop	r29
    1dbc:	1f 91       	pop	r17
    1dbe:	0f 91       	pop	r16
    1dc0:	ff 90       	pop	r15
    1dc2:	ef 90       	pop	r14
    1dc4:	df 90       	pop	r13
    1dc6:	cf 90       	pop	r12
    1dc8:	bf 90       	pop	r11
    1dca:	af 90       	pop	r10
    1dcc:	08 95       	ret

00001dce <TIMER_u8SetCompMatch>:
static void (*TIMER1B_pvCOMPCallBackFunc)(void)=NULL;
static void (*TIMER2_pvOVFCallBackFunc)(void)=NULL;
static void (*TIMER2_pvCOMPCallBackFunc)(void)=NULL;


u8 TIMER_u8SetCompMatch(u8 Copy_u8TimerID,u16 Copy_u16Value){
    1dce:	df 93       	push	r29
    1dd0:	cf 93       	push	r28
    1dd2:	00 d0       	rcall	.+0      	; 0x1dd4 <TIMER_u8SetCompMatch+0x6>
    1dd4:	00 d0       	rcall	.+0      	; 0x1dd6 <TIMER_u8SetCompMatch+0x8>
    1dd6:	00 d0       	rcall	.+0      	; 0x1dd8 <TIMER_u8SetCompMatch+0xa>
    1dd8:	cd b7       	in	r28, 0x3d	; 61
    1dda:	de b7       	in	r29, 0x3e	; 62
    1ddc:	8a 83       	std	Y+2, r24	; 0x02
    1dde:	7c 83       	std	Y+4, r23	; 0x04
    1de0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=OK;
    1de2:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8TimerID){
    1de4:	8a 81       	ldd	r24, Y+2	; 0x02
    1de6:	28 2f       	mov	r18, r24
    1de8:	30 e0       	ldi	r19, 0x00	; 0
    1dea:	3e 83       	std	Y+6, r19	; 0x06
    1dec:	2d 83       	std	Y+5, r18	; 0x05
    1dee:	8d 81       	ldd	r24, Y+5	; 0x05
    1df0:	9e 81       	ldd	r25, Y+6	; 0x06
    1df2:	81 30       	cpi	r24, 0x01	; 1
    1df4:	91 05       	cpc	r25, r1
    1df6:	19 f1       	breq	.+70     	; 0x1e3e <TIMER_u8SetCompMatch+0x70>
    1df8:	2d 81       	ldd	r18, Y+5	; 0x05
    1dfa:	3e 81       	ldd	r19, Y+6	; 0x06
    1dfc:	22 30       	cpi	r18, 0x02	; 2
    1dfe:	31 05       	cpc	r19, r1
    1e00:	2c f4       	brge	.+10     	; 0x1e0c <TIMER_u8SetCompMatch+0x3e>
    1e02:	8d 81       	ldd	r24, Y+5	; 0x05
    1e04:	9e 81       	ldd	r25, Y+6	; 0x06
    1e06:	00 97       	sbiw	r24, 0x00	; 0
    1e08:	61 f0       	breq	.+24     	; 0x1e22 <TIMER_u8SetCompMatch+0x54>
    1e0a:	35 c0       	rjmp	.+106    	; 0x1e76 <TIMER_u8SetCompMatch+0xa8>
    1e0c:	2d 81       	ldd	r18, Y+5	; 0x05
    1e0e:	3e 81       	ldd	r19, Y+6	; 0x06
    1e10:	22 30       	cpi	r18, 0x02	; 2
    1e12:	31 05       	cpc	r19, r1
    1e14:	d9 f0       	breq	.+54     	; 0x1e4c <TIMER_u8SetCompMatch+0x7e>
    1e16:	8d 81       	ldd	r24, Y+5	; 0x05
    1e18:	9e 81       	ldd	r25, Y+6	; 0x06
    1e1a:	84 30       	cpi	r24, 0x04	; 4
    1e1c:	91 05       	cpc	r25, r1
    1e1e:	e9 f0       	breq	.+58     	; 0x1e5a <TIMER_u8SetCompMatch+0x8c>
    1e20:	2a c0       	rjmp	.+84     	; 0x1e76 <TIMER_u8SetCompMatch+0xa8>
	case TIMER0  : if(Copy_u16Value<256){OCR0  = Copy_u16Value;} else{Local_u8ErrorState=NOK;} break;
    1e22:	8b 81       	ldd	r24, Y+3	; 0x03
    1e24:	9c 81       	ldd	r25, Y+4	; 0x04
    1e26:	8f 3f       	cpi	r24, 0xFF	; 255
    1e28:	91 05       	cpc	r25, r1
    1e2a:	09 f0       	breq	.+2      	; 0x1e2e <TIMER_u8SetCompMatch+0x60>
    1e2c:	28 f4       	brcc	.+10     	; 0x1e38 <TIMER_u8SetCompMatch+0x6a>
    1e2e:	ec e5       	ldi	r30, 0x5C	; 92
    1e30:	f0 e0       	ldi	r31, 0x00	; 0
    1e32:	8b 81       	ldd	r24, Y+3	; 0x03
    1e34:	80 83       	st	Z, r24
    1e36:	21 c0       	rjmp	.+66     	; 0x1e7a <TIMER_u8SetCompMatch+0xac>
    1e38:	81 e0       	ldi	r24, 0x01	; 1
    1e3a:	89 83       	std	Y+1, r24	; 0x01
    1e3c:	1e c0       	rjmp	.+60     	; 0x1e7a <TIMER_u8SetCompMatch+0xac>
	case TIMER1A : OCR1A = Copy_u16Value; break;
    1e3e:	ea e4       	ldi	r30, 0x4A	; 74
    1e40:	f0 e0       	ldi	r31, 0x00	; 0
    1e42:	8b 81       	ldd	r24, Y+3	; 0x03
    1e44:	9c 81       	ldd	r25, Y+4	; 0x04
    1e46:	91 83       	std	Z+1, r25	; 0x01
    1e48:	80 83       	st	Z, r24
    1e4a:	17 c0       	rjmp	.+46     	; 0x1e7a <TIMER_u8SetCompMatch+0xac>
	case TIMER1B : OCR1B = Copy_u16Value; break;
    1e4c:	e8 e4       	ldi	r30, 0x48	; 72
    1e4e:	f0 e0       	ldi	r31, 0x00	; 0
    1e50:	8b 81       	ldd	r24, Y+3	; 0x03
    1e52:	9c 81       	ldd	r25, Y+4	; 0x04
    1e54:	91 83       	std	Z+1, r25	; 0x01
    1e56:	80 83       	st	Z, r24
    1e58:	10 c0       	rjmp	.+32     	; 0x1e7a <TIMER_u8SetCompMatch+0xac>
	case TIMER2  : if(Copy_u16Value<256){OCR2  = Copy_u16Value;} else{Local_u8ErrorState=NOK;} break;
    1e5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e5e:	8f 3f       	cpi	r24, 0xFF	; 255
    1e60:	91 05       	cpc	r25, r1
    1e62:	09 f0       	breq	.+2      	; 0x1e66 <TIMER_u8SetCompMatch+0x98>
    1e64:	28 f4       	brcc	.+10     	; 0x1e70 <TIMER_u8SetCompMatch+0xa2>
    1e66:	e3 e4       	ldi	r30, 0x43	; 67
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6c:	80 83       	st	Z, r24
    1e6e:	05 c0       	rjmp	.+10     	; 0x1e7a <TIMER_u8SetCompMatch+0xac>
    1e70:	81 e0       	ldi	r24, 0x01	; 1
    1e72:	89 83       	std	Y+1, r24	; 0x01
    1e74:	02 c0       	rjmp	.+4      	; 0x1e7a <TIMER_u8SetCompMatch+0xac>
	default: Local_u8ErrorState=NOK;
    1e76:	81 e0       	ldi	r24, 0x01	; 1
    1e78:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1e7a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e7c:	26 96       	adiw	r28, 0x06	; 6
    1e7e:	0f b6       	in	r0, 0x3f	; 63
    1e80:	f8 94       	cli
    1e82:	de bf       	out	0x3e, r29	; 62
    1e84:	0f be       	out	0x3f, r0	; 63
    1e86:	cd bf       	out	0x3d, r28	; 61
    1e88:	cf 91       	pop	r28
    1e8a:	df 91       	pop	r29
    1e8c:	08 95       	ret

00001e8e <TIMER_u8GetTimerVal>:

u8 TIMER_u8GetTimerVal(u8 Copy_u8TimerID,u16* Copy_pu16Value){
    1e8e:	df 93       	push	r29
    1e90:	cf 93       	push	r28
    1e92:	00 d0       	rcall	.+0      	; 0x1e94 <TIMER_u8GetTimerVal+0x6>
    1e94:	00 d0       	rcall	.+0      	; 0x1e96 <TIMER_u8GetTimerVal+0x8>
    1e96:	00 d0       	rcall	.+0      	; 0x1e98 <TIMER_u8GetTimerVal+0xa>
    1e98:	cd b7       	in	r28, 0x3d	; 61
    1e9a:	de b7       	in	r29, 0x3e	; 62
    1e9c:	8a 83       	std	Y+2, r24	; 0x02
    1e9e:	7c 83       	std	Y+4, r23	; 0x04
    1ea0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=OK;
    1ea2:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8TimerID){
    1ea4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea6:	28 2f       	mov	r18, r24
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	3e 83       	std	Y+6, r19	; 0x06
    1eac:	2d 83       	std	Y+5, r18	; 0x05
    1eae:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb0:	9e 81       	ldd	r25, Y+6	; 0x06
    1eb2:	83 30       	cpi	r24, 0x03	; 3
    1eb4:	91 05       	cpc	r25, r1
    1eb6:	99 f0       	breq	.+38     	; 0x1ede <TIMER_u8GetTimerVal+0x50>
    1eb8:	2d 81       	ldd	r18, Y+5	; 0x05
    1eba:	3e 81       	ldd	r19, Y+6	; 0x06
    1ebc:	24 30       	cpi	r18, 0x04	; 4
    1ebe:	31 05       	cpc	r19, r1
    1ec0:	b9 f0       	breq	.+46     	; 0x1ef0 <TIMER_u8GetTimerVal+0x62>
    1ec2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ec6:	00 97       	sbiw	r24, 0x00	; 0
    1ec8:	e9 f4       	brne	.+58     	; 0x1f04 <TIMER_u8GetTimerVal+0x76>
	case TIMER0 : *Copy_pu16Value = TCNT0 ; break;
    1eca:	e2 e5       	ldi	r30, 0x52	; 82
    1ecc:	f0 e0       	ldi	r31, 0x00	; 0
    1ece:	80 81       	ld	r24, Z
    1ed0:	88 2f       	mov	r24, r24
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	eb 81       	ldd	r30, Y+3	; 0x03
    1ed6:	fc 81       	ldd	r31, Y+4	; 0x04
    1ed8:	91 83       	std	Z+1, r25	; 0x01
    1eda:	80 83       	st	Z, r24
    1edc:	15 c0       	rjmp	.+42     	; 0x1f08 <TIMER_u8GetTimerVal+0x7a>
	case TIMER1 : *Copy_pu16Value = TCNT1 ; break;
    1ede:	ec e4       	ldi	r30, 0x4C	; 76
    1ee0:	f0 e0       	ldi	r31, 0x00	; 0
    1ee2:	80 81       	ld	r24, Z
    1ee4:	91 81       	ldd	r25, Z+1	; 0x01
    1ee6:	eb 81       	ldd	r30, Y+3	; 0x03
    1ee8:	fc 81       	ldd	r31, Y+4	; 0x04
    1eea:	91 83       	std	Z+1, r25	; 0x01
    1eec:	80 83       	st	Z, r24
    1eee:	0c c0       	rjmp	.+24     	; 0x1f08 <TIMER_u8GetTimerVal+0x7a>
	case TIMER2 : *Copy_pu16Value = TCNT2 ; break;
    1ef0:	e4 e4       	ldi	r30, 0x44	; 68
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	80 81       	ld	r24, Z
    1ef6:	88 2f       	mov	r24, r24
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	eb 81       	ldd	r30, Y+3	; 0x03
    1efc:	fc 81       	ldd	r31, Y+4	; 0x04
    1efe:	91 83       	std	Z+1, r25	; 0x01
    1f00:	80 83       	st	Z, r24
    1f02:	02 c0       	rjmp	.+4      	; 0x1f08 <TIMER_u8GetTimerVal+0x7a>
	default: Local_u8ErrorState=NOK;
    1f04:	81 e0       	ldi	r24, 0x01	; 1
    1f06:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1f08:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f0a:	26 96       	adiw	r28, 0x06	; 6
    1f0c:	0f b6       	in	r0, 0x3f	; 63
    1f0e:	f8 94       	cli
    1f10:	de bf       	out	0x3e, r29	; 62
    1f12:	0f be       	out	0x3f, r0	; 63
    1f14:	cd bf       	out	0x3d, r28	; 61
    1f16:	cf 91       	pop	r28
    1f18:	df 91       	pop	r29
    1f1a:	08 95       	ret

00001f1c <TIMER_u8SetTimerVal>:

u8 TIMER_u8SetTimerVal(u8 Copy_u8TimerID,u16 Copy_u16Value){
    1f1c:	df 93       	push	r29
    1f1e:	cf 93       	push	r28
    1f20:	00 d0       	rcall	.+0      	; 0x1f22 <TIMER_u8SetTimerVal+0x6>
    1f22:	00 d0       	rcall	.+0      	; 0x1f24 <TIMER_u8SetTimerVal+0x8>
    1f24:	00 d0       	rcall	.+0      	; 0x1f26 <TIMER_u8SetTimerVal+0xa>
    1f26:	cd b7       	in	r28, 0x3d	; 61
    1f28:	de b7       	in	r29, 0x3e	; 62
    1f2a:	8a 83       	std	Y+2, r24	; 0x02
    1f2c:	7c 83       	std	Y+4, r23	; 0x04
    1f2e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=OK;
    1f30:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8TimerID){
    1f32:	8a 81       	ldd	r24, Y+2	; 0x02
    1f34:	28 2f       	mov	r18, r24
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	3e 83       	std	Y+6, r19	; 0x06
    1f3a:	2d 83       	std	Y+5, r18	; 0x05
    1f3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f40:	83 30       	cpi	r24, 0x03	; 3
    1f42:	91 05       	cpc	r25, r1
    1f44:	b9 f0       	breq	.+46     	; 0x1f74 <TIMER_u8SetTimerVal+0x58>
    1f46:	2d 81       	ldd	r18, Y+5	; 0x05
    1f48:	3e 81       	ldd	r19, Y+6	; 0x06
    1f4a:	24 30       	cpi	r18, 0x04	; 4
    1f4c:	31 05       	cpc	r19, r1
    1f4e:	c9 f0       	breq	.+50     	; 0x1f82 <TIMER_u8SetTimerVal+0x66>
    1f50:	8d 81       	ldd	r24, Y+5	; 0x05
    1f52:	9e 81       	ldd	r25, Y+6	; 0x06
    1f54:	00 97       	sbiw	r24, 0x00	; 0
    1f56:	19 f5       	brne	.+70     	; 0x1f9e <TIMER_u8SetTimerVal+0x82>
	case TIMER0 : if(Copy_u16Value<256){TCNT0  = Copy_u16Value;} else{Local_u8ErrorState=NOK;} break;
    1f58:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f5c:	8f 3f       	cpi	r24, 0xFF	; 255
    1f5e:	91 05       	cpc	r25, r1
    1f60:	09 f0       	breq	.+2      	; 0x1f64 <TIMER_u8SetTimerVal+0x48>
    1f62:	28 f4       	brcc	.+10     	; 0x1f6e <TIMER_u8SetTimerVal+0x52>
    1f64:	e2 e5       	ldi	r30, 0x52	; 82
    1f66:	f0 e0       	ldi	r31, 0x00	; 0
    1f68:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6a:	80 83       	st	Z, r24
    1f6c:	1a c0       	rjmp	.+52     	; 0x1fa2 <TIMER_u8SetTimerVal+0x86>
    1f6e:	81 e0       	ldi	r24, 0x01	; 1
    1f70:	89 83       	std	Y+1, r24	; 0x01
    1f72:	17 c0       	rjmp	.+46     	; 0x1fa2 <TIMER_u8SetTimerVal+0x86>
	case TIMER1 : TCNT1 = Copy_u16Value; break;
    1f74:	ec e4       	ldi	r30, 0x4C	; 76
    1f76:	f0 e0       	ldi	r31, 0x00	; 0
    1f78:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f7c:	91 83       	std	Z+1, r25	; 0x01
    1f7e:	80 83       	st	Z, r24
    1f80:	10 c0       	rjmp	.+32     	; 0x1fa2 <TIMER_u8SetTimerVal+0x86>
	case TIMER2 : if(Copy_u16Value<256){TCNT2  = Copy_u16Value;} else{Local_u8ErrorState=NOK;} break;
    1f82:	8b 81       	ldd	r24, Y+3	; 0x03
    1f84:	9c 81       	ldd	r25, Y+4	; 0x04
    1f86:	8f 3f       	cpi	r24, 0xFF	; 255
    1f88:	91 05       	cpc	r25, r1
    1f8a:	09 f0       	breq	.+2      	; 0x1f8e <TIMER_u8SetTimerVal+0x72>
    1f8c:	28 f4       	brcc	.+10     	; 0x1f98 <TIMER_u8SetTimerVal+0x7c>
    1f8e:	e4 e4       	ldi	r30, 0x44	; 68
    1f90:	f0 e0       	ldi	r31, 0x00	; 0
    1f92:	8b 81       	ldd	r24, Y+3	; 0x03
    1f94:	80 83       	st	Z, r24
    1f96:	05 c0       	rjmp	.+10     	; 0x1fa2 <TIMER_u8SetTimerVal+0x86>
    1f98:	81 e0       	ldi	r24, 0x01	; 1
    1f9a:	89 83       	std	Y+1, r24	; 0x01
    1f9c:	02 c0       	rjmp	.+4      	; 0x1fa2 <TIMER_u8SetTimerVal+0x86>
	default: Local_u8ErrorState=NOK;
    1f9e:	81 e0       	ldi	r24, 0x01	; 1
    1fa0:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1fa2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fa4:	26 96       	adiw	r28, 0x06	; 6
    1fa6:	0f b6       	in	r0, 0x3f	; 63
    1fa8:	f8 94       	cli
    1faa:	de bf       	out	0x3e, r29	; 62
    1fac:	0f be       	out	0x3f, r0	; 63
    1fae:	cd bf       	out	0x3d, r28	; 61
    1fb0:	cf 91       	pop	r28
    1fb2:	df 91       	pop	r29
    1fb4:	08 95       	ret

00001fb6 <TIMER0_u8Init>:

/********************************************************TIMER0**********************************************************
 ************************************************************************************************************************/


u8 TIMER0_u8Init(Timer_t* Copy_psTimer){
    1fb6:	df 93       	push	r29
    1fb8:	cf 93       	push	r28
    1fba:	00 d0       	rcall	.+0      	; 0x1fbc <TIMER0_u8Init+0x6>
    1fbc:	0f 92       	push	r0
    1fbe:	cd b7       	in	r28, 0x3d	; 61
    1fc0:	de b7       	in	r29, 0x3e	; 62
    1fc2:	9b 83       	std	Y+3, r25	; 0x03
    1fc4:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
    1fc6:	19 82       	std	Y+1, r1	; 0x01
	//Initialize Wave Generation Mode
	if(Copy_psTimer!=NULL){
    1fc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fca:	9b 81       	ldd	r25, Y+3	; 0x03
    1fcc:	00 97       	sbiw	r24, 0x00	; 0
    1fce:	09 f4       	brne	.+2      	; 0x1fd2 <TIMER0_u8Init+0x1c>
    1fd0:	b6 c0       	rjmp	.+364    	; 0x213e <TIMER0_u8Init+0x188>
		if(Copy_psTimer->WaveGenMode==TIMER_NORMAL){
    1fd2:	ea 81       	ldd	r30, Y+2	; 0x02
    1fd4:	fb 81       	ldd	r31, Y+3	; 0x03
    1fd6:	80 81       	ld	r24, Z
    1fd8:	81 30       	cpi	r24, 0x01	; 1
    1fda:	79 f4       	brne	.+30     	; 0x1ffa <TIMER0_u8Init+0x44>
			CLR_BIT(TCCR0,TCCR0_WGM01);
    1fdc:	a3 e5       	ldi	r26, 0x53	; 83
    1fde:	b0 e0       	ldi	r27, 0x00	; 0
    1fe0:	e3 e5       	ldi	r30, 0x53	; 83
    1fe2:	f0 e0       	ldi	r31, 0x00	; 0
    1fe4:	80 81       	ld	r24, Z
    1fe6:	87 7f       	andi	r24, 0xF7	; 247
    1fe8:	8c 93       	st	X, r24
			CLR_BIT(TCCR0,TCCR0_WGM00);
    1fea:	a3 e5       	ldi	r26, 0x53	; 83
    1fec:	b0 e0       	ldi	r27, 0x00	; 0
    1fee:	e3 e5       	ldi	r30, 0x53	; 83
    1ff0:	f0 e0       	ldi	r31, 0x00	; 0
    1ff2:	80 81       	ld	r24, Z
    1ff4:	8f 7b       	andi	r24, 0xBF	; 191
    1ff6:	8c 93       	st	X, r24
    1ff8:	3e c0       	rjmp	.+124    	; 0x2076 <TIMER0_u8Init+0xc0>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER_PHC_PWM){
    1ffa:	ea 81       	ldd	r30, Y+2	; 0x02
    1ffc:	fb 81       	ldd	r31, Y+3	; 0x03
    1ffe:	80 81       	ld	r24, Z
    2000:	82 30       	cpi	r24, 0x02	; 2
    2002:	79 f4       	brne	.+30     	; 0x2022 <TIMER0_u8Init+0x6c>
			CLR_BIT(TCCR0,TCCR0_WGM01);
    2004:	a3 e5       	ldi	r26, 0x53	; 83
    2006:	b0 e0       	ldi	r27, 0x00	; 0
    2008:	e3 e5       	ldi	r30, 0x53	; 83
    200a:	f0 e0       	ldi	r31, 0x00	; 0
    200c:	80 81       	ld	r24, Z
    200e:	87 7f       	andi	r24, 0xF7	; 247
    2010:	8c 93       	st	X, r24
			SET_BIT(TCCR0,TCCR0_WGM00);
    2012:	a3 e5       	ldi	r26, 0x53	; 83
    2014:	b0 e0       	ldi	r27, 0x00	; 0
    2016:	e3 e5       	ldi	r30, 0x53	; 83
    2018:	f0 e0       	ldi	r31, 0x00	; 0
    201a:	80 81       	ld	r24, Z
    201c:	80 64       	ori	r24, 0x40	; 64
    201e:	8c 93       	st	X, r24
    2020:	2a c0       	rjmp	.+84     	; 0x2076 <TIMER0_u8Init+0xc0>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER_CTC){
    2022:	ea 81       	ldd	r30, Y+2	; 0x02
    2024:	fb 81       	ldd	r31, Y+3	; 0x03
    2026:	80 81       	ld	r24, Z
    2028:	83 30       	cpi	r24, 0x03	; 3
    202a:	79 f4       	brne	.+30     	; 0x204a <TIMER0_u8Init+0x94>
			SET_BIT(TCCR0,TCCR0_WGM01);
    202c:	a3 e5       	ldi	r26, 0x53	; 83
    202e:	b0 e0       	ldi	r27, 0x00	; 0
    2030:	e3 e5       	ldi	r30, 0x53	; 83
    2032:	f0 e0       	ldi	r31, 0x00	; 0
    2034:	80 81       	ld	r24, Z
    2036:	88 60       	ori	r24, 0x08	; 8
    2038:	8c 93       	st	X, r24
			CLR_BIT(TCCR0,TCCR0_WGM00);
    203a:	a3 e5       	ldi	r26, 0x53	; 83
    203c:	b0 e0       	ldi	r27, 0x00	; 0
    203e:	e3 e5       	ldi	r30, 0x53	; 83
    2040:	f0 e0       	ldi	r31, 0x00	; 0
    2042:	80 81       	ld	r24, Z
    2044:	8f 7b       	andi	r24, 0xBF	; 191
    2046:	8c 93       	st	X, r24
    2048:	16 c0       	rjmp	.+44     	; 0x2076 <TIMER0_u8Init+0xc0>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER_FAST_PWM){
    204a:	ea 81       	ldd	r30, Y+2	; 0x02
    204c:	fb 81       	ldd	r31, Y+3	; 0x03
    204e:	80 81       	ld	r24, Z
    2050:	84 30       	cpi	r24, 0x04	; 4
    2052:	79 f4       	brne	.+30     	; 0x2072 <TIMER0_u8Init+0xbc>
			SET_BIT(TCCR0,TCCR0_WGM01);
    2054:	a3 e5       	ldi	r26, 0x53	; 83
    2056:	b0 e0       	ldi	r27, 0x00	; 0
    2058:	e3 e5       	ldi	r30, 0x53	; 83
    205a:	f0 e0       	ldi	r31, 0x00	; 0
    205c:	80 81       	ld	r24, Z
    205e:	88 60       	ori	r24, 0x08	; 8
    2060:	8c 93       	st	X, r24
			SET_BIT(TCCR0,TCCR0_WGM00);
    2062:	a3 e5       	ldi	r26, 0x53	; 83
    2064:	b0 e0       	ldi	r27, 0x00	; 0
    2066:	e3 e5       	ldi	r30, 0x53	; 83
    2068:	f0 e0       	ldi	r31, 0x00	; 0
    206a:	80 81       	ld	r24, Z
    206c:	80 64       	ori	r24, 0x40	; 64
    206e:	8c 93       	st	X, r24
    2070:	02 c0       	rjmp	.+4      	; 0x2076 <TIMER0_u8Init+0xc0>
		}
		else{
			Local_u8ErrorState=NOK;
    2072:	81 e0       	ldi	r24, 0x01	; 1
    2074:	89 83       	std	Y+1, r24	; 0x01
		}
		//Initialize Compare Match Output Mode
		TCCR0&=COMP_MATCH_OUT_MASK;
    2076:	a3 e5       	ldi	r26, 0x53	; 83
    2078:	b0 e0       	ldi	r27, 0x00	; 0
    207a:	e3 e5       	ldi	r30, 0x53	; 83
    207c:	f0 e0       	ldi	r31, 0x00	; 0
    207e:	80 81       	ld	r24, Z
    2080:	8f 7c       	andi	r24, 0xCF	; 207
    2082:	8c 93       	st	X, r24
		TCCR0|=((Copy_psTimer->CompareMatchOutputMode)<<4);
    2084:	a3 e5       	ldi	r26, 0x53	; 83
    2086:	b0 e0       	ldi	r27, 0x00	; 0
    2088:	e3 e5       	ldi	r30, 0x53	; 83
    208a:	f0 e0       	ldi	r31, 0x00	; 0
    208c:	80 81       	ld	r24, Z
    208e:	28 2f       	mov	r18, r24
    2090:	ea 81       	ldd	r30, Y+2	; 0x02
    2092:	fb 81       	ldd	r31, Y+3	; 0x03
    2094:	82 81       	ldd	r24, Z+2	; 0x02
    2096:	88 2f       	mov	r24, r24
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	82 95       	swap	r24
    209c:	92 95       	swap	r25
    209e:	90 7f       	andi	r25, 0xF0	; 240
    20a0:	98 27       	eor	r25, r24
    20a2:	80 7f       	andi	r24, 0xF0	; 240
    20a4:	98 27       	eor	r25, r24
    20a6:	82 2b       	or	r24, r18
    20a8:	8c 93       	st	X, r24
		//Initialize Interrupt Enable pins
		if(Copy_psTimer->CompareMatchInterrupt==INT_ENABLE){
    20aa:	ea 81       	ldd	r30, Y+2	; 0x02
    20ac:	fb 81       	ldd	r31, Y+3	; 0x03
    20ae:	83 81       	ldd	r24, Z+3	; 0x03
    20b0:	81 30       	cpi	r24, 0x01	; 1
    20b2:	41 f4       	brne	.+16     	; 0x20c4 <TIMER0_u8Init+0x10e>
			SET_BIT(TIMSK,TIMSK_OCIE0);
    20b4:	a9 e5       	ldi	r26, 0x59	; 89
    20b6:	b0 e0       	ldi	r27, 0x00	; 0
    20b8:	e9 e5       	ldi	r30, 0x59	; 89
    20ba:	f0 e0       	ldi	r31, 0x00	; 0
    20bc:	80 81       	ld	r24, Z
    20be:	82 60       	ori	r24, 0x02	; 2
    20c0:	8c 93       	st	X, r24
    20c2:	0f c0       	rjmp	.+30     	; 0x20e2 <TIMER0_u8Init+0x12c>
		}
		else if(Copy_psTimer->CompareMatchInterrupt==INT_DISABLE){
    20c4:	ea 81       	ldd	r30, Y+2	; 0x02
    20c6:	fb 81       	ldd	r31, Y+3	; 0x03
    20c8:	83 81       	ldd	r24, Z+3	; 0x03
    20ca:	82 30       	cpi	r24, 0x02	; 2
    20cc:	41 f4       	brne	.+16     	; 0x20de <TIMER0_u8Init+0x128>
			CLR_BIT(TIMSK,TIMSK_OCIE0);
    20ce:	a9 e5       	ldi	r26, 0x59	; 89
    20d0:	b0 e0       	ldi	r27, 0x00	; 0
    20d2:	e9 e5       	ldi	r30, 0x59	; 89
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	80 81       	ld	r24, Z
    20d8:	8d 7f       	andi	r24, 0xFD	; 253
    20da:	8c 93       	st	X, r24
    20dc:	02 c0       	rjmp	.+4      	; 0x20e2 <TIMER0_u8Init+0x12c>
		}
		else{
			Local_u8ErrorState=NOK;
    20de:	81 e0       	ldi	r24, 0x01	; 1
    20e0:	89 83       	std	Y+1, r24	; 0x01
		}

		if(Copy_psTimer->OverFlowInterrupt==INT_ENABLE){
    20e2:	ea 81       	ldd	r30, Y+2	; 0x02
    20e4:	fb 81       	ldd	r31, Y+3	; 0x03
    20e6:	84 81       	ldd	r24, Z+4	; 0x04
    20e8:	81 30       	cpi	r24, 0x01	; 1
    20ea:	41 f4       	brne	.+16     	; 0x20fc <TIMER0_u8Init+0x146>
			SET_BIT(TIMSK,TIMSK_TOIE0);
    20ec:	a9 e5       	ldi	r26, 0x59	; 89
    20ee:	b0 e0       	ldi	r27, 0x00	; 0
    20f0:	e9 e5       	ldi	r30, 0x59	; 89
    20f2:	f0 e0       	ldi	r31, 0x00	; 0
    20f4:	80 81       	ld	r24, Z
    20f6:	81 60       	ori	r24, 0x01	; 1
    20f8:	8c 93       	st	X, r24
    20fa:	0f c0       	rjmp	.+30     	; 0x211a <TIMER0_u8Init+0x164>
		}
		else if(Copy_psTimer->OverFlowInterrupt==INT_DISABLE){
    20fc:	ea 81       	ldd	r30, Y+2	; 0x02
    20fe:	fb 81       	ldd	r31, Y+3	; 0x03
    2100:	84 81       	ldd	r24, Z+4	; 0x04
    2102:	82 30       	cpi	r24, 0x02	; 2
    2104:	41 f4       	brne	.+16     	; 0x2116 <TIMER0_u8Init+0x160>
			CLR_BIT(TIMSK,TIMSK_TOIE0);
    2106:	a9 e5       	ldi	r26, 0x59	; 89
    2108:	b0 e0       	ldi	r27, 0x00	; 0
    210a:	e9 e5       	ldi	r30, 0x59	; 89
    210c:	f0 e0       	ldi	r31, 0x00	; 0
    210e:	80 81       	ld	r24, Z
    2110:	8e 7f       	andi	r24, 0xFE	; 254
    2112:	8c 93       	st	X, r24
    2114:	02 c0       	rjmp	.+4      	; 0x211a <TIMER0_u8Init+0x164>
		}
		else{
			Local_u8ErrorState=NOK;
    2116:	81 e0       	ldi	r24, 0x01	; 1
    2118:	89 83       	std	Y+1, r24	; 0x01
		}

		//Initialize Prescaler
		TCCR0&=PRESCALER_MASK;
    211a:	a3 e5       	ldi	r26, 0x53	; 83
    211c:	b0 e0       	ldi	r27, 0x00	; 0
    211e:	e3 e5       	ldi	r30, 0x53	; 83
    2120:	f0 e0       	ldi	r31, 0x00	; 0
    2122:	80 81       	ld	r24, Z
    2124:	88 7f       	andi	r24, 0xF8	; 248
    2126:	8c 93       	st	X, r24
		TCCR0|=Copy_psTimer->Prescaler;
    2128:	a3 e5       	ldi	r26, 0x53	; 83
    212a:	b0 e0       	ldi	r27, 0x00	; 0
    212c:	e3 e5       	ldi	r30, 0x53	; 83
    212e:	f0 e0       	ldi	r31, 0x00	; 0
    2130:	90 81       	ld	r25, Z
    2132:	ea 81       	ldd	r30, Y+2	; 0x02
    2134:	fb 81       	ldd	r31, Y+3	; 0x03
    2136:	81 81       	ldd	r24, Z+1	; 0x01
    2138:	89 2b       	or	r24, r25
    213a:	8c 93       	st	X, r24
    213c:	02 c0       	rjmp	.+4      	; 0x2142 <TIMER0_u8Init+0x18c>
	}
	else{
		Local_u8ErrorState=NULL_POINTER;
    213e:	82 e0       	ldi	r24, 0x02	; 2
    2140:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    2142:	89 81       	ldd	r24, Y+1	; 0x01
}
    2144:	0f 90       	pop	r0
    2146:	0f 90       	pop	r0
    2148:	0f 90       	pop	r0
    214a:	cf 91       	pop	r28
    214c:	df 91       	pop	r29
    214e:	08 95       	ret

00002150 <TIMER1_u8Init>:

/********************************************************TIMER1**********************************************************
 ************************************************************************************************************************/


u8 TIMER1_u8Init(Timer1_t* Copy_psTimer){
    2150:	df 93       	push	r29
    2152:	cf 93       	push	r28
    2154:	00 d0       	rcall	.+0      	; 0x2156 <TIMER1_u8Init+0x6>
    2156:	0f 92       	push	r0
    2158:	cd b7       	in	r28, 0x3d	; 61
    215a:	de b7       	in	r29, 0x3e	; 62
    215c:	9b 83       	std	Y+3, r25	; 0x03
    215e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
    2160:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_psTimer!=NULL){
    2162:	8a 81       	ldd	r24, Y+2	; 0x02
    2164:	9b 81       	ldd	r25, Y+3	; 0x03
    2166:	00 97       	sbiw	r24, 0x00	; 0
    2168:	09 f4       	brne	.+2      	; 0x216c <TIMER1_u8Init+0x1c>
    216a:	b2 c2       	rjmp	.+1380   	; 0x26d0 <TIMER1_u8Init+0x580>
		//initialize wave generation mode
		if(Copy_psTimer->WaveGenMode==TIMER1_NORMAL){
    216c:	ea 81       	ldd	r30, Y+2	; 0x02
    216e:	fb 81       	ldd	r31, Y+3	; 0x03
    2170:	80 81       	ld	r24, Z
    2172:	81 30       	cpi	r24, 0x01	; 1
    2174:	e9 f4       	brne	.+58     	; 0x21b0 <TIMER1_u8Init+0x60>
			CLR_BIT(TCCR1B,TCCR1B_WGM13);
    2176:	ae e4       	ldi	r26, 0x4E	; 78
    2178:	b0 e0       	ldi	r27, 0x00	; 0
    217a:	ee e4       	ldi	r30, 0x4E	; 78
    217c:	f0 e0       	ldi	r31, 0x00	; 0
    217e:	80 81       	ld	r24, Z
    2180:	8f 7e       	andi	r24, 0xEF	; 239
    2182:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B,TCCR1B_WGM12);
    2184:	ae e4       	ldi	r26, 0x4E	; 78
    2186:	b0 e0       	ldi	r27, 0x00	; 0
    2188:	ee e4       	ldi	r30, 0x4E	; 78
    218a:	f0 e0       	ldi	r31, 0x00	; 0
    218c:	80 81       	ld	r24, Z
    218e:	87 7f       	andi	r24, 0xF7	; 247
    2190:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM11);
    2192:	af e4       	ldi	r26, 0x4F	; 79
    2194:	b0 e0       	ldi	r27, 0x00	; 0
    2196:	ef e4       	ldi	r30, 0x4F	; 79
    2198:	f0 e0       	ldi	r31, 0x00	; 0
    219a:	80 81       	ld	r24, Z
    219c:	8d 7f       	andi	r24, 0xFD	; 253
    219e:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM10);
    21a0:	af e4       	ldi	r26, 0x4F	; 79
    21a2:	b0 e0       	ldi	r27, 0x00	; 0
    21a4:	ef e4       	ldi	r30, 0x4F	; 79
    21a6:	f0 e0       	ldi	r31, 0x00	; 0
    21a8:	80 81       	ld	r24, Z
    21aa:	8e 7f       	andi	r24, 0xFE	; 254
    21ac:	8c 93       	st	X, r24
    21ae:	de c1       	rjmp	.+956    	; 0x256c <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_PHC_PWM_8_BIT){
    21b0:	ea 81       	ldd	r30, Y+2	; 0x02
    21b2:	fb 81       	ldd	r31, Y+3	; 0x03
    21b4:	80 81       	ld	r24, Z
    21b6:	82 30       	cpi	r24, 0x02	; 2
    21b8:	e9 f4       	brne	.+58     	; 0x21f4 <TIMER1_u8Init+0xa4>
			CLR_BIT(TCCR1B,TCCR1B_WGM13);
    21ba:	ae e4       	ldi	r26, 0x4E	; 78
    21bc:	b0 e0       	ldi	r27, 0x00	; 0
    21be:	ee e4       	ldi	r30, 0x4E	; 78
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	80 81       	ld	r24, Z
    21c4:	8f 7e       	andi	r24, 0xEF	; 239
    21c6:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B,TCCR1B_WGM12);
    21c8:	ae e4       	ldi	r26, 0x4E	; 78
    21ca:	b0 e0       	ldi	r27, 0x00	; 0
    21cc:	ee e4       	ldi	r30, 0x4E	; 78
    21ce:	f0 e0       	ldi	r31, 0x00	; 0
    21d0:	80 81       	ld	r24, Z
    21d2:	87 7f       	andi	r24, 0xF7	; 247
    21d4:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM11);
    21d6:	af e4       	ldi	r26, 0x4F	; 79
    21d8:	b0 e0       	ldi	r27, 0x00	; 0
    21da:	ef e4       	ldi	r30, 0x4F	; 79
    21dc:	f0 e0       	ldi	r31, 0x00	; 0
    21de:	80 81       	ld	r24, Z
    21e0:	8d 7f       	andi	r24, 0xFD	; 253
    21e2:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM10);
    21e4:	af e4       	ldi	r26, 0x4F	; 79
    21e6:	b0 e0       	ldi	r27, 0x00	; 0
    21e8:	ef e4       	ldi	r30, 0x4F	; 79
    21ea:	f0 e0       	ldi	r31, 0x00	; 0
    21ec:	80 81       	ld	r24, Z
    21ee:	81 60       	ori	r24, 0x01	; 1
    21f0:	8c 93       	st	X, r24
    21f2:	bc c1       	rjmp	.+888    	; 0x256c <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_PHC_PWM_9_BIT){
    21f4:	ea 81       	ldd	r30, Y+2	; 0x02
    21f6:	fb 81       	ldd	r31, Y+3	; 0x03
    21f8:	80 81       	ld	r24, Z
    21fa:	83 30       	cpi	r24, 0x03	; 3
    21fc:	e9 f4       	brne	.+58     	; 0x2238 <TIMER1_u8Init+0xe8>
			CLR_BIT(TCCR1B,TCCR1B_WGM13);
    21fe:	ae e4       	ldi	r26, 0x4E	; 78
    2200:	b0 e0       	ldi	r27, 0x00	; 0
    2202:	ee e4       	ldi	r30, 0x4E	; 78
    2204:	f0 e0       	ldi	r31, 0x00	; 0
    2206:	80 81       	ld	r24, Z
    2208:	8f 7e       	andi	r24, 0xEF	; 239
    220a:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B,TCCR1B_WGM12);
    220c:	ae e4       	ldi	r26, 0x4E	; 78
    220e:	b0 e0       	ldi	r27, 0x00	; 0
    2210:	ee e4       	ldi	r30, 0x4E	; 78
    2212:	f0 e0       	ldi	r31, 0x00	; 0
    2214:	80 81       	ld	r24, Z
    2216:	87 7f       	andi	r24, 0xF7	; 247
    2218:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM11);
    221a:	af e4       	ldi	r26, 0x4F	; 79
    221c:	b0 e0       	ldi	r27, 0x00	; 0
    221e:	ef e4       	ldi	r30, 0x4F	; 79
    2220:	f0 e0       	ldi	r31, 0x00	; 0
    2222:	80 81       	ld	r24, Z
    2224:	82 60       	ori	r24, 0x02	; 2
    2226:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM10);
    2228:	af e4       	ldi	r26, 0x4F	; 79
    222a:	b0 e0       	ldi	r27, 0x00	; 0
    222c:	ef e4       	ldi	r30, 0x4F	; 79
    222e:	f0 e0       	ldi	r31, 0x00	; 0
    2230:	80 81       	ld	r24, Z
    2232:	8e 7f       	andi	r24, 0xFE	; 254
    2234:	8c 93       	st	X, r24
    2236:	9a c1       	rjmp	.+820    	; 0x256c <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_PHC_PWM_10_BIT){
    2238:	ea 81       	ldd	r30, Y+2	; 0x02
    223a:	fb 81       	ldd	r31, Y+3	; 0x03
    223c:	80 81       	ld	r24, Z
    223e:	84 30       	cpi	r24, 0x04	; 4
    2240:	e9 f4       	brne	.+58     	; 0x227c <TIMER1_u8Init+0x12c>
			CLR_BIT(TCCR1B,TCCR1B_WGM13);
    2242:	ae e4       	ldi	r26, 0x4E	; 78
    2244:	b0 e0       	ldi	r27, 0x00	; 0
    2246:	ee e4       	ldi	r30, 0x4E	; 78
    2248:	f0 e0       	ldi	r31, 0x00	; 0
    224a:	80 81       	ld	r24, Z
    224c:	8f 7e       	andi	r24, 0xEF	; 239
    224e:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B,TCCR1B_WGM12);
    2250:	ae e4       	ldi	r26, 0x4E	; 78
    2252:	b0 e0       	ldi	r27, 0x00	; 0
    2254:	ee e4       	ldi	r30, 0x4E	; 78
    2256:	f0 e0       	ldi	r31, 0x00	; 0
    2258:	80 81       	ld	r24, Z
    225a:	87 7f       	andi	r24, 0xF7	; 247
    225c:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM11);
    225e:	af e4       	ldi	r26, 0x4F	; 79
    2260:	b0 e0       	ldi	r27, 0x00	; 0
    2262:	ef e4       	ldi	r30, 0x4F	; 79
    2264:	f0 e0       	ldi	r31, 0x00	; 0
    2266:	80 81       	ld	r24, Z
    2268:	82 60       	ori	r24, 0x02	; 2
    226a:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM10);
    226c:	af e4       	ldi	r26, 0x4F	; 79
    226e:	b0 e0       	ldi	r27, 0x00	; 0
    2270:	ef e4       	ldi	r30, 0x4F	; 79
    2272:	f0 e0       	ldi	r31, 0x00	; 0
    2274:	80 81       	ld	r24, Z
    2276:	81 60       	ori	r24, 0x01	; 1
    2278:	8c 93       	st	X, r24
    227a:	78 c1       	rjmp	.+752    	; 0x256c <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_CTC){
    227c:	ea 81       	ldd	r30, Y+2	; 0x02
    227e:	fb 81       	ldd	r31, Y+3	; 0x03
    2280:	80 81       	ld	r24, Z
    2282:	85 30       	cpi	r24, 0x05	; 5
    2284:	e9 f4       	brne	.+58     	; 0x22c0 <TIMER1_u8Init+0x170>
			CLR_BIT(TCCR1B,TCCR1B_WGM13);
    2286:	ae e4       	ldi	r26, 0x4E	; 78
    2288:	b0 e0       	ldi	r27, 0x00	; 0
    228a:	ee e4       	ldi	r30, 0x4E	; 78
    228c:	f0 e0       	ldi	r31, 0x00	; 0
    228e:	80 81       	ld	r24, Z
    2290:	8f 7e       	andi	r24, 0xEF	; 239
    2292:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,TCCR1B_WGM12);
    2294:	ae e4       	ldi	r26, 0x4E	; 78
    2296:	b0 e0       	ldi	r27, 0x00	; 0
    2298:	ee e4       	ldi	r30, 0x4E	; 78
    229a:	f0 e0       	ldi	r31, 0x00	; 0
    229c:	80 81       	ld	r24, Z
    229e:	88 60       	ori	r24, 0x08	; 8
    22a0:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM11);
    22a2:	af e4       	ldi	r26, 0x4F	; 79
    22a4:	b0 e0       	ldi	r27, 0x00	; 0
    22a6:	ef e4       	ldi	r30, 0x4F	; 79
    22a8:	f0 e0       	ldi	r31, 0x00	; 0
    22aa:	80 81       	ld	r24, Z
    22ac:	8d 7f       	andi	r24, 0xFD	; 253
    22ae:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM10);
    22b0:	af e4       	ldi	r26, 0x4F	; 79
    22b2:	b0 e0       	ldi	r27, 0x00	; 0
    22b4:	ef e4       	ldi	r30, 0x4F	; 79
    22b6:	f0 e0       	ldi	r31, 0x00	; 0
    22b8:	80 81       	ld	r24, Z
    22ba:	8e 7f       	andi	r24, 0xFE	; 254
    22bc:	8c 93       	st	X, r24
    22be:	56 c1       	rjmp	.+684    	; 0x256c <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_FAST_PWM_8_BIT){
    22c0:	ea 81       	ldd	r30, Y+2	; 0x02
    22c2:	fb 81       	ldd	r31, Y+3	; 0x03
    22c4:	80 81       	ld	r24, Z
    22c6:	86 30       	cpi	r24, 0x06	; 6
    22c8:	e9 f4       	brne	.+58     	; 0x2304 <TIMER1_u8Init+0x1b4>
			CLR_BIT(TCCR1B,TCCR1B_WGM13);
    22ca:	ae e4       	ldi	r26, 0x4E	; 78
    22cc:	b0 e0       	ldi	r27, 0x00	; 0
    22ce:	ee e4       	ldi	r30, 0x4E	; 78
    22d0:	f0 e0       	ldi	r31, 0x00	; 0
    22d2:	80 81       	ld	r24, Z
    22d4:	8f 7e       	andi	r24, 0xEF	; 239
    22d6:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,TCCR1B_WGM12);
    22d8:	ae e4       	ldi	r26, 0x4E	; 78
    22da:	b0 e0       	ldi	r27, 0x00	; 0
    22dc:	ee e4       	ldi	r30, 0x4E	; 78
    22de:	f0 e0       	ldi	r31, 0x00	; 0
    22e0:	80 81       	ld	r24, Z
    22e2:	88 60       	ori	r24, 0x08	; 8
    22e4:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM11);
    22e6:	af e4       	ldi	r26, 0x4F	; 79
    22e8:	b0 e0       	ldi	r27, 0x00	; 0
    22ea:	ef e4       	ldi	r30, 0x4F	; 79
    22ec:	f0 e0       	ldi	r31, 0x00	; 0
    22ee:	80 81       	ld	r24, Z
    22f0:	8d 7f       	andi	r24, 0xFD	; 253
    22f2:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM10);
    22f4:	af e4       	ldi	r26, 0x4F	; 79
    22f6:	b0 e0       	ldi	r27, 0x00	; 0
    22f8:	ef e4       	ldi	r30, 0x4F	; 79
    22fa:	f0 e0       	ldi	r31, 0x00	; 0
    22fc:	80 81       	ld	r24, Z
    22fe:	81 60       	ori	r24, 0x01	; 1
    2300:	8c 93       	st	X, r24
    2302:	34 c1       	rjmp	.+616    	; 0x256c <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_FAST_PWM_9_BIT){
    2304:	ea 81       	ldd	r30, Y+2	; 0x02
    2306:	fb 81       	ldd	r31, Y+3	; 0x03
    2308:	80 81       	ld	r24, Z
    230a:	87 30       	cpi	r24, 0x07	; 7
    230c:	e9 f4       	brne	.+58     	; 0x2348 <TIMER1_u8Init+0x1f8>
			CLR_BIT(TCCR1B,TCCR1B_WGM13);
    230e:	ae e4       	ldi	r26, 0x4E	; 78
    2310:	b0 e0       	ldi	r27, 0x00	; 0
    2312:	ee e4       	ldi	r30, 0x4E	; 78
    2314:	f0 e0       	ldi	r31, 0x00	; 0
    2316:	80 81       	ld	r24, Z
    2318:	8f 7e       	andi	r24, 0xEF	; 239
    231a:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,TCCR1B_WGM12);
    231c:	ae e4       	ldi	r26, 0x4E	; 78
    231e:	b0 e0       	ldi	r27, 0x00	; 0
    2320:	ee e4       	ldi	r30, 0x4E	; 78
    2322:	f0 e0       	ldi	r31, 0x00	; 0
    2324:	80 81       	ld	r24, Z
    2326:	88 60       	ori	r24, 0x08	; 8
    2328:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM11);
    232a:	af e4       	ldi	r26, 0x4F	; 79
    232c:	b0 e0       	ldi	r27, 0x00	; 0
    232e:	ef e4       	ldi	r30, 0x4F	; 79
    2330:	f0 e0       	ldi	r31, 0x00	; 0
    2332:	80 81       	ld	r24, Z
    2334:	82 60       	ori	r24, 0x02	; 2
    2336:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM10);
    2338:	af e4       	ldi	r26, 0x4F	; 79
    233a:	b0 e0       	ldi	r27, 0x00	; 0
    233c:	ef e4       	ldi	r30, 0x4F	; 79
    233e:	f0 e0       	ldi	r31, 0x00	; 0
    2340:	80 81       	ld	r24, Z
    2342:	8e 7f       	andi	r24, 0xFE	; 254
    2344:	8c 93       	st	X, r24
    2346:	12 c1       	rjmp	.+548    	; 0x256c <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_FAST_PWM_10_BIT){
    2348:	ea 81       	ldd	r30, Y+2	; 0x02
    234a:	fb 81       	ldd	r31, Y+3	; 0x03
    234c:	80 81       	ld	r24, Z
    234e:	88 30       	cpi	r24, 0x08	; 8
    2350:	e9 f4       	brne	.+58     	; 0x238c <TIMER1_u8Init+0x23c>
			CLR_BIT(TCCR1B,TCCR1B_WGM13);
    2352:	ae e4       	ldi	r26, 0x4E	; 78
    2354:	b0 e0       	ldi	r27, 0x00	; 0
    2356:	ee e4       	ldi	r30, 0x4E	; 78
    2358:	f0 e0       	ldi	r31, 0x00	; 0
    235a:	80 81       	ld	r24, Z
    235c:	8f 7e       	andi	r24, 0xEF	; 239
    235e:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,TCCR1B_WGM12);
    2360:	ae e4       	ldi	r26, 0x4E	; 78
    2362:	b0 e0       	ldi	r27, 0x00	; 0
    2364:	ee e4       	ldi	r30, 0x4E	; 78
    2366:	f0 e0       	ldi	r31, 0x00	; 0
    2368:	80 81       	ld	r24, Z
    236a:	88 60       	ori	r24, 0x08	; 8
    236c:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM11);
    236e:	af e4       	ldi	r26, 0x4F	; 79
    2370:	b0 e0       	ldi	r27, 0x00	; 0
    2372:	ef e4       	ldi	r30, 0x4F	; 79
    2374:	f0 e0       	ldi	r31, 0x00	; 0
    2376:	80 81       	ld	r24, Z
    2378:	82 60       	ori	r24, 0x02	; 2
    237a:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM10);
    237c:	af e4       	ldi	r26, 0x4F	; 79
    237e:	b0 e0       	ldi	r27, 0x00	; 0
    2380:	ef e4       	ldi	r30, 0x4F	; 79
    2382:	f0 e0       	ldi	r31, 0x00	; 0
    2384:	80 81       	ld	r24, Z
    2386:	81 60       	ori	r24, 0x01	; 1
    2388:	8c 93       	st	X, r24
    238a:	f0 c0       	rjmp	.+480    	; 0x256c <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_PHFC_PWM_CUSTOM_TOP){
    238c:	ea 81       	ldd	r30, Y+2	; 0x02
    238e:	fb 81       	ldd	r31, Y+3	; 0x03
    2390:	80 81       	ld	r24, Z
    2392:	89 30       	cpi	r24, 0x09	; 9
    2394:	e9 f4       	brne	.+58     	; 0x23d0 <TIMER1_u8Init+0x280>
			SET_BIT(TCCR1B,TCCR1B_WGM13);
    2396:	ae e4       	ldi	r26, 0x4E	; 78
    2398:	b0 e0       	ldi	r27, 0x00	; 0
    239a:	ee e4       	ldi	r30, 0x4E	; 78
    239c:	f0 e0       	ldi	r31, 0x00	; 0
    239e:	80 81       	ld	r24, Z
    23a0:	80 61       	ori	r24, 0x10	; 16
    23a2:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B,TCCR1B_WGM12);
    23a4:	ae e4       	ldi	r26, 0x4E	; 78
    23a6:	b0 e0       	ldi	r27, 0x00	; 0
    23a8:	ee e4       	ldi	r30, 0x4E	; 78
    23aa:	f0 e0       	ldi	r31, 0x00	; 0
    23ac:	80 81       	ld	r24, Z
    23ae:	87 7f       	andi	r24, 0xF7	; 247
    23b0:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM11);
    23b2:	af e4       	ldi	r26, 0x4F	; 79
    23b4:	b0 e0       	ldi	r27, 0x00	; 0
    23b6:	ef e4       	ldi	r30, 0x4F	; 79
    23b8:	f0 e0       	ldi	r31, 0x00	; 0
    23ba:	80 81       	ld	r24, Z
    23bc:	8d 7f       	andi	r24, 0xFD	; 253
    23be:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM10);
    23c0:	af e4       	ldi	r26, 0x4F	; 79
    23c2:	b0 e0       	ldi	r27, 0x00	; 0
    23c4:	ef e4       	ldi	r30, 0x4F	; 79
    23c6:	f0 e0       	ldi	r31, 0x00	; 0
    23c8:	80 81       	ld	r24, Z
    23ca:	8e 7f       	andi	r24, 0xFE	; 254
    23cc:	8c 93       	st	X, r24
    23ce:	ce c0       	rjmp	.+412    	; 0x256c <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_PHFC_PWM){
    23d0:	ea 81       	ldd	r30, Y+2	; 0x02
    23d2:	fb 81       	ldd	r31, Y+3	; 0x03
    23d4:	80 81       	ld	r24, Z
    23d6:	8a 30       	cpi	r24, 0x0A	; 10
    23d8:	e9 f4       	brne	.+58     	; 0x2414 <TIMER1_u8Init+0x2c4>
			SET_BIT(TCCR1B,TCCR1B_WGM13);
    23da:	ae e4       	ldi	r26, 0x4E	; 78
    23dc:	b0 e0       	ldi	r27, 0x00	; 0
    23de:	ee e4       	ldi	r30, 0x4E	; 78
    23e0:	f0 e0       	ldi	r31, 0x00	; 0
    23e2:	80 81       	ld	r24, Z
    23e4:	80 61       	ori	r24, 0x10	; 16
    23e6:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B,TCCR1B_WGM12);
    23e8:	ae e4       	ldi	r26, 0x4E	; 78
    23ea:	b0 e0       	ldi	r27, 0x00	; 0
    23ec:	ee e4       	ldi	r30, 0x4E	; 78
    23ee:	f0 e0       	ldi	r31, 0x00	; 0
    23f0:	80 81       	ld	r24, Z
    23f2:	87 7f       	andi	r24, 0xF7	; 247
    23f4:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM11);
    23f6:	af e4       	ldi	r26, 0x4F	; 79
    23f8:	b0 e0       	ldi	r27, 0x00	; 0
    23fa:	ef e4       	ldi	r30, 0x4F	; 79
    23fc:	f0 e0       	ldi	r31, 0x00	; 0
    23fe:	80 81       	ld	r24, Z
    2400:	8d 7f       	andi	r24, 0xFD	; 253
    2402:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM10);
    2404:	af e4       	ldi	r26, 0x4F	; 79
    2406:	b0 e0       	ldi	r27, 0x00	; 0
    2408:	ef e4       	ldi	r30, 0x4F	; 79
    240a:	f0 e0       	ldi	r31, 0x00	; 0
    240c:	80 81       	ld	r24, Z
    240e:	81 60       	ori	r24, 0x01	; 1
    2410:	8c 93       	st	X, r24
    2412:	ac c0       	rjmp	.+344    	; 0x256c <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_PHC_PWM_CUSTOM_TOP){
    2414:	ea 81       	ldd	r30, Y+2	; 0x02
    2416:	fb 81       	ldd	r31, Y+3	; 0x03
    2418:	80 81       	ld	r24, Z
    241a:	8b 30       	cpi	r24, 0x0B	; 11
    241c:	e9 f4       	brne	.+58     	; 0x2458 <TIMER1_u8Init+0x308>
			SET_BIT(TCCR1B,TCCR1B_WGM13);
    241e:	ae e4       	ldi	r26, 0x4E	; 78
    2420:	b0 e0       	ldi	r27, 0x00	; 0
    2422:	ee e4       	ldi	r30, 0x4E	; 78
    2424:	f0 e0       	ldi	r31, 0x00	; 0
    2426:	80 81       	ld	r24, Z
    2428:	80 61       	ori	r24, 0x10	; 16
    242a:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B,TCCR1B_WGM12);
    242c:	ae e4       	ldi	r26, 0x4E	; 78
    242e:	b0 e0       	ldi	r27, 0x00	; 0
    2430:	ee e4       	ldi	r30, 0x4E	; 78
    2432:	f0 e0       	ldi	r31, 0x00	; 0
    2434:	80 81       	ld	r24, Z
    2436:	87 7f       	andi	r24, 0xF7	; 247
    2438:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM11);
    243a:	af e4       	ldi	r26, 0x4F	; 79
    243c:	b0 e0       	ldi	r27, 0x00	; 0
    243e:	ef e4       	ldi	r30, 0x4F	; 79
    2440:	f0 e0       	ldi	r31, 0x00	; 0
    2442:	80 81       	ld	r24, Z
    2444:	82 60       	ori	r24, 0x02	; 2
    2446:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM10);
    2448:	af e4       	ldi	r26, 0x4F	; 79
    244a:	b0 e0       	ldi	r27, 0x00	; 0
    244c:	ef e4       	ldi	r30, 0x4F	; 79
    244e:	f0 e0       	ldi	r31, 0x00	; 0
    2450:	80 81       	ld	r24, Z
    2452:	8e 7f       	andi	r24, 0xFE	; 254
    2454:	8c 93       	st	X, r24
    2456:	8a c0       	rjmp	.+276    	; 0x256c <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_PHC_PWM){
    2458:	ea 81       	ldd	r30, Y+2	; 0x02
    245a:	fb 81       	ldd	r31, Y+3	; 0x03
    245c:	80 81       	ld	r24, Z
    245e:	8c 30       	cpi	r24, 0x0C	; 12
    2460:	e9 f4       	brne	.+58     	; 0x249c <TIMER1_u8Init+0x34c>
			SET_BIT(TCCR1B,TCCR1B_WGM13);
    2462:	ae e4       	ldi	r26, 0x4E	; 78
    2464:	b0 e0       	ldi	r27, 0x00	; 0
    2466:	ee e4       	ldi	r30, 0x4E	; 78
    2468:	f0 e0       	ldi	r31, 0x00	; 0
    246a:	80 81       	ld	r24, Z
    246c:	80 61       	ori	r24, 0x10	; 16
    246e:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B,TCCR1B_WGM12);
    2470:	ae e4       	ldi	r26, 0x4E	; 78
    2472:	b0 e0       	ldi	r27, 0x00	; 0
    2474:	ee e4       	ldi	r30, 0x4E	; 78
    2476:	f0 e0       	ldi	r31, 0x00	; 0
    2478:	80 81       	ld	r24, Z
    247a:	87 7f       	andi	r24, 0xF7	; 247
    247c:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM11);
    247e:	af e4       	ldi	r26, 0x4F	; 79
    2480:	b0 e0       	ldi	r27, 0x00	; 0
    2482:	ef e4       	ldi	r30, 0x4F	; 79
    2484:	f0 e0       	ldi	r31, 0x00	; 0
    2486:	80 81       	ld	r24, Z
    2488:	82 60       	ori	r24, 0x02	; 2
    248a:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM10);
    248c:	af e4       	ldi	r26, 0x4F	; 79
    248e:	b0 e0       	ldi	r27, 0x00	; 0
    2490:	ef e4       	ldi	r30, 0x4F	; 79
    2492:	f0 e0       	ldi	r31, 0x00	; 0
    2494:	80 81       	ld	r24, Z
    2496:	81 60       	ori	r24, 0x01	; 1
    2498:	8c 93       	st	X, r24
    249a:	68 c0       	rjmp	.+208    	; 0x256c <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_CTC_CUSTOM_TOP){
    249c:	ea 81       	ldd	r30, Y+2	; 0x02
    249e:	fb 81       	ldd	r31, Y+3	; 0x03
    24a0:	80 81       	ld	r24, Z
    24a2:	8d 30       	cpi	r24, 0x0D	; 13
    24a4:	e9 f4       	brne	.+58     	; 0x24e0 <TIMER1_u8Init+0x390>
			SET_BIT(TCCR1B,TCCR1B_WGM13);
    24a6:	ae e4       	ldi	r26, 0x4E	; 78
    24a8:	b0 e0       	ldi	r27, 0x00	; 0
    24aa:	ee e4       	ldi	r30, 0x4E	; 78
    24ac:	f0 e0       	ldi	r31, 0x00	; 0
    24ae:	80 81       	ld	r24, Z
    24b0:	80 61       	ori	r24, 0x10	; 16
    24b2:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,TCCR1B_WGM12);
    24b4:	ae e4       	ldi	r26, 0x4E	; 78
    24b6:	b0 e0       	ldi	r27, 0x00	; 0
    24b8:	ee e4       	ldi	r30, 0x4E	; 78
    24ba:	f0 e0       	ldi	r31, 0x00	; 0
    24bc:	80 81       	ld	r24, Z
    24be:	88 60       	ori	r24, 0x08	; 8
    24c0:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM11);
    24c2:	af e4       	ldi	r26, 0x4F	; 79
    24c4:	b0 e0       	ldi	r27, 0x00	; 0
    24c6:	ef e4       	ldi	r30, 0x4F	; 79
    24c8:	f0 e0       	ldi	r31, 0x00	; 0
    24ca:	80 81       	ld	r24, Z
    24cc:	8d 7f       	andi	r24, 0xFD	; 253
    24ce:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM10);
    24d0:	af e4       	ldi	r26, 0x4F	; 79
    24d2:	b0 e0       	ldi	r27, 0x00	; 0
    24d4:	ef e4       	ldi	r30, 0x4F	; 79
    24d6:	f0 e0       	ldi	r31, 0x00	; 0
    24d8:	80 81       	ld	r24, Z
    24da:	8e 7f       	andi	r24, 0xFE	; 254
    24dc:	8c 93       	st	X, r24
    24de:	46 c0       	rjmp	.+140    	; 0x256c <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_FAST_PWM_CUSTOM_TOP){
    24e0:	ea 81       	ldd	r30, Y+2	; 0x02
    24e2:	fb 81       	ldd	r31, Y+3	; 0x03
    24e4:	80 81       	ld	r24, Z
    24e6:	8e 30       	cpi	r24, 0x0E	; 14
    24e8:	e9 f4       	brne	.+58     	; 0x2524 <TIMER1_u8Init+0x3d4>
			SET_BIT(TCCR1B,TCCR1B_WGM13);
    24ea:	ae e4       	ldi	r26, 0x4E	; 78
    24ec:	b0 e0       	ldi	r27, 0x00	; 0
    24ee:	ee e4       	ldi	r30, 0x4E	; 78
    24f0:	f0 e0       	ldi	r31, 0x00	; 0
    24f2:	80 81       	ld	r24, Z
    24f4:	80 61       	ori	r24, 0x10	; 16
    24f6:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,TCCR1B_WGM12);
    24f8:	ae e4       	ldi	r26, 0x4E	; 78
    24fa:	b0 e0       	ldi	r27, 0x00	; 0
    24fc:	ee e4       	ldi	r30, 0x4E	; 78
    24fe:	f0 e0       	ldi	r31, 0x00	; 0
    2500:	80 81       	ld	r24, Z
    2502:	88 60       	ori	r24, 0x08	; 8
    2504:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM11);
    2506:	af e4       	ldi	r26, 0x4F	; 79
    2508:	b0 e0       	ldi	r27, 0x00	; 0
    250a:	ef e4       	ldi	r30, 0x4F	; 79
    250c:	f0 e0       	ldi	r31, 0x00	; 0
    250e:	80 81       	ld	r24, Z
    2510:	82 60       	ori	r24, 0x02	; 2
    2512:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM10);
    2514:	af e4       	ldi	r26, 0x4F	; 79
    2516:	b0 e0       	ldi	r27, 0x00	; 0
    2518:	ef e4       	ldi	r30, 0x4F	; 79
    251a:	f0 e0       	ldi	r31, 0x00	; 0
    251c:	80 81       	ld	r24, Z
    251e:	8e 7f       	andi	r24, 0xFE	; 254
    2520:	8c 93       	st	X, r24
    2522:	24 c0       	rjmp	.+72     	; 0x256c <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_FAST_PWM){
    2524:	ea 81       	ldd	r30, Y+2	; 0x02
    2526:	fb 81       	ldd	r31, Y+3	; 0x03
    2528:	80 81       	ld	r24, Z
    252a:	8f 30       	cpi	r24, 0x0F	; 15
    252c:	e9 f4       	brne	.+58     	; 0x2568 <TIMER1_u8Init+0x418>
			SET_BIT(TCCR1B,TCCR1B_WGM13);
    252e:	ae e4       	ldi	r26, 0x4E	; 78
    2530:	b0 e0       	ldi	r27, 0x00	; 0
    2532:	ee e4       	ldi	r30, 0x4E	; 78
    2534:	f0 e0       	ldi	r31, 0x00	; 0
    2536:	80 81       	ld	r24, Z
    2538:	80 61       	ori	r24, 0x10	; 16
    253a:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,TCCR1B_WGM12);
    253c:	ae e4       	ldi	r26, 0x4E	; 78
    253e:	b0 e0       	ldi	r27, 0x00	; 0
    2540:	ee e4       	ldi	r30, 0x4E	; 78
    2542:	f0 e0       	ldi	r31, 0x00	; 0
    2544:	80 81       	ld	r24, Z
    2546:	88 60       	ori	r24, 0x08	; 8
    2548:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM11);
    254a:	af e4       	ldi	r26, 0x4F	; 79
    254c:	b0 e0       	ldi	r27, 0x00	; 0
    254e:	ef e4       	ldi	r30, 0x4F	; 79
    2550:	f0 e0       	ldi	r31, 0x00	; 0
    2552:	80 81       	ld	r24, Z
    2554:	82 60       	ori	r24, 0x02	; 2
    2556:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM10);
    2558:	af e4       	ldi	r26, 0x4F	; 79
    255a:	b0 e0       	ldi	r27, 0x00	; 0
    255c:	ef e4       	ldi	r30, 0x4F	; 79
    255e:	f0 e0       	ldi	r31, 0x00	; 0
    2560:	80 81       	ld	r24, Z
    2562:	81 60       	ori	r24, 0x01	; 1
    2564:	8c 93       	st	X, r24
    2566:	02 c0       	rjmp	.+4      	; 0x256c <TIMER1_u8Init+0x41c>
		}
		else{
			Local_u8ErrorState=NOK;
    2568:	81 e0       	ldi	r24, 0x01	; 1
    256a:	89 83       	std	Y+1, r24	; 0x01
		}
		//Set Match Compare Output Mode for both channel A and B
		TCCR1A&=T1_COMP_MATCH_OUT_MASK;
    256c:	af e4       	ldi	r26, 0x4F	; 79
    256e:	b0 e0       	ldi	r27, 0x00	; 0
    2570:	ef e4       	ldi	r30, 0x4F	; 79
    2572:	f0 e0       	ldi	r31, 0x00	; 0
    2574:	80 81       	ld	r24, Z
    2576:	8f 70       	andi	r24, 0x0F	; 15
    2578:	8c 93       	st	X, r24
		TCCR1A|=((Copy_psTimer->CompareMatchOutputMode_B)<<4);
    257a:	af e4       	ldi	r26, 0x4F	; 79
    257c:	b0 e0       	ldi	r27, 0x00	; 0
    257e:	ef e4       	ldi	r30, 0x4F	; 79
    2580:	f0 e0       	ldi	r31, 0x00	; 0
    2582:	80 81       	ld	r24, Z
    2584:	28 2f       	mov	r18, r24
    2586:	ea 81       	ldd	r30, Y+2	; 0x02
    2588:	fb 81       	ldd	r31, Y+3	; 0x03
    258a:	83 81       	ldd	r24, Z+3	; 0x03
    258c:	88 2f       	mov	r24, r24
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	82 95       	swap	r24
    2592:	92 95       	swap	r25
    2594:	90 7f       	andi	r25, 0xF0	; 240
    2596:	98 27       	eor	r25, r24
    2598:	80 7f       	andi	r24, 0xF0	; 240
    259a:	98 27       	eor	r25, r24
    259c:	82 2b       	or	r24, r18
    259e:	8c 93       	st	X, r24
		TCCR1A|=((Copy_psTimer->CompareMatchOutputMode_A)<<6);
    25a0:	af e4       	ldi	r26, 0x4F	; 79
    25a2:	b0 e0       	ldi	r27, 0x00	; 0
    25a4:	ef e4       	ldi	r30, 0x4F	; 79
    25a6:	f0 e0       	ldi	r31, 0x00	; 0
    25a8:	80 81       	ld	r24, Z
    25aa:	28 2f       	mov	r18, r24
    25ac:	ea 81       	ldd	r30, Y+2	; 0x02
    25ae:	fb 81       	ldd	r31, Y+3	; 0x03
    25b0:	82 81       	ldd	r24, Z+2	; 0x02
    25b2:	88 2f       	mov	r24, r24
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	00 24       	eor	r0, r0
    25b8:	96 95       	lsr	r25
    25ba:	87 95       	ror	r24
    25bc:	07 94       	ror	r0
    25be:	96 95       	lsr	r25
    25c0:	87 95       	ror	r24
    25c2:	07 94       	ror	r0
    25c4:	98 2f       	mov	r25, r24
    25c6:	80 2d       	mov	r24, r0
    25c8:	82 2b       	or	r24, r18
    25ca:	8c 93       	st	X, r24
		//Initialize Interrupt Enable pins
		if(Copy_psTimer->CompareMatchInterrupt_A==INT_ENABLE){
    25cc:	ea 81       	ldd	r30, Y+2	; 0x02
    25ce:	fb 81       	ldd	r31, Y+3	; 0x03
    25d0:	84 81       	ldd	r24, Z+4	; 0x04
    25d2:	81 30       	cpi	r24, 0x01	; 1
    25d4:	41 f4       	brne	.+16     	; 0x25e6 <TIMER1_u8Init+0x496>
			SET_BIT(TIMSK,TIMSK_OCIE1A);
    25d6:	a9 e5       	ldi	r26, 0x59	; 89
    25d8:	b0 e0       	ldi	r27, 0x00	; 0
    25da:	e9 e5       	ldi	r30, 0x59	; 89
    25dc:	f0 e0       	ldi	r31, 0x00	; 0
    25de:	80 81       	ld	r24, Z
    25e0:	80 61       	ori	r24, 0x10	; 16
    25e2:	8c 93       	st	X, r24
    25e4:	0f c0       	rjmp	.+30     	; 0x2604 <TIMER1_u8Init+0x4b4>
		}
		else if(Copy_psTimer->CompareMatchInterrupt_A==INT_DISABLE){
    25e6:	ea 81       	ldd	r30, Y+2	; 0x02
    25e8:	fb 81       	ldd	r31, Y+3	; 0x03
    25ea:	84 81       	ldd	r24, Z+4	; 0x04
    25ec:	82 30       	cpi	r24, 0x02	; 2
    25ee:	41 f4       	brne	.+16     	; 0x2600 <TIMER1_u8Init+0x4b0>
			CLR_BIT(TIMSK,TIMSK_OCIE1A);
    25f0:	a9 e5       	ldi	r26, 0x59	; 89
    25f2:	b0 e0       	ldi	r27, 0x00	; 0
    25f4:	e9 e5       	ldi	r30, 0x59	; 89
    25f6:	f0 e0       	ldi	r31, 0x00	; 0
    25f8:	80 81       	ld	r24, Z
    25fa:	8f 7e       	andi	r24, 0xEF	; 239
    25fc:	8c 93       	st	X, r24
    25fe:	02 c0       	rjmp	.+4      	; 0x2604 <TIMER1_u8Init+0x4b4>
		}
		else{
			Local_u8ErrorState=NOK;
    2600:	81 e0       	ldi	r24, 0x01	; 1
    2602:	89 83       	std	Y+1, r24	; 0x01
		}

		if(Copy_psTimer->CompareMatchInterrupt_B==INT_ENABLE){
    2604:	ea 81       	ldd	r30, Y+2	; 0x02
    2606:	fb 81       	ldd	r31, Y+3	; 0x03
    2608:	85 81       	ldd	r24, Z+5	; 0x05
    260a:	81 30       	cpi	r24, 0x01	; 1
    260c:	41 f4       	brne	.+16     	; 0x261e <TIMER1_u8Init+0x4ce>
			SET_BIT(TIMSK,TIMSK_OCIE1B);
    260e:	a9 e5       	ldi	r26, 0x59	; 89
    2610:	b0 e0       	ldi	r27, 0x00	; 0
    2612:	e9 e5       	ldi	r30, 0x59	; 89
    2614:	f0 e0       	ldi	r31, 0x00	; 0
    2616:	80 81       	ld	r24, Z
    2618:	88 60       	ori	r24, 0x08	; 8
    261a:	8c 93       	st	X, r24
    261c:	0f c0       	rjmp	.+30     	; 0x263c <TIMER1_u8Init+0x4ec>
		}
		else if(Copy_psTimer->CompareMatchInterrupt_B==INT_DISABLE){
    261e:	ea 81       	ldd	r30, Y+2	; 0x02
    2620:	fb 81       	ldd	r31, Y+3	; 0x03
    2622:	85 81       	ldd	r24, Z+5	; 0x05
    2624:	82 30       	cpi	r24, 0x02	; 2
    2626:	41 f4       	brne	.+16     	; 0x2638 <TIMER1_u8Init+0x4e8>
			CLR_BIT(TIMSK,TIMSK_OCIE1B);
    2628:	a9 e5       	ldi	r26, 0x59	; 89
    262a:	b0 e0       	ldi	r27, 0x00	; 0
    262c:	e9 e5       	ldi	r30, 0x59	; 89
    262e:	f0 e0       	ldi	r31, 0x00	; 0
    2630:	80 81       	ld	r24, Z
    2632:	87 7f       	andi	r24, 0xF7	; 247
    2634:	8c 93       	st	X, r24
    2636:	02 c0       	rjmp	.+4      	; 0x263c <TIMER1_u8Init+0x4ec>
		}
		else{
			Local_u8ErrorState=NOK;
    2638:	81 e0       	ldi	r24, 0x01	; 1
    263a:	89 83       	std	Y+1, r24	; 0x01
		}


		if(Copy_psTimer->OverFlowInterrupt==INT_ENABLE){
    263c:	ea 81       	ldd	r30, Y+2	; 0x02
    263e:	fb 81       	ldd	r31, Y+3	; 0x03
    2640:	86 81       	ldd	r24, Z+6	; 0x06
    2642:	81 30       	cpi	r24, 0x01	; 1
    2644:	41 f4       	brne	.+16     	; 0x2656 <TIMER1_u8Init+0x506>
			SET_BIT(TIMSK,TIMSK_TOIE1);
    2646:	a9 e5       	ldi	r26, 0x59	; 89
    2648:	b0 e0       	ldi	r27, 0x00	; 0
    264a:	e9 e5       	ldi	r30, 0x59	; 89
    264c:	f0 e0       	ldi	r31, 0x00	; 0
    264e:	80 81       	ld	r24, Z
    2650:	84 60       	ori	r24, 0x04	; 4
    2652:	8c 93       	st	X, r24
    2654:	0f c0       	rjmp	.+30     	; 0x2674 <TIMER1_u8Init+0x524>
		}
		else if(Copy_psTimer->OverFlowInterrupt==INT_DISABLE){
    2656:	ea 81       	ldd	r30, Y+2	; 0x02
    2658:	fb 81       	ldd	r31, Y+3	; 0x03
    265a:	86 81       	ldd	r24, Z+6	; 0x06
    265c:	82 30       	cpi	r24, 0x02	; 2
    265e:	41 f4       	brne	.+16     	; 0x2670 <TIMER1_u8Init+0x520>
			CLR_BIT(TIMSK,TIMSK_TOIE1);
    2660:	a9 e5       	ldi	r26, 0x59	; 89
    2662:	b0 e0       	ldi	r27, 0x00	; 0
    2664:	e9 e5       	ldi	r30, 0x59	; 89
    2666:	f0 e0       	ldi	r31, 0x00	; 0
    2668:	80 81       	ld	r24, Z
    266a:	8b 7f       	andi	r24, 0xFB	; 251
    266c:	8c 93       	st	X, r24
    266e:	02 c0       	rjmp	.+4      	; 0x2674 <TIMER1_u8Init+0x524>
		}
		else{
			Local_u8ErrorState=NOK;
    2670:	81 e0       	ldi	r24, 0x01	; 1
    2672:	89 83       	std	Y+1, r24	; 0x01
		}

		if(Copy_psTimer->InputCapInterrupt==INT_ENABLE){
    2674:	ea 81       	ldd	r30, Y+2	; 0x02
    2676:	fb 81       	ldd	r31, Y+3	; 0x03
    2678:	87 81       	ldd	r24, Z+7	; 0x07
    267a:	81 30       	cpi	r24, 0x01	; 1
    267c:	41 f4       	brne	.+16     	; 0x268e <TIMER1_u8Init+0x53e>
			SET_BIT(TIMSK,TIMSK_TICIE1);
    267e:	a9 e5       	ldi	r26, 0x59	; 89
    2680:	b0 e0       	ldi	r27, 0x00	; 0
    2682:	e9 e5       	ldi	r30, 0x59	; 89
    2684:	f0 e0       	ldi	r31, 0x00	; 0
    2686:	80 81       	ld	r24, Z
    2688:	80 62       	ori	r24, 0x20	; 32
    268a:	8c 93       	st	X, r24
    268c:	0f c0       	rjmp	.+30     	; 0x26ac <TIMER1_u8Init+0x55c>
		}
		else if(Copy_psTimer->InputCapInterrupt==INT_DISABLE){
    268e:	ea 81       	ldd	r30, Y+2	; 0x02
    2690:	fb 81       	ldd	r31, Y+3	; 0x03
    2692:	87 81       	ldd	r24, Z+7	; 0x07
    2694:	82 30       	cpi	r24, 0x02	; 2
    2696:	41 f4       	brne	.+16     	; 0x26a8 <TIMER1_u8Init+0x558>
			CLR_BIT(TIMSK,TIMSK_TICIE1);
    2698:	a9 e5       	ldi	r26, 0x59	; 89
    269a:	b0 e0       	ldi	r27, 0x00	; 0
    269c:	e9 e5       	ldi	r30, 0x59	; 89
    269e:	f0 e0       	ldi	r31, 0x00	; 0
    26a0:	80 81       	ld	r24, Z
    26a2:	8f 7d       	andi	r24, 0xDF	; 223
    26a4:	8c 93       	st	X, r24
    26a6:	02 c0       	rjmp	.+4      	; 0x26ac <TIMER1_u8Init+0x55c>
		}
		else{
			Local_u8ErrorState=NOK;
    26a8:	81 e0       	ldi	r24, 0x01	; 1
    26aa:	89 83       	std	Y+1, r24	; 0x01
		}

		//Initialize Prescaler
		TCCR1B&=PRESCALER_MASK;
    26ac:	ae e4       	ldi	r26, 0x4E	; 78
    26ae:	b0 e0       	ldi	r27, 0x00	; 0
    26b0:	ee e4       	ldi	r30, 0x4E	; 78
    26b2:	f0 e0       	ldi	r31, 0x00	; 0
    26b4:	80 81       	ld	r24, Z
    26b6:	88 7f       	andi	r24, 0xF8	; 248
    26b8:	8c 93       	st	X, r24
		TCCR1B|=Copy_psTimer->Prescaler;
    26ba:	ae e4       	ldi	r26, 0x4E	; 78
    26bc:	b0 e0       	ldi	r27, 0x00	; 0
    26be:	ee e4       	ldi	r30, 0x4E	; 78
    26c0:	f0 e0       	ldi	r31, 0x00	; 0
    26c2:	90 81       	ld	r25, Z
    26c4:	ea 81       	ldd	r30, Y+2	; 0x02
    26c6:	fb 81       	ldd	r31, Y+3	; 0x03
    26c8:	81 81       	ldd	r24, Z+1	; 0x01
    26ca:	89 2b       	or	r24, r25
    26cc:	8c 93       	st	X, r24
    26ce:	02 c0       	rjmp	.+4      	; 0x26d4 <TIMER1_u8Init+0x584>
	}
	else{
		Local_u8ErrorState=NULL_POINTER;
    26d0:	82 e0       	ldi	r24, 0x02	; 2
    26d2:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    26d4:	89 81       	ldd	r24, Y+1	; 0x01

}
    26d6:	0f 90       	pop	r0
    26d8:	0f 90       	pop	r0
    26da:	0f 90       	pop	r0
    26dc:	cf 91       	pop	r28
    26de:	df 91       	pop	r29
    26e0:	08 95       	ret

000026e2 <TIMER1_voidSetTopValue>:


void TIMER1_voidSetTopValue(u16 Copy_u16Value){
    26e2:	df 93       	push	r29
    26e4:	cf 93       	push	r28
    26e6:	00 d0       	rcall	.+0      	; 0x26e8 <TIMER1_voidSetTopValue+0x6>
    26e8:	cd b7       	in	r28, 0x3d	; 61
    26ea:	de b7       	in	r29, 0x3e	; 62
    26ec:	9a 83       	std	Y+2, r25	; 0x02
    26ee:	89 83       	std	Y+1, r24	; 0x01
	ICR1=Copy_u16Value;
    26f0:	e6 e4       	ldi	r30, 0x46	; 70
    26f2:	f0 e0       	ldi	r31, 0x00	; 0
    26f4:	89 81       	ldd	r24, Y+1	; 0x01
    26f6:	9a 81       	ldd	r25, Y+2	; 0x02
    26f8:	91 83       	std	Z+1, r25	; 0x01
    26fa:	80 83       	st	Z, r24
}
    26fc:	0f 90       	pop	r0
    26fe:	0f 90       	pop	r0
    2700:	cf 91       	pop	r28
    2702:	df 91       	pop	r29
    2704:	08 95       	ret

00002706 <TIMER_u8PWMGenerate>:

u8 TIMER_u8PWMGenerate(Timer1_t* Copy_psTimer,u16 Copy_u16PeriodTime,u16 Copy_u16OnTime){
    2706:	df 93       	push	r29
    2708:	cf 93       	push	r28
    270a:	cd b7       	in	r28, 0x3d	; 61
    270c:	de b7       	in	r29, 0x3e	; 62
    270e:	29 97       	sbiw	r28, 0x09	; 9
    2710:	0f b6       	in	r0, 0x3f	; 63
    2712:	f8 94       	cli
    2714:	de bf       	out	0x3e, r29	; 62
    2716:	0f be       	out	0x3f, r0	; 63
    2718:	cd bf       	out	0x3d, r28	; 61
    271a:	9b 83       	std	Y+3, r25	; 0x03
    271c:	8a 83       	std	Y+2, r24	; 0x02
    271e:	7d 83       	std	Y+5, r23	; 0x05
    2720:	6c 83       	std	Y+4, r22	; 0x04
    2722:	5f 83       	std	Y+7, r21	; 0x07
    2724:	4e 83       	std	Y+6, r20	; 0x06
	u8 Local_u8ErrorState=OK;
    2726:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_psTimer!=NULL){
    2728:	8a 81       	ldd	r24, Y+2	; 0x02
    272a:	9b 81       	ldd	r25, Y+3	; 0x03
    272c:	00 97       	sbiw	r24, 0x00	; 0
    272e:	09 f4       	brne	.+2      	; 0x2732 <TIMER_u8PWMGenerate+0x2c>
    2730:	9c c0       	rjmp	.+312    	; 0x286a <TIMER_u8PWMGenerate+0x164>
		if((Copy_psTimer->WaveGenMode)==TIMER1_FAST_PWM_CUSTOM_TOP){
    2732:	ea 81       	ldd	r30, Y+2	; 0x02
    2734:	fb 81       	ldd	r31, Y+3	; 0x03
    2736:	80 81       	ld	r24, Z
    2738:	8e 30       	cpi	r24, 0x0E	; 14
    273a:	09 f0       	breq	.+2      	; 0x273e <TIMER_u8PWMGenerate+0x38>
    273c:	93 c0       	rjmp	.+294    	; 0x2864 <TIMER_u8PWMGenerate+0x15e>
			switch(Copy_psTimer->Prescaler){
    273e:	ea 81       	ldd	r30, Y+2	; 0x02
    2740:	fb 81       	ldd	r31, Y+3	; 0x03
    2742:	81 81       	ldd	r24, Z+1	; 0x01
    2744:	28 2f       	mov	r18, r24
    2746:	30 e0       	ldi	r19, 0x00	; 0
    2748:	39 87       	std	Y+9, r19	; 0x09
    274a:	28 87       	std	Y+8, r18	; 0x08
    274c:	88 85       	ldd	r24, Y+8	; 0x08
    274e:	99 85       	ldd	r25, Y+9	; 0x09
    2750:	83 30       	cpi	r24, 0x03	; 3
    2752:	91 05       	cpc	r25, r1
    2754:	79 f1       	breq	.+94     	; 0x27b4 <TIMER_u8PWMGenerate+0xae>
    2756:	28 85       	ldd	r18, Y+8	; 0x08
    2758:	39 85       	ldd	r19, Y+9	; 0x09
    275a:	24 30       	cpi	r18, 0x04	; 4
    275c:	31 05       	cpc	r19, r1
    275e:	5c f4       	brge	.+22     	; 0x2776 <TIMER_u8PWMGenerate+0x70>
    2760:	88 85       	ldd	r24, Y+8	; 0x08
    2762:	99 85       	ldd	r25, Y+9	; 0x09
    2764:	81 30       	cpi	r24, 0x01	; 1
    2766:	91 05       	cpc	r25, r1
    2768:	89 f0       	breq	.+34     	; 0x278c <TIMER_u8PWMGenerate+0x86>
    276a:	28 85       	ldd	r18, Y+8	; 0x08
    276c:	39 85       	ldd	r19, Y+9	; 0x09
    276e:	22 30       	cpi	r18, 0x02	; 2
    2770:	31 05       	cpc	r19, r1
    2772:	c9 f0       	breq	.+50     	; 0x27a6 <TIMER_u8PWMGenerate+0xa0>
    2774:	47 c0       	rjmp	.+142    	; 0x2804 <TIMER_u8PWMGenerate+0xfe>
    2776:	88 85       	ldd	r24, Y+8	; 0x08
    2778:	99 85       	ldd	r25, Y+9	; 0x09
    277a:	84 30       	cpi	r24, 0x04	; 4
    277c:	91 05       	cpc	r25, r1
    277e:	39 f1       	breq	.+78     	; 0x27ce <TIMER_u8PWMGenerate+0xc8>
    2780:	28 85       	ldd	r18, Y+8	; 0x08
    2782:	39 85       	ldd	r19, Y+9	; 0x09
    2784:	25 30       	cpi	r18, 0x05	; 5
    2786:	31 05       	cpc	r19, r1
    2788:	89 f1       	breq	.+98     	; 0x27ec <TIMER_u8PWMGenerate+0xe6>
    278a:	3c c0       	rjmp	.+120    	; 0x2804 <TIMER_u8PWMGenerate+0xfe>
			case PRSCLR_DIV_BY_1    : ICR1 = Copy_u16PeriodTime*8   ; break;
    278c:	e6 e4       	ldi	r30, 0x46	; 70
    278e:	f0 e0       	ldi	r31, 0x00	; 0
    2790:	8c 81       	ldd	r24, Y+4	; 0x04
    2792:	9d 81       	ldd	r25, Y+5	; 0x05
    2794:	88 0f       	add	r24, r24
    2796:	99 1f       	adc	r25, r25
    2798:	88 0f       	add	r24, r24
    279a:	99 1f       	adc	r25, r25
    279c:	88 0f       	add	r24, r24
    279e:	99 1f       	adc	r25, r25
    27a0:	91 83       	std	Z+1, r25	; 0x01
    27a2:	80 83       	st	Z, r24
    27a4:	31 c0       	rjmp	.+98     	; 0x2808 <TIMER_u8PWMGenerate+0x102>
			case PRSCLR_DIV_BY_8    : ICR1 = Copy_u16PeriodTime     ; break;
    27a6:	e6 e4       	ldi	r30, 0x46	; 70
    27a8:	f0 e0       	ldi	r31, 0x00	; 0
    27aa:	8c 81       	ldd	r24, Y+4	; 0x04
    27ac:	9d 81       	ldd	r25, Y+5	; 0x05
    27ae:	91 83       	std	Z+1, r25	; 0x01
    27b0:	80 83       	st	Z, r24
    27b2:	2a c0       	rjmp	.+84     	; 0x2808 <TIMER_u8PWMGenerate+0x102>
			case PRSCLR_DIV_BY_64   : ICR1 = Copy_u16PeriodTime/8   ; break;
    27b4:	e6 e4       	ldi	r30, 0x46	; 70
    27b6:	f0 e0       	ldi	r31, 0x00	; 0
    27b8:	8c 81       	ldd	r24, Y+4	; 0x04
    27ba:	9d 81       	ldd	r25, Y+5	; 0x05
    27bc:	96 95       	lsr	r25
    27be:	87 95       	ror	r24
    27c0:	96 95       	lsr	r25
    27c2:	87 95       	ror	r24
    27c4:	96 95       	lsr	r25
    27c6:	87 95       	ror	r24
    27c8:	91 83       	std	Z+1, r25	; 0x01
    27ca:	80 83       	st	Z, r24
    27cc:	1d c0       	rjmp	.+58     	; 0x2808 <TIMER_u8PWMGenerate+0x102>
			case PRSCLR_DIV_BY_256  : ICR1 = Copy_u16PeriodTime/32  ; break;
    27ce:	e6 e4       	ldi	r30, 0x46	; 70
    27d0:	f0 e0       	ldi	r31, 0x00	; 0
    27d2:	8c 81       	ldd	r24, Y+4	; 0x04
    27d4:	9d 81       	ldd	r25, Y+5	; 0x05
    27d6:	96 95       	lsr	r25
    27d8:	87 95       	ror	r24
    27da:	92 95       	swap	r25
    27dc:	82 95       	swap	r24
    27de:	8f 70       	andi	r24, 0x0F	; 15
    27e0:	89 27       	eor	r24, r25
    27e2:	9f 70       	andi	r25, 0x0F	; 15
    27e4:	89 27       	eor	r24, r25
    27e6:	91 83       	std	Z+1, r25	; 0x01
    27e8:	80 83       	st	Z, r24
    27ea:	0e c0       	rjmp	.+28     	; 0x2808 <TIMER_u8PWMGenerate+0x102>
			case PRSCLR_DIV_BY_1024 : ICR1 = Copy_u16PeriodTime/128 ; break;
    27ec:	e6 e4       	ldi	r30, 0x46	; 70
    27ee:	f0 e0       	ldi	r31, 0x00	; 0
    27f0:	8c 81       	ldd	r24, Y+4	; 0x04
    27f2:	9d 81       	ldd	r25, Y+5	; 0x05
    27f4:	88 0f       	add	r24, r24
    27f6:	89 2f       	mov	r24, r25
    27f8:	88 1f       	adc	r24, r24
    27fa:	99 0b       	sbc	r25, r25
    27fc:	91 95       	neg	r25
    27fe:	91 83       	std	Z+1, r25	; 0x01
    2800:	80 83       	st	Z, r24
    2802:	02 c0       	rjmp	.+4      	; 0x2808 <TIMER_u8PWMGenerate+0x102>
			default: Local_u8ErrorState=NOK;
    2804:	81 e0       	ldi	r24, 0x01	; 1
    2806:	89 83       	std	Y+1, r24	; 0x01
			}

			if(Copy_u16OnTime<=Copy_u16PeriodTime){
    2808:	2e 81       	ldd	r18, Y+6	; 0x06
    280a:	3f 81       	ldd	r19, Y+7	; 0x07
    280c:	8c 81       	ldd	r24, Y+4	; 0x04
    280e:	9d 81       	ldd	r25, Y+5	; 0x05
    2810:	82 17       	cp	r24, r18
    2812:	93 07       	cpc	r25, r19
    2814:	20 f1       	brcs	.+72     	; 0x285e <TIMER_u8PWMGenerate+0x158>
				if((Copy_psTimer->CompareMatchOutputMode_A)== OCM_FAST_PWM_NON_INVERTED && (Copy_psTimer->CompareMatchOutputMode_B) == OCM_DISCONNECT ){
    2816:	ea 81       	ldd	r30, Y+2	; 0x02
    2818:	fb 81       	ldd	r31, Y+3	; 0x03
    281a:	82 81       	ldd	r24, Z+2	; 0x02
    281c:	82 30       	cpi	r24, 0x02	; 2
    281e:	59 f4       	brne	.+22     	; 0x2836 <TIMER_u8PWMGenerate+0x130>
    2820:	ea 81       	ldd	r30, Y+2	; 0x02
    2822:	fb 81       	ldd	r31, Y+3	; 0x03
    2824:	83 81       	ldd	r24, Z+3	; 0x03
    2826:	88 23       	and	r24, r24
    2828:	31 f4       	brne	.+12     	; 0x2836 <TIMER_u8PWMGenerate+0x130>
					OCR1A=Copy_u16OnTime;
    282a:	ea e4       	ldi	r30, 0x4A	; 74
    282c:	f0 e0       	ldi	r31, 0x00	; 0
    282e:	8e 81       	ldd	r24, Y+6	; 0x06
    2830:	9f 81       	ldd	r25, Y+7	; 0x07
    2832:	91 83       	std	Z+1, r25	; 0x01
    2834:	80 83       	st	Z, r24
				}
				if( (Copy_psTimer->CompareMatchOutputMode_B) == OCM_FAST_PWM_NON_INVERTED && (Copy_psTimer->CompareMatchOutputMode_A) == OCM_DISCONNECT ){
    2836:	ea 81       	ldd	r30, Y+2	; 0x02
    2838:	fb 81       	ldd	r31, Y+3	; 0x03
    283a:	83 81       	ldd	r24, Z+3	; 0x03
    283c:	82 30       	cpi	r24, 0x02	; 2
    283e:	61 f4       	brne	.+24     	; 0x2858 <TIMER_u8PWMGenerate+0x152>
    2840:	ea 81       	ldd	r30, Y+2	; 0x02
    2842:	fb 81       	ldd	r31, Y+3	; 0x03
    2844:	82 81       	ldd	r24, Z+2	; 0x02
    2846:	88 23       	and	r24, r24
    2848:	39 f4       	brne	.+14     	; 0x2858 <TIMER_u8PWMGenerate+0x152>
					OCR1B=Copy_u16OnTime;
    284a:	e8 e4       	ldi	r30, 0x48	; 72
    284c:	f0 e0       	ldi	r31, 0x00	; 0
    284e:	8e 81       	ldd	r24, Y+6	; 0x06
    2850:	9f 81       	ldd	r25, Y+7	; 0x07
    2852:	91 83       	std	Z+1, r25	; 0x01
    2854:	80 83       	st	Z, r24
    2856:	0b c0       	rjmp	.+22     	; 0x286e <TIMER_u8PWMGenerate+0x168>
				}
				else{
					Local_u8ErrorState=NOK;
    2858:	81 e0       	ldi	r24, 0x01	; 1
    285a:	89 83       	std	Y+1, r24	; 0x01
    285c:	08 c0       	rjmp	.+16     	; 0x286e <TIMER_u8PWMGenerate+0x168>
				}
			}
			else{
				Local_u8ErrorState=NOK;
    285e:	81 e0       	ldi	r24, 0x01	; 1
    2860:	89 83       	std	Y+1, r24	; 0x01
    2862:	05 c0       	rjmp	.+10     	; 0x286e <TIMER_u8PWMGenerate+0x168>

			}
		}
		else{
			Local_u8ErrorState=NOK;
    2864:	81 e0       	ldi	r24, 0x01	; 1
    2866:	89 83       	std	Y+1, r24	; 0x01
    2868:	02 c0       	rjmp	.+4      	; 0x286e <TIMER_u8PWMGenerate+0x168>
		}
	}
	else{
		Local_u8ErrorState=NULL_POINTER;
    286a:	82 e0       	ldi	r24, 0x02	; 2
    286c:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErrorState;
    286e:	89 81       	ldd	r24, Y+1	; 0x01

}
    2870:	29 96       	adiw	r28, 0x09	; 9
    2872:	0f b6       	in	r0, 0x3f	; 63
    2874:	f8 94       	cli
    2876:	de bf       	out	0x3e, r29	; 62
    2878:	0f be       	out	0x3f, r0	; 63
    287a:	cd bf       	out	0x3d, r28	; 61
    287c:	cf 91       	pop	r28
    287e:	df 91       	pop	r29
    2880:	08 95       	ret

00002882 <TIMER2_u8Init>:


/********************************************************TIMER2**********************************************************
 ************************************************************************************************************************/

u8 TIMER2_u8Init(Timer_t* Copy_psTimer){
    2882:	df 93       	push	r29
    2884:	cf 93       	push	r28
    2886:	00 d0       	rcall	.+0      	; 0x2888 <TIMER2_u8Init+0x6>
    2888:	0f 92       	push	r0
    288a:	cd b7       	in	r28, 0x3d	; 61
    288c:	de b7       	in	r29, 0x3e	; 62
    288e:	9b 83       	std	Y+3, r25	; 0x03
    2890:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
    2892:	19 82       	std	Y+1, r1	; 0x01
	//Initialize Wave Generation Mode
	if(Copy_psTimer!=NULL){
    2894:	8a 81       	ldd	r24, Y+2	; 0x02
    2896:	9b 81       	ldd	r25, Y+3	; 0x03
    2898:	00 97       	sbiw	r24, 0x00	; 0
    289a:	09 f4       	brne	.+2      	; 0x289e <TIMER2_u8Init+0x1c>
    289c:	b6 c0       	rjmp	.+364    	; 0x2a0a <TIMER2_u8Init+0x188>
		if(Copy_psTimer->WaveGenMode==TIMER_NORMAL){
    289e:	ea 81       	ldd	r30, Y+2	; 0x02
    28a0:	fb 81       	ldd	r31, Y+3	; 0x03
    28a2:	80 81       	ld	r24, Z
    28a4:	81 30       	cpi	r24, 0x01	; 1
    28a6:	79 f4       	brne	.+30     	; 0x28c6 <TIMER2_u8Init+0x44>
			CLR_BIT(TCCR2,TCCR2_WGM21);
    28a8:	a5 e4       	ldi	r26, 0x45	; 69
    28aa:	b0 e0       	ldi	r27, 0x00	; 0
    28ac:	e5 e4       	ldi	r30, 0x45	; 69
    28ae:	f0 e0       	ldi	r31, 0x00	; 0
    28b0:	80 81       	ld	r24, Z
    28b2:	87 7f       	andi	r24, 0xF7	; 247
    28b4:	8c 93       	st	X, r24
			CLR_BIT(TCCR2,TCCR2_WGM20);
    28b6:	a5 e4       	ldi	r26, 0x45	; 69
    28b8:	b0 e0       	ldi	r27, 0x00	; 0
    28ba:	e5 e4       	ldi	r30, 0x45	; 69
    28bc:	f0 e0       	ldi	r31, 0x00	; 0
    28be:	80 81       	ld	r24, Z
    28c0:	8f 7b       	andi	r24, 0xBF	; 191
    28c2:	8c 93       	st	X, r24
    28c4:	3e c0       	rjmp	.+124    	; 0x2942 <TIMER2_u8Init+0xc0>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER_PHC_PWM){
    28c6:	ea 81       	ldd	r30, Y+2	; 0x02
    28c8:	fb 81       	ldd	r31, Y+3	; 0x03
    28ca:	80 81       	ld	r24, Z
    28cc:	82 30       	cpi	r24, 0x02	; 2
    28ce:	79 f4       	brne	.+30     	; 0x28ee <TIMER2_u8Init+0x6c>
			CLR_BIT(TCCR2,TCCR2_WGM21);
    28d0:	a5 e4       	ldi	r26, 0x45	; 69
    28d2:	b0 e0       	ldi	r27, 0x00	; 0
    28d4:	e5 e4       	ldi	r30, 0x45	; 69
    28d6:	f0 e0       	ldi	r31, 0x00	; 0
    28d8:	80 81       	ld	r24, Z
    28da:	87 7f       	andi	r24, 0xF7	; 247
    28dc:	8c 93       	st	X, r24
			SET_BIT(TCCR2,TCCR2_WGM20);
    28de:	a5 e4       	ldi	r26, 0x45	; 69
    28e0:	b0 e0       	ldi	r27, 0x00	; 0
    28e2:	e5 e4       	ldi	r30, 0x45	; 69
    28e4:	f0 e0       	ldi	r31, 0x00	; 0
    28e6:	80 81       	ld	r24, Z
    28e8:	80 64       	ori	r24, 0x40	; 64
    28ea:	8c 93       	st	X, r24
    28ec:	2a c0       	rjmp	.+84     	; 0x2942 <TIMER2_u8Init+0xc0>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER_CTC){
    28ee:	ea 81       	ldd	r30, Y+2	; 0x02
    28f0:	fb 81       	ldd	r31, Y+3	; 0x03
    28f2:	80 81       	ld	r24, Z
    28f4:	83 30       	cpi	r24, 0x03	; 3
    28f6:	79 f4       	brne	.+30     	; 0x2916 <TIMER2_u8Init+0x94>
			SET_BIT(TCCR2,TCCR2_WGM21);
    28f8:	a5 e4       	ldi	r26, 0x45	; 69
    28fa:	b0 e0       	ldi	r27, 0x00	; 0
    28fc:	e5 e4       	ldi	r30, 0x45	; 69
    28fe:	f0 e0       	ldi	r31, 0x00	; 0
    2900:	80 81       	ld	r24, Z
    2902:	88 60       	ori	r24, 0x08	; 8
    2904:	8c 93       	st	X, r24
			CLR_BIT(TCCR2,TCCR2_WGM20);
    2906:	a5 e4       	ldi	r26, 0x45	; 69
    2908:	b0 e0       	ldi	r27, 0x00	; 0
    290a:	e5 e4       	ldi	r30, 0x45	; 69
    290c:	f0 e0       	ldi	r31, 0x00	; 0
    290e:	80 81       	ld	r24, Z
    2910:	8f 7b       	andi	r24, 0xBF	; 191
    2912:	8c 93       	st	X, r24
    2914:	16 c0       	rjmp	.+44     	; 0x2942 <TIMER2_u8Init+0xc0>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER_FAST_PWM){
    2916:	ea 81       	ldd	r30, Y+2	; 0x02
    2918:	fb 81       	ldd	r31, Y+3	; 0x03
    291a:	80 81       	ld	r24, Z
    291c:	84 30       	cpi	r24, 0x04	; 4
    291e:	79 f4       	brne	.+30     	; 0x293e <TIMER2_u8Init+0xbc>
			SET_BIT(TCCR2,TCCR2_WGM21);
    2920:	a5 e4       	ldi	r26, 0x45	; 69
    2922:	b0 e0       	ldi	r27, 0x00	; 0
    2924:	e5 e4       	ldi	r30, 0x45	; 69
    2926:	f0 e0       	ldi	r31, 0x00	; 0
    2928:	80 81       	ld	r24, Z
    292a:	88 60       	ori	r24, 0x08	; 8
    292c:	8c 93       	st	X, r24
			SET_BIT(TCCR2,TCCR2_WGM20);
    292e:	a5 e4       	ldi	r26, 0x45	; 69
    2930:	b0 e0       	ldi	r27, 0x00	; 0
    2932:	e5 e4       	ldi	r30, 0x45	; 69
    2934:	f0 e0       	ldi	r31, 0x00	; 0
    2936:	80 81       	ld	r24, Z
    2938:	80 64       	ori	r24, 0x40	; 64
    293a:	8c 93       	st	X, r24
    293c:	02 c0       	rjmp	.+4      	; 0x2942 <TIMER2_u8Init+0xc0>
		}
		else{
			Local_u8ErrorState=NOK;
    293e:	81 e0       	ldi	r24, 0x01	; 1
    2940:	89 83       	std	Y+1, r24	; 0x01
		}
		//Initialize Compare Match Output Mode
		TCCR2&=COMP_MATCH_OUT_MASK;
    2942:	a5 e4       	ldi	r26, 0x45	; 69
    2944:	b0 e0       	ldi	r27, 0x00	; 0
    2946:	e5 e4       	ldi	r30, 0x45	; 69
    2948:	f0 e0       	ldi	r31, 0x00	; 0
    294a:	80 81       	ld	r24, Z
    294c:	8f 7c       	andi	r24, 0xCF	; 207
    294e:	8c 93       	st	X, r24
		TCCR2|=((Copy_psTimer->CompareMatchOutputMode)<<4);
    2950:	a5 e4       	ldi	r26, 0x45	; 69
    2952:	b0 e0       	ldi	r27, 0x00	; 0
    2954:	e5 e4       	ldi	r30, 0x45	; 69
    2956:	f0 e0       	ldi	r31, 0x00	; 0
    2958:	80 81       	ld	r24, Z
    295a:	28 2f       	mov	r18, r24
    295c:	ea 81       	ldd	r30, Y+2	; 0x02
    295e:	fb 81       	ldd	r31, Y+3	; 0x03
    2960:	82 81       	ldd	r24, Z+2	; 0x02
    2962:	88 2f       	mov	r24, r24
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	82 95       	swap	r24
    2968:	92 95       	swap	r25
    296a:	90 7f       	andi	r25, 0xF0	; 240
    296c:	98 27       	eor	r25, r24
    296e:	80 7f       	andi	r24, 0xF0	; 240
    2970:	98 27       	eor	r25, r24
    2972:	82 2b       	or	r24, r18
    2974:	8c 93       	st	X, r24
		//Initialize Interrupt Enable pins
		if(Copy_psTimer->CompareMatchInterrupt==INT_ENABLE){
    2976:	ea 81       	ldd	r30, Y+2	; 0x02
    2978:	fb 81       	ldd	r31, Y+3	; 0x03
    297a:	83 81       	ldd	r24, Z+3	; 0x03
    297c:	81 30       	cpi	r24, 0x01	; 1
    297e:	41 f4       	brne	.+16     	; 0x2990 <TIMER2_u8Init+0x10e>
			SET_BIT(TIMSK,TIMSK_OCIE2);
    2980:	a9 e5       	ldi	r26, 0x59	; 89
    2982:	b0 e0       	ldi	r27, 0x00	; 0
    2984:	e9 e5       	ldi	r30, 0x59	; 89
    2986:	f0 e0       	ldi	r31, 0x00	; 0
    2988:	80 81       	ld	r24, Z
    298a:	80 68       	ori	r24, 0x80	; 128
    298c:	8c 93       	st	X, r24
    298e:	0f c0       	rjmp	.+30     	; 0x29ae <TIMER2_u8Init+0x12c>
		}
		else if(Copy_psTimer->CompareMatchInterrupt==INT_DISABLE){
    2990:	ea 81       	ldd	r30, Y+2	; 0x02
    2992:	fb 81       	ldd	r31, Y+3	; 0x03
    2994:	83 81       	ldd	r24, Z+3	; 0x03
    2996:	82 30       	cpi	r24, 0x02	; 2
    2998:	41 f4       	brne	.+16     	; 0x29aa <TIMER2_u8Init+0x128>
			CLR_BIT(TIMSK,TIMSK_OCIE2);
    299a:	a9 e5       	ldi	r26, 0x59	; 89
    299c:	b0 e0       	ldi	r27, 0x00	; 0
    299e:	e9 e5       	ldi	r30, 0x59	; 89
    29a0:	f0 e0       	ldi	r31, 0x00	; 0
    29a2:	80 81       	ld	r24, Z
    29a4:	8f 77       	andi	r24, 0x7F	; 127
    29a6:	8c 93       	st	X, r24
    29a8:	02 c0       	rjmp	.+4      	; 0x29ae <TIMER2_u8Init+0x12c>
		}
		else{
			Local_u8ErrorState=NOK;
    29aa:	81 e0       	ldi	r24, 0x01	; 1
    29ac:	89 83       	std	Y+1, r24	; 0x01
		}

		if(Copy_psTimer->OverFlowInterrupt==INT_ENABLE){
    29ae:	ea 81       	ldd	r30, Y+2	; 0x02
    29b0:	fb 81       	ldd	r31, Y+3	; 0x03
    29b2:	84 81       	ldd	r24, Z+4	; 0x04
    29b4:	81 30       	cpi	r24, 0x01	; 1
    29b6:	41 f4       	brne	.+16     	; 0x29c8 <TIMER2_u8Init+0x146>
			SET_BIT(TIMSK,TIMSK_TOIE2);
    29b8:	a9 e5       	ldi	r26, 0x59	; 89
    29ba:	b0 e0       	ldi	r27, 0x00	; 0
    29bc:	e9 e5       	ldi	r30, 0x59	; 89
    29be:	f0 e0       	ldi	r31, 0x00	; 0
    29c0:	80 81       	ld	r24, Z
    29c2:	80 64       	ori	r24, 0x40	; 64
    29c4:	8c 93       	st	X, r24
    29c6:	0f c0       	rjmp	.+30     	; 0x29e6 <TIMER2_u8Init+0x164>
		}
		else if(Copy_psTimer->OverFlowInterrupt==INT_DISABLE){
    29c8:	ea 81       	ldd	r30, Y+2	; 0x02
    29ca:	fb 81       	ldd	r31, Y+3	; 0x03
    29cc:	84 81       	ldd	r24, Z+4	; 0x04
    29ce:	82 30       	cpi	r24, 0x02	; 2
    29d0:	41 f4       	brne	.+16     	; 0x29e2 <TIMER2_u8Init+0x160>
			CLR_BIT(TIMSK,TIMSK_TOIE2);
    29d2:	a9 e5       	ldi	r26, 0x59	; 89
    29d4:	b0 e0       	ldi	r27, 0x00	; 0
    29d6:	e9 e5       	ldi	r30, 0x59	; 89
    29d8:	f0 e0       	ldi	r31, 0x00	; 0
    29da:	80 81       	ld	r24, Z
    29dc:	8f 7b       	andi	r24, 0xBF	; 191
    29de:	8c 93       	st	X, r24
    29e0:	02 c0       	rjmp	.+4      	; 0x29e6 <TIMER2_u8Init+0x164>
		}
		else{
			Local_u8ErrorState=NOK;
    29e2:	81 e0       	ldi	r24, 0x01	; 1
    29e4:	89 83       	std	Y+1, r24	; 0x01
		}

		//Initialize Prescaler
		TCCR2&=PRESCALER_MASK;
    29e6:	a5 e4       	ldi	r26, 0x45	; 69
    29e8:	b0 e0       	ldi	r27, 0x00	; 0
    29ea:	e5 e4       	ldi	r30, 0x45	; 69
    29ec:	f0 e0       	ldi	r31, 0x00	; 0
    29ee:	80 81       	ld	r24, Z
    29f0:	88 7f       	andi	r24, 0xF8	; 248
    29f2:	8c 93       	st	X, r24
		TCCR2|=(Copy_psTimer->Prescaler);
    29f4:	a5 e4       	ldi	r26, 0x45	; 69
    29f6:	b0 e0       	ldi	r27, 0x00	; 0
    29f8:	e5 e4       	ldi	r30, 0x45	; 69
    29fa:	f0 e0       	ldi	r31, 0x00	; 0
    29fc:	90 81       	ld	r25, Z
    29fe:	ea 81       	ldd	r30, Y+2	; 0x02
    2a00:	fb 81       	ldd	r31, Y+3	; 0x03
    2a02:	81 81       	ldd	r24, Z+1	; 0x01
    2a04:	89 2b       	or	r24, r25
    2a06:	8c 93       	st	X, r24
    2a08:	02 c0       	rjmp	.+4      	; 0x2a0e <TIMER2_u8Init+0x18c>
	}
	else{
		Local_u8ErrorState=NULL_POINTER;
    2a0a:	82 e0       	ldi	r24, 0x02	; 2
    2a0c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    2a0e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a10:	0f 90       	pop	r0
    2a12:	0f 90       	pop	r0
    2a14:	0f 90       	pop	r0
    2a16:	cf 91       	pop	r28
    2a18:	df 91       	pop	r29
    2a1a:	08 95       	ret

00002a1c <TIMER2_delay_ms>:

u8 TIMER2_delay_ms(Timer_t* Copy_psTimer,u16 Copy_u16Time){
    2a1c:	df 93       	push	r29
    2a1e:	cf 93       	push	r28
    2a20:	cd b7       	in	r28, 0x3d	; 61
    2a22:	de b7       	in	r29, 0x3e	; 62
    2a24:	6a 97       	sbiw	r28, 0x1a	; 26
    2a26:	0f b6       	in	r0, 0x3f	; 63
    2a28:	f8 94       	cli
    2a2a:	de bf       	out	0x3e, r29	; 62
    2a2c:	0f be       	out	0x3f, r0	; 63
    2a2e:	cd bf       	out	0x3d, r28	; 61
    2a30:	9b 8b       	std	Y+19, r25	; 0x13
    2a32:	8a 8b       	std	Y+18, r24	; 0x12
    2a34:	7d 8b       	std	Y+21, r23	; 0x15
    2a36:	6c 8b       	std	Y+20, r22	; 0x14
	u8 Local_u8ErrorState=OK,Local_u8Break=1; u16 Local_u16Counter=0;u32 Local_u32usTime,Local_u32CompMatchCount;
    2a38:	1c 86       	std	Y+12, r1	; 0x0c
    2a3a:	81 e0       	ldi	r24, 0x01	; 1
    2a3c:	8b 87       	std	Y+11, r24	; 0x0b
    2a3e:	1a 86       	std	Y+10, r1	; 0x0a
    2a40:	19 86       	std	Y+9, r1	; 0x09
	if(Copy_psTimer!=NULL){
    2a42:	8a 89       	ldd	r24, Y+18	; 0x12
    2a44:	9b 89       	ldd	r25, Y+19	; 0x13
    2a46:	00 97       	sbiw	r24, 0x00	; 0
    2a48:	09 f4       	brne	.+2      	; 0x2a4c <TIMER2_delay_ms+0x30>
    2a4a:	82 c0       	rjmp	.+260    	; 0x2b50 <TIMER2_delay_ms+0x134>
		Timer_t Timer ={TIMER_CTC,PRSCLR_DIV_BY_8,OCM_DISCONNECT,INT_DISABLE,INT_DISABLE};
    2a4c:	ce 01       	movw	r24, r28
    2a4e:	0d 96       	adiw	r24, 0x0d	; 13
    2a50:	9f 8b       	std	Y+23, r25	; 0x17
    2a52:	8e 8b       	std	Y+22, r24	; 0x16
    2a54:	e0 e8       	ldi	r30, 0x80	; 128
    2a56:	f0 e0       	ldi	r31, 0x00	; 0
    2a58:	f9 8f       	std	Y+25, r31	; 0x19
    2a5a:	e8 8f       	std	Y+24, r30	; 0x18
    2a5c:	f5 e0       	ldi	r31, 0x05	; 5
    2a5e:	fa 8f       	std	Y+26, r31	; 0x1a
    2a60:	e8 8d       	ldd	r30, Y+24	; 0x18
    2a62:	f9 8d       	ldd	r31, Y+25	; 0x19
    2a64:	00 80       	ld	r0, Z
    2a66:	88 8d       	ldd	r24, Y+24	; 0x18
    2a68:	99 8d       	ldd	r25, Y+25	; 0x19
    2a6a:	01 96       	adiw	r24, 0x01	; 1
    2a6c:	99 8f       	std	Y+25, r25	; 0x19
    2a6e:	88 8f       	std	Y+24, r24	; 0x18
    2a70:	ee 89       	ldd	r30, Y+22	; 0x16
    2a72:	ff 89       	ldd	r31, Y+23	; 0x17
    2a74:	00 82       	st	Z, r0
    2a76:	8e 89       	ldd	r24, Y+22	; 0x16
    2a78:	9f 89       	ldd	r25, Y+23	; 0x17
    2a7a:	01 96       	adiw	r24, 0x01	; 1
    2a7c:	9f 8b       	std	Y+23, r25	; 0x17
    2a7e:	8e 8b       	std	Y+22, r24	; 0x16
    2a80:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2a82:	91 50       	subi	r25, 0x01	; 1
    2a84:	9a 8f       	std	Y+26, r25	; 0x1a
    2a86:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2a88:	ee 23       	and	r30, r30
    2a8a:	51 f7       	brne	.-44     	; 0x2a60 <TIMER2_delay_ms+0x44>
		TIMER_u8SetCompMatch(TIMER2,250);
    2a8c:	84 e0       	ldi	r24, 0x04	; 4
    2a8e:	6a ef       	ldi	r22, 0xFA	; 250
    2a90:	70 e0       	ldi	r23, 0x00	; 0
    2a92:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <TIMER_u8SetCompMatch>
		Local_u32usTime=(u32)Copy_u16Time*1000UL;
    2a96:	8c 89       	ldd	r24, Y+20	; 0x14
    2a98:	9d 89       	ldd	r25, Y+21	; 0x15
    2a9a:	cc 01       	movw	r24, r24
    2a9c:	a0 e0       	ldi	r26, 0x00	; 0
    2a9e:	b0 e0       	ldi	r27, 0x00	; 0
    2aa0:	28 ee       	ldi	r18, 0xE8	; 232
    2aa2:	33 e0       	ldi	r19, 0x03	; 3
    2aa4:	40 e0       	ldi	r20, 0x00	; 0
    2aa6:	50 e0       	ldi	r21, 0x00	; 0
    2aa8:	bc 01       	movw	r22, r24
    2aaa:	cd 01       	movw	r24, r26
    2aac:	0e 94 c7 19 	call	0x338e	; 0x338e <__mulsi3>
    2ab0:	dc 01       	movw	r26, r24
    2ab2:	cb 01       	movw	r24, r22
    2ab4:	8d 83       	std	Y+5, r24	; 0x05
    2ab6:	9e 83       	std	Y+6, r25	; 0x06
    2ab8:	af 83       	std	Y+7, r26	; 0x07
    2aba:	b8 87       	std	Y+8, r27	; 0x08
		Local_u32CompMatchCount=Local_u32usTime/250;
    2abc:	8d 81       	ldd	r24, Y+5	; 0x05
    2abe:	9e 81       	ldd	r25, Y+6	; 0x06
    2ac0:	af 81       	ldd	r26, Y+7	; 0x07
    2ac2:	b8 85       	ldd	r27, Y+8	; 0x08
    2ac4:	2a ef       	ldi	r18, 0xFA	; 250
    2ac6:	30 e0       	ldi	r19, 0x00	; 0
    2ac8:	40 e0       	ldi	r20, 0x00	; 0
    2aca:	50 e0       	ldi	r21, 0x00	; 0
    2acc:	bc 01       	movw	r22, r24
    2ace:	cd 01       	movw	r24, r26
    2ad0:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <__udivmodsi4>
    2ad4:	da 01       	movw	r26, r20
    2ad6:	c9 01       	movw	r24, r18
    2ad8:	89 83       	std	Y+1, r24	; 0x01
    2ada:	9a 83       	std	Y+2, r25	; 0x02
    2adc:	ab 83       	std	Y+3, r26	; 0x03
    2ade:	bc 83       	std	Y+4, r27	; 0x04
		TIMER2_u8Init(&Timer);
    2ae0:	ce 01       	movw	r24, r28
    2ae2:	0d 96       	adiw	r24, 0x0d	; 13
    2ae4:	0e 94 41 14 	call	0x2882	; 0x2882 <TIMER2_u8Init>
    2ae8:	2b c0       	rjmp	.+86     	; 0x2b40 <TIMER2_delay_ms+0x124>
		while(Local_u8Break==1){
			if(GET_BIT(TIFR,TIFR_OCF2)==1){
    2aea:	e8 e5       	ldi	r30, 0x58	; 88
    2aec:	f0 e0       	ldi	r31, 0x00	; 0
    2aee:	80 81       	ld	r24, Z
    2af0:	88 1f       	adc	r24, r24
    2af2:	88 27       	eor	r24, r24
    2af4:	88 1f       	adc	r24, r24
    2af6:	81 30       	cpi	r24, 0x01	; 1
    2af8:	19 f5       	brne	.+70     	; 0x2b40 <TIMER2_delay_ms+0x124>
				if(Local_u16Counter==Local_u32CompMatchCount){
    2afa:	89 85       	ldd	r24, Y+9	; 0x09
    2afc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2afe:	9c 01       	movw	r18, r24
    2b00:	40 e0       	ldi	r20, 0x00	; 0
    2b02:	50 e0       	ldi	r21, 0x00	; 0
    2b04:	89 81       	ldd	r24, Y+1	; 0x01
    2b06:	9a 81       	ldd	r25, Y+2	; 0x02
    2b08:	ab 81       	ldd	r26, Y+3	; 0x03
    2b0a:	bc 81       	ldd	r27, Y+4	; 0x04
    2b0c:	28 17       	cp	r18, r24
    2b0e:	39 07       	cpc	r19, r25
    2b10:	4a 07       	cpc	r20, r26
    2b12:	5b 07       	cpc	r21, r27
    2b14:	49 f4       	brne	.+18     	; 0x2b28 <TIMER2_delay_ms+0x10c>
					Local_u8Break=0;
    2b16:	1b 86       	std	Y+11, r1	; 0x0b
					SET_BIT(TIFR,TIFR_OCF2);
    2b18:	a8 e5       	ldi	r26, 0x58	; 88
    2b1a:	b0 e0       	ldi	r27, 0x00	; 0
    2b1c:	e8 e5       	ldi	r30, 0x58	; 88
    2b1e:	f0 e0       	ldi	r31, 0x00	; 0
    2b20:	80 81       	ld	r24, Z
    2b22:	80 68       	ori	r24, 0x80	; 128
    2b24:	8c 93       	st	X, r24
    2b26:	0c c0       	rjmp	.+24     	; 0x2b40 <TIMER2_delay_ms+0x124>
				}
				else{
					Local_u16Counter++;
    2b28:	89 85       	ldd	r24, Y+9	; 0x09
    2b2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b2c:	01 96       	adiw	r24, 0x01	; 1
    2b2e:	9a 87       	std	Y+10, r25	; 0x0a
    2b30:	89 87       	std	Y+9, r24	; 0x09
					SET_BIT(TIFR,TIFR_OCF2);
    2b32:	a8 e5       	ldi	r26, 0x58	; 88
    2b34:	b0 e0       	ldi	r27, 0x00	; 0
    2b36:	e8 e5       	ldi	r30, 0x58	; 88
    2b38:	f0 e0       	ldi	r31, 0x00	; 0
    2b3a:	80 81       	ld	r24, Z
    2b3c:	80 68       	ori	r24, 0x80	; 128
    2b3e:	8c 93       	st	X, r24
		Timer_t Timer ={TIMER_CTC,PRSCLR_DIV_BY_8,OCM_DISCONNECT,INT_DISABLE,INT_DISABLE};
		TIMER_u8SetCompMatch(TIMER2,250);
		Local_u32usTime=(u32)Copy_u16Time*1000UL;
		Local_u32CompMatchCount=Local_u32usTime/250;
		TIMER2_u8Init(&Timer);
		while(Local_u8Break==1){
    2b40:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b42:	81 30       	cpi	r24, 0x01	; 1
    2b44:	91 f2       	breq	.-92     	; 0x2aea <TIMER2_delay_ms+0xce>
					Local_u16Counter++;
					SET_BIT(TIFR,TIFR_OCF2);
				}
			}
		}
		TIMER2_u8Init(Copy_psTimer);
    2b46:	8a 89       	ldd	r24, Y+18	; 0x12
    2b48:	9b 89       	ldd	r25, Y+19	; 0x13
    2b4a:	0e 94 41 14 	call	0x2882	; 0x2882 <TIMER2_u8Init>
    2b4e:	02 c0       	rjmp	.+4      	; 0x2b54 <TIMER2_delay_ms+0x138>

	}
	else{
		Local_u8ErrorState=NULL_POINTER;
    2b50:	82 e0       	ldi	r24, 0x02	; 2
    2b52:	8c 87       	std	Y+12, r24	; 0x0c
	}
	return Local_u8ErrorState;
    2b54:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    2b56:	6a 96       	adiw	r28, 0x1a	; 26
    2b58:	0f b6       	in	r0, 0x3f	; 63
    2b5a:	f8 94       	cli
    2b5c:	de bf       	out	0x3e, r29	; 62
    2b5e:	0f be       	out	0x3f, r0	; 63
    2b60:	cd bf       	out	0x3d, r28	; 61
    2b62:	cf 91       	pop	r28
    2b64:	df 91       	pop	r29
    2b66:	08 95       	ret

00002b68 <TIMER2_delay_us>:

u8 TIMER2_delay_us(Timer_t* Copy_psTimer,u16 Copy_u16Time){
    2b68:	df 93       	push	r29
    2b6a:	cf 93       	push	r28
    2b6c:	cd b7       	in	r28, 0x3d	; 61
    2b6e:	de b7       	in	r29, 0x3e	; 62
    2b70:	6b 97       	sbiw	r28, 0x1b	; 27
    2b72:	0f b6       	in	r0, 0x3f	; 63
    2b74:	f8 94       	cli
    2b76:	de bf       	out	0x3e, r29	; 62
    2b78:	0f be       	out	0x3f, r0	; 63
    2b7a:	cd bf       	out	0x3d, r28	; 61
    2b7c:	9c 8b       	std	Y+20, r25	; 0x14
    2b7e:	8b 8b       	std	Y+19, r24	; 0x13
    2b80:	7e 8b       	std	Y+22, r23	; 0x16
    2b82:	6d 8b       	std	Y+21, r22	; 0x15
	u8 Local_u8ErrorState=OK,Local_u8Break=1,Local_u8CompMatch; u16 Local_u16Counter=0;u32 Local_u32usTime,Local_u32CompMatchCount;
    2b84:	1d 86       	std	Y+13, r1	; 0x0d
    2b86:	81 e0       	ldi	r24, 0x01	; 1
    2b88:	8c 87       	std	Y+12, r24	; 0x0c
    2b8a:	1a 86       	std	Y+10, r1	; 0x0a
    2b8c:	19 86       	std	Y+9, r1	; 0x09
	if(Copy_psTimer!=NULL){
    2b8e:	8b 89       	ldd	r24, Y+19	; 0x13
    2b90:	9c 89       	ldd	r25, Y+20	; 0x14
    2b92:	00 97       	sbiw	r24, 0x00	; 0
    2b94:	09 f4       	brne	.+2      	; 0x2b98 <TIMER2_delay_us+0x30>
    2b96:	85 c0       	rjmp	.+266    	; 0x2ca2 <TIMER2_delay_us+0x13a>
		Timer_t Timer ={TIMER_CTC,PRSCLR_DIV_BY_8,OCM_DISCONNECT,INT_DISABLE,INT_DISABLE};
    2b98:	ce 01       	movw	r24, r28
    2b9a:	0e 96       	adiw	r24, 0x0e	; 14
    2b9c:	98 8f       	std	Y+24, r25	; 0x18
    2b9e:	8f 8b       	std	Y+23, r24	; 0x17
    2ba0:	e5 e8       	ldi	r30, 0x85	; 133
    2ba2:	f0 e0       	ldi	r31, 0x00	; 0
    2ba4:	fa 8f       	std	Y+26, r31	; 0x1a
    2ba6:	e9 8f       	std	Y+25, r30	; 0x19
    2ba8:	f5 e0       	ldi	r31, 0x05	; 5
    2baa:	fb 8f       	std	Y+27, r31	; 0x1b
    2bac:	e9 8d       	ldd	r30, Y+25	; 0x19
    2bae:	fa 8d       	ldd	r31, Y+26	; 0x1a
    2bb0:	00 80       	ld	r0, Z
    2bb2:	89 8d       	ldd	r24, Y+25	; 0x19
    2bb4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2bb6:	01 96       	adiw	r24, 0x01	; 1
    2bb8:	9a 8f       	std	Y+26, r25	; 0x1a
    2bba:	89 8f       	std	Y+25, r24	; 0x19
    2bbc:	ef 89       	ldd	r30, Y+23	; 0x17
    2bbe:	f8 8d       	ldd	r31, Y+24	; 0x18
    2bc0:	00 82       	st	Z, r0
    2bc2:	8f 89       	ldd	r24, Y+23	; 0x17
    2bc4:	98 8d       	ldd	r25, Y+24	; 0x18
    2bc6:	01 96       	adiw	r24, 0x01	; 1
    2bc8:	98 8f       	std	Y+24, r25	; 0x18
    2bca:	8f 8b       	std	Y+23, r24	; 0x17
    2bcc:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2bce:	91 50       	subi	r25, 0x01	; 1
    2bd0:	9b 8f       	std	Y+27, r25	; 0x1b
    2bd2:	eb 8d       	ldd	r30, Y+27	; 0x1b
    2bd4:	ee 23       	and	r30, r30
    2bd6:	51 f7       	brne	.-44     	; 0x2bac <TIMER2_delay_us+0x44>
		for(Local_u8CompMatch=255;Local_u8CompMatch>0;Local_u8CompMatch--){
    2bd8:	8f ef       	ldi	r24, 0xFF	; 255
    2bda:	8b 87       	std	Y+11, r24	; 0x0b
    2bdc:	0d c0       	rjmp	.+26     	; 0x2bf8 <TIMER2_delay_us+0x90>
			if(Copy_u16Time%Local_u8CompMatch==0){
    2bde:	8b 85       	ldd	r24, Y+11	; 0x0b
    2be0:	28 2f       	mov	r18, r24
    2be2:	30 e0       	ldi	r19, 0x00	; 0
    2be4:	8d 89       	ldd	r24, Y+21	; 0x15
    2be6:	9e 89       	ldd	r25, Y+22	; 0x16
    2be8:	b9 01       	movw	r22, r18
    2bea:	0e 94 e6 19 	call	0x33cc	; 0x33cc <__udivmodhi4>
    2bee:	00 97       	sbiw	r24, 0x00	; 0
    2bf0:	31 f0       	breq	.+12     	; 0x2bfe <TIMER2_delay_us+0x96>

u8 TIMER2_delay_us(Timer_t* Copy_psTimer,u16 Copy_u16Time){
	u8 Local_u8ErrorState=OK,Local_u8Break=1,Local_u8CompMatch; u16 Local_u16Counter=0;u32 Local_u32usTime,Local_u32CompMatchCount;
	if(Copy_psTimer!=NULL){
		Timer_t Timer ={TIMER_CTC,PRSCLR_DIV_BY_8,OCM_DISCONNECT,INT_DISABLE,INT_DISABLE};
		for(Local_u8CompMatch=255;Local_u8CompMatch>0;Local_u8CompMatch--){
    2bf2:	8b 85       	ldd	r24, Y+11	; 0x0b
    2bf4:	81 50       	subi	r24, 0x01	; 1
    2bf6:	8b 87       	std	Y+11, r24	; 0x0b
    2bf8:	8b 85       	ldd	r24, Y+11	; 0x0b
    2bfa:	88 23       	and	r24, r24
    2bfc:	81 f7       	brne	.-32     	; 0x2bde <TIMER2_delay_us+0x76>
			if(Copy_u16Time%Local_u8CompMatch==0){
				break;
			}
		}
		TIMER_u8SetCompMatch(TIMER2,Local_u8CompMatch);
    2bfe:	8b 85       	ldd	r24, Y+11	; 0x0b
    2c00:	28 2f       	mov	r18, r24
    2c02:	30 e0       	ldi	r19, 0x00	; 0
    2c04:	84 e0       	ldi	r24, 0x04	; 4
    2c06:	b9 01       	movw	r22, r18
    2c08:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <TIMER_u8SetCompMatch>
		Local_u32CompMatchCount=Local_u32usTime/Local_u8CompMatch;
    2c0c:	8b 85       	ldd	r24, Y+11	; 0x0b
    2c0e:	28 2f       	mov	r18, r24
    2c10:	30 e0       	ldi	r19, 0x00	; 0
    2c12:	40 e0       	ldi	r20, 0x00	; 0
    2c14:	50 e0       	ldi	r21, 0x00	; 0
    2c16:	8d 81       	ldd	r24, Y+5	; 0x05
    2c18:	9e 81       	ldd	r25, Y+6	; 0x06
    2c1a:	af 81       	ldd	r26, Y+7	; 0x07
    2c1c:	b8 85       	ldd	r27, Y+8	; 0x08
    2c1e:	bc 01       	movw	r22, r24
    2c20:	cd 01       	movw	r24, r26
    2c22:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <__udivmodsi4>
    2c26:	da 01       	movw	r26, r20
    2c28:	c9 01       	movw	r24, r18
    2c2a:	89 83       	std	Y+1, r24	; 0x01
    2c2c:	9a 83       	std	Y+2, r25	; 0x02
    2c2e:	ab 83       	std	Y+3, r26	; 0x03
    2c30:	bc 83       	std	Y+4, r27	; 0x04
		TIMER2_u8Init(&Timer);
    2c32:	ce 01       	movw	r24, r28
    2c34:	0e 96       	adiw	r24, 0x0e	; 14
    2c36:	0e 94 41 14 	call	0x2882	; 0x2882 <TIMER2_u8Init>
    2c3a:	2b c0       	rjmp	.+86     	; 0x2c92 <TIMER2_delay_us+0x12a>
		while(Local_u8Break==1){
			if(GET_BIT(TIFR,TIFR_OCF2)==1){
    2c3c:	e8 e5       	ldi	r30, 0x58	; 88
    2c3e:	f0 e0       	ldi	r31, 0x00	; 0
    2c40:	80 81       	ld	r24, Z
    2c42:	88 1f       	adc	r24, r24
    2c44:	88 27       	eor	r24, r24
    2c46:	88 1f       	adc	r24, r24
    2c48:	81 30       	cpi	r24, 0x01	; 1
    2c4a:	19 f5       	brne	.+70     	; 0x2c92 <TIMER2_delay_us+0x12a>
				if(Local_u16Counter==Local_u32CompMatchCount){
    2c4c:	89 85       	ldd	r24, Y+9	; 0x09
    2c4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c50:	9c 01       	movw	r18, r24
    2c52:	40 e0       	ldi	r20, 0x00	; 0
    2c54:	50 e0       	ldi	r21, 0x00	; 0
    2c56:	89 81       	ldd	r24, Y+1	; 0x01
    2c58:	9a 81       	ldd	r25, Y+2	; 0x02
    2c5a:	ab 81       	ldd	r26, Y+3	; 0x03
    2c5c:	bc 81       	ldd	r27, Y+4	; 0x04
    2c5e:	28 17       	cp	r18, r24
    2c60:	39 07       	cpc	r19, r25
    2c62:	4a 07       	cpc	r20, r26
    2c64:	5b 07       	cpc	r21, r27
    2c66:	49 f4       	brne	.+18     	; 0x2c7a <TIMER2_delay_us+0x112>
					Local_u8Break=0;
    2c68:	1c 86       	std	Y+12, r1	; 0x0c
					SET_BIT(TIFR,TIFR_OCF2);
    2c6a:	a8 e5       	ldi	r26, 0x58	; 88
    2c6c:	b0 e0       	ldi	r27, 0x00	; 0
    2c6e:	e8 e5       	ldi	r30, 0x58	; 88
    2c70:	f0 e0       	ldi	r31, 0x00	; 0
    2c72:	80 81       	ld	r24, Z
    2c74:	80 68       	ori	r24, 0x80	; 128
    2c76:	8c 93       	st	X, r24
    2c78:	0c c0       	rjmp	.+24     	; 0x2c92 <TIMER2_delay_us+0x12a>
				}
				else{
					Local_u16Counter++;
    2c7a:	89 85       	ldd	r24, Y+9	; 0x09
    2c7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c7e:	01 96       	adiw	r24, 0x01	; 1
    2c80:	9a 87       	std	Y+10, r25	; 0x0a
    2c82:	89 87       	std	Y+9, r24	; 0x09
					SET_BIT(TIFR,TIFR_OCF2);
    2c84:	a8 e5       	ldi	r26, 0x58	; 88
    2c86:	b0 e0       	ldi	r27, 0x00	; 0
    2c88:	e8 e5       	ldi	r30, 0x58	; 88
    2c8a:	f0 e0       	ldi	r31, 0x00	; 0
    2c8c:	80 81       	ld	r24, Z
    2c8e:	80 68       	ori	r24, 0x80	; 128
    2c90:	8c 93       	st	X, r24
			}
		}
		TIMER_u8SetCompMatch(TIMER2,Local_u8CompMatch);
		Local_u32CompMatchCount=Local_u32usTime/Local_u8CompMatch;
		TIMER2_u8Init(&Timer);
		while(Local_u8Break==1){
    2c92:	8c 85       	ldd	r24, Y+12	; 0x0c
    2c94:	81 30       	cpi	r24, 0x01	; 1
    2c96:	91 f2       	breq	.-92     	; 0x2c3c <TIMER2_delay_us+0xd4>
					Local_u16Counter++;
					SET_BIT(TIFR,TIFR_OCF2);
				}
			}
		}
		TIMER2_u8Init(Copy_psTimer);
    2c98:	8b 89       	ldd	r24, Y+19	; 0x13
    2c9a:	9c 89       	ldd	r25, Y+20	; 0x14
    2c9c:	0e 94 41 14 	call	0x2882	; 0x2882 <TIMER2_u8Init>
    2ca0:	02 c0       	rjmp	.+4      	; 0x2ca6 <TIMER2_delay_us+0x13e>

	}
	else{
		Local_u8ErrorState=NULL_POINTER;
    2ca2:	82 e0       	ldi	r24, 0x02	; 2
    2ca4:	8d 87       	std	Y+13, r24	; 0x0d
	}
	return Local_u8ErrorState;
    2ca6:	8d 85       	ldd	r24, Y+13	; 0x0d
}
    2ca8:	6b 96       	adiw	r28, 0x1b	; 27
    2caa:	0f b6       	in	r0, 0x3f	; 63
    2cac:	f8 94       	cli
    2cae:	de bf       	out	0x3e, r29	; 62
    2cb0:	0f be       	out	0x3f, r0	; 63
    2cb2:	cd bf       	out	0x3d, r28	; 61
    2cb4:	cf 91       	pop	r28
    2cb6:	df 91       	pop	r29
    2cb8:	08 95       	ret

00002cba <TIMER2_u8PWMGenerate>:


u8 TIMER2_u8PWMGenerate(Timer_t* Copy_psTimer,u8 Copy_u8DutyCycle){
    2cba:	8f 92       	push	r8
    2cbc:	9f 92       	push	r9
    2cbe:	af 92       	push	r10
    2cc0:	bf 92       	push	r11
    2cc2:	cf 92       	push	r12
    2cc4:	df 92       	push	r13
    2cc6:	ef 92       	push	r14
    2cc8:	ff 92       	push	r15
    2cca:	0f 93       	push	r16
    2ccc:	1f 93       	push	r17
    2cce:	df 93       	push	r29
    2cd0:	cf 93       	push	r28
    2cd2:	00 d0       	rcall	.+0      	; 0x2cd4 <TIMER2_u8PWMGenerate+0x1a>
    2cd4:	00 d0       	rcall	.+0      	; 0x2cd6 <TIMER2_u8PWMGenerate+0x1c>
    2cd6:	cd b7       	in	r28, 0x3d	; 61
    2cd8:	de b7       	in	r29, 0x3e	; 62
    2cda:	9b 83       	std	Y+3, r25	; 0x03
    2cdc:	8a 83       	std	Y+2, r24	; 0x02
    2cde:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState=OK;
    2ce0:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_psTimer!=NULL){
    2ce2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ce4:	9b 81       	ldd	r25, Y+3	; 0x03
    2ce6:	00 97       	sbiw	r24, 0x00	; 0
    2ce8:	09 f4       	brne	.+2      	; 0x2cec <TIMER2_u8PWMGenerate+0x32>
    2cea:	44 c0       	rjmp	.+136    	; 0x2d74 <TIMER2_u8PWMGenerate+0xba>
		if((Copy_psTimer->WaveGenMode) == TIMER_FAST_PWM && (Copy_psTimer->CompareMatchOutputMode)== OCM_FAST_PWM_NON_INVERTED ){
    2cec:	ea 81       	ldd	r30, Y+2	; 0x02
    2cee:	fb 81       	ldd	r31, Y+3	; 0x03
    2cf0:	80 81       	ld	r24, Z
    2cf2:	84 30       	cpi	r24, 0x04	; 4
    2cf4:	e1 f5       	brne	.+120    	; 0x2d6e <TIMER2_u8PWMGenerate+0xb4>
    2cf6:	ea 81       	ldd	r30, Y+2	; 0x02
    2cf8:	fb 81       	ldd	r31, Y+3	; 0x03
    2cfa:	82 81       	ldd	r24, Z+2	; 0x02
    2cfc:	82 30       	cpi	r24, 0x02	; 2
    2cfe:	b9 f5       	brne	.+110    	; 0x2d6e <TIMER2_u8PWMGenerate+0xb4>
			OCR2 = MATH_s32Map(0,100,0,255,Copy_u8DutyCycle);
    2d00:	0f 2e       	mov	r0, r31
    2d02:	f3 e4       	ldi	r31, 0x43	; 67
    2d04:	8f 2e       	mov	r8, r31
    2d06:	99 24       	eor	r9, r9
    2d08:	f0 2d       	mov	r31, r0
    2d0a:	8c 81       	ldd	r24, Y+4	; 0x04
    2d0c:	88 2f       	mov	r24, r24
    2d0e:	90 e0       	ldi	r25, 0x00	; 0
    2d10:	a0 e0       	ldi	r26, 0x00	; 0
    2d12:	b0 e0       	ldi	r27, 0x00	; 0
    2d14:	00 d0       	rcall	.+0      	; 0x2d16 <TIMER2_u8PWMGenerate+0x5c>
    2d16:	00 d0       	rcall	.+0      	; 0x2d18 <TIMER2_u8PWMGenerate+0x5e>
    2d18:	ed b7       	in	r30, 0x3d	; 61
    2d1a:	fe b7       	in	r31, 0x3e	; 62
    2d1c:	31 96       	adiw	r30, 0x01	; 1
    2d1e:	80 83       	st	Z, r24
    2d20:	91 83       	std	Z+1, r25	; 0x01
    2d22:	a2 83       	std	Z+2, r26	; 0x02
    2d24:	b3 83       	std	Z+3, r27	; 0x03
    2d26:	60 e0       	ldi	r22, 0x00	; 0
    2d28:	70 e0       	ldi	r23, 0x00	; 0
    2d2a:	80 e0       	ldi	r24, 0x00	; 0
    2d2c:	90 e0       	ldi	r25, 0x00	; 0
    2d2e:	24 e6       	ldi	r18, 0x64	; 100
    2d30:	30 e0       	ldi	r19, 0x00	; 0
    2d32:	40 e0       	ldi	r20, 0x00	; 0
    2d34:	50 e0       	ldi	r21, 0x00	; 0
    2d36:	ee 24       	eor	r14, r14
    2d38:	ff 24       	eor	r15, r15
    2d3a:	87 01       	movw	r16, r14
    2d3c:	0f 2e       	mov	r0, r31
    2d3e:	ff ef       	ldi	r31, 0xFF	; 255
    2d40:	af 2e       	mov	r10, r31
    2d42:	f0 e0       	ldi	r31, 0x00	; 0
    2d44:	bf 2e       	mov	r11, r31
    2d46:	f0 e0       	ldi	r31, 0x00	; 0
    2d48:	cf 2e       	mov	r12, r31
    2d4a:	f0 e0       	ldi	r31, 0x00	; 0
    2d4c:	df 2e       	mov	r13, r31
    2d4e:	f0 2d       	mov	r31, r0
    2d50:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <MATH_s32Map>
    2d54:	0f 90       	pop	r0
    2d56:	0f 90       	pop	r0
    2d58:	0f 90       	pop	r0
    2d5a:	0f 90       	pop	r0
    2d5c:	dc 01       	movw	r26, r24
    2d5e:	cb 01       	movw	r24, r22
    2d60:	f4 01       	movw	r30, r8
    2d62:	80 83       	st	Z, r24
			TIMER2_u8Init(Copy_psTimer);
    2d64:	8a 81       	ldd	r24, Y+2	; 0x02
    2d66:	9b 81       	ldd	r25, Y+3	; 0x03
    2d68:	0e 94 41 14 	call	0x2882	; 0x2882 <TIMER2_u8Init>
    2d6c:	05 c0       	rjmp	.+10     	; 0x2d78 <TIMER2_u8PWMGenerate+0xbe>
		}
		else{
			Local_u8ErrorState=NOK;
    2d6e:	81 e0       	ldi	r24, 0x01	; 1
    2d70:	89 83       	std	Y+1, r24	; 0x01
    2d72:	02 c0       	rjmp	.+4      	; 0x2d78 <TIMER2_u8PWMGenerate+0xbe>
		}
	}
	else{
		Local_u8ErrorState=NULL_POINTER;
    2d74:	82 e0       	ldi	r24, 0x02	; 2
    2d76:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    2d78:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d7a:	0f 90       	pop	r0
    2d7c:	0f 90       	pop	r0
    2d7e:	0f 90       	pop	r0
    2d80:	0f 90       	pop	r0
    2d82:	cf 91       	pop	r28
    2d84:	df 91       	pop	r29
    2d86:	1f 91       	pop	r17
    2d88:	0f 91       	pop	r16
    2d8a:	ff 90       	pop	r15
    2d8c:	ef 90       	pop	r14
    2d8e:	df 90       	pop	r13
    2d90:	cf 90       	pop	r12
    2d92:	bf 90       	pop	r11
    2d94:	af 90       	pop	r10
    2d96:	9f 90       	pop	r9
    2d98:	8f 90       	pop	r8
    2d9a:	08 95       	ret

00002d9c <TIMER_u8SetCallBack>:


/********************************************************ISRs************************************************************
 ************************************************************************************************************************/

u8 TIMER_u8SetCallBack(u8 Copy_u8InterruptID,void(*Copy_pvCallBackFunc)(void)){
    2d9c:	df 93       	push	r29
    2d9e:	cf 93       	push	r28
    2da0:	00 d0       	rcall	.+0      	; 0x2da2 <TIMER_u8SetCallBack+0x6>
    2da2:	00 d0       	rcall	.+0      	; 0x2da4 <TIMER_u8SetCallBack+0x8>
    2da4:	00 d0       	rcall	.+0      	; 0x2da6 <TIMER_u8SetCallBack+0xa>
    2da6:	cd b7       	in	r28, 0x3d	; 61
    2da8:	de b7       	in	r29, 0x3e	; 62
    2daa:	8a 83       	std	Y+2, r24	; 0x02
    2dac:	7c 83       	std	Y+4, r23	; 0x04
    2dae:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=OK;
    2db0:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvCallBackFunc!=NULL){
    2db2:	8b 81       	ldd	r24, Y+3	; 0x03
    2db4:	9c 81       	ldd	r25, Y+4	; 0x04
    2db6:	00 97       	sbiw	r24, 0x00	; 0
    2db8:	09 f4       	brne	.+2      	; 0x2dbc <TIMER_u8SetCallBack+0x20>
    2dba:	70 c0       	rjmp	.+224    	; 0x2e9c <TIMER_u8SetCallBack+0x100>
		switch(Copy_u8InterruptID){
    2dbc:	8a 81       	ldd	r24, Y+2	; 0x02
    2dbe:	28 2f       	mov	r18, r24
    2dc0:	30 e0       	ldi	r19, 0x00	; 0
    2dc2:	3e 83       	std	Y+6, r19	; 0x06
    2dc4:	2d 83       	std	Y+5, r18	; 0x05
    2dc6:	8d 81       	ldd	r24, Y+5	; 0x05
    2dc8:	9e 81       	ldd	r25, Y+6	; 0x06
    2dca:	84 30       	cpi	r24, 0x04	; 4
    2dcc:	91 05       	cpc	r25, r1
    2dce:	09 f4       	brne	.+2      	; 0x2dd2 <TIMER_u8SetCallBack+0x36>
    2dd0:	3f c0       	rjmp	.+126    	; 0x2e50 <TIMER_u8SetCallBack+0xb4>
    2dd2:	2d 81       	ldd	r18, Y+5	; 0x05
    2dd4:	3e 81       	ldd	r19, Y+6	; 0x06
    2dd6:	25 30       	cpi	r18, 0x05	; 5
    2dd8:	31 05       	cpc	r19, r1
    2dda:	84 f4       	brge	.+32     	; 0x2dfc <TIMER_u8SetCallBack+0x60>
    2ddc:	8d 81       	ldd	r24, Y+5	; 0x05
    2dde:	9e 81       	ldd	r25, Y+6	; 0x06
    2de0:	82 30       	cpi	r24, 0x02	; 2
    2de2:	91 05       	cpc	r25, r1
    2de4:	39 f1       	breq	.+78     	; 0x2e34 <TIMER_u8SetCallBack+0x98>
    2de6:	2d 81       	ldd	r18, Y+5	; 0x05
    2de8:	3e 81       	ldd	r19, Y+6	; 0x06
    2dea:	23 30       	cpi	r18, 0x03	; 3
    2dec:	31 05       	cpc	r19, r1
    2dee:	4c f5       	brge	.+82     	; 0x2e42 <TIMER_u8SetCallBack+0xa6>
    2df0:	8d 81       	ldd	r24, Y+5	; 0x05
    2df2:	9e 81       	ldd	r25, Y+6	; 0x06
    2df4:	81 30       	cpi	r24, 0x01	; 1
    2df6:	91 05       	cpc	r25, r1
    2df8:	b1 f0       	breq	.+44     	; 0x2e26 <TIMER_u8SetCallBack+0x8a>
    2dfa:	4d c0       	rjmp	.+154    	; 0x2e96 <TIMER_u8SetCallBack+0xfa>
    2dfc:	2d 81       	ldd	r18, Y+5	; 0x05
    2dfe:	3e 81       	ldd	r19, Y+6	; 0x06
    2e00:	26 30       	cpi	r18, 0x06	; 6
    2e02:	31 05       	cpc	r19, r1
    2e04:	99 f1       	breq	.+102    	; 0x2e6c <TIMER_u8SetCallBack+0xd0>
    2e06:	8d 81       	ldd	r24, Y+5	; 0x05
    2e08:	9e 81       	ldd	r25, Y+6	; 0x06
    2e0a:	86 30       	cpi	r24, 0x06	; 6
    2e0c:	91 05       	cpc	r25, r1
    2e0e:	3c f1       	brlt	.+78     	; 0x2e5e <TIMER_u8SetCallBack+0xc2>
    2e10:	2d 81       	ldd	r18, Y+5	; 0x05
    2e12:	3e 81       	ldd	r19, Y+6	; 0x06
    2e14:	27 30       	cpi	r18, 0x07	; 7
    2e16:	31 05       	cpc	r19, r1
    2e18:	81 f1       	breq	.+96     	; 0x2e7a <TIMER_u8SetCallBack+0xde>
    2e1a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e1c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e1e:	88 30       	cpi	r24, 0x08	; 8
    2e20:	91 05       	cpc	r25, r1
    2e22:	91 f1       	breq	.+100    	; 0x2e88 <TIMER_u8SetCallBack+0xec>
    2e24:	38 c0       	rjmp	.+112    	; 0x2e96 <TIMER_u8SetCallBack+0xfa>
		case INT_TIMER0_OVF  : TIMER0_pvOVFCallBackFunc   = Copy_pvCallBackFunc; break;
    2e26:	8b 81       	ldd	r24, Y+3	; 0x03
    2e28:	9c 81       	ldd	r25, Y+4	; 0x04
    2e2a:	90 93 9f 00 	sts	0x009F, r25
    2e2e:	80 93 9e 00 	sts	0x009E, r24
    2e32:	36 c0       	rjmp	.+108    	; 0x2ea0 <TIMER_u8SetCallBack+0x104>
		case INT_TIMER0_COMP : TIMER0_pvCOMPCallBackFunc  = Copy_pvCallBackFunc; break;
    2e34:	8b 81       	ldd	r24, Y+3	; 0x03
    2e36:	9c 81       	ldd	r25, Y+4	; 0x04
    2e38:	90 93 a1 00 	sts	0x00A1, r25
    2e3c:	80 93 a0 00 	sts	0x00A0, r24
    2e40:	2f c0       	rjmp	.+94     	; 0x2ea0 <TIMER_u8SetCallBack+0x104>
		case INT_TIMER1_OVF  : TIMER1_pvOVFCallBackFunc   = Copy_pvCallBackFunc; break;
    2e42:	8b 81       	ldd	r24, Y+3	; 0x03
    2e44:	9c 81       	ldd	r25, Y+4	; 0x04
    2e46:	90 93 a3 00 	sts	0x00A3, r25
    2e4a:	80 93 a2 00 	sts	0x00A2, r24
    2e4e:	28 c0       	rjmp	.+80     	; 0x2ea0 <TIMER_u8SetCallBack+0x104>
		case INT_TIMER1_CAPT : TIMER1_pvCAPTCallBackFunc  = Copy_pvCallBackFunc; break;
    2e50:	8b 81       	ldd	r24, Y+3	; 0x03
    2e52:	9c 81       	ldd	r25, Y+4	; 0x04
    2e54:	90 93 a5 00 	sts	0x00A5, r25
    2e58:	80 93 a4 00 	sts	0x00A4, r24
    2e5c:	21 c0       	rjmp	.+66     	; 0x2ea0 <TIMER_u8SetCallBack+0x104>
		case INT_TIMER1A_COMP: TIMER1A_pvCOMPCallBackFunc = Copy_pvCallBackFunc; break;
    2e5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e60:	9c 81       	ldd	r25, Y+4	; 0x04
    2e62:	90 93 a7 00 	sts	0x00A7, r25
    2e66:	80 93 a6 00 	sts	0x00A6, r24
    2e6a:	1a c0       	rjmp	.+52     	; 0x2ea0 <TIMER_u8SetCallBack+0x104>
		case INT_TIMER1B_COMP: TIMER1B_pvCOMPCallBackFunc = Copy_pvCallBackFunc; break;
    2e6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e6e:	9c 81       	ldd	r25, Y+4	; 0x04
    2e70:	90 93 a9 00 	sts	0x00A9, r25
    2e74:	80 93 a8 00 	sts	0x00A8, r24
    2e78:	13 c0       	rjmp	.+38     	; 0x2ea0 <TIMER_u8SetCallBack+0x104>
		case INT_TIMER2_OVF	 : TIMER2_pvOVFCallBackFunc   = Copy_pvCallBackFunc; break;
    2e7a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e7c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e7e:	90 93 ab 00 	sts	0x00AB, r25
    2e82:	80 93 aa 00 	sts	0x00AA, r24
    2e86:	0c c0       	rjmp	.+24     	; 0x2ea0 <TIMER_u8SetCallBack+0x104>
		case INT_TIMER2_COMP : TIMER2_pvCOMPCallBackFunc  = Copy_pvCallBackFunc; break;
    2e88:	8b 81       	ldd	r24, Y+3	; 0x03
    2e8a:	9c 81       	ldd	r25, Y+4	; 0x04
    2e8c:	90 93 ad 00 	sts	0x00AD, r25
    2e90:	80 93 ac 00 	sts	0x00AC, r24
    2e94:	05 c0       	rjmp	.+10     	; 0x2ea0 <TIMER_u8SetCallBack+0x104>
		default: Local_u8ErrorState=NOK;
    2e96:	81 e0       	ldi	r24, 0x01	; 1
    2e98:	89 83       	std	Y+1, r24	; 0x01
    2e9a:	02 c0       	rjmp	.+4      	; 0x2ea0 <TIMER_u8SetCallBack+0x104>
		}
	}
	else{
		Local_u8ErrorState=NULL_POINTER;
    2e9c:	82 e0       	ldi	r24, 0x02	; 2
    2e9e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    2ea0:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ea2:	26 96       	adiw	r28, 0x06	; 6
    2ea4:	0f b6       	in	r0, 0x3f	; 63
    2ea6:	f8 94       	cli
    2ea8:	de bf       	out	0x3e, r29	; 62
    2eaa:	0f be       	out	0x3f, r0	; 63
    2eac:	cd bf       	out	0x3d, r28	; 61
    2eae:	cf 91       	pop	r28
    2eb0:	df 91       	pop	r29
    2eb2:	08 95       	ret

00002eb4 <__vector_4>:



//TIMER2 Compare Match ISR
void __vector_4(void)  __attribute__((signal));
void __vector_4(void){
    2eb4:	1f 92       	push	r1
    2eb6:	0f 92       	push	r0
    2eb8:	0f b6       	in	r0, 0x3f	; 63
    2eba:	0f 92       	push	r0
    2ebc:	11 24       	eor	r1, r1
    2ebe:	2f 93       	push	r18
    2ec0:	3f 93       	push	r19
    2ec2:	4f 93       	push	r20
    2ec4:	5f 93       	push	r21
    2ec6:	6f 93       	push	r22
    2ec8:	7f 93       	push	r23
    2eca:	8f 93       	push	r24
    2ecc:	9f 93       	push	r25
    2ece:	af 93       	push	r26
    2ed0:	bf 93       	push	r27
    2ed2:	ef 93       	push	r30
    2ed4:	ff 93       	push	r31
    2ed6:	df 93       	push	r29
    2ed8:	cf 93       	push	r28
    2eda:	cd b7       	in	r28, 0x3d	; 61
    2edc:	de b7       	in	r29, 0x3e	; 62
	if(TIMER2_pvCOMPCallBackFunc!=NULL){
    2ede:	80 91 ac 00 	lds	r24, 0x00AC
    2ee2:	90 91 ad 00 	lds	r25, 0x00AD
    2ee6:	00 97       	sbiw	r24, 0x00	; 0
    2ee8:	29 f0       	breq	.+10     	; 0x2ef4 <__vector_4+0x40>
		TIMER2_pvCOMPCallBackFunc();
    2eea:	e0 91 ac 00 	lds	r30, 0x00AC
    2eee:	f0 91 ad 00 	lds	r31, 0x00AD
    2ef2:	09 95       	icall
	}
}
    2ef4:	cf 91       	pop	r28
    2ef6:	df 91       	pop	r29
    2ef8:	ff 91       	pop	r31
    2efa:	ef 91       	pop	r30
    2efc:	bf 91       	pop	r27
    2efe:	af 91       	pop	r26
    2f00:	9f 91       	pop	r25
    2f02:	8f 91       	pop	r24
    2f04:	7f 91       	pop	r23
    2f06:	6f 91       	pop	r22
    2f08:	5f 91       	pop	r21
    2f0a:	4f 91       	pop	r20
    2f0c:	3f 91       	pop	r19
    2f0e:	2f 91       	pop	r18
    2f10:	0f 90       	pop	r0
    2f12:	0f be       	out	0x3f, r0	; 63
    2f14:	0f 90       	pop	r0
    2f16:	1f 90       	pop	r1
    2f18:	18 95       	reti

00002f1a <__vector_5>:

//TIMER2 Overflow ISR
void __vector_5(void)  __attribute__((signal));
void __vector_5(void){
    2f1a:	1f 92       	push	r1
    2f1c:	0f 92       	push	r0
    2f1e:	0f b6       	in	r0, 0x3f	; 63
    2f20:	0f 92       	push	r0
    2f22:	11 24       	eor	r1, r1
    2f24:	2f 93       	push	r18
    2f26:	3f 93       	push	r19
    2f28:	4f 93       	push	r20
    2f2a:	5f 93       	push	r21
    2f2c:	6f 93       	push	r22
    2f2e:	7f 93       	push	r23
    2f30:	8f 93       	push	r24
    2f32:	9f 93       	push	r25
    2f34:	af 93       	push	r26
    2f36:	bf 93       	push	r27
    2f38:	ef 93       	push	r30
    2f3a:	ff 93       	push	r31
    2f3c:	df 93       	push	r29
    2f3e:	cf 93       	push	r28
    2f40:	cd b7       	in	r28, 0x3d	; 61
    2f42:	de b7       	in	r29, 0x3e	; 62
	if(TIMER2_pvOVFCallBackFunc!=NULL){
    2f44:	80 91 aa 00 	lds	r24, 0x00AA
    2f48:	90 91 ab 00 	lds	r25, 0x00AB
    2f4c:	00 97       	sbiw	r24, 0x00	; 0
    2f4e:	29 f0       	breq	.+10     	; 0x2f5a <__vector_5+0x40>
		TIMER2_pvOVFCallBackFunc();
    2f50:	e0 91 aa 00 	lds	r30, 0x00AA
    2f54:	f0 91 ab 00 	lds	r31, 0x00AB
    2f58:	09 95       	icall
	}
}
    2f5a:	cf 91       	pop	r28
    2f5c:	df 91       	pop	r29
    2f5e:	ff 91       	pop	r31
    2f60:	ef 91       	pop	r30
    2f62:	bf 91       	pop	r27
    2f64:	af 91       	pop	r26
    2f66:	9f 91       	pop	r25
    2f68:	8f 91       	pop	r24
    2f6a:	7f 91       	pop	r23
    2f6c:	6f 91       	pop	r22
    2f6e:	5f 91       	pop	r21
    2f70:	4f 91       	pop	r20
    2f72:	3f 91       	pop	r19
    2f74:	2f 91       	pop	r18
    2f76:	0f 90       	pop	r0
    2f78:	0f be       	out	0x3f, r0	; 63
    2f7a:	0f 90       	pop	r0
    2f7c:	1f 90       	pop	r1
    2f7e:	18 95       	reti

00002f80 <__vector_6>:

//TIMER1 Capture Event ISR
void __vector_6(void)  __attribute__((signal));
void __vector_6(void){
    2f80:	1f 92       	push	r1
    2f82:	0f 92       	push	r0
    2f84:	0f b6       	in	r0, 0x3f	; 63
    2f86:	0f 92       	push	r0
    2f88:	11 24       	eor	r1, r1
    2f8a:	2f 93       	push	r18
    2f8c:	3f 93       	push	r19
    2f8e:	4f 93       	push	r20
    2f90:	5f 93       	push	r21
    2f92:	6f 93       	push	r22
    2f94:	7f 93       	push	r23
    2f96:	8f 93       	push	r24
    2f98:	9f 93       	push	r25
    2f9a:	af 93       	push	r26
    2f9c:	bf 93       	push	r27
    2f9e:	ef 93       	push	r30
    2fa0:	ff 93       	push	r31
    2fa2:	df 93       	push	r29
    2fa4:	cf 93       	push	r28
    2fa6:	cd b7       	in	r28, 0x3d	; 61
    2fa8:	de b7       	in	r29, 0x3e	; 62
	if(TIMER1_pvCAPTCallBackFunc!=NULL){
    2faa:	80 91 a4 00 	lds	r24, 0x00A4
    2fae:	90 91 a5 00 	lds	r25, 0x00A5
    2fb2:	00 97       	sbiw	r24, 0x00	; 0
    2fb4:	29 f0       	breq	.+10     	; 0x2fc0 <__vector_6+0x40>
		TIMER1_pvCAPTCallBackFunc();
    2fb6:	e0 91 a4 00 	lds	r30, 0x00A4
    2fba:	f0 91 a5 00 	lds	r31, 0x00A5
    2fbe:	09 95       	icall
	}
}
    2fc0:	cf 91       	pop	r28
    2fc2:	df 91       	pop	r29
    2fc4:	ff 91       	pop	r31
    2fc6:	ef 91       	pop	r30
    2fc8:	bf 91       	pop	r27
    2fca:	af 91       	pop	r26
    2fcc:	9f 91       	pop	r25
    2fce:	8f 91       	pop	r24
    2fd0:	7f 91       	pop	r23
    2fd2:	6f 91       	pop	r22
    2fd4:	5f 91       	pop	r21
    2fd6:	4f 91       	pop	r20
    2fd8:	3f 91       	pop	r19
    2fda:	2f 91       	pop	r18
    2fdc:	0f 90       	pop	r0
    2fde:	0f be       	out	0x3f, r0	; 63
    2fe0:	0f 90       	pop	r0
    2fe2:	1f 90       	pop	r1
    2fe4:	18 95       	reti

00002fe6 <__vector_7>:


//TIMER1 Compare Match A ISR
void __vector_7(void)  __attribute__((signal));
void __vector_7(void){
    2fe6:	1f 92       	push	r1
    2fe8:	0f 92       	push	r0
    2fea:	0f b6       	in	r0, 0x3f	; 63
    2fec:	0f 92       	push	r0
    2fee:	11 24       	eor	r1, r1
    2ff0:	2f 93       	push	r18
    2ff2:	3f 93       	push	r19
    2ff4:	4f 93       	push	r20
    2ff6:	5f 93       	push	r21
    2ff8:	6f 93       	push	r22
    2ffa:	7f 93       	push	r23
    2ffc:	8f 93       	push	r24
    2ffe:	9f 93       	push	r25
    3000:	af 93       	push	r26
    3002:	bf 93       	push	r27
    3004:	ef 93       	push	r30
    3006:	ff 93       	push	r31
    3008:	df 93       	push	r29
    300a:	cf 93       	push	r28
    300c:	cd b7       	in	r28, 0x3d	; 61
    300e:	de b7       	in	r29, 0x3e	; 62
	if(TIMER1A_pvCOMPCallBackFunc!=NULL){
    3010:	80 91 a6 00 	lds	r24, 0x00A6
    3014:	90 91 a7 00 	lds	r25, 0x00A7
    3018:	00 97       	sbiw	r24, 0x00	; 0
    301a:	29 f0       	breq	.+10     	; 0x3026 <__vector_7+0x40>
		TIMER1A_pvCOMPCallBackFunc();
    301c:	e0 91 a6 00 	lds	r30, 0x00A6
    3020:	f0 91 a7 00 	lds	r31, 0x00A7
    3024:	09 95       	icall
	}
}
    3026:	cf 91       	pop	r28
    3028:	df 91       	pop	r29
    302a:	ff 91       	pop	r31
    302c:	ef 91       	pop	r30
    302e:	bf 91       	pop	r27
    3030:	af 91       	pop	r26
    3032:	9f 91       	pop	r25
    3034:	8f 91       	pop	r24
    3036:	7f 91       	pop	r23
    3038:	6f 91       	pop	r22
    303a:	5f 91       	pop	r21
    303c:	4f 91       	pop	r20
    303e:	3f 91       	pop	r19
    3040:	2f 91       	pop	r18
    3042:	0f 90       	pop	r0
    3044:	0f be       	out	0x3f, r0	; 63
    3046:	0f 90       	pop	r0
    3048:	1f 90       	pop	r1
    304a:	18 95       	reti

0000304c <__vector_8>:

//TIMER1 Compare Match B ISR
void __vector_8(void)  __attribute__((signal));
void __vector_8(void){
    304c:	1f 92       	push	r1
    304e:	0f 92       	push	r0
    3050:	0f b6       	in	r0, 0x3f	; 63
    3052:	0f 92       	push	r0
    3054:	11 24       	eor	r1, r1
    3056:	2f 93       	push	r18
    3058:	3f 93       	push	r19
    305a:	4f 93       	push	r20
    305c:	5f 93       	push	r21
    305e:	6f 93       	push	r22
    3060:	7f 93       	push	r23
    3062:	8f 93       	push	r24
    3064:	9f 93       	push	r25
    3066:	af 93       	push	r26
    3068:	bf 93       	push	r27
    306a:	ef 93       	push	r30
    306c:	ff 93       	push	r31
    306e:	df 93       	push	r29
    3070:	cf 93       	push	r28
    3072:	cd b7       	in	r28, 0x3d	; 61
    3074:	de b7       	in	r29, 0x3e	; 62
	if(TIMER1B_pvCOMPCallBackFunc!=NULL){
    3076:	80 91 a8 00 	lds	r24, 0x00A8
    307a:	90 91 a9 00 	lds	r25, 0x00A9
    307e:	00 97       	sbiw	r24, 0x00	; 0
    3080:	29 f0       	breq	.+10     	; 0x308c <__vector_8+0x40>
		TIMER1B_pvCOMPCallBackFunc();
    3082:	e0 91 a8 00 	lds	r30, 0x00A8
    3086:	f0 91 a9 00 	lds	r31, 0x00A9
    308a:	09 95       	icall
	}
}
    308c:	cf 91       	pop	r28
    308e:	df 91       	pop	r29
    3090:	ff 91       	pop	r31
    3092:	ef 91       	pop	r30
    3094:	bf 91       	pop	r27
    3096:	af 91       	pop	r26
    3098:	9f 91       	pop	r25
    309a:	8f 91       	pop	r24
    309c:	7f 91       	pop	r23
    309e:	6f 91       	pop	r22
    30a0:	5f 91       	pop	r21
    30a2:	4f 91       	pop	r20
    30a4:	3f 91       	pop	r19
    30a6:	2f 91       	pop	r18
    30a8:	0f 90       	pop	r0
    30aa:	0f be       	out	0x3f, r0	; 63
    30ac:	0f 90       	pop	r0
    30ae:	1f 90       	pop	r1
    30b0:	18 95       	reti

000030b2 <__vector_9>:

//TIMER1 Overflow ISR
void __vector_9(void)  __attribute__((signal));
void __vector_9(void){
    30b2:	1f 92       	push	r1
    30b4:	0f 92       	push	r0
    30b6:	0f b6       	in	r0, 0x3f	; 63
    30b8:	0f 92       	push	r0
    30ba:	11 24       	eor	r1, r1
    30bc:	2f 93       	push	r18
    30be:	3f 93       	push	r19
    30c0:	4f 93       	push	r20
    30c2:	5f 93       	push	r21
    30c4:	6f 93       	push	r22
    30c6:	7f 93       	push	r23
    30c8:	8f 93       	push	r24
    30ca:	9f 93       	push	r25
    30cc:	af 93       	push	r26
    30ce:	bf 93       	push	r27
    30d0:	ef 93       	push	r30
    30d2:	ff 93       	push	r31
    30d4:	df 93       	push	r29
    30d6:	cf 93       	push	r28
    30d8:	cd b7       	in	r28, 0x3d	; 61
    30da:	de b7       	in	r29, 0x3e	; 62
	if(TIMER1_pvOVFCallBackFunc!=NULL){
    30dc:	80 91 a2 00 	lds	r24, 0x00A2
    30e0:	90 91 a3 00 	lds	r25, 0x00A3
    30e4:	00 97       	sbiw	r24, 0x00	; 0
    30e6:	29 f0       	breq	.+10     	; 0x30f2 <__vector_9+0x40>
		TIMER1_pvOVFCallBackFunc();
    30e8:	e0 91 a2 00 	lds	r30, 0x00A2
    30ec:	f0 91 a3 00 	lds	r31, 0x00A3
    30f0:	09 95       	icall
	}
}
    30f2:	cf 91       	pop	r28
    30f4:	df 91       	pop	r29
    30f6:	ff 91       	pop	r31
    30f8:	ef 91       	pop	r30
    30fa:	bf 91       	pop	r27
    30fc:	af 91       	pop	r26
    30fe:	9f 91       	pop	r25
    3100:	8f 91       	pop	r24
    3102:	7f 91       	pop	r23
    3104:	6f 91       	pop	r22
    3106:	5f 91       	pop	r21
    3108:	4f 91       	pop	r20
    310a:	3f 91       	pop	r19
    310c:	2f 91       	pop	r18
    310e:	0f 90       	pop	r0
    3110:	0f be       	out	0x3f, r0	; 63
    3112:	0f 90       	pop	r0
    3114:	1f 90       	pop	r1
    3116:	18 95       	reti

00003118 <__vector_10>:

//TIMER0 Compare Match ISR
void __vector_10(void)  __attribute__((signal));
void __vector_10(void){
    3118:	1f 92       	push	r1
    311a:	0f 92       	push	r0
    311c:	0f b6       	in	r0, 0x3f	; 63
    311e:	0f 92       	push	r0
    3120:	11 24       	eor	r1, r1
    3122:	2f 93       	push	r18
    3124:	3f 93       	push	r19
    3126:	4f 93       	push	r20
    3128:	5f 93       	push	r21
    312a:	6f 93       	push	r22
    312c:	7f 93       	push	r23
    312e:	8f 93       	push	r24
    3130:	9f 93       	push	r25
    3132:	af 93       	push	r26
    3134:	bf 93       	push	r27
    3136:	ef 93       	push	r30
    3138:	ff 93       	push	r31
    313a:	df 93       	push	r29
    313c:	cf 93       	push	r28
    313e:	cd b7       	in	r28, 0x3d	; 61
    3140:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_pvCOMPCallBackFunc!=NULL){
    3142:	80 91 a0 00 	lds	r24, 0x00A0
    3146:	90 91 a1 00 	lds	r25, 0x00A1
    314a:	00 97       	sbiw	r24, 0x00	; 0
    314c:	29 f0       	breq	.+10     	; 0x3158 <__vector_10+0x40>
		TIMER0_pvCOMPCallBackFunc();
    314e:	e0 91 a0 00 	lds	r30, 0x00A0
    3152:	f0 91 a1 00 	lds	r31, 0x00A1
    3156:	09 95       	icall
	}
}
    3158:	cf 91       	pop	r28
    315a:	df 91       	pop	r29
    315c:	ff 91       	pop	r31
    315e:	ef 91       	pop	r30
    3160:	bf 91       	pop	r27
    3162:	af 91       	pop	r26
    3164:	9f 91       	pop	r25
    3166:	8f 91       	pop	r24
    3168:	7f 91       	pop	r23
    316a:	6f 91       	pop	r22
    316c:	5f 91       	pop	r21
    316e:	4f 91       	pop	r20
    3170:	3f 91       	pop	r19
    3172:	2f 91       	pop	r18
    3174:	0f 90       	pop	r0
    3176:	0f be       	out	0x3f, r0	; 63
    3178:	0f 90       	pop	r0
    317a:	1f 90       	pop	r1
    317c:	18 95       	reti

0000317e <__vector_11>:

//TIMER0 Overflow ISR
void __vector_11(void)  __attribute__((signal));
void __vector_11(void){
    317e:	1f 92       	push	r1
    3180:	0f 92       	push	r0
    3182:	0f b6       	in	r0, 0x3f	; 63
    3184:	0f 92       	push	r0
    3186:	11 24       	eor	r1, r1
    3188:	2f 93       	push	r18
    318a:	3f 93       	push	r19
    318c:	4f 93       	push	r20
    318e:	5f 93       	push	r21
    3190:	6f 93       	push	r22
    3192:	7f 93       	push	r23
    3194:	8f 93       	push	r24
    3196:	9f 93       	push	r25
    3198:	af 93       	push	r26
    319a:	bf 93       	push	r27
    319c:	ef 93       	push	r30
    319e:	ff 93       	push	r31
    31a0:	df 93       	push	r29
    31a2:	cf 93       	push	r28
    31a4:	cd b7       	in	r28, 0x3d	; 61
    31a6:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_pvOVFCallBackFunc!=NULL){
    31a8:	80 91 9e 00 	lds	r24, 0x009E
    31ac:	90 91 9f 00 	lds	r25, 0x009F
    31b0:	00 97       	sbiw	r24, 0x00	; 0
    31b2:	29 f0       	breq	.+10     	; 0x31be <__vector_11+0x40>
		TIMER0_pvOVFCallBackFunc();
    31b4:	e0 91 9e 00 	lds	r30, 0x009E
    31b8:	f0 91 9f 00 	lds	r31, 0x009F
    31bc:	09 95       	icall
	}
}
    31be:	cf 91       	pop	r28
    31c0:	df 91       	pop	r29
    31c2:	ff 91       	pop	r31
    31c4:	ef 91       	pop	r30
    31c6:	bf 91       	pop	r27
    31c8:	af 91       	pop	r26
    31ca:	9f 91       	pop	r25
    31cc:	8f 91       	pop	r24
    31ce:	7f 91       	pop	r23
    31d0:	6f 91       	pop	r22
    31d2:	5f 91       	pop	r21
    31d4:	4f 91       	pop	r20
    31d6:	3f 91       	pop	r19
    31d8:	2f 91       	pop	r18
    31da:	0f 90       	pop	r0
    31dc:	0f be       	out	0x3f, r0	; 63
    31de:	0f 90       	pop	r0
    31e0:	1f 90       	pop	r1
    31e2:	18 95       	reti

000031e4 <main>:
void ICU_SW(void);

static u16 PeriodTicks=0;
static u16 OnTimeTicks=0;

void main(void){
    31e4:	df 93       	push	r29
    31e6:	cf 93       	push	r28
    31e8:	cd b7       	in	r28, 0x3d	; 61
    31ea:	de b7       	in	r29, 0x3e	; 62
    31ec:	67 97       	sbiw	r28, 0x17	; 23
    31ee:	0f b6       	in	r0, 0x3f	; 63
    31f0:	f8 94       	cli
    31f2:	de bf       	out	0x3e, r29	; 62
    31f4:	0f be       	out	0x3f, r0	; 63
    31f6:	cd bf       	out	0x3d, r28	; 61
	Timer1_t Local_Timer1={TIMER1_NORMAL,PRSCLR_DIV_BY_8,OCM_DISCONNECT,OCM_DISCONNECT,INT_DISABLE,INT_DISABLE,INT_DISABLE,INT_DISABLE};
    31f8:	ce 01       	movw	r24, r28
    31fa:	01 96       	adiw	r24, 0x01	; 1
    31fc:	9f 87       	std	Y+15, r25	; 0x0f
    31fe:	8e 87       	std	Y+14, r24	; 0x0e
    3200:	ef e8       	ldi	r30, 0x8F	; 143
    3202:	f0 e0       	ldi	r31, 0x00	; 0
    3204:	f9 8b       	std	Y+17, r31	; 0x11
    3206:	e8 8b       	std	Y+16, r30	; 0x10
    3208:	f8 e0       	ldi	r31, 0x08	; 8
    320a:	fa 8b       	std	Y+18, r31	; 0x12
    320c:	e8 89       	ldd	r30, Y+16	; 0x10
    320e:	f9 89       	ldd	r31, Y+17	; 0x11
    3210:	00 80       	ld	r0, Z
    3212:	88 89       	ldd	r24, Y+16	; 0x10
    3214:	99 89       	ldd	r25, Y+17	; 0x11
    3216:	01 96       	adiw	r24, 0x01	; 1
    3218:	99 8b       	std	Y+17, r25	; 0x11
    321a:	88 8b       	std	Y+16, r24	; 0x10
    321c:	ee 85       	ldd	r30, Y+14	; 0x0e
    321e:	ff 85       	ldd	r31, Y+15	; 0x0f
    3220:	00 82       	st	Z, r0
    3222:	8e 85       	ldd	r24, Y+14	; 0x0e
    3224:	9f 85       	ldd	r25, Y+15	; 0x0f
    3226:	01 96       	adiw	r24, 0x01	; 1
    3228:	9f 87       	std	Y+15, r25	; 0x0f
    322a:	8e 87       	std	Y+14, r24	; 0x0e
    322c:	9a 89       	ldd	r25, Y+18	; 0x12
    322e:	91 50       	subi	r25, 0x01	; 1
    3230:	9a 8b       	std	Y+18, r25	; 0x12
    3232:	ea 89       	ldd	r30, Y+18	; 0x12
    3234:	ee 23       	and	r30, r30
    3236:	51 f7       	brne	.-44     	; 0x320c <main+0x28>
	Timer_t Local_Timer2={TIMER_FAST_PWM,PRSCLR_DIV_BY_8,OCM_FAST_PWM_NON_INVERTED,INT_DISABLE,INT_DISABLE};
    3238:	ce 01       	movw	r24, r28
    323a:	09 96       	adiw	r24, 0x09	; 9
    323c:	9c 8b       	std	Y+20, r25	; 0x14
    323e:	8b 8b       	std	Y+19, r24	; 0x13
    3240:	ea e8       	ldi	r30, 0x8A	; 138
    3242:	f0 e0       	ldi	r31, 0x00	; 0
    3244:	fe 8b       	std	Y+22, r31	; 0x16
    3246:	ed 8b       	std	Y+21, r30	; 0x15
    3248:	f5 e0       	ldi	r31, 0x05	; 5
    324a:	ff 8b       	std	Y+23, r31	; 0x17
    324c:	ed 89       	ldd	r30, Y+21	; 0x15
    324e:	fe 89       	ldd	r31, Y+22	; 0x16
    3250:	00 80       	ld	r0, Z
    3252:	8d 89       	ldd	r24, Y+21	; 0x15
    3254:	9e 89       	ldd	r25, Y+22	; 0x16
    3256:	01 96       	adiw	r24, 0x01	; 1
    3258:	9e 8b       	std	Y+22, r25	; 0x16
    325a:	8d 8b       	std	Y+21, r24	; 0x15
    325c:	eb 89       	ldd	r30, Y+19	; 0x13
    325e:	fc 89       	ldd	r31, Y+20	; 0x14
    3260:	00 82       	st	Z, r0
    3262:	8b 89       	ldd	r24, Y+19	; 0x13
    3264:	9c 89       	ldd	r25, Y+20	; 0x14
    3266:	01 96       	adiw	r24, 0x01	; 1
    3268:	9c 8b       	std	Y+20, r25	; 0x14
    326a:	8b 8b       	std	Y+19, r24	; 0x13
    326c:	9f 89       	ldd	r25, Y+23	; 0x17
    326e:	91 50       	subi	r25, 0x01	; 1
    3270:	9f 8b       	std	Y+23, r25	; 0x17
    3272:	ef 89       	ldd	r30, Y+23	; 0x17
    3274:	ee 23       	and	r30, r30
    3276:	51 f7       	brne	.-44     	; 0x324c <main+0x68>

	PORT_voidInit();
    3278:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <PORT_voidInit>


	EXTI_u8Int0SetCallBack(&ICU_SW);
    327c:	84 e8       	ldi	r24, 0x84	; 132
    327e:	99 e1       	ldi	r25, 0x19	; 25
    3280:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <EXTI_u8Int0SetCallBack>
	EXTI_voidInt0Init();
    3284:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <EXTI_voidInt0Init>
	CLCD_voidInit();
    3288:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <CLCD_voidInit>
	//	TIMER2_u8Init(&Local_Timer2);
	//	TIMER_u8SetCompMatch(TIMER2,64);
	TIMER1_u8Init(&Local_Timer1);
    328c:	ce 01       	movw	r24, r28
    328e:	01 96       	adiw	r24, 0x01	; 1
    3290:	0e 94 a8 10 	call	0x2150	; 0x2150 <TIMER1_u8Init>
	TIMER2_u8PWMGenerate(&Local_Timer2,25);
    3294:	ce 01       	movw	r24, r28
    3296:	09 96       	adiw	r24, 0x09	; 9
    3298:	69 e1       	ldi	r22, 0x19	; 25
    329a:	0e 94 5d 16 	call	0x2cba	; 0x2cba <TIMER2_u8PWMGenerate>
	GIE_voidEnable();
    329e:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <GIE_voidEnable>
	while((PeriodTicks==0) && (OnTimeTicks==0));
    32a2:	80 91 ae 00 	lds	r24, 0x00AE
    32a6:	90 91 af 00 	lds	r25, 0x00AF
    32aa:	00 97       	sbiw	r24, 0x00	; 0
    32ac:	31 f4       	brne	.+12     	; 0x32ba <main+0xd6>
    32ae:	80 91 b0 00 	lds	r24, 0x00B0
    32b2:	90 91 b1 00 	lds	r25, 0x00B1
    32b6:	00 97       	sbiw	r24, 0x00	; 0
    32b8:	a1 f3       	breq	.-24     	; 0x32a2 <main+0xbe>
	CLCD_voidGoToXY(0,0);
    32ba:	80 e0       	ldi	r24, 0x00	; 0
    32bc:	60 e0       	ldi	r22, 0x00	; 0
    32be:	0e 94 89 07 	call	0xf12	; 0xf12 <CLCD_voidGoToXY>
	CLCD_voidSendString("Period Ticks=");
    32c2:	80 e6       	ldi	r24, 0x60	; 96
    32c4:	90 e0       	ldi	r25, 0x00	; 0
    32c6:	0e 94 df 06 	call	0xdbe	; 0xdbe <CLCD_voidSendString>
	CLCD_voidSendNumber(PeriodTicks);
    32ca:	80 91 ae 00 	lds	r24, 0x00AE
    32ce:	90 91 af 00 	lds	r25, 0x00AF
    32d2:	cc 01       	movw	r24, r24
    32d4:	a0 e0       	ldi	r26, 0x00	; 0
    32d6:	b0 e0       	ldi	r27, 0x00	; 0
    32d8:	bc 01       	movw	r22, r24
    32da:	cd 01       	movw	r24, r26
    32dc:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <CLCD_voidSendNumber>
	CLCD_voidGoToXY(1,0);
    32e0:	81 e0       	ldi	r24, 0x01	; 1
    32e2:	60 e0       	ldi	r22, 0x00	; 0
    32e4:	0e 94 89 07 	call	0xf12	; 0xf12 <CLCD_voidGoToXY>
	CLCD_voidSendString("On Ticks=");
    32e8:	8e e6       	ldi	r24, 0x6E	; 110
    32ea:	90 e0       	ldi	r25, 0x00	; 0
    32ec:	0e 94 df 06 	call	0xdbe	; 0xdbe <CLCD_voidSendString>
	CLCD_voidSendNumber(OnTimeTicks);
    32f0:	80 91 b0 00 	lds	r24, 0x00B0
    32f4:	90 91 b1 00 	lds	r25, 0x00B1
    32f8:	cc 01       	movw	r24, r24
    32fa:	a0 e0       	ldi	r26, 0x00	; 0
    32fc:	b0 e0       	ldi	r27, 0x00	; 0
    32fe:	bc 01       	movw	r22, r24
    3300:	cd 01       	movw	r24, r26
    3302:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <CLCD_voidSendNumber>
    3306:	ff cf       	rjmp	.-2      	; 0x3306 <main+0x122>

00003308 <ICU_SW>:
	}
}



void ICU_SW(void){
    3308:	df 93       	push	r29
    330a:	cf 93       	push	r28
    330c:	cd b7       	in	r28, 0x3d	; 61
    330e:	de b7       	in	r29, 0x3e	; 62
	static u8 Local_u8Counter=0;
	Local_u8Counter++;
    3310:	80 91 b2 00 	lds	r24, 0x00B2
    3314:	8f 5f       	subi	r24, 0xFF	; 255
    3316:	80 93 b2 00 	sts	0x00B2, r24

	if(Local_u8Counter==1){
    331a:	80 91 b2 00 	lds	r24, 0x00B2
    331e:	81 30       	cpi	r24, 0x01	; 1
    3320:	31 f4       	brne	.+12     	; 0x332e <ICU_SW+0x26>
		TIMER_u8SetTimerVal(TIMER1A,0);
    3322:	81 e0       	ldi	r24, 0x01	; 1
    3324:	60 e0       	ldi	r22, 0x00	; 0
    3326:	70 e0       	ldi	r23, 0x00	; 0
    3328:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <TIMER_u8SetTimerVal>
    332c:	2d c0       	rjmp	.+90     	; 0x3388 <ICU_SW+0x80>
	}
	else if(Local_u8Counter==2){
    332e:	80 91 b2 00 	lds	r24, 0x00B2
    3332:	82 30       	cpi	r24, 0x02	; 2
    3334:	59 f4       	brne	.+22     	; 0x334c <ICU_SW+0x44>
		TIMER_u8GetTimerVal(TIMER1A,&PeriodTicks);
    3336:	2e ea       	ldi	r18, 0xAE	; 174
    3338:	30 e0       	ldi	r19, 0x00	; 0
    333a:	81 e0       	ldi	r24, 0x01	; 1
    333c:	b9 01       	movw	r22, r18
    333e:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <TIMER_u8GetTimerVal>
		EXTI_u8SetSenseControl(EXTI_INT0,EXTI_FALLING_EDGE);
    3342:	81 e0       	ldi	r24, 0x01	; 1
    3344:	63 e0       	ldi	r22, 0x03	; 3
    3346:	0e 94 1e 0b 	call	0x163c	; 0x163c <EXTI_u8SetSenseControl>
    334a:	1e c0       	rjmp	.+60     	; 0x3388 <ICU_SW+0x80>
	}
	else if(Local_u8Counter==3){
    334c:	80 91 b2 00 	lds	r24, 0x00B2
    3350:	83 30       	cpi	r24, 0x03	; 3
    3352:	d1 f4       	brne	.+52     	; 0x3388 <ICU_SW+0x80>
		TIMER_u8GetTimerVal(TIMER1A,&OnTimeTicks);
    3354:	20 eb       	ldi	r18, 0xB0	; 176
    3356:	30 e0       	ldi	r19, 0x00	; 0
    3358:	81 e0       	ldi	r24, 0x01	; 1
    335a:	b9 01       	movw	r22, r18
    335c:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <TIMER_u8GetTimerVal>
		OnTimeTicks-=PeriodTicks;
    3360:	20 91 b0 00 	lds	r18, 0x00B0
    3364:	30 91 b1 00 	lds	r19, 0x00B1
    3368:	80 91 ae 00 	lds	r24, 0x00AE
    336c:	90 91 af 00 	lds	r25, 0x00AF
    3370:	a9 01       	movw	r20, r18
    3372:	48 1b       	sub	r20, r24
    3374:	59 0b       	sbc	r21, r25
    3376:	ca 01       	movw	r24, r20
    3378:	90 93 b1 00 	sts	0x00B1, r25
    337c:	80 93 b0 00 	sts	0x00B0, r24
		EXTI_u8SetInterruptStatus(EXTI_INT0,EXTI_DISABLE);
    3380:	81 e0       	ldi	r24, 0x01	; 1
    3382:	62 e0       	ldi	r22, 0x02	; 2
    3384:	0e 94 19 0c 	call	0x1832	; 0x1832 <EXTI_u8SetInterruptStatus>
	}
}
    3388:	cf 91       	pop	r28
    338a:	df 91       	pop	r29
    338c:	08 95       	ret

0000338e <__mulsi3>:
    338e:	62 9f       	mul	r22, r18
    3390:	d0 01       	movw	r26, r0
    3392:	73 9f       	mul	r23, r19
    3394:	f0 01       	movw	r30, r0
    3396:	82 9f       	mul	r24, r18
    3398:	e0 0d       	add	r30, r0
    339a:	f1 1d       	adc	r31, r1
    339c:	64 9f       	mul	r22, r20
    339e:	e0 0d       	add	r30, r0
    33a0:	f1 1d       	adc	r31, r1
    33a2:	92 9f       	mul	r25, r18
    33a4:	f0 0d       	add	r31, r0
    33a6:	83 9f       	mul	r24, r19
    33a8:	f0 0d       	add	r31, r0
    33aa:	74 9f       	mul	r23, r20
    33ac:	f0 0d       	add	r31, r0
    33ae:	65 9f       	mul	r22, r21
    33b0:	f0 0d       	add	r31, r0
    33b2:	99 27       	eor	r25, r25
    33b4:	72 9f       	mul	r23, r18
    33b6:	b0 0d       	add	r27, r0
    33b8:	e1 1d       	adc	r30, r1
    33ba:	f9 1f       	adc	r31, r25
    33bc:	63 9f       	mul	r22, r19
    33be:	b0 0d       	add	r27, r0
    33c0:	e1 1d       	adc	r30, r1
    33c2:	f9 1f       	adc	r31, r25
    33c4:	bd 01       	movw	r22, r26
    33c6:	cf 01       	movw	r24, r30
    33c8:	11 24       	eor	r1, r1
    33ca:	08 95       	ret

000033cc <__udivmodhi4>:
    33cc:	aa 1b       	sub	r26, r26
    33ce:	bb 1b       	sub	r27, r27
    33d0:	51 e1       	ldi	r21, 0x11	; 17
    33d2:	07 c0       	rjmp	.+14     	; 0x33e2 <__udivmodhi4_ep>

000033d4 <__udivmodhi4_loop>:
    33d4:	aa 1f       	adc	r26, r26
    33d6:	bb 1f       	adc	r27, r27
    33d8:	a6 17       	cp	r26, r22
    33da:	b7 07       	cpc	r27, r23
    33dc:	10 f0       	brcs	.+4      	; 0x33e2 <__udivmodhi4_ep>
    33de:	a6 1b       	sub	r26, r22
    33e0:	b7 0b       	sbc	r27, r23

000033e2 <__udivmodhi4_ep>:
    33e2:	88 1f       	adc	r24, r24
    33e4:	99 1f       	adc	r25, r25
    33e6:	5a 95       	dec	r21
    33e8:	a9 f7       	brne	.-22     	; 0x33d4 <__udivmodhi4_loop>
    33ea:	80 95       	com	r24
    33ec:	90 95       	com	r25
    33ee:	bc 01       	movw	r22, r24
    33f0:	cd 01       	movw	r24, r26
    33f2:	08 95       	ret

000033f4 <__udivmodsi4>:
    33f4:	a1 e2       	ldi	r26, 0x21	; 33
    33f6:	1a 2e       	mov	r1, r26
    33f8:	aa 1b       	sub	r26, r26
    33fa:	bb 1b       	sub	r27, r27
    33fc:	fd 01       	movw	r30, r26
    33fe:	0d c0       	rjmp	.+26     	; 0x341a <__udivmodsi4_ep>

00003400 <__udivmodsi4_loop>:
    3400:	aa 1f       	adc	r26, r26
    3402:	bb 1f       	adc	r27, r27
    3404:	ee 1f       	adc	r30, r30
    3406:	ff 1f       	adc	r31, r31
    3408:	a2 17       	cp	r26, r18
    340a:	b3 07       	cpc	r27, r19
    340c:	e4 07       	cpc	r30, r20
    340e:	f5 07       	cpc	r31, r21
    3410:	20 f0       	brcs	.+8      	; 0x341a <__udivmodsi4_ep>
    3412:	a2 1b       	sub	r26, r18
    3414:	b3 0b       	sbc	r27, r19
    3416:	e4 0b       	sbc	r30, r20
    3418:	f5 0b       	sbc	r31, r21

0000341a <__udivmodsi4_ep>:
    341a:	66 1f       	adc	r22, r22
    341c:	77 1f       	adc	r23, r23
    341e:	88 1f       	adc	r24, r24
    3420:	99 1f       	adc	r25, r25
    3422:	1a 94       	dec	r1
    3424:	69 f7       	brne	.-38     	; 0x3400 <__udivmodsi4_loop>
    3426:	60 95       	com	r22
    3428:	70 95       	com	r23
    342a:	80 95       	com	r24
    342c:	90 95       	com	r25
    342e:	9b 01       	movw	r18, r22
    3430:	ac 01       	movw	r20, r24
    3432:	bd 01       	movw	r22, r26
    3434:	cf 01       	movw	r24, r30
    3436:	08 95       	ret

00003438 <__divmodsi4>:
    3438:	97 fb       	bst	r25, 7
    343a:	09 2e       	mov	r0, r25
    343c:	05 26       	eor	r0, r21
    343e:	0e d0       	rcall	.+28     	; 0x345c <__divmodsi4_neg1>
    3440:	57 fd       	sbrc	r21, 7
    3442:	04 d0       	rcall	.+8      	; 0x344c <__divmodsi4_neg2>
    3444:	d7 df       	rcall	.-82     	; 0x33f4 <__udivmodsi4>
    3446:	0a d0       	rcall	.+20     	; 0x345c <__divmodsi4_neg1>
    3448:	00 1c       	adc	r0, r0
    344a:	38 f4       	brcc	.+14     	; 0x345a <__divmodsi4_exit>

0000344c <__divmodsi4_neg2>:
    344c:	50 95       	com	r21
    344e:	40 95       	com	r20
    3450:	30 95       	com	r19
    3452:	21 95       	neg	r18
    3454:	3f 4f       	sbci	r19, 0xFF	; 255
    3456:	4f 4f       	sbci	r20, 0xFF	; 255
    3458:	5f 4f       	sbci	r21, 0xFF	; 255

0000345a <__divmodsi4_exit>:
    345a:	08 95       	ret

0000345c <__divmodsi4_neg1>:
    345c:	f6 f7       	brtc	.-4      	; 0x345a <__divmodsi4_exit>
    345e:	90 95       	com	r25
    3460:	80 95       	com	r24
    3462:	70 95       	com	r23
    3464:	61 95       	neg	r22
    3466:	7f 4f       	sbci	r23, 0xFF	; 255
    3468:	8f 4f       	sbci	r24, 0xFF	; 255
    346a:	9f 4f       	sbci	r25, 0xFF	; 255
    346c:	08 95       	ret

0000346e <__prologue_saves__>:
    346e:	2f 92       	push	r2
    3470:	3f 92       	push	r3
    3472:	4f 92       	push	r4
    3474:	5f 92       	push	r5
    3476:	6f 92       	push	r6
    3478:	7f 92       	push	r7
    347a:	8f 92       	push	r8
    347c:	9f 92       	push	r9
    347e:	af 92       	push	r10
    3480:	bf 92       	push	r11
    3482:	cf 92       	push	r12
    3484:	df 92       	push	r13
    3486:	ef 92       	push	r14
    3488:	ff 92       	push	r15
    348a:	0f 93       	push	r16
    348c:	1f 93       	push	r17
    348e:	cf 93       	push	r28
    3490:	df 93       	push	r29
    3492:	cd b7       	in	r28, 0x3d	; 61
    3494:	de b7       	in	r29, 0x3e	; 62
    3496:	ca 1b       	sub	r28, r26
    3498:	db 0b       	sbc	r29, r27
    349a:	0f b6       	in	r0, 0x3f	; 63
    349c:	f8 94       	cli
    349e:	de bf       	out	0x3e, r29	; 62
    34a0:	0f be       	out	0x3f, r0	; 63
    34a2:	cd bf       	out	0x3d, r28	; 61
    34a4:	09 94       	ijmp

000034a6 <__epilogue_restores__>:
    34a6:	2a 88       	ldd	r2, Y+18	; 0x12
    34a8:	39 88       	ldd	r3, Y+17	; 0x11
    34aa:	48 88       	ldd	r4, Y+16	; 0x10
    34ac:	5f 84       	ldd	r5, Y+15	; 0x0f
    34ae:	6e 84       	ldd	r6, Y+14	; 0x0e
    34b0:	7d 84       	ldd	r7, Y+13	; 0x0d
    34b2:	8c 84       	ldd	r8, Y+12	; 0x0c
    34b4:	9b 84       	ldd	r9, Y+11	; 0x0b
    34b6:	aa 84       	ldd	r10, Y+10	; 0x0a
    34b8:	b9 84       	ldd	r11, Y+9	; 0x09
    34ba:	c8 84       	ldd	r12, Y+8	; 0x08
    34bc:	df 80       	ldd	r13, Y+7	; 0x07
    34be:	ee 80       	ldd	r14, Y+6	; 0x06
    34c0:	fd 80       	ldd	r15, Y+5	; 0x05
    34c2:	0c 81       	ldd	r16, Y+4	; 0x04
    34c4:	1b 81       	ldd	r17, Y+3	; 0x03
    34c6:	aa 81       	ldd	r26, Y+2	; 0x02
    34c8:	b9 81       	ldd	r27, Y+1	; 0x01
    34ca:	ce 0f       	add	r28, r30
    34cc:	d1 1d       	adc	r29, r1
    34ce:	0f b6       	in	r0, 0x3f	; 63
    34d0:	f8 94       	cli
    34d2:	de bf       	out	0x3e, r29	; 62
    34d4:	0f be       	out	0x3f, r0	; 63
    34d6:	cd bf       	out	0x3d, r28	; 61
    34d8:	ed 01       	movw	r28, r26
    34da:	08 95       	ret

000034dc <_exit>:
    34dc:	f8 94       	cli

000034de <__stop_program>:
    34de:	ff cf       	rjmp	.-2      	; 0x34de <__stop_program>
