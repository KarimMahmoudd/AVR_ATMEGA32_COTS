
TIMER0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b88  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00000b88  00000c1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800072  00800072  00000c2e  2**0
                  ALLOC
  3 .stab         00001260  00000000  00000000  00000c30  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000753  00000000  00000000  00001e90  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 a4 04 	jmp	0x948	; 0x948 <__vector_4>
  14:	0c 94 b4 04 	jmp	0x968	; 0x968 <__vector_5>
  18:	0c 94 c4 04 	jmp	0x988	; 0x988 <__vector_6>
  1c:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__vector_7>
  20:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <__vector_8>
  24:	0c 94 f4 04 	jmp	0x9e8	; 0x9e8 <__vector_9>
  28:	0c 94 04 05 	jmp	0xa08	; 0xa08 <__vector_10>
  2c:	0c 94 37 05 	jmp	0xa6e	; 0xa6e <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e8       	ldi	r30, 0x88	; 136
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e7       	ldi	r26, 0x72	; 114
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 37       	cpi	r26, 0x7A	; 122
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 47 05 	call	0xa8e	; 0xa8e <main>
  8a:	0c 94 c2 05 	jmp	0xb84	; 0xb84 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_u8SetPinValue>:
#include "DIO_private.h"
#include "DIO_config.h"



u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value){
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	28 97       	sbiw	r28, 0x08	; 8
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61
  a6:	8a 83       	std	Y+2, r24	; 0x02
  a8:	6b 83       	std	Y+3, r22	; 0x03
  aa:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=OK;
  ac:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin <= DIO_u8PIN7){
  ae:	8b 81       	ldd	r24, Y+3	; 0x03
  b0:	88 30       	cpi	r24, 0x08	; 8
  b2:	08 f0       	brcs	.+2      	; 0xb6 <DIO_u8SetPinValue+0x24>
  b4:	f4 c0       	rjmp	.+488    	; 0x29e <DIO_u8SetPinValue+0x20c>
		if(Copy_u8Value == DIO_u8PIN_LOW){
  b6:	8c 81       	ldd	r24, Y+4	; 0x04
  b8:	88 23       	and	r24, r24
  ba:	09 f0       	breq	.+2      	; 0xbe <DIO_u8SetPinValue+0x2c>
  bc:	77 c0       	rjmp	.+238    	; 0x1ac <DIO_u8SetPinValue+0x11a>
			switch(Copy_u8Port){
  be:	8a 81       	ldd	r24, Y+2	; 0x02
  c0:	28 2f       	mov	r18, r24
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	38 87       	std	Y+8, r19	; 0x08
  c6:	2f 83       	std	Y+7, r18	; 0x07
  c8:	8f 81       	ldd	r24, Y+7	; 0x07
  ca:	98 85       	ldd	r25, Y+8	; 0x08
  cc:	81 30       	cpi	r24, 0x01	; 1
  ce:	91 05       	cpc	r25, r1
  d0:	59 f1       	breq	.+86     	; 0x128 <DIO_u8SetPinValue+0x96>
  d2:	2f 81       	ldd	r18, Y+7	; 0x07
  d4:	38 85       	ldd	r19, Y+8	; 0x08
  d6:	22 30       	cpi	r18, 0x02	; 2
  d8:	31 05       	cpc	r19, r1
  da:	2c f4       	brge	.+10     	; 0xe6 <DIO_u8SetPinValue+0x54>
  dc:	8f 81       	ldd	r24, Y+7	; 0x07
  de:	98 85       	ldd	r25, Y+8	; 0x08
  e0:	00 97       	sbiw	r24, 0x00	; 0
  e2:	69 f0       	breq	.+26     	; 0xfe <DIO_u8SetPinValue+0x6c>
  e4:	60 c0       	rjmp	.+192    	; 0x1a6 <DIO_u8SetPinValue+0x114>
  e6:	2f 81       	ldd	r18, Y+7	; 0x07
  e8:	38 85       	ldd	r19, Y+8	; 0x08
  ea:	22 30       	cpi	r18, 0x02	; 2
  ec:	31 05       	cpc	r19, r1
  ee:	89 f1       	breq	.+98     	; 0x152 <DIO_u8SetPinValue+0xc0>
  f0:	8f 81       	ldd	r24, Y+7	; 0x07
  f2:	98 85       	ldd	r25, Y+8	; 0x08
  f4:	83 30       	cpi	r24, 0x03	; 3
  f6:	91 05       	cpc	r25, r1
  f8:	09 f4       	brne	.+2      	; 0xfc <DIO_u8SetPinValue+0x6a>
  fa:	40 c0       	rjmp	.+128    	; 0x17c <DIO_u8SetPinValue+0xea>
  fc:	54 c0       	rjmp	.+168    	; 0x1a6 <DIO_u8SetPinValue+0x114>
			case DIO_u8PORTA : CLR_BIT(PORTA,Copy_u8Pin); break;
  fe:	ab e3       	ldi	r26, 0x3B	; 59
 100:	b0 e0       	ldi	r27, 0x00	; 0
 102:	eb e3       	ldi	r30, 0x3B	; 59
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	48 2f       	mov	r20, r24
 10a:	8b 81       	ldd	r24, Y+3	; 0x03
 10c:	28 2f       	mov	r18, r24
 10e:	30 e0       	ldi	r19, 0x00	; 0
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	02 2e       	mov	r0, r18
 116:	02 c0       	rjmp	.+4      	; 0x11c <DIO_u8SetPinValue+0x8a>
 118:	88 0f       	add	r24, r24
 11a:	99 1f       	adc	r25, r25
 11c:	0a 94       	dec	r0
 11e:	e2 f7       	brpl	.-8      	; 0x118 <DIO_u8SetPinValue+0x86>
 120:	80 95       	com	r24
 122:	84 23       	and	r24, r20
 124:	8c 93       	st	X, r24
 126:	bd c0       	rjmp	.+378    	; 0x2a2 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB : CLR_BIT(PORTB,Copy_u8Pin); break;
 128:	a8 e3       	ldi	r26, 0x38	; 56
 12a:	b0 e0       	ldi	r27, 0x00	; 0
 12c:	e8 e3       	ldi	r30, 0x38	; 56
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	48 2f       	mov	r20, r24
 134:	8b 81       	ldd	r24, Y+3	; 0x03
 136:	28 2f       	mov	r18, r24
 138:	30 e0       	ldi	r19, 0x00	; 0
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	02 2e       	mov	r0, r18
 140:	02 c0       	rjmp	.+4      	; 0x146 <DIO_u8SetPinValue+0xb4>
 142:	88 0f       	add	r24, r24
 144:	99 1f       	adc	r25, r25
 146:	0a 94       	dec	r0
 148:	e2 f7       	brpl	.-8      	; 0x142 <DIO_u8SetPinValue+0xb0>
 14a:	80 95       	com	r24
 14c:	84 23       	and	r24, r20
 14e:	8c 93       	st	X, r24
 150:	a8 c0       	rjmp	.+336    	; 0x2a2 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC : CLR_BIT(PORTC,Copy_u8Pin); break;
 152:	a5 e3       	ldi	r26, 0x35	; 53
 154:	b0 e0       	ldi	r27, 0x00	; 0
 156:	e5 e3       	ldi	r30, 0x35	; 53
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	48 2f       	mov	r20, r24
 15e:	8b 81       	ldd	r24, Y+3	; 0x03
 160:	28 2f       	mov	r18, r24
 162:	30 e0       	ldi	r19, 0x00	; 0
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	02 2e       	mov	r0, r18
 16a:	02 c0       	rjmp	.+4      	; 0x170 <DIO_u8SetPinValue+0xde>
 16c:	88 0f       	add	r24, r24
 16e:	99 1f       	adc	r25, r25
 170:	0a 94       	dec	r0
 172:	e2 f7       	brpl	.-8      	; 0x16c <DIO_u8SetPinValue+0xda>
 174:	80 95       	com	r24
 176:	84 23       	and	r24, r20
 178:	8c 93       	st	X, r24
 17a:	93 c0       	rjmp	.+294    	; 0x2a2 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD : CLR_BIT(PORTD,Copy_u8Pin); break;
 17c:	a2 e3       	ldi	r26, 0x32	; 50
 17e:	b0 e0       	ldi	r27, 0x00	; 0
 180:	e2 e3       	ldi	r30, 0x32	; 50
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	80 81       	ld	r24, Z
 186:	48 2f       	mov	r20, r24
 188:	8b 81       	ldd	r24, Y+3	; 0x03
 18a:	28 2f       	mov	r18, r24
 18c:	30 e0       	ldi	r19, 0x00	; 0
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	02 2e       	mov	r0, r18
 194:	02 c0       	rjmp	.+4      	; 0x19a <DIO_u8SetPinValue+0x108>
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	0a 94       	dec	r0
 19c:	e2 f7       	brpl	.-8      	; 0x196 <DIO_u8SetPinValue+0x104>
 19e:	80 95       	com	r24
 1a0:	84 23       	and	r24, r20
 1a2:	8c 93       	st	X, r24
 1a4:	7e c0       	rjmp	.+252    	; 0x2a2 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=NOK;
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	89 83       	std	Y+1, r24	; 0x01
 1aa:	7b c0       	rjmp	.+246    	; 0x2a2 <DIO_u8SetPinValue+0x210>
			}
		}
		else if(Copy_u8Value == DIO_u8PIN_HIGH){
 1ac:	8c 81       	ldd	r24, Y+4	; 0x04
 1ae:	81 30       	cpi	r24, 0x01	; 1
 1b0:	09 f0       	breq	.+2      	; 0x1b4 <DIO_u8SetPinValue+0x122>
 1b2:	72 c0       	rjmp	.+228    	; 0x298 <DIO_u8SetPinValue+0x206>
			switch(Copy_u8Port){
 1b4:	8a 81       	ldd	r24, Y+2	; 0x02
 1b6:	28 2f       	mov	r18, r24
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	3e 83       	std	Y+6, r19	; 0x06
 1bc:	2d 83       	std	Y+5, r18	; 0x05
 1be:	8d 81       	ldd	r24, Y+5	; 0x05
 1c0:	9e 81       	ldd	r25, Y+6	; 0x06
 1c2:	81 30       	cpi	r24, 0x01	; 1
 1c4:	91 05       	cpc	r25, r1
 1c6:	49 f1       	breq	.+82     	; 0x21a <DIO_u8SetPinValue+0x188>
 1c8:	2d 81       	ldd	r18, Y+5	; 0x05
 1ca:	3e 81       	ldd	r19, Y+6	; 0x06
 1cc:	22 30       	cpi	r18, 0x02	; 2
 1ce:	31 05       	cpc	r19, r1
 1d0:	2c f4       	brge	.+10     	; 0x1dc <DIO_u8SetPinValue+0x14a>
 1d2:	8d 81       	ldd	r24, Y+5	; 0x05
 1d4:	9e 81       	ldd	r25, Y+6	; 0x06
 1d6:	00 97       	sbiw	r24, 0x00	; 0
 1d8:	61 f0       	breq	.+24     	; 0x1f2 <DIO_u8SetPinValue+0x160>
 1da:	5b c0       	rjmp	.+182    	; 0x292 <DIO_u8SetPinValue+0x200>
 1dc:	2d 81       	ldd	r18, Y+5	; 0x05
 1de:	3e 81       	ldd	r19, Y+6	; 0x06
 1e0:	22 30       	cpi	r18, 0x02	; 2
 1e2:	31 05       	cpc	r19, r1
 1e4:	71 f1       	breq	.+92     	; 0x242 <DIO_u8SetPinValue+0x1b0>
 1e6:	8d 81       	ldd	r24, Y+5	; 0x05
 1e8:	9e 81       	ldd	r25, Y+6	; 0x06
 1ea:	83 30       	cpi	r24, 0x03	; 3
 1ec:	91 05       	cpc	r25, r1
 1ee:	e9 f1       	breq	.+122    	; 0x26a <DIO_u8SetPinValue+0x1d8>
 1f0:	50 c0       	rjmp	.+160    	; 0x292 <DIO_u8SetPinValue+0x200>
			case DIO_u8PORTA : SET_BIT(PORTA,Copy_u8Pin); break;
 1f2:	ab e3       	ldi	r26, 0x3B	; 59
 1f4:	b0 e0       	ldi	r27, 0x00	; 0
 1f6:	eb e3       	ldi	r30, 0x3B	; 59
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	80 81       	ld	r24, Z
 1fc:	48 2f       	mov	r20, r24
 1fe:	8b 81       	ldd	r24, Y+3	; 0x03
 200:	28 2f       	mov	r18, r24
 202:	30 e0       	ldi	r19, 0x00	; 0
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	02 2e       	mov	r0, r18
 20a:	02 c0       	rjmp	.+4      	; 0x210 <DIO_u8SetPinValue+0x17e>
 20c:	88 0f       	add	r24, r24
 20e:	99 1f       	adc	r25, r25
 210:	0a 94       	dec	r0
 212:	e2 f7       	brpl	.-8      	; 0x20c <DIO_u8SetPinValue+0x17a>
 214:	84 2b       	or	r24, r20
 216:	8c 93       	st	X, r24
 218:	44 c0       	rjmp	.+136    	; 0x2a2 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB : SET_BIT(PORTB,Copy_u8Pin); break;
 21a:	a8 e3       	ldi	r26, 0x38	; 56
 21c:	b0 e0       	ldi	r27, 0x00	; 0
 21e:	e8 e3       	ldi	r30, 0x38	; 56
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	80 81       	ld	r24, Z
 224:	48 2f       	mov	r20, r24
 226:	8b 81       	ldd	r24, Y+3	; 0x03
 228:	28 2f       	mov	r18, r24
 22a:	30 e0       	ldi	r19, 0x00	; 0
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	02 2e       	mov	r0, r18
 232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_u8SetPinValue+0x1a6>
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	0a 94       	dec	r0
 23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_u8SetPinValue+0x1a2>
 23c:	84 2b       	or	r24, r20
 23e:	8c 93       	st	X, r24
 240:	30 c0       	rjmp	.+96     	; 0x2a2 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC : SET_BIT(PORTC,Copy_u8Pin); break;
 242:	a5 e3       	ldi	r26, 0x35	; 53
 244:	b0 e0       	ldi	r27, 0x00	; 0
 246:	e5 e3       	ldi	r30, 0x35	; 53
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	80 81       	ld	r24, Z
 24c:	48 2f       	mov	r20, r24
 24e:	8b 81       	ldd	r24, Y+3	; 0x03
 250:	28 2f       	mov	r18, r24
 252:	30 e0       	ldi	r19, 0x00	; 0
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	02 2e       	mov	r0, r18
 25a:	02 c0       	rjmp	.+4      	; 0x260 <DIO_u8SetPinValue+0x1ce>
 25c:	88 0f       	add	r24, r24
 25e:	99 1f       	adc	r25, r25
 260:	0a 94       	dec	r0
 262:	e2 f7       	brpl	.-8      	; 0x25c <DIO_u8SetPinValue+0x1ca>
 264:	84 2b       	or	r24, r20
 266:	8c 93       	st	X, r24
 268:	1c c0       	rjmp	.+56     	; 0x2a2 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD : SET_BIT(PORTD,Copy_u8Pin); break;
 26a:	a2 e3       	ldi	r26, 0x32	; 50
 26c:	b0 e0       	ldi	r27, 0x00	; 0
 26e:	e2 e3       	ldi	r30, 0x32	; 50
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	80 81       	ld	r24, Z
 274:	48 2f       	mov	r20, r24
 276:	8b 81       	ldd	r24, Y+3	; 0x03
 278:	28 2f       	mov	r18, r24
 27a:	30 e0       	ldi	r19, 0x00	; 0
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	02 2e       	mov	r0, r18
 282:	02 c0       	rjmp	.+4      	; 0x288 <DIO_u8SetPinValue+0x1f6>
 284:	88 0f       	add	r24, r24
 286:	99 1f       	adc	r25, r25
 288:	0a 94       	dec	r0
 28a:	e2 f7       	brpl	.-8      	; 0x284 <DIO_u8SetPinValue+0x1f2>
 28c:	84 2b       	or	r24, r20
 28e:	8c 93       	st	X, r24
 290:	08 c0       	rjmp	.+16     	; 0x2a2 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=NOK;
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	89 83       	std	Y+1, r24	; 0x01
 296:	05 c0       	rjmp	.+10     	; 0x2a2 <DIO_u8SetPinValue+0x210>
			}
		}
		else{
			Local_u8ErrorState=NOK;
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	89 83       	std	Y+1, r24	; 0x01
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <DIO_u8SetPinValue+0x210>
		}
	}
	else{
		Local_u8ErrorState=NOK;
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState ;
 2a2:	89 81       	ldd	r24, Y+1	; 0x01
}
 2a4:	28 96       	adiw	r28, 0x08	; 8
 2a6:	0f b6       	in	r0, 0x3f	; 63
 2a8:	f8 94       	cli
 2aa:	de bf       	out	0x3e, r29	; 62
 2ac:	0f be       	out	0x3f, r0	; 63
 2ae:	cd bf       	out	0x3d, r28	; 61
 2b0:	cf 91       	pop	r28
 2b2:	df 91       	pop	r29
 2b4:	08 95       	ret

000002b6 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8Port,u8 Copy_u8Value){
 2b6:	df 93       	push	r29
 2b8:	cf 93       	push	r28
 2ba:	00 d0       	rcall	.+0      	; 0x2bc <DIO_u8SetPortValue+0x6>
 2bc:	00 d0       	rcall	.+0      	; 0x2be <DIO_u8SetPortValue+0x8>
 2be:	0f 92       	push	r0
 2c0:	cd b7       	in	r28, 0x3d	; 61
 2c2:	de b7       	in	r29, 0x3e	; 62
 2c4:	8a 83       	std	Y+2, r24	; 0x02
 2c6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=OK;
 2c8:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8Port)
 2ca:	8a 81       	ldd	r24, Y+2	; 0x02
 2cc:	28 2f       	mov	r18, r24
 2ce:	30 e0       	ldi	r19, 0x00	; 0
 2d0:	3d 83       	std	Y+5, r19	; 0x05
 2d2:	2c 83       	std	Y+4, r18	; 0x04
 2d4:	8c 81       	ldd	r24, Y+4	; 0x04
 2d6:	9d 81       	ldd	r25, Y+5	; 0x05
 2d8:	81 30       	cpi	r24, 0x01	; 1
 2da:	91 05       	cpc	r25, r1
 2dc:	d1 f0       	breq	.+52     	; 0x312 <DIO_u8SetPortValue+0x5c>
 2de:	2c 81       	ldd	r18, Y+4	; 0x04
 2e0:	3d 81       	ldd	r19, Y+5	; 0x05
 2e2:	22 30       	cpi	r18, 0x02	; 2
 2e4:	31 05       	cpc	r19, r1
 2e6:	2c f4       	brge	.+10     	; 0x2f2 <DIO_u8SetPortValue+0x3c>
 2e8:	8c 81       	ldd	r24, Y+4	; 0x04
 2ea:	9d 81       	ldd	r25, Y+5	; 0x05
 2ec:	00 97       	sbiw	r24, 0x00	; 0
 2ee:	61 f0       	breq	.+24     	; 0x308 <DIO_u8SetPortValue+0x52>
 2f0:	1f c0       	rjmp	.+62     	; 0x330 <DIO_u8SetPortValue+0x7a>
 2f2:	2c 81       	ldd	r18, Y+4	; 0x04
 2f4:	3d 81       	ldd	r19, Y+5	; 0x05
 2f6:	22 30       	cpi	r18, 0x02	; 2
 2f8:	31 05       	cpc	r19, r1
 2fa:	81 f0       	breq	.+32     	; 0x31c <DIO_u8SetPortValue+0x66>
 2fc:	8c 81       	ldd	r24, Y+4	; 0x04
 2fe:	9d 81       	ldd	r25, Y+5	; 0x05
 300:	83 30       	cpi	r24, 0x03	; 3
 302:	91 05       	cpc	r25, r1
 304:	81 f0       	breq	.+32     	; 0x326 <DIO_u8SetPortValue+0x70>
 306:	14 c0       	rjmp	.+40     	; 0x330 <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA: PORTA=Copy_u8Value; break;
 308:	eb e3       	ldi	r30, 0x3B	; 59
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	8b 81       	ldd	r24, Y+3	; 0x03
 30e:	80 83       	st	Z, r24
 310:	11 c0       	rjmp	.+34     	; 0x334 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB: PORTB=Copy_u8Value; break;
 312:	e8 e3       	ldi	r30, 0x38	; 56
 314:	f0 e0       	ldi	r31, 0x00	; 0
 316:	8b 81       	ldd	r24, Y+3	; 0x03
 318:	80 83       	st	Z, r24
 31a:	0c c0       	rjmp	.+24     	; 0x334 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC: PORTC=Copy_u8Value; break;
 31c:	e5 e3       	ldi	r30, 0x35	; 53
 31e:	f0 e0       	ldi	r31, 0x00	; 0
 320:	8b 81       	ldd	r24, Y+3	; 0x03
 322:	80 83       	st	Z, r24
 324:	07 c0       	rjmp	.+14     	; 0x334 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD: PORTD=Copy_u8Value; break;
 326:	e2 e3       	ldi	r30, 0x32	; 50
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	8b 81       	ldd	r24, Y+3	; 0x03
 32c:	80 83       	st	Z, r24
 32e:	02 c0       	rjmp	.+4      	; 0x334 <DIO_u8SetPortValue+0x7e>
	default: Local_u8ErrorState=NOK ;
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState ;
 334:	89 81       	ldd	r24, Y+1	; 0x01
}
 336:	0f 90       	pop	r0
 338:	0f 90       	pop	r0
 33a:	0f 90       	pop	r0
 33c:	0f 90       	pop	r0
 33e:	0f 90       	pop	r0
 340:	cf 91       	pop	r28
 342:	df 91       	pop	r29
 344:	08 95       	ret

00000346 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin, u8* Copy_pu8Value){
 346:	df 93       	push	r29
 348:	cf 93       	push	r28
 34a:	cd b7       	in	r28, 0x3d	; 61
 34c:	de b7       	in	r29, 0x3e	; 62
 34e:	27 97       	sbiw	r28, 0x07	; 7
 350:	0f b6       	in	r0, 0x3f	; 63
 352:	f8 94       	cli
 354:	de bf       	out	0x3e, r29	; 62
 356:	0f be       	out	0x3f, r0	; 63
 358:	cd bf       	out	0x3d, r28	; 61
 35a:	8a 83       	std	Y+2, r24	; 0x02
 35c:	6b 83       	std	Y+3, r22	; 0x03
 35e:	5d 83       	std	Y+5, r21	; 0x05
 360:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=OK;
 362:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_pu8Value != NULL) && (Copy_u8Pin <= DIO_u8PIN7)){
 364:	8c 81       	ldd	r24, Y+4	; 0x04
 366:	9d 81       	ldd	r25, Y+5	; 0x05
 368:	00 97       	sbiw	r24, 0x00	; 0
 36a:	09 f4       	brne	.+2      	; 0x36e <DIO_u8GetPinValue+0x28>
 36c:	78 c0       	rjmp	.+240    	; 0x45e <DIO_u8GetPinValue+0x118>
 36e:	8b 81       	ldd	r24, Y+3	; 0x03
 370:	88 30       	cpi	r24, 0x08	; 8
 372:	08 f0       	brcs	.+2      	; 0x376 <DIO_u8GetPinValue+0x30>
 374:	74 c0       	rjmp	.+232    	; 0x45e <DIO_u8GetPinValue+0x118>
		switch (Copy_u8Port){
 376:	8a 81       	ldd	r24, Y+2	; 0x02
 378:	28 2f       	mov	r18, r24
 37a:	30 e0       	ldi	r19, 0x00	; 0
 37c:	3f 83       	std	Y+7, r19	; 0x07
 37e:	2e 83       	std	Y+6, r18	; 0x06
 380:	4e 81       	ldd	r20, Y+6	; 0x06
 382:	5f 81       	ldd	r21, Y+7	; 0x07
 384:	41 30       	cpi	r20, 0x01	; 1
 386:	51 05       	cpc	r21, r1
 388:	59 f1       	breq	.+86     	; 0x3e0 <DIO_u8GetPinValue+0x9a>
 38a:	8e 81       	ldd	r24, Y+6	; 0x06
 38c:	9f 81       	ldd	r25, Y+7	; 0x07
 38e:	82 30       	cpi	r24, 0x02	; 2
 390:	91 05       	cpc	r25, r1
 392:	34 f4       	brge	.+12     	; 0x3a0 <DIO_u8GetPinValue+0x5a>
 394:	2e 81       	ldd	r18, Y+6	; 0x06
 396:	3f 81       	ldd	r19, Y+7	; 0x07
 398:	21 15       	cp	r18, r1
 39a:	31 05       	cpc	r19, r1
 39c:	69 f0       	breq	.+26     	; 0x3b8 <DIO_u8GetPinValue+0x72>
 39e:	5c c0       	rjmp	.+184    	; 0x458 <DIO_u8GetPinValue+0x112>
 3a0:	4e 81       	ldd	r20, Y+6	; 0x06
 3a2:	5f 81       	ldd	r21, Y+7	; 0x07
 3a4:	42 30       	cpi	r20, 0x02	; 2
 3a6:	51 05       	cpc	r21, r1
 3a8:	79 f1       	breq	.+94     	; 0x408 <DIO_u8GetPinValue+0xc2>
 3aa:	8e 81       	ldd	r24, Y+6	; 0x06
 3ac:	9f 81       	ldd	r25, Y+7	; 0x07
 3ae:	83 30       	cpi	r24, 0x03	; 3
 3b0:	91 05       	cpc	r25, r1
 3b2:	09 f4       	brne	.+2      	; 0x3b6 <DIO_u8GetPinValue+0x70>
 3b4:	3d c0       	rjmp	.+122    	; 0x430 <DIO_u8GetPinValue+0xea>
 3b6:	50 c0       	rjmp	.+160    	; 0x458 <DIO_u8GetPinValue+0x112>
		case DIO_u8PORTA: *Copy_pu8Value = GET_BIT(PINA,Copy_u8Pin); break;
 3b8:	e9 e3       	ldi	r30, 0x39	; 57
 3ba:	f0 e0       	ldi	r31, 0x00	; 0
 3bc:	80 81       	ld	r24, Z
 3be:	28 2f       	mov	r18, r24
 3c0:	30 e0       	ldi	r19, 0x00	; 0
 3c2:	8b 81       	ldd	r24, Y+3	; 0x03
 3c4:	88 2f       	mov	r24, r24
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	a9 01       	movw	r20, r18
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <DIO_u8GetPinValue+0x8a>
 3cc:	55 95       	asr	r21
 3ce:	47 95       	ror	r20
 3d0:	8a 95       	dec	r24
 3d2:	e2 f7       	brpl	.-8      	; 0x3cc <DIO_u8GetPinValue+0x86>
 3d4:	ca 01       	movw	r24, r20
 3d6:	81 70       	andi	r24, 0x01	; 1
 3d8:	ec 81       	ldd	r30, Y+4	; 0x04
 3da:	fd 81       	ldd	r31, Y+5	; 0x05
 3dc:	80 83       	st	Z, r24
 3de:	41 c0       	rjmp	.+130    	; 0x462 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTB: *Copy_pu8Value = GET_BIT(PINB,Copy_u8Pin); break;
 3e0:	e6 e3       	ldi	r30, 0x36	; 54
 3e2:	f0 e0       	ldi	r31, 0x00	; 0
 3e4:	80 81       	ld	r24, Z
 3e6:	28 2f       	mov	r18, r24
 3e8:	30 e0       	ldi	r19, 0x00	; 0
 3ea:	8b 81       	ldd	r24, Y+3	; 0x03
 3ec:	88 2f       	mov	r24, r24
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	a9 01       	movw	r20, r18
 3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <DIO_u8GetPinValue+0xb2>
 3f4:	55 95       	asr	r21
 3f6:	47 95       	ror	r20
 3f8:	8a 95       	dec	r24
 3fa:	e2 f7       	brpl	.-8      	; 0x3f4 <DIO_u8GetPinValue+0xae>
 3fc:	ca 01       	movw	r24, r20
 3fe:	81 70       	andi	r24, 0x01	; 1
 400:	ec 81       	ldd	r30, Y+4	; 0x04
 402:	fd 81       	ldd	r31, Y+5	; 0x05
 404:	80 83       	st	Z, r24
 406:	2d c0       	rjmp	.+90     	; 0x462 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTC: *Copy_pu8Value = GET_BIT(PINC,Copy_u8Pin); break;
 408:	e3 e3       	ldi	r30, 0x33	; 51
 40a:	f0 e0       	ldi	r31, 0x00	; 0
 40c:	80 81       	ld	r24, Z
 40e:	28 2f       	mov	r18, r24
 410:	30 e0       	ldi	r19, 0x00	; 0
 412:	8b 81       	ldd	r24, Y+3	; 0x03
 414:	88 2f       	mov	r24, r24
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	a9 01       	movw	r20, r18
 41a:	02 c0       	rjmp	.+4      	; 0x420 <DIO_u8GetPinValue+0xda>
 41c:	55 95       	asr	r21
 41e:	47 95       	ror	r20
 420:	8a 95       	dec	r24
 422:	e2 f7       	brpl	.-8      	; 0x41c <DIO_u8GetPinValue+0xd6>
 424:	ca 01       	movw	r24, r20
 426:	81 70       	andi	r24, 0x01	; 1
 428:	ec 81       	ldd	r30, Y+4	; 0x04
 42a:	fd 81       	ldd	r31, Y+5	; 0x05
 42c:	80 83       	st	Z, r24
 42e:	19 c0       	rjmp	.+50     	; 0x462 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTD: *Copy_pu8Value = GET_BIT(PIND,Copy_u8Pin); break;
 430:	e0 e3       	ldi	r30, 0x30	; 48
 432:	f0 e0       	ldi	r31, 0x00	; 0
 434:	80 81       	ld	r24, Z
 436:	28 2f       	mov	r18, r24
 438:	30 e0       	ldi	r19, 0x00	; 0
 43a:	8b 81       	ldd	r24, Y+3	; 0x03
 43c:	88 2f       	mov	r24, r24
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	a9 01       	movw	r20, r18
 442:	02 c0       	rjmp	.+4      	; 0x448 <DIO_u8GetPinValue+0x102>
 444:	55 95       	asr	r21
 446:	47 95       	ror	r20
 448:	8a 95       	dec	r24
 44a:	e2 f7       	brpl	.-8      	; 0x444 <DIO_u8GetPinValue+0xfe>
 44c:	ca 01       	movw	r24, r20
 44e:	81 70       	andi	r24, 0x01	; 1
 450:	ec 81       	ldd	r30, Y+4	; 0x04
 452:	fd 81       	ldd	r31, Y+5	; 0x05
 454:	80 83       	st	Z, r24
 456:	05 c0       	rjmp	.+10     	; 0x462 <DIO_u8GetPinValue+0x11c>
		default:Local_u8ErrorState=NOK ;
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	89 83       	std	Y+1, r24	; 0x01
 45c:	02 c0       	rjmp	.+4      	; 0x462 <DIO_u8GetPinValue+0x11c>
		}
	}
	else{
		Local_u8ErrorState=NOK;
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState ;
 462:	89 81       	ldd	r24, Y+1	; 0x01
}
 464:	27 96       	adiw	r28, 0x07	; 7
 466:	0f b6       	in	r0, 0x3f	; 63
 468:	f8 94       	cli
 46a:	de bf       	out	0x3e, r29	; 62
 46c:	0f be       	out	0x3f, r0	; 63
 46e:	cd bf       	out	0x3d, r28	; 61
 470:	cf 91       	pop	r28
 472:	df 91       	pop	r29
 474:	08 95       	ret

00000476 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8Port,u8* Copy_pu8Value){
 476:	df 93       	push	r29
 478:	cf 93       	push	r28
 47a:	00 d0       	rcall	.+0      	; 0x47c <DIO_u8GetPortValue+0x6>
 47c:	00 d0       	rcall	.+0      	; 0x47e <DIO_u8GetPortValue+0x8>
 47e:	00 d0       	rcall	.+0      	; 0x480 <DIO_u8GetPortValue+0xa>
 480:	cd b7       	in	r28, 0x3d	; 61
 482:	de b7       	in	r29, 0x3e	; 62
 484:	8a 83       	std	Y+2, r24	; 0x02
 486:	7c 83       	std	Y+4, r23	; 0x04
 488:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=OK;
 48a:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8Port)
 48c:	8a 81       	ldd	r24, Y+2	; 0x02
 48e:	28 2f       	mov	r18, r24
 490:	30 e0       	ldi	r19, 0x00	; 0
 492:	3e 83       	std	Y+6, r19	; 0x06
 494:	2d 83       	std	Y+5, r18	; 0x05
 496:	8d 81       	ldd	r24, Y+5	; 0x05
 498:	9e 81       	ldd	r25, Y+6	; 0x06
 49a:	81 30       	cpi	r24, 0x01	; 1
 49c:	91 05       	cpc	r25, r1
 49e:	e1 f0       	breq	.+56     	; 0x4d8 <DIO_u8GetPortValue+0x62>
 4a0:	2d 81       	ldd	r18, Y+5	; 0x05
 4a2:	3e 81       	ldd	r19, Y+6	; 0x06
 4a4:	22 30       	cpi	r18, 0x02	; 2
 4a6:	31 05       	cpc	r19, r1
 4a8:	2c f4       	brge	.+10     	; 0x4b4 <DIO_u8GetPortValue+0x3e>
 4aa:	8d 81       	ldd	r24, Y+5	; 0x05
 4ac:	9e 81       	ldd	r25, Y+6	; 0x06
 4ae:	00 97       	sbiw	r24, 0x00	; 0
 4b0:	61 f0       	breq	.+24     	; 0x4ca <DIO_u8GetPortValue+0x54>
 4b2:	27 c0       	rjmp	.+78     	; 0x502 <DIO_u8GetPortValue+0x8c>
 4b4:	2d 81       	ldd	r18, Y+5	; 0x05
 4b6:	3e 81       	ldd	r19, Y+6	; 0x06
 4b8:	22 30       	cpi	r18, 0x02	; 2
 4ba:	31 05       	cpc	r19, r1
 4bc:	a1 f0       	breq	.+40     	; 0x4e6 <DIO_u8GetPortValue+0x70>
 4be:	8d 81       	ldd	r24, Y+5	; 0x05
 4c0:	9e 81       	ldd	r25, Y+6	; 0x06
 4c2:	83 30       	cpi	r24, 0x03	; 3
 4c4:	91 05       	cpc	r25, r1
 4c6:	b1 f0       	breq	.+44     	; 0x4f4 <DIO_u8GetPortValue+0x7e>
 4c8:	1c c0       	rjmp	.+56     	; 0x502 <DIO_u8GetPortValue+0x8c>
	{
	case DIO_u8PORTA: *Copy_pu8Value = PINA; break;
 4ca:	e9 e3       	ldi	r30, 0x39	; 57
 4cc:	f0 e0       	ldi	r31, 0x00	; 0
 4ce:	80 81       	ld	r24, Z
 4d0:	eb 81       	ldd	r30, Y+3	; 0x03
 4d2:	fc 81       	ldd	r31, Y+4	; 0x04
 4d4:	80 83       	st	Z, r24
 4d6:	17 c0       	rjmp	.+46     	; 0x506 <DIO_u8GetPortValue+0x90>
	case DIO_u8PORTB: *Copy_pu8Value = PINB; break;
 4d8:	e6 e3       	ldi	r30, 0x36	; 54
 4da:	f0 e0       	ldi	r31, 0x00	; 0
 4dc:	80 81       	ld	r24, Z
 4de:	eb 81       	ldd	r30, Y+3	; 0x03
 4e0:	fc 81       	ldd	r31, Y+4	; 0x04
 4e2:	80 83       	st	Z, r24
 4e4:	10 c0       	rjmp	.+32     	; 0x506 <DIO_u8GetPortValue+0x90>
	case DIO_u8PORTC: *Copy_pu8Value = PINC; break;
 4e6:	e3 e3       	ldi	r30, 0x33	; 51
 4e8:	f0 e0       	ldi	r31, 0x00	; 0
 4ea:	80 81       	ld	r24, Z
 4ec:	eb 81       	ldd	r30, Y+3	; 0x03
 4ee:	fc 81       	ldd	r31, Y+4	; 0x04
 4f0:	80 83       	st	Z, r24
 4f2:	09 c0       	rjmp	.+18     	; 0x506 <DIO_u8GetPortValue+0x90>
	case DIO_u8PORTD: *Copy_pu8Value = PIND; break;
 4f4:	e0 e3       	ldi	r30, 0x30	; 48
 4f6:	f0 e0       	ldi	r31, 0x00	; 0
 4f8:	80 81       	ld	r24, Z
 4fa:	eb 81       	ldd	r30, Y+3	; 0x03
 4fc:	fc 81       	ldd	r31, Y+4	; 0x04
 4fe:	80 83       	st	Z, r24
 500:	02 c0       	rjmp	.+4      	; 0x506 <DIO_u8GetPortValue+0x90>
	default: Local_u8ErrorState=NOK ;
 502:	81 e0       	ldi	r24, 0x01	; 1
 504:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 506:	89 81       	ldd	r24, Y+1	; 0x01
}
 508:	26 96       	adiw	r28, 0x06	; 6
 50a:	0f b6       	in	r0, 0x3f	; 63
 50c:	f8 94       	cli
 50e:	de bf       	out	0x3e, r29	; 62
 510:	0f be       	out	0x3f, r0	; 63
 512:	cd bf       	out	0x3d, r28	; 61
 514:	cf 91       	pop	r28
 516:	df 91       	pop	r29
 518:	08 95       	ret

0000051a <DIO_u8TogglePinValue>:

u8 DIO_u8TogglePinValue(u8 Copy_u8Port,u8 Copy_u8Pin){
 51a:	df 93       	push	r29
 51c:	cf 93       	push	r28
 51e:	00 d0       	rcall	.+0      	; 0x520 <DIO_u8TogglePinValue+0x6>
 520:	00 d0       	rcall	.+0      	; 0x522 <DIO_u8TogglePinValue+0x8>
 522:	0f 92       	push	r0
 524:	cd b7       	in	r28, 0x3d	; 61
 526:	de b7       	in	r29, 0x3e	; 62
 528:	8a 83       	std	Y+2, r24	; 0x02
 52a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=OK;
 52c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin <= DIO_u8PIN7){
 52e:	8b 81       	ldd	r24, Y+3	; 0x03
 530:	88 30       	cpi	r24, 0x08	; 8
 532:	08 f0       	brcs	.+2      	; 0x536 <DIO_u8TogglePinValue+0x1c>
 534:	72 c0       	rjmp	.+228    	; 0x61a <DIO_u8TogglePinValue+0x100>
			switch(Copy_u8Port){
 536:	8a 81       	ldd	r24, Y+2	; 0x02
 538:	28 2f       	mov	r18, r24
 53a:	30 e0       	ldi	r19, 0x00	; 0
 53c:	3d 83       	std	Y+5, r19	; 0x05
 53e:	2c 83       	std	Y+4, r18	; 0x04
 540:	8c 81       	ldd	r24, Y+4	; 0x04
 542:	9d 81       	ldd	r25, Y+5	; 0x05
 544:	81 30       	cpi	r24, 0x01	; 1
 546:	91 05       	cpc	r25, r1
 548:	49 f1       	breq	.+82     	; 0x59c <DIO_u8TogglePinValue+0x82>
 54a:	2c 81       	ldd	r18, Y+4	; 0x04
 54c:	3d 81       	ldd	r19, Y+5	; 0x05
 54e:	22 30       	cpi	r18, 0x02	; 2
 550:	31 05       	cpc	r19, r1
 552:	2c f4       	brge	.+10     	; 0x55e <DIO_u8TogglePinValue+0x44>
 554:	8c 81       	ldd	r24, Y+4	; 0x04
 556:	9d 81       	ldd	r25, Y+5	; 0x05
 558:	00 97       	sbiw	r24, 0x00	; 0
 55a:	61 f0       	breq	.+24     	; 0x574 <DIO_u8TogglePinValue+0x5a>
 55c:	5b c0       	rjmp	.+182    	; 0x614 <DIO_u8TogglePinValue+0xfa>
 55e:	2c 81       	ldd	r18, Y+4	; 0x04
 560:	3d 81       	ldd	r19, Y+5	; 0x05
 562:	22 30       	cpi	r18, 0x02	; 2
 564:	31 05       	cpc	r19, r1
 566:	71 f1       	breq	.+92     	; 0x5c4 <DIO_u8TogglePinValue+0xaa>
 568:	8c 81       	ldd	r24, Y+4	; 0x04
 56a:	9d 81       	ldd	r25, Y+5	; 0x05
 56c:	83 30       	cpi	r24, 0x03	; 3
 56e:	91 05       	cpc	r25, r1
 570:	e9 f1       	breq	.+122    	; 0x5ec <DIO_u8TogglePinValue+0xd2>
 572:	50 c0       	rjmp	.+160    	; 0x614 <DIO_u8TogglePinValue+0xfa>
			case DIO_u8PORTA : TOGGLE_BIT(PORTA,Copy_u8Pin); break;
 574:	ab e3       	ldi	r26, 0x3B	; 59
 576:	b0 e0       	ldi	r27, 0x00	; 0
 578:	eb e3       	ldi	r30, 0x3B	; 59
 57a:	f0 e0       	ldi	r31, 0x00	; 0
 57c:	80 81       	ld	r24, Z
 57e:	48 2f       	mov	r20, r24
 580:	8b 81       	ldd	r24, Y+3	; 0x03
 582:	28 2f       	mov	r18, r24
 584:	30 e0       	ldi	r19, 0x00	; 0
 586:	81 e0       	ldi	r24, 0x01	; 1
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	02 2e       	mov	r0, r18
 58c:	02 c0       	rjmp	.+4      	; 0x592 <DIO_u8TogglePinValue+0x78>
 58e:	88 0f       	add	r24, r24
 590:	99 1f       	adc	r25, r25
 592:	0a 94       	dec	r0
 594:	e2 f7       	brpl	.-8      	; 0x58e <DIO_u8TogglePinValue+0x74>
 596:	84 27       	eor	r24, r20
 598:	8c 93       	st	X, r24
 59a:	41 c0       	rjmp	.+130    	; 0x61e <DIO_u8TogglePinValue+0x104>
			case DIO_u8PORTB : TOGGLE_BIT(PORTB,Copy_u8Pin); break;
 59c:	a8 e3       	ldi	r26, 0x38	; 56
 59e:	b0 e0       	ldi	r27, 0x00	; 0
 5a0:	e8 e3       	ldi	r30, 0x38	; 56
 5a2:	f0 e0       	ldi	r31, 0x00	; 0
 5a4:	80 81       	ld	r24, Z
 5a6:	48 2f       	mov	r20, r24
 5a8:	8b 81       	ldd	r24, Y+3	; 0x03
 5aa:	28 2f       	mov	r18, r24
 5ac:	30 e0       	ldi	r19, 0x00	; 0
 5ae:	81 e0       	ldi	r24, 0x01	; 1
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	02 2e       	mov	r0, r18
 5b4:	02 c0       	rjmp	.+4      	; 0x5ba <DIO_u8TogglePinValue+0xa0>
 5b6:	88 0f       	add	r24, r24
 5b8:	99 1f       	adc	r25, r25
 5ba:	0a 94       	dec	r0
 5bc:	e2 f7       	brpl	.-8      	; 0x5b6 <DIO_u8TogglePinValue+0x9c>
 5be:	84 27       	eor	r24, r20
 5c0:	8c 93       	st	X, r24
 5c2:	2d c0       	rjmp	.+90     	; 0x61e <DIO_u8TogglePinValue+0x104>
			case DIO_u8PORTC : TOGGLE_BIT(PORTC,Copy_u8Pin); break;
 5c4:	a5 e3       	ldi	r26, 0x35	; 53
 5c6:	b0 e0       	ldi	r27, 0x00	; 0
 5c8:	e5 e3       	ldi	r30, 0x35	; 53
 5ca:	f0 e0       	ldi	r31, 0x00	; 0
 5cc:	80 81       	ld	r24, Z
 5ce:	48 2f       	mov	r20, r24
 5d0:	8b 81       	ldd	r24, Y+3	; 0x03
 5d2:	28 2f       	mov	r18, r24
 5d4:	30 e0       	ldi	r19, 0x00	; 0
 5d6:	81 e0       	ldi	r24, 0x01	; 1
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	02 2e       	mov	r0, r18
 5dc:	02 c0       	rjmp	.+4      	; 0x5e2 <DIO_u8TogglePinValue+0xc8>
 5de:	88 0f       	add	r24, r24
 5e0:	99 1f       	adc	r25, r25
 5e2:	0a 94       	dec	r0
 5e4:	e2 f7       	brpl	.-8      	; 0x5de <DIO_u8TogglePinValue+0xc4>
 5e6:	84 27       	eor	r24, r20
 5e8:	8c 93       	st	X, r24
 5ea:	19 c0       	rjmp	.+50     	; 0x61e <DIO_u8TogglePinValue+0x104>
			case DIO_u8PORTD : TOGGLE_BIT(PORTD,Copy_u8Pin); break;
 5ec:	a2 e3       	ldi	r26, 0x32	; 50
 5ee:	b0 e0       	ldi	r27, 0x00	; 0
 5f0:	e2 e3       	ldi	r30, 0x32	; 50
 5f2:	f0 e0       	ldi	r31, 0x00	; 0
 5f4:	80 81       	ld	r24, Z
 5f6:	48 2f       	mov	r20, r24
 5f8:	8b 81       	ldd	r24, Y+3	; 0x03
 5fa:	28 2f       	mov	r18, r24
 5fc:	30 e0       	ldi	r19, 0x00	; 0
 5fe:	81 e0       	ldi	r24, 0x01	; 1
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	02 2e       	mov	r0, r18
 604:	02 c0       	rjmp	.+4      	; 0x60a <DIO_u8TogglePinValue+0xf0>
 606:	88 0f       	add	r24, r24
 608:	99 1f       	adc	r25, r25
 60a:	0a 94       	dec	r0
 60c:	e2 f7       	brpl	.-8      	; 0x606 <DIO_u8TogglePinValue+0xec>
 60e:	84 27       	eor	r24, r20
 610:	8c 93       	st	X, r24
 612:	05 c0       	rjmp	.+10     	; 0x61e <DIO_u8TogglePinValue+0x104>
			default: Local_u8ErrorState=NOK;
 614:	81 e0       	ldi	r24, 0x01	; 1
 616:	89 83       	std	Y+1, r24	; 0x01
 618:	02 c0       	rjmp	.+4      	; 0x61e <DIO_u8TogglePinValue+0x104>
			}
		}
		else{
			Local_u8ErrorState=NOK;
 61a:	81 e0       	ldi	r24, 0x01	; 1
 61c:	89 83       	std	Y+1, r24	; 0x01
		}
	return Local_u8ErrorState;
 61e:	89 81       	ldd	r24, Y+1	; 0x01
}
 620:	0f 90       	pop	r0
 622:	0f 90       	pop	r0
 624:	0f 90       	pop	r0
 626:	0f 90       	pop	r0
 628:	0f 90       	pop	r0
 62a:	cf 91       	pop	r28
 62c:	df 91       	pop	r29
 62e:	08 95       	ret

00000630 <GIE_voidEnable>:
#include "BIT_MATH.h"

#include "GIE_interface.h"
#include "GIE_register.h"

void GIE_voidEnable(void){
 630:	df 93       	push	r29
 632:	cf 93       	push	r28
 634:	cd b7       	in	r28, 0x3d	; 61
 636:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(SREG,SREG_I);
 638:	af e5       	ldi	r26, 0x5F	; 95
 63a:	b0 e0       	ldi	r27, 0x00	; 0
 63c:	ef e5       	ldi	r30, 0x5F	; 95
 63e:	f0 e0       	ldi	r31, 0x00	; 0
 640:	80 81       	ld	r24, Z
 642:	80 68       	ori	r24, 0x80	; 128
 644:	8c 93       	st	X, r24
}
 646:	cf 91       	pop	r28
 648:	df 91       	pop	r29
 64a:	08 95       	ret

0000064c <GIE_voidDisable>:

void GIE_voidDisable(void){
 64c:	df 93       	push	r29
 64e:	cf 93       	push	r28
 650:	cd b7       	in	r28, 0x3d	; 61
 652:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(SREG,SREG_I);
 654:	af e5       	ldi	r26, 0x5F	; 95
 656:	b0 e0       	ldi	r27, 0x00	; 0
 658:	ef e5       	ldi	r30, 0x5F	; 95
 65a:	f0 e0       	ldi	r31, 0x00	; 0
 65c:	80 81       	ld	r24, Z
 65e:	8f 77       	andi	r24, 0x7F	; 127
 660:	8c 93       	st	X, r24
 662:	cf 91       	pop	r28
 664:	df 91       	pop	r29
 666:	08 95       	ret

00000668 <PORT_voidInit>:
#include "PORT_config.h"
#include "PORT_private.h"
#include "PORT_interface.h"
#include "PORT_register.h"

void PORT_voidInit(){
 668:	df 93       	push	r29
 66a:	cf 93       	push	r28
 66c:	cd b7       	in	r28, 0x3d	; 61
 66e:	de b7       	in	r29, 0x3e	; 62
    DDRA=PORTA_DIR;
 670:	ea e3       	ldi	r30, 0x3A	; 58
 672:	f0 e0       	ldi	r31, 0x00	; 0
 674:	8f ef       	ldi	r24, 0xFF	; 255
 676:	80 83       	st	Z, r24
    DDRB=PORTB_DIR;
 678:	e7 e3       	ldi	r30, 0x37	; 55
 67a:	f0 e0       	ldi	r31, 0x00	; 0
 67c:	10 82       	st	Z, r1
    DDRC=PORTC_DIR;
 67e:	e4 e3       	ldi	r30, 0x34	; 52
 680:	f0 e0       	ldi	r31, 0x00	; 0
 682:	10 82       	st	Z, r1
    DDRD=PORTD_DIR;
 684:	e1 e3       	ldi	r30, 0x31	; 49
 686:	f0 e0       	ldi	r31, 0x00	; 0
 688:	83 e0       	ldi	r24, 0x03	; 3
 68a:	80 83       	st	Z, r24
    
    PORTA=PORTA_INIT_VAL;
 68c:	eb e3       	ldi	r30, 0x3B	; 59
 68e:	f0 e0       	ldi	r31, 0x00	; 0
 690:	10 82       	st	Z, r1
    PORTB=PORTB_INIT_VAL;
 692:	e8 e3       	ldi	r30, 0x38	; 56
 694:	f0 e0       	ldi	r31, 0x00	; 0
 696:	10 82       	st	Z, r1
    PORTC=PORTC_INIT_VAL;
 698:	e5 e3       	ldi	r30, 0x35	; 53
 69a:	f0 e0       	ldi	r31, 0x00	; 0
 69c:	10 82       	st	Z, r1
    PORTD=PORTD_INIT_VAL;
 69e:	e2 e3       	ldi	r30, 0x32	; 50
 6a0:	f0 e0       	ldi	r31, 0x00	; 0
 6a2:	10 82       	st	Z, r1
}
 6a4:	cf 91       	pop	r28
 6a6:	df 91       	pop	r29
 6a8:	08 95       	ret

000006aa <SSD_u8SetNumber>:
		0b01111101,
		0b00000111,
		0b01111111,
		0b01101111};

u8 SSD_u8SetNumber(u8 Copy_u8Number,SSD_t* SSD){
 6aa:	df 93       	push	r29
 6ac:	cf 93       	push	r28
 6ae:	00 d0       	rcall	.+0      	; 0x6b0 <SSD_u8SetNumber+0x6>
 6b0:	00 d0       	rcall	.+0      	; 0x6b2 <SSD_u8SetNumber+0x8>
 6b2:	cd b7       	in	r28, 0x3d	; 61
 6b4:	de b7       	in	r29, 0x3e	; 62
 6b6:	8a 83       	std	Y+2, r24	; 0x02
 6b8:	7c 83       	std	Y+4, r23	; 0x04
 6ba:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorStatus=OK;
 6bc:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Number<=9){
 6be:	8a 81       	ldd	r24, Y+2	; 0x02
 6c0:	8a 30       	cpi	r24, 0x0A	; 10
 6c2:	68 f5       	brcc	.+90     	; 0x71e <SSD_u8SetNumber+0x74>
		if((SSD->COM_TYPE)==ANODE){
 6c4:	eb 81       	ldd	r30, Y+3	; 0x03
 6c6:	fc 81       	ldd	r31, Y+4	; 0x04
 6c8:	80 81       	ld	r24, Z
 6ca:	81 30       	cpi	r24, 0x01	; 1
 6cc:	89 f4       	brne	.+34     	; 0x6f0 <SSD_u8SetNumber+0x46>
			DIO_u8SetPortValue((SSD)->Port,~(SevenSegArray[Copy_u8Number]));
 6ce:	eb 81       	ldd	r30, Y+3	; 0x03
 6d0:	fc 81       	ldd	r31, Y+4	; 0x04
 6d2:	21 81       	ldd	r18, Z+1	; 0x01
 6d4:	8a 81       	ldd	r24, Y+2	; 0x02
 6d6:	88 2f       	mov	r24, r24
 6d8:	90 e0       	ldi	r25, 0x00	; 0
 6da:	fc 01       	movw	r30, r24
 6dc:	e0 5a       	subi	r30, 0xA0	; 160
 6de:	ff 4f       	sbci	r31, 0xFF	; 255
 6e0:	80 81       	ld	r24, Z
 6e2:	98 2f       	mov	r25, r24
 6e4:	90 95       	com	r25
 6e6:	82 2f       	mov	r24, r18
 6e8:	69 2f       	mov	r22, r25
 6ea:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <DIO_u8SetPortValue>
 6ee:	19 c0       	rjmp	.+50     	; 0x722 <SSD_u8SetNumber+0x78>
		}
		else if((SSD->COM_TYPE)==CATHODE){
 6f0:	eb 81       	ldd	r30, Y+3	; 0x03
 6f2:	fc 81       	ldd	r31, Y+4	; 0x04
 6f4:	80 81       	ld	r24, Z
 6f6:	88 23       	and	r24, r24
 6f8:	79 f4       	brne	.+30     	; 0x718 <SSD_u8SetNumber+0x6e>
			DIO_u8SetPortValue((SSD)->Port,SevenSegArray[Copy_u8Number]);
 6fa:	eb 81       	ldd	r30, Y+3	; 0x03
 6fc:	fc 81       	ldd	r31, Y+4	; 0x04
 6fe:	21 81       	ldd	r18, Z+1	; 0x01
 700:	8a 81       	ldd	r24, Y+2	; 0x02
 702:	88 2f       	mov	r24, r24
 704:	90 e0       	ldi	r25, 0x00	; 0
 706:	fc 01       	movw	r30, r24
 708:	e0 5a       	subi	r30, 0xA0	; 160
 70a:	ff 4f       	sbci	r31, 0xFF	; 255
 70c:	90 81       	ld	r25, Z
 70e:	82 2f       	mov	r24, r18
 710:	69 2f       	mov	r22, r25
 712:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <DIO_u8SetPortValue>
 716:	05 c0       	rjmp	.+10     	; 0x722 <SSD_u8SetNumber+0x78>
		}
		else{
			Local_u8ErrorStatus=NOK;
 718:	81 e0       	ldi	r24, 0x01	; 1
 71a:	89 83       	std	Y+1, r24	; 0x01
 71c:	02 c0       	rjmp	.+4      	; 0x722 <SSD_u8SetNumber+0x78>
		}
	}
	else{
		Local_u8ErrorStatus=NOK;
 71e:	81 e0       	ldi	r24, 0x01	; 1
 720:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorStatus;
 722:	89 81       	ldd	r24, Y+1	; 0x01
}
 724:	0f 90       	pop	r0
 726:	0f 90       	pop	r0
 728:	0f 90       	pop	r0
 72a:	0f 90       	pop	r0
 72c:	cf 91       	pop	r28
 72e:	df 91       	pop	r29
 730:	08 95       	ret

00000732 <SSD_u8Enable>:

u8 SSD_u8Enable(SSD_t* SSD){
 732:	df 93       	push	r29
 734:	cf 93       	push	r28
 736:	00 d0       	rcall	.+0      	; 0x738 <SSD_u8Enable+0x6>
 738:	0f 92       	push	r0
 73a:	cd b7       	in	r28, 0x3d	; 61
 73c:	de b7       	in	r29, 0x3e	; 62
 73e:	9b 83       	std	Y+3, r25	; 0x03
 740:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus=OK;
 742:	19 82       	std	Y+1, r1	; 0x01
	if((SSD->COM_TYPE)==ANODE){
 744:	ea 81       	ldd	r30, Y+2	; 0x02
 746:	fb 81       	ldd	r31, Y+3	; 0x03
 748:	80 81       	ld	r24, Z
 74a:	81 30       	cpi	r24, 0x01	; 1
 74c:	59 f4       	brne	.+22     	; 0x764 <SSD_u8Enable+0x32>
		DIO_u8SetPinValue((SSD)->EnablePort,(SSD)->EnablePin,DIO_u8PIN_HIGH);
 74e:	ea 81       	ldd	r30, Y+2	; 0x02
 750:	fb 81       	ldd	r31, Y+3	; 0x03
 752:	82 81       	ldd	r24, Z+2	; 0x02
 754:	ea 81       	ldd	r30, Y+2	; 0x02
 756:	fb 81       	ldd	r31, Y+3	; 0x03
 758:	93 81       	ldd	r25, Z+3	; 0x03
 75a:	69 2f       	mov	r22, r25
 75c:	41 e0       	ldi	r20, 0x01	; 1
 75e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_u8SetPinValue>
 762:	12 c0       	rjmp	.+36     	; 0x788 <SSD_u8Enable+0x56>
	}
	else if((SSD->COM_TYPE)==CATHODE){
 764:	ea 81       	ldd	r30, Y+2	; 0x02
 766:	fb 81       	ldd	r31, Y+3	; 0x03
 768:	80 81       	ld	r24, Z
 76a:	88 23       	and	r24, r24
 76c:	59 f4       	brne	.+22     	; 0x784 <SSD_u8Enable+0x52>
		DIO_u8SetPinValue((SSD)->EnablePort,(SSD)->EnablePin,DIO_u8PIN_LOW);
 76e:	ea 81       	ldd	r30, Y+2	; 0x02
 770:	fb 81       	ldd	r31, Y+3	; 0x03
 772:	82 81       	ldd	r24, Z+2	; 0x02
 774:	ea 81       	ldd	r30, Y+2	; 0x02
 776:	fb 81       	ldd	r31, Y+3	; 0x03
 778:	93 81       	ldd	r25, Z+3	; 0x03
 77a:	69 2f       	mov	r22, r25
 77c:	40 e0       	ldi	r20, 0x00	; 0
 77e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_u8SetPinValue>
 782:	02 c0       	rjmp	.+4      	; 0x788 <SSD_u8Enable+0x56>
	}
	else{
		Local_u8ErrorStatus=NOK;
 784:	81 e0       	ldi	r24, 0x01	; 1
 786:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorStatus;
 788:	89 81       	ldd	r24, Y+1	; 0x01
}
 78a:	0f 90       	pop	r0
 78c:	0f 90       	pop	r0
 78e:	0f 90       	pop	r0
 790:	cf 91       	pop	r28
 792:	df 91       	pop	r29
 794:	08 95       	ret

00000796 <SSD_u8Disable>:

u8 SSD_u8Disable(SSD_t* SSD){
 796:	df 93       	push	r29
 798:	cf 93       	push	r28
 79a:	00 d0       	rcall	.+0      	; 0x79c <SSD_u8Disable+0x6>
 79c:	0f 92       	push	r0
 79e:	cd b7       	in	r28, 0x3d	; 61
 7a0:	de b7       	in	r29, 0x3e	; 62
 7a2:	9b 83       	std	Y+3, r25	; 0x03
 7a4:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus=OK;
 7a6:	19 82       	std	Y+1, r1	; 0x01
	if((SSD->COM_TYPE)==ANODE){
 7a8:	ea 81       	ldd	r30, Y+2	; 0x02
 7aa:	fb 81       	ldd	r31, Y+3	; 0x03
 7ac:	80 81       	ld	r24, Z
 7ae:	81 30       	cpi	r24, 0x01	; 1
 7b0:	59 f4       	brne	.+22     	; 0x7c8 <SSD_u8Disable+0x32>
		DIO_u8SetPinValue((SSD)->EnablePort,(SSD)->EnablePin,DIO_u8PIN_LOW);
 7b2:	ea 81       	ldd	r30, Y+2	; 0x02
 7b4:	fb 81       	ldd	r31, Y+3	; 0x03
 7b6:	82 81       	ldd	r24, Z+2	; 0x02
 7b8:	ea 81       	ldd	r30, Y+2	; 0x02
 7ba:	fb 81       	ldd	r31, Y+3	; 0x03
 7bc:	93 81       	ldd	r25, Z+3	; 0x03
 7be:	69 2f       	mov	r22, r25
 7c0:	40 e0       	ldi	r20, 0x00	; 0
 7c2:	0e 94 49 00 	call	0x92	; 0x92 <DIO_u8SetPinValue>
 7c6:	12 c0       	rjmp	.+36     	; 0x7ec <SSD_u8Disable+0x56>
	}
	else if((SSD->COM_TYPE)==CATHODE){
 7c8:	ea 81       	ldd	r30, Y+2	; 0x02
 7ca:	fb 81       	ldd	r31, Y+3	; 0x03
 7cc:	80 81       	ld	r24, Z
 7ce:	88 23       	and	r24, r24
 7d0:	59 f4       	brne	.+22     	; 0x7e8 <SSD_u8Disable+0x52>
		DIO_u8SetPinValue((SSD)->EnablePort,(SSD)->EnablePin,DIO_u8PIN_HIGH);
 7d2:	ea 81       	ldd	r30, Y+2	; 0x02
 7d4:	fb 81       	ldd	r31, Y+3	; 0x03
 7d6:	82 81       	ldd	r24, Z+2	; 0x02
 7d8:	ea 81       	ldd	r30, Y+2	; 0x02
 7da:	fb 81       	ldd	r31, Y+3	; 0x03
 7dc:	93 81       	ldd	r25, Z+3	; 0x03
 7de:	69 2f       	mov	r22, r25
 7e0:	41 e0       	ldi	r20, 0x01	; 1
 7e2:	0e 94 49 00 	call	0x92	; 0x92 <DIO_u8SetPinValue>
 7e6:	02 c0       	rjmp	.+4      	; 0x7ec <SSD_u8Disable+0x56>
	}
	else{
		Local_u8ErrorStatus=NOK;
 7e8:	81 e0       	ldi	r24, 0x01	; 1
 7ea:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorStatus;
 7ec:	89 81       	ldd	r24, Y+1	; 0x01
}
 7ee:	0f 90       	pop	r0
 7f0:	0f 90       	pop	r0
 7f2:	0f 90       	pop	r0
 7f4:	cf 91       	pop	r28
 7f6:	df 91       	pop	r29
 7f8:	08 95       	ret

000007fa <TIMER0_voidInit>:
#include "TIMER_private.h"
#include "TIMER_config.h"

static void (*TIMER0_pvCallBackFunc)(void)=NULL;

void TIMER0_voidInit(void){
 7fa:	df 93       	push	r29
 7fc:	cf 93       	push	r28
 7fe:	cd b7       	in	r28, 0x3d	; 61
 800:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR0,TCCR0_WGM00);
#elif TIMER0_GEN_MODE==PWM
	CLR_BIT(TCCR0,TCCR0_WGM01);
	SET_BIT(TCCR0,TCCR0_WGM00);
#elif TIMER0_GEN_MODE==CTC
	SET_BIT(TCCR0,TCCR0_WGM01);
 802:	a3 e5       	ldi	r26, 0x53	; 83
 804:	b0 e0       	ldi	r27, 0x00	; 0
 806:	e3 e5       	ldi	r30, 0x53	; 83
 808:	f0 e0       	ldi	r31, 0x00	; 0
 80a:	80 81       	ld	r24, Z
 80c:	88 60       	ori	r24, 0x08	; 8
 80e:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_WGM00);
 810:	a3 e5       	ldi	r26, 0x53	; 83
 812:	b0 e0       	ldi	r27, 0x00	; 0
 814:	e3 e5       	ldi	r30, 0x53	; 83
 816:	f0 e0       	ldi	r31, 0x00	; 0
 818:	80 81       	ld	r24, Z
 81a:	8f 7b       	andi	r24, 0xBF	; 191
 81c:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_WGM01);
	SET_BIT(TCCR0,TCCR0_WGM00);
#endif

	//Initialize Compare Match Output Mode
	TCCR0&=COMP_MATCH_OUT_MASK;
 81e:	a3 e5       	ldi	r26, 0x53	; 83
 820:	b0 e0       	ldi	r27, 0x00	; 0
 822:	e3 e5       	ldi	r30, 0x53	; 83
 824:	f0 e0       	ldi	r31, 0x00	; 0
 826:	80 81       	ld	r24, Z
 828:	8f 7c       	andi	r24, 0xCF	; 207
 82a:	8c 93       	st	X, r24
	TCCR0|=(TIMER0_COMP_MATCH_OUTPUT_MODE<<4);
 82c:	a3 e5       	ldi	r26, 0x53	; 83
 82e:	b0 e0       	ldi	r27, 0x00	; 0
 830:	e3 e5       	ldi	r30, 0x53	; 83
 832:	f0 e0       	ldi	r31, 0x00	; 0
 834:	80 81       	ld	r24, Z
 836:	8c 93       	st	X, r24

	//Initialize Interrupt Enable pins
#if TIMER0_COMP_MATCH_INT==ENABLE
	SET_BIT(TIMSK,TIMSK_OCIE0);
 838:	a9 e5       	ldi	r26, 0x59	; 89
 83a:	b0 e0       	ldi	r27, 0x00	; 0
 83c:	e9 e5       	ldi	r30, 0x59	; 89
 83e:	f0 e0       	ldi	r31, 0x00	; 0
 840:	80 81       	ld	r24, Z
 842:	82 60       	ori	r24, 0x02	; 2
 844:	8c 93       	st	X, r24
#endif

#if TIMER0_OVERFLOW_INT==ENABLE
	SET_BIT(TIMSK,TIMSK_TOIE0);
#elif TIMER0_OVERFLOW_INT==DISABLE
	CLR_BIT(TIMSK,TIMSK_TOIE0);
 846:	a9 e5       	ldi	r26, 0x59	; 89
 848:	b0 e0       	ldi	r27, 0x00	; 0
 84a:	e9 e5       	ldi	r30, 0x59	; 89
 84c:	f0 e0       	ldi	r31, 0x00	; 0
 84e:	80 81       	ld	r24, Z
 850:	8e 7f       	andi	r24, 0xFE	; 254
 852:	8c 93       	st	X, r24
#endif
	//Initialize Compare Match Value
	OCR0=TIMER0_COMP_MATCH_VAL;
 854:	ec e5       	ldi	r30, 0x5C	; 92
 856:	f0 e0       	ldi	r31, 0x00	; 0
 858:	8a ef       	ldi	r24, 0xFA	; 250
 85a:	80 83       	st	Z, r24
	//Initialize Preload Value
	TCNT0=TIMER0_PRELOAD_VAL;
 85c:	e2 e5       	ldi	r30, 0x52	; 82
 85e:	f0 e0       	ldi	r31, 0x00	; 0
 860:	10 82       	st	Z, r1
	//Initialize Prescaler
	TCCR0&=PRESCALER_MASK;
 862:	a3 e5       	ldi	r26, 0x53	; 83
 864:	b0 e0       	ldi	r27, 0x00	; 0
 866:	e3 e5       	ldi	r30, 0x53	; 83
 868:	f0 e0       	ldi	r31, 0x00	; 0
 86a:	80 81       	ld	r24, Z
 86c:	88 7f       	andi	r24, 0xF8	; 248
 86e:	8c 93       	st	X, r24
	TCCR0|=TIMER0_PRESCALER;
 870:	a3 e5       	ldi	r26, 0x53	; 83
 872:	b0 e0       	ldi	r27, 0x00	; 0
 874:	e3 e5       	ldi	r30, 0x53	; 83
 876:	f0 e0       	ldi	r31, 0x00	; 0
 878:	80 81       	ld	r24, Z
 87a:	82 60       	ori	r24, 0x02	; 2
 87c:	8c 93       	st	X, r24
}
 87e:	cf 91       	pop	r28
 880:	df 91       	pop	r29
 882:	08 95       	ret

00000884 <TIMER2_voidInit>:

void TIMER2_voidInit(void){
 884:	df 93       	push	r29
 886:	cf 93       	push	r28
 888:	cd b7       	in	r28, 0x3d	; 61
 88a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR2,TCCR2_WGM20);
#elif TIMER2_GEN_MODE==PWM
	CLR_BIT(TCCR2,TCCR2_WGM21);
	SET_BIT(TCCR2,TCCR2_WGM20);
#elif TIMER2_GEN_MODE==CTC
	SET_BIT(TCCR2,TCCR2_WGM21);
 88c:	a5 e4       	ldi	r26, 0x45	; 69
 88e:	b0 e0       	ldi	r27, 0x00	; 0
 890:	e5 e4       	ldi	r30, 0x45	; 69
 892:	f0 e0       	ldi	r31, 0x00	; 0
 894:	80 81       	ld	r24, Z
 896:	88 60       	ori	r24, 0x08	; 8
 898:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,TCCR2_WGM20);
 89a:	a5 e4       	ldi	r26, 0x45	; 69
 89c:	b0 e0       	ldi	r27, 0x00	; 0
 89e:	e5 e4       	ldi	r30, 0x45	; 69
 8a0:	f0 e0       	ldi	r31, 0x00	; 0
 8a2:	80 81       	ld	r24, Z
 8a4:	8f 7b       	andi	r24, 0xBF	; 191
 8a6:	8c 93       	st	X, r24
	SET_BIT(TCCR2,TCCR2_WGM21);
	SET_BIT(TCCR2,TCCR2_WGM20);
#endif

	//Initialize Compare Match Output Mode
	TCCR2&=COMP_MATCH_OUT_MASK;
 8a8:	a5 e4       	ldi	r26, 0x45	; 69
 8aa:	b0 e0       	ldi	r27, 0x00	; 0
 8ac:	e5 e4       	ldi	r30, 0x45	; 69
 8ae:	f0 e0       	ldi	r31, 0x00	; 0
 8b0:	80 81       	ld	r24, Z
 8b2:	8f 7c       	andi	r24, 0xCF	; 207
 8b4:	8c 93       	st	X, r24
	TCCR2|=(TIMER2_COMP_MATCH_OUTPUT_MODE<<4);
 8b6:	a5 e4       	ldi	r26, 0x45	; 69
 8b8:	b0 e0       	ldi	r27, 0x00	; 0
 8ba:	e5 e4       	ldi	r30, 0x45	; 69
 8bc:	f0 e0       	ldi	r31, 0x00	; 0
 8be:	80 81       	ld	r24, Z
 8c0:	8c 93       	st	X, r24

	//Initialize Interrupt Enable pins
#if TIMER2_COMP_MATCH_INT==ENABLE
	SET_BIT(TIMSK,TIMSK_OCIE2);
 8c2:	a9 e5       	ldi	r26, 0x59	; 89
 8c4:	b0 e0       	ldi	r27, 0x00	; 0
 8c6:	e9 e5       	ldi	r30, 0x59	; 89
 8c8:	f0 e0       	ldi	r31, 0x00	; 0
 8ca:	80 81       	ld	r24, Z
 8cc:	80 68       	ori	r24, 0x80	; 128
 8ce:	8c 93       	st	X, r24
#elif TIMER2_COMP_MATCH_INT==DISABLE
	CLR_BIT(TIMSK,TIMSK_OCIE2);
#endif

#if TIMER2_OVERFLOW_INT==ENABLE
	SET_BIT(TIMSK,TIMSK_TOIE2);
 8d0:	a9 e5       	ldi	r26, 0x59	; 89
 8d2:	b0 e0       	ldi	r27, 0x00	; 0
 8d4:	e9 e5       	ldi	r30, 0x59	; 89
 8d6:	f0 e0       	ldi	r31, 0x00	; 0
 8d8:	80 81       	ld	r24, Z
 8da:	80 64       	ori	r24, 0x40	; 64
 8dc:	8c 93       	st	X, r24
#elif TIMER0_OVERFLOW_INT==DISABLE
	CLR_BIT(TIMSK,TIMSK_TOIE2);
#endif

	//Initialize Compare Match Value
	OCR2=TIMER2_COMP_MATCH_VAL;
 8de:	e3 e4       	ldi	r30, 0x43	; 67
 8e0:	f0 e0       	ldi	r31, 0x00	; 0
 8e2:	8a ef       	ldi	r24, 0xFA	; 250
 8e4:	80 83       	st	Z, r24

	//Initialize Preload Value
	TCNT2=TIMER2_PRELOAD_VAL;
 8e6:	e4 e4       	ldi	r30, 0x44	; 68
 8e8:	f0 e0       	ldi	r31, 0x00	; 0
 8ea:	10 82       	st	Z, r1

	//Initialize Prescaler
	TCCR2&=PRESCALER_MASK;
 8ec:	a5 e4       	ldi	r26, 0x45	; 69
 8ee:	b0 e0       	ldi	r27, 0x00	; 0
 8f0:	e5 e4       	ldi	r30, 0x45	; 69
 8f2:	f0 e0       	ldi	r31, 0x00	; 0
 8f4:	80 81       	ld	r24, Z
 8f6:	88 7f       	andi	r24, 0xF8	; 248
 8f8:	8c 93       	st	X, r24
	TCCR2|=TIMER2_PRESCALER;
 8fa:	a5 e4       	ldi	r26, 0x45	; 69
 8fc:	b0 e0       	ldi	r27, 0x00	; 0
 8fe:	e5 e4       	ldi	r30, 0x45	; 69
 900:	f0 e0       	ldi	r31, 0x00	; 0
 902:	80 81       	ld	r24, Z
 904:	82 60       	ori	r24, 0x02	; 2
 906:	8c 93       	st	X, r24
}
 908:	cf 91       	pop	r28
 90a:	df 91       	pop	r29
 90c:	08 95       	ret

0000090e <TIMER0_u8SetCallBack>:

u8 TIMER0_u8SetCallBack(void(*Copy_pvCallBackFunc)(void)){
 90e:	df 93       	push	r29
 910:	cf 93       	push	r28
 912:	00 d0       	rcall	.+0      	; 0x914 <TIMER0_u8SetCallBack+0x6>
 914:	0f 92       	push	r0
 916:	cd b7       	in	r28, 0x3d	; 61
 918:	de b7       	in	r29, 0x3e	; 62
 91a:	9b 83       	std	Y+3, r25	; 0x03
 91c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
 91e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvCallBackFunc!=NULL){
 920:	8a 81       	ldd	r24, Y+2	; 0x02
 922:	9b 81       	ldd	r25, Y+3	; 0x03
 924:	00 97       	sbiw	r24, 0x00	; 0
 926:	39 f0       	breq	.+14     	; 0x936 <TIMER0_u8SetCallBack+0x28>
		TIMER0_pvCallBackFunc=Copy_pvCallBackFunc;
 928:	8a 81       	ldd	r24, Y+2	; 0x02
 92a:	9b 81       	ldd	r25, Y+3	; 0x03
 92c:	90 93 73 00 	sts	0x0073, r25
 930:	80 93 72 00 	sts	0x0072, r24
 934:	02 c0       	rjmp	.+4      	; 0x93a <TIMER0_u8SetCallBack+0x2c>
	}
	else{
		Local_u8ErrorState=NULL_POINTER;
 936:	82 e0       	ldi	r24, 0x02	; 2
 938:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 93a:	89 81       	ldd	r24, Y+1	; 0x01
}
 93c:	0f 90       	pop	r0
 93e:	0f 90       	pop	r0
 940:	0f 90       	pop	r0
 942:	cf 91       	pop	r28
 944:	df 91       	pop	r29
 946:	08 95       	ret

00000948 <__vector_4>:

//TIMER2 Compare Match ISR
void __vector_4(void)  __attribute__((signal));
void __vector_4(void){
 948:	1f 92       	push	r1
 94a:	0f 92       	push	r0
 94c:	0f b6       	in	r0, 0x3f	; 63
 94e:	0f 92       	push	r0
 950:	11 24       	eor	r1, r1
 952:	df 93       	push	r29
 954:	cf 93       	push	r28
 956:	cd b7       	in	r28, 0x3d	; 61
 958:	de b7       	in	r29, 0x3e	; 62

}
 95a:	cf 91       	pop	r28
 95c:	df 91       	pop	r29
 95e:	0f 90       	pop	r0
 960:	0f be       	out	0x3f, r0	; 63
 962:	0f 90       	pop	r0
 964:	1f 90       	pop	r1
 966:	18 95       	reti

00000968 <__vector_5>:

//TIMER2 Overflow ISR
void __vector_5(void)  __attribute__((signal));
void __vector_5(void){
 968:	1f 92       	push	r1
 96a:	0f 92       	push	r0
 96c:	0f b6       	in	r0, 0x3f	; 63
 96e:	0f 92       	push	r0
 970:	11 24       	eor	r1, r1
 972:	df 93       	push	r29
 974:	cf 93       	push	r28
 976:	cd b7       	in	r28, 0x3d	; 61
 978:	de b7       	in	r29, 0x3e	; 62

}
 97a:	cf 91       	pop	r28
 97c:	df 91       	pop	r29
 97e:	0f 90       	pop	r0
 980:	0f be       	out	0x3f, r0	; 63
 982:	0f 90       	pop	r0
 984:	1f 90       	pop	r1
 986:	18 95       	reti

00000988 <__vector_6>:

//TIMER1 Capture Event ISR
void __vector_6(void)  __attribute__((signal));
void __vector_6(void){
 988:	1f 92       	push	r1
 98a:	0f 92       	push	r0
 98c:	0f b6       	in	r0, 0x3f	; 63
 98e:	0f 92       	push	r0
 990:	11 24       	eor	r1, r1
 992:	df 93       	push	r29
 994:	cf 93       	push	r28
 996:	cd b7       	in	r28, 0x3d	; 61
 998:	de b7       	in	r29, 0x3e	; 62

}
 99a:	cf 91       	pop	r28
 99c:	df 91       	pop	r29
 99e:	0f 90       	pop	r0
 9a0:	0f be       	out	0x3f, r0	; 63
 9a2:	0f 90       	pop	r0
 9a4:	1f 90       	pop	r1
 9a6:	18 95       	reti

000009a8 <__vector_7>:


//TIMER1 Compare Match A ISR
void __vector_7(void)  __attribute__((signal));
void __vector_7(void){
 9a8:	1f 92       	push	r1
 9aa:	0f 92       	push	r0
 9ac:	0f b6       	in	r0, 0x3f	; 63
 9ae:	0f 92       	push	r0
 9b0:	11 24       	eor	r1, r1
 9b2:	df 93       	push	r29
 9b4:	cf 93       	push	r28
 9b6:	cd b7       	in	r28, 0x3d	; 61
 9b8:	de b7       	in	r29, 0x3e	; 62

}
 9ba:	cf 91       	pop	r28
 9bc:	df 91       	pop	r29
 9be:	0f 90       	pop	r0
 9c0:	0f be       	out	0x3f, r0	; 63
 9c2:	0f 90       	pop	r0
 9c4:	1f 90       	pop	r1
 9c6:	18 95       	reti

000009c8 <__vector_8>:

//TIMER1 Compare Match B ISR
void __vector_8(void)  __attribute__((signal));
void __vector_8(void){
 9c8:	1f 92       	push	r1
 9ca:	0f 92       	push	r0
 9cc:	0f b6       	in	r0, 0x3f	; 63
 9ce:	0f 92       	push	r0
 9d0:	11 24       	eor	r1, r1
 9d2:	df 93       	push	r29
 9d4:	cf 93       	push	r28
 9d6:	cd b7       	in	r28, 0x3d	; 61
 9d8:	de b7       	in	r29, 0x3e	; 62

}
 9da:	cf 91       	pop	r28
 9dc:	df 91       	pop	r29
 9de:	0f 90       	pop	r0
 9e0:	0f be       	out	0x3f, r0	; 63
 9e2:	0f 90       	pop	r0
 9e4:	1f 90       	pop	r1
 9e6:	18 95       	reti

000009e8 <__vector_9>:

//TIMER1 Overflow ISR
void __vector_9(void)  __attribute__((signal));
void __vector_9(void){
 9e8:	1f 92       	push	r1
 9ea:	0f 92       	push	r0
 9ec:	0f b6       	in	r0, 0x3f	; 63
 9ee:	0f 92       	push	r0
 9f0:	11 24       	eor	r1, r1
 9f2:	df 93       	push	r29
 9f4:	cf 93       	push	r28
 9f6:	cd b7       	in	r28, 0x3d	; 61
 9f8:	de b7       	in	r29, 0x3e	; 62

}
 9fa:	cf 91       	pop	r28
 9fc:	df 91       	pop	r29
 9fe:	0f 90       	pop	r0
 a00:	0f be       	out	0x3f, r0	; 63
 a02:	0f 90       	pop	r0
 a04:	1f 90       	pop	r1
 a06:	18 95       	reti

00000a08 <__vector_10>:

//TIMER0 Compare Match ISR
void __vector_10(void)  __attribute__((signal));
void __vector_10(void){
 a08:	1f 92       	push	r1
 a0a:	0f 92       	push	r0
 a0c:	0f b6       	in	r0, 0x3f	; 63
 a0e:	0f 92       	push	r0
 a10:	11 24       	eor	r1, r1
 a12:	2f 93       	push	r18
 a14:	3f 93       	push	r19
 a16:	4f 93       	push	r20
 a18:	5f 93       	push	r21
 a1a:	6f 93       	push	r22
 a1c:	7f 93       	push	r23
 a1e:	8f 93       	push	r24
 a20:	9f 93       	push	r25
 a22:	af 93       	push	r26
 a24:	bf 93       	push	r27
 a26:	ef 93       	push	r30
 a28:	ff 93       	push	r31
 a2a:	df 93       	push	r29
 a2c:	cf 93       	push	r28
 a2e:	cd b7       	in	r28, 0x3d	; 61
 a30:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_pvCallBackFunc!=NULL){
 a32:	80 91 72 00 	lds	r24, 0x0072
 a36:	90 91 73 00 	lds	r25, 0x0073
 a3a:	00 97       	sbiw	r24, 0x00	; 0
 a3c:	29 f0       	breq	.+10     	; 0xa48 <__vector_10+0x40>
		TIMER0_pvCallBackFunc();
 a3e:	e0 91 72 00 	lds	r30, 0x0072
 a42:	f0 91 73 00 	lds	r31, 0x0073
 a46:	09 95       	icall
	}
}
 a48:	cf 91       	pop	r28
 a4a:	df 91       	pop	r29
 a4c:	ff 91       	pop	r31
 a4e:	ef 91       	pop	r30
 a50:	bf 91       	pop	r27
 a52:	af 91       	pop	r26
 a54:	9f 91       	pop	r25
 a56:	8f 91       	pop	r24
 a58:	7f 91       	pop	r23
 a5a:	6f 91       	pop	r22
 a5c:	5f 91       	pop	r21
 a5e:	4f 91       	pop	r20
 a60:	3f 91       	pop	r19
 a62:	2f 91       	pop	r18
 a64:	0f 90       	pop	r0
 a66:	0f be       	out	0x3f, r0	; 63
 a68:	0f 90       	pop	r0
 a6a:	1f 90       	pop	r1
 a6c:	18 95       	reti

00000a6e <__vector_11>:

//TIMER0 Overflow ISR
void __vector_11(void)  __attribute__((signal));
void __vector_11(void){
 a6e:	1f 92       	push	r1
 a70:	0f 92       	push	r0
 a72:	0f b6       	in	r0, 0x3f	; 63
 a74:	0f 92       	push	r0
 a76:	11 24       	eor	r1, r1
 a78:	df 93       	push	r29
 a7a:	cf 93       	push	r28
 a7c:	cd b7       	in	r28, 0x3d	; 61
 a7e:	de b7       	in	r29, 0x3e	; 62

}
 a80:	cf 91       	pop	r28
 a82:	df 91       	pop	r29
 a84:	0f 90       	pop	r0
 a86:	0f be       	out	0x3f, r0	; 63
 a88:	0f 90       	pop	r0
 a8a:	1f 90       	pop	r1
 a8c:	18 95       	reti

00000a8e <main>:

SSD_t SSD1 ={CATHODE,DIO_u8PORTA,DIO_u8PORTD,DIO_u8PIN0};
SSD_t SSD2 ={CATHODE,DIO_u8PORTA,DIO_u8PORTD,DIO_u8PIN1};
void PWM(void);

void main(){
 a8e:	df 93       	push	r29
 a90:	cf 93       	push	r28
 a92:	cd b7       	in	r28, 0x3d	; 61
 a94:	de b7       	in	r29, 0x3e	; 62
	PORT_voidInit();
 a96:	0e 94 34 03 	call	0x668	; 0x668 <PORT_voidInit>
	GIE_voidEnable();
 a9a:	0e 94 18 03 	call	0x630	; 0x630 <GIE_voidEnable>
	TIMER0_u8SetCallBack(&PWM);
 a9e:	86 e5       	ldi	r24, 0x56	; 86
 aa0:	95 e0       	ldi	r25, 0x05	; 5
 aa2:	0e 94 87 04 	call	0x90e	; 0x90e <TIMER0_u8SetCallBack>
	TIMER0_voidInit();
 aa6:	0e 94 fd 03 	call	0x7fa	; 0x7fa <TIMER0_voidInit>
 aaa:	ff cf       	rjmp	.-2      	; 0xaaa <main+0x1c>

00000aac <PWM>:
	while(1){
	}
}

void PWM(void){
 aac:	df 93       	push	r29
 aae:	cf 93       	push	r28
 ab0:	cd b7       	in	r28, 0x3d	; 61
 ab2:	de b7       	in	r29, 0x3e	; 62
	static u32 Local_u32Counter=0;
	static u8 num=0;
	static u8 state=0;
	Local_u32Counter++;
 ab4:	80 91 76 00 	lds	r24, 0x0076
 ab8:	90 91 77 00 	lds	r25, 0x0077
 abc:	a0 91 78 00 	lds	r26, 0x0078
 ac0:	b0 91 79 00 	lds	r27, 0x0079
 ac4:	01 96       	adiw	r24, 0x01	; 1
 ac6:	a1 1d       	adc	r26, r1
 ac8:	b1 1d       	adc	r27, r1
 aca:	80 93 76 00 	sts	0x0076, r24
 ace:	90 93 77 00 	sts	0x0077, r25
 ad2:	a0 93 78 00 	sts	0x0078, r26
 ad6:	b0 93 79 00 	sts	0x0079, r27
	if(state==0){
 ada:	80 91 74 00 	lds	r24, 0x0074
 ade:	88 23       	and	r24, r24
 ae0:	99 f4       	brne	.+38     	; 0xb08 <PWM+0x5c>
		SSD_u8Disable(&SSD1);
 ae2:	8a e6       	ldi	r24, 0x6A	; 106
 ae4:	90 e0       	ldi	r25, 0x00	; 0
 ae6:	0e 94 cb 03 	call	0x796	; 0x796 <SSD_u8Disable>
		SSD_u8SetNumber(num,&SSD2);
 aea:	80 91 75 00 	lds	r24, 0x0075
 aee:	2e e6       	ldi	r18, 0x6E	; 110
 af0:	30 e0       	ldi	r19, 0x00	; 0
 af2:	b9 01       	movw	r22, r18
 af4:	0e 94 55 03 	call	0x6aa	; 0x6aa <SSD_u8SetNumber>
		SSD_u8Enable(&SSD2);
 af8:	8e e6       	ldi	r24, 0x6E	; 110
 afa:	90 e0       	ldi	r25, 0x00	; 0
 afc:	0e 94 99 03 	call	0x732	; 0x732 <SSD_u8Enable>
		state=1;
 b00:	81 e0       	ldi	r24, 0x01	; 1
 b02:	80 93 74 00 	sts	0x0074, r24
 b06:	17 c0       	rjmp	.+46     	; 0xb36 <PWM+0x8a>
	}
	else if(state==1){
 b08:	80 91 74 00 	lds	r24, 0x0074
 b0c:	81 30       	cpi	r24, 0x01	; 1
 b0e:	99 f4       	brne	.+38     	; 0xb36 <PWM+0x8a>
		SSD_u8Disable(&SSD2);
 b10:	8e e6       	ldi	r24, 0x6E	; 110
 b12:	90 e0       	ldi	r25, 0x00	; 0
 b14:	0e 94 cb 03 	call	0x796	; 0x796 <SSD_u8Disable>
		SSD_u8SetNumber(9-num,&SSD1);
 b18:	90 91 75 00 	lds	r25, 0x0075
 b1c:	89 e0       	ldi	r24, 0x09	; 9
 b1e:	89 1b       	sub	r24, r25
 b20:	2a e6       	ldi	r18, 0x6A	; 106
 b22:	30 e0       	ldi	r19, 0x00	; 0
 b24:	b9 01       	movw	r22, r18
 b26:	0e 94 55 03 	call	0x6aa	; 0x6aa <SSD_u8SetNumber>
		SSD_u8Enable(&SSD1);
 b2a:	8a e6       	ldi	r24, 0x6A	; 106
 b2c:	90 e0       	ldi	r25, 0x00	; 0
 b2e:	0e 94 99 03 	call	0x732	; 0x732 <SSD_u8Enable>
		state=0;
 b32:	10 92 74 00 	sts	0x0074, r1
	}

	if(Local_u32Counter==4000){
 b36:	80 91 76 00 	lds	r24, 0x0076
 b3a:	90 91 77 00 	lds	r25, 0x0077
 b3e:	a0 91 78 00 	lds	r26, 0x0078
 b42:	b0 91 79 00 	lds	r27, 0x0079
 b46:	80 3a       	cpi	r24, 0xA0	; 160
 b48:	2f e0       	ldi	r18, 0x0F	; 15
 b4a:	92 07       	cpc	r25, r18
 b4c:	20 e0       	ldi	r18, 0x00	; 0
 b4e:	a2 07       	cpc	r26, r18
 b50:	20 e0       	ldi	r18, 0x00	; 0
 b52:	b2 07       	cpc	r27, r18
 b54:	a1 f4       	brne	.+40     	; 0xb7e <PWM+0xd2>
		if(num==9){
 b56:	80 91 75 00 	lds	r24, 0x0075
 b5a:	89 30       	cpi	r24, 0x09	; 9
 b5c:	19 f4       	brne	.+6      	; 0xb64 <PWM+0xb8>
			num=0;
 b5e:	10 92 75 00 	sts	0x0075, r1
 b62:	05 c0       	rjmp	.+10     	; 0xb6e <PWM+0xc2>
		}
		else{
			num++;
 b64:	80 91 75 00 	lds	r24, 0x0075
 b68:	8f 5f       	subi	r24, 0xFF	; 255
 b6a:	80 93 75 00 	sts	0x0075, r24
		}
		Local_u32Counter=0;
 b6e:	10 92 76 00 	sts	0x0076, r1
 b72:	10 92 77 00 	sts	0x0077, r1
 b76:	10 92 78 00 	sts	0x0078, r1
 b7a:	10 92 79 00 	sts	0x0079, r1
	}
}
 b7e:	cf 91       	pop	r28
 b80:	df 91       	pop	r29
 b82:	08 95       	ret

00000b84 <_exit>:
 b84:	f8 94       	cli

00000b86 <__stop_program>:
 b86:	ff cf       	rjmp	.-2      	; 0xb86 <__stop_program>
