
SPI_MASTER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008a2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  00000916  2**0
                  ALLOC
  2 .stab         00000c30  00000000  00000000  00000918  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000540  00000000  00000000  00001548  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 28 04 	jmp	0x850	; 0x850 <__vector_12>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 4a 04 	call	0x894	; 0x894 <main>
  74:	0c 94 4f 04 	jmp	0x89e	; 0x89e <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_u8SetPinValue>:
#include "DIO_private.h"
#include "DIO_config.h"



u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value){
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
  84:	28 97       	sbiw	r28, 0x08	; 8
  86:	0f b6       	in	r0, 0x3f	; 63
  88:	f8 94       	cli
  8a:	de bf       	out	0x3e, r29	; 62
  8c:	0f be       	out	0x3f, r0	; 63
  8e:	cd bf       	out	0x3d, r28	; 61
  90:	8a 83       	std	Y+2, r24	; 0x02
  92:	6b 83       	std	Y+3, r22	; 0x03
  94:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=OK;
  96:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin <= DIO_u8PIN7){
  98:	8b 81       	ldd	r24, Y+3	; 0x03
  9a:	88 30       	cpi	r24, 0x08	; 8
  9c:	08 f0       	brcs	.+2      	; 0xa0 <DIO_u8SetPinValue+0x24>
  9e:	f4 c0       	rjmp	.+488    	; 0x288 <DIO_u8SetPinValue+0x20c>
		if(Copy_u8Value == DIO_u8PIN_LOW){
  a0:	8c 81       	ldd	r24, Y+4	; 0x04
  a2:	88 23       	and	r24, r24
  a4:	09 f0       	breq	.+2      	; 0xa8 <DIO_u8SetPinValue+0x2c>
  a6:	77 c0       	rjmp	.+238    	; 0x196 <DIO_u8SetPinValue+0x11a>
			switch(Copy_u8Port){
  a8:	8a 81       	ldd	r24, Y+2	; 0x02
  aa:	28 2f       	mov	r18, r24
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	38 87       	std	Y+8, r19	; 0x08
  b0:	2f 83       	std	Y+7, r18	; 0x07
  b2:	8f 81       	ldd	r24, Y+7	; 0x07
  b4:	98 85       	ldd	r25, Y+8	; 0x08
  b6:	81 30       	cpi	r24, 0x01	; 1
  b8:	91 05       	cpc	r25, r1
  ba:	59 f1       	breq	.+86     	; 0x112 <DIO_u8SetPinValue+0x96>
  bc:	2f 81       	ldd	r18, Y+7	; 0x07
  be:	38 85       	ldd	r19, Y+8	; 0x08
  c0:	22 30       	cpi	r18, 0x02	; 2
  c2:	31 05       	cpc	r19, r1
  c4:	2c f4       	brge	.+10     	; 0xd0 <DIO_u8SetPinValue+0x54>
  c6:	8f 81       	ldd	r24, Y+7	; 0x07
  c8:	98 85       	ldd	r25, Y+8	; 0x08
  ca:	00 97       	sbiw	r24, 0x00	; 0
  cc:	69 f0       	breq	.+26     	; 0xe8 <DIO_u8SetPinValue+0x6c>
  ce:	60 c0       	rjmp	.+192    	; 0x190 <DIO_u8SetPinValue+0x114>
  d0:	2f 81       	ldd	r18, Y+7	; 0x07
  d2:	38 85       	ldd	r19, Y+8	; 0x08
  d4:	22 30       	cpi	r18, 0x02	; 2
  d6:	31 05       	cpc	r19, r1
  d8:	89 f1       	breq	.+98     	; 0x13c <DIO_u8SetPinValue+0xc0>
  da:	8f 81       	ldd	r24, Y+7	; 0x07
  dc:	98 85       	ldd	r25, Y+8	; 0x08
  de:	83 30       	cpi	r24, 0x03	; 3
  e0:	91 05       	cpc	r25, r1
  e2:	09 f4       	brne	.+2      	; 0xe6 <DIO_u8SetPinValue+0x6a>
  e4:	40 c0       	rjmp	.+128    	; 0x166 <DIO_u8SetPinValue+0xea>
  e6:	54 c0       	rjmp	.+168    	; 0x190 <DIO_u8SetPinValue+0x114>
			case DIO_u8PORTA : CLR_BIT(PORTA,Copy_u8Pin); break;
  e8:	ab e3       	ldi	r26, 0x3B	; 59
  ea:	b0 e0       	ldi	r27, 0x00	; 0
  ec:	eb e3       	ldi	r30, 0x3B	; 59
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	48 2f       	mov	r20, r24
  f4:	8b 81       	ldd	r24, Y+3	; 0x03
  f6:	28 2f       	mov	r18, r24
  f8:	30 e0       	ldi	r19, 0x00	; 0
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	02 2e       	mov	r0, r18
 100:	02 c0       	rjmp	.+4      	; 0x106 <DIO_u8SetPinValue+0x8a>
 102:	88 0f       	add	r24, r24
 104:	99 1f       	adc	r25, r25
 106:	0a 94       	dec	r0
 108:	e2 f7       	brpl	.-8      	; 0x102 <DIO_u8SetPinValue+0x86>
 10a:	80 95       	com	r24
 10c:	84 23       	and	r24, r20
 10e:	8c 93       	st	X, r24
 110:	bd c0       	rjmp	.+378    	; 0x28c <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB : CLR_BIT(PORTB,Copy_u8Pin); break;
 112:	a8 e3       	ldi	r26, 0x38	; 56
 114:	b0 e0       	ldi	r27, 0x00	; 0
 116:	e8 e3       	ldi	r30, 0x38	; 56
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	48 2f       	mov	r20, r24
 11e:	8b 81       	ldd	r24, Y+3	; 0x03
 120:	28 2f       	mov	r18, r24
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	02 2e       	mov	r0, r18
 12a:	02 c0       	rjmp	.+4      	; 0x130 <DIO_u8SetPinValue+0xb4>
 12c:	88 0f       	add	r24, r24
 12e:	99 1f       	adc	r25, r25
 130:	0a 94       	dec	r0
 132:	e2 f7       	brpl	.-8      	; 0x12c <DIO_u8SetPinValue+0xb0>
 134:	80 95       	com	r24
 136:	84 23       	and	r24, r20
 138:	8c 93       	st	X, r24
 13a:	a8 c0       	rjmp	.+336    	; 0x28c <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC : CLR_BIT(PORTC,Copy_u8Pin); break;
 13c:	a5 e3       	ldi	r26, 0x35	; 53
 13e:	b0 e0       	ldi	r27, 0x00	; 0
 140:	e5 e3       	ldi	r30, 0x35	; 53
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	48 2f       	mov	r20, r24
 148:	8b 81       	ldd	r24, Y+3	; 0x03
 14a:	28 2f       	mov	r18, r24
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	02 2e       	mov	r0, r18
 154:	02 c0       	rjmp	.+4      	; 0x15a <DIO_u8SetPinValue+0xde>
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	0a 94       	dec	r0
 15c:	e2 f7       	brpl	.-8      	; 0x156 <DIO_u8SetPinValue+0xda>
 15e:	80 95       	com	r24
 160:	84 23       	and	r24, r20
 162:	8c 93       	st	X, r24
 164:	93 c0       	rjmp	.+294    	; 0x28c <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD : CLR_BIT(PORTD,Copy_u8Pin); break;
 166:	a2 e3       	ldi	r26, 0x32	; 50
 168:	b0 e0       	ldi	r27, 0x00	; 0
 16a:	e2 e3       	ldi	r30, 0x32	; 50
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	80 81       	ld	r24, Z
 170:	48 2f       	mov	r20, r24
 172:	8b 81       	ldd	r24, Y+3	; 0x03
 174:	28 2f       	mov	r18, r24
 176:	30 e0       	ldi	r19, 0x00	; 0
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	02 2e       	mov	r0, r18
 17e:	02 c0       	rjmp	.+4      	; 0x184 <DIO_u8SetPinValue+0x108>
 180:	88 0f       	add	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	0a 94       	dec	r0
 186:	e2 f7       	brpl	.-8      	; 0x180 <DIO_u8SetPinValue+0x104>
 188:	80 95       	com	r24
 18a:	84 23       	and	r24, r20
 18c:	8c 93       	st	X, r24
 18e:	7e c0       	rjmp	.+252    	; 0x28c <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=NOK;
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	89 83       	std	Y+1, r24	; 0x01
 194:	7b c0       	rjmp	.+246    	; 0x28c <DIO_u8SetPinValue+0x210>
			}
		}
		else if(Copy_u8Value == DIO_u8PIN_HIGH){
 196:	8c 81       	ldd	r24, Y+4	; 0x04
 198:	81 30       	cpi	r24, 0x01	; 1
 19a:	09 f0       	breq	.+2      	; 0x19e <DIO_u8SetPinValue+0x122>
 19c:	72 c0       	rjmp	.+228    	; 0x282 <DIO_u8SetPinValue+0x206>
			switch(Copy_u8Port){
 19e:	8a 81       	ldd	r24, Y+2	; 0x02
 1a0:	28 2f       	mov	r18, r24
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	3e 83       	std	Y+6, r19	; 0x06
 1a6:	2d 83       	std	Y+5, r18	; 0x05
 1a8:	8d 81       	ldd	r24, Y+5	; 0x05
 1aa:	9e 81       	ldd	r25, Y+6	; 0x06
 1ac:	81 30       	cpi	r24, 0x01	; 1
 1ae:	91 05       	cpc	r25, r1
 1b0:	49 f1       	breq	.+82     	; 0x204 <DIO_u8SetPinValue+0x188>
 1b2:	2d 81       	ldd	r18, Y+5	; 0x05
 1b4:	3e 81       	ldd	r19, Y+6	; 0x06
 1b6:	22 30       	cpi	r18, 0x02	; 2
 1b8:	31 05       	cpc	r19, r1
 1ba:	2c f4       	brge	.+10     	; 0x1c6 <DIO_u8SetPinValue+0x14a>
 1bc:	8d 81       	ldd	r24, Y+5	; 0x05
 1be:	9e 81       	ldd	r25, Y+6	; 0x06
 1c0:	00 97       	sbiw	r24, 0x00	; 0
 1c2:	61 f0       	breq	.+24     	; 0x1dc <DIO_u8SetPinValue+0x160>
 1c4:	5b c0       	rjmp	.+182    	; 0x27c <DIO_u8SetPinValue+0x200>
 1c6:	2d 81       	ldd	r18, Y+5	; 0x05
 1c8:	3e 81       	ldd	r19, Y+6	; 0x06
 1ca:	22 30       	cpi	r18, 0x02	; 2
 1cc:	31 05       	cpc	r19, r1
 1ce:	71 f1       	breq	.+92     	; 0x22c <DIO_u8SetPinValue+0x1b0>
 1d0:	8d 81       	ldd	r24, Y+5	; 0x05
 1d2:	9e 81       	ldd	r25, Y+6	; 0x06
 1d4:	83 30       	cpi	r24, 0x03	; 3
 1d6:	91 05       	cpc	r25, r1
 1d8:	e9 f1       	breq	.+122    	; 0x254 <DIO_u8SetPinValue+0x1d8>
 1da:	50 c0       	rjmp	.+160    	; 0x27c <DIO_u8SetPinValue+0x200>
			case DIO_u8PORTA : SET_BIT(PORTA,Copy_u8Pin); break;
 1dc:	ab e3       	ldi	r26, 0x3B	; 59
 1de:	b0 e0       	ldi	r27, 0x00	; 0
 1e0:	eb e3       	ldi	r30, 0x3B	; 59
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	80 81       	ld	r24, Z
 1e6:	48 2f       	mov	r20, r24
 1e8:	8b 81       	ldd	r24, Y+3	; 0x03
 1ea:	28 2f       	mov	r18, r24
 1ec:	30 e0       	ldi	r19, 0x00	; 0
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	02 2e       	mov	r0, r18
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <DIO_u8SetPinValue+0x17e>
 1f6:	88 0f       	add	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	0a 94       	dec	r0
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <DIO_u8SetPinValue+0x17a>
 1fe:	84 2b       	or	r24, r20
 200:	8c 93       	st	X, r24
 202:	44 c0       	rjmp	.+136    	; 0x28c <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB : SET_BIT(PORTB,Copy_u8Pin); break;
 204:	a8 e3       	ldi	r26, 0x38	; 56
 206:	b0 e0       	ldi	r27, 0x00	; 0
 208:	e8 e3       	ldi	r30, 0x38	; 56
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	80 81       	ld	r24, Z
 20e:	48 2f       	mov	r20, r24
 210:	8b 81       	ldd	r24, Y+3	; 0x03
 212:	28 2f       	mov	r18, r24
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	02 2e       	mov	r0, r18
 21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_u8SetPinValue+0x1a6>
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	0a 94       	dec	r0
 224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_u8SetPinValue+0x1a2>
 226:	84 2b       	or	r24, r20
 228:	8c 93       	st	X, r24
 22a:	30 c0       	rjmp	.+96     	; 0x28c <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC : SET_BIT(PORTC,Copy_u8Pin); break;
 22c:	a5 e3       	ldi	r26, 0x35	; 53
 22e:	b0 e0       	ldi	r27, 0x00	; 0
 230:	e5 e3       	ldi	r30, 0x35	; 53
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	80 81       	ld	r24, Z
 236:	48 2f       	mov	r20, r24
 238:	8b 81       	ldd	r24, Y+3	; 0x03
 23a:	28 2f       	mov	r18, r24
 23c:	30 e0       	ldi	r19, 0x00	; 0
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	02 2e       	mov	r0, r18
 244:	02 c0       	rjmp	.+4      	; 0x24a <DIO_u8SetPinValue+0x1ce>
 246:	88 0f       	add	r24, r24
 248:	99 1f       	adc	r25, r25
 24a:	0a 94       	dec	r0
 24c:	e2 f7       	brpl	.-8      	; 0x246 <DIO_u8SetPinValue+0x1ca>
 24e:	84 2b       	or	r24, r20
 250:	8c 93       	st	X, r24
 252:	1c c0       	rjmp	.+56     	; 0x28c <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD : SET_BIT(PORTD,Copy_u8Pin); break;
 254:	a2 e3       	ldi	r26, 0x32	; 50
 256:	b0 e0       	ldi	r27, 0x00	; 0
 258:	e2 e3       	ldi	r30, 0x32	; 50
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	80 81       	ld	r24, Z
 25e:	48 2f       	mov	r20, r24
 260:	8b 81       	ldd	r24, Y+3	; 0x03
 262:	28 2f       	mov	r18, r24
 264:	30 e0       	ldi	r19, 0x00	; 0
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	02 2e       	mov	r0, r18
 26c:	02 c0       	rjmp	.+4      	; 0x272 <DIO_u8SetPinValue+0x1f6>
 26e:	88 0f       	add	r24, r24
 270:	99 1f       	adc	r25, r25
 272:	0a 94       	dec	r0
 274:	e2 f7       	brpl	.-8      	; 0x26e <DIO_u8SetPinValue+0x1f2>
 276:	84 2b       	or	r24, r20
 278:	8c 93       	st	X, r24
 27a:	08 c0       	rjmp	.+16     	; 0x28c <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=NOK;
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	89 83       	std	Y+1, r24	; 0x01
 280:	05 c0       	rjmp	.+10     	; 0x28c <DIO_u8SetPinValue+0x210>
			}
		}
		else{
			Local_u8ErrorState=NOK;
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	89 83       	std	Y+1, r24	; 0x01
 286:	02 c0       	rjmp	.+4      	; 0x28c <DIO_u8SetPinValue+0x210>
		}
	}
	else{
		Local_u8ErrorState=NOK;
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState ;
 28c:	89 81       	ldd	r24, Y+1	; 0x01
}
 28e:	28 96       	adiw	r28, 0x08	; 8
 290:	0f b6       	in	r0, 0x3f	; 63
 292:	f8 94       	cli
 294:	de bf       	out	0x3e, r29	; 62
 296:	0f be       	out	0x3f, r0	; 63
 298:	cd bf       	out	0x3d, r28	; 61
 29a:	cf 91       	pop	r28
 29c:	df 91       	pop	r29
 29e:	08 95       	ret

000002a0 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8Port,u8 Copy_u8Value){
 2a0:	df 93       	push	r29
 2a2:	cf 93       	push	r28
 2a4:	00 d0       	rcall	.+0      	; 0x2a6 <DIO_u8SetPortValue+0x6>
 2a6:	00 d0       	rcall	.+0      	; 0x2a8 <DIO_u8SetPortValue+0x8>
 2a8:	0f 92       	push	r0
 2aa:	cd b7       	in	r28, 0x3d	; 61
 2ac:	de b7       	in	r29, 0x3e	; 62
 2ae:	8a 83       	std	Y+2, r24	; 0x02
 2b0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=OK;
 2b2:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8Port)
 2b4:	8a 81       	ldd	r24, Y+2	; 0x02
 2b6:	28 2f       	mov	r18, r24
 2b8:	30 e0       	ldi	r19, 0x00	; 0
 2ba:	3d 83       	std	Y+5, r19	; 0x05
 2bc:	2c 83       	std	Y+4, r18	; 0x04
 2be:	8c 81       	ldd	r24, Y+4	; 0x04
 2c0:	9d 81       	ldd	r25, Y+5	; 0x05
 2c2:	81 30       	cpi	r24, 0x01	; 1
 2c4:	91 05       	cpc	r25, r1
 2c6:	d1 f0       	breq	.+52     	; 0x2fc <DIO_u8SetPortValue+0x5c>
 2c8:	2c 81       	ldd	r18, Y+4	; 0x04
 2ca:	3d 81       	ldd	r19, Y+5	; 0x05
 2cc:	22 30       	cpi	r18, 0x02	; 2
 2ce:	31 05       	cpc	r19, r1
 2d0:	2c f4       	brge	.+10     	; 0x2dc <DIO_u8SetPortValue+0x3c>
 2d2:	8c 81       	ldd	r24, Y+4	; 0x04
 2d4:	9d 81       	ldd	r25, Y+5	; 0x05
 2d6:	00 97       	sbiw	r24, 0x00	; 0
 2d8:	61 f0       	breq	.+24     	; 0x2f2 <DIO_u8SetPortValue+0x52>
 2da:	1f c0       	rjmp	.+62     	; 0x31a <DIO_u8SetPortValue+0x7a>
 2dc:	2c 81       	ldd	r18, Y+4	; 0x04
 2de:	3d 81       	ldd	r19, Y+5	; 0x05
 2e0:	22 30       	cpi	r18, 0x02	; 2
 2e2:	31 05       	cpc	r19, r1
 2e4:	81 f0       	breq	.+32     	; 0x306 <DIO_u8SetPortValue+0x66>
 2e6:	8c 81       	ldd	r24, Y+4	; 0x04
 2e8:	9d 81       	ldd	r25, Y+5	; 0x05
 2ea:	83 30       	cpi	r24, 0x03	; 3
 2ec:	91 05       	cpc	r25, r1
 2ee:	81 f0       	breq	.+32     	; 0x310 <DIO_u8SetPortValue+0x70>
 2f0:	14 c0       	rjmp	.+40     	; 0x31a <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA: PORTA=Copy_u8Value; break;
 2f2:	eb e3       	ldi	r30, 0x3B	; 59
 2f4:	f0 e0       	ldi	r31, 0x00	; 0
 2f6:	8b 81       	ldd	r24, Y+3	; 0x03
 2f8:	80 83       	st	Z, r24
 2fa:	11 c0       	rjmp	.+34     	; 0x31e <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB: PORTB=Copy_u8Value; break;
 2fc:	e8 e3       	ldi	r30, 0x38	; 56
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	8b 81       	ldd	r24, Y+3	; 0x03
 302:	80 83       	st	Z, r24
 304:	0c c0       	rjmp	.+24     	; 0x31e <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC: PORTC=Copy_u8Value; break;
 306:	e5 e3       	ldi	r30, 0x35	; 53
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	8b 81       	ldd	r24, Y+3	; 0x03
 30c:	80 83       	st	Z, r24
 30e:	07 c0       	rjmp	.+14     	; 0x31e <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD: PORTD=Copy_u8Value; break;
 310:	e2 e3       	ldi	r30, 0x32	; 50
 312:	f0 e0       	ldi	r31, 0x00	; 0
 314:	8b 81       	ldd	r24, Y+3	; 0x03
 316:	80 83       	st	Z, r24
 318:	02 c0       	rjmp	.+4      	; 0x31e <DIO_u8SetPortValue+0x7e>
	default: Local_u8ErrorState=NOK ;
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState ;
 31e:	89 81       	ldd	r24, Y+1	; 0x01
}
 320:	0f 90       	pop	r0
 322:	0f 90       	pop	r0
 324:	0f 90       	pop	r0
 326:	0f 90       	pop	r0
 328:	0f 90       	pop	r0
 32a:	cf 91       	pop	r28
 32c:	df 91       	pop	r29
 32e:	08 95       	ret

00000330 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin, u8* Copy_pu8Value){
 330:	df 93       	push	r29
 332:	cf 93       	push	r28
 334:	cd b7       	in	r28, 0x3d	; 61
 336:	de b7       	in	r29, 0x3e	; 62
 338:	27 97       	sbiw	r28, 0x07	; 7
 33a:	0f b6       	in	r0, 0x3f	; 63
 33c:	f8 94       	cli
 33e:	de bf       	out	0x3e, r29	; 62
 340:	0f be       	out	0x3f, r0	; 63
 342:	cd bf       	out	0x3d, r28	; 61
 344:	8a 83       	std	Y+2, r24	; 0x02
 346:	6b 83       	std	Y+3, r22	; 0x03
 348:	5d 83       	std	Y+5, r21	; 0x05
 34a:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=OK;
 34c:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_pu8Value != NULL) && (Copy_u8Pin <= DIO_u8PIN7)){
 34e:	8c 81       	ldd	r24, Y+4	; 0x04
 350:	9d 81       	ldd	r25, Y+5	; 0x05
 352:	00 97       	sbiw	r24, 0x00	; 0
 354:	09 f4       	brne	.+2      	; 0x358 <DIO_u8GetPinValue+0x28>
 356:	78 c0       	rjmp	.+240    	; 0x448 <DIO_u8GetPinValue+0x118>
 358:	8b 81       	ldd	r24, Y+3	; 0x03
 35a:	88 30       	cpi	r24, 0x08	; 8
 35c:	08 f0       	brcs	.+2      	; 0x360 <DIO_u8GetPinValue+0x30>
 35e:	74 c0       	rjmp	.+232    	; 0x448 <DIO_u8GetPinValue+0x118>
		switch (Copy_u8Port){
 360:	8a 81       	ldd	r24, Y+2	; 0x02
 362:	28 2f       	mov	r18, r24
 364:	30 e0       	ldi	r19, 0x00	; 0
 366:	3f 83       	std	Y+7, r19	; 0x07
 368:	2e 83       	std	Y+6, r18	; 0x06
 36a:	4e 81       	ldd	r20, Y+6	; 0x06
 36c:	5f 81       	ldd	r21, Y+7	; 0x07
 36e:	41 30       	cpi	r20, 0x01	; 1
 370:	51 05       	cpc	r21, r1
 372:	59 f1       	breq	.+86     	; 0x3ca <DIO_u8GetPinValue+0x9a>
 374:	8e 81       	ldd	r24, Y+6	; 0x06
 376:	9f 81       	ldd	r25, Y+7	; 0x07
 378:	82 30       	cpi	r24, 0x02	; 2
 37a:	91 05       	cpc	r25, r1
 37c:	34 f4       	brge	.+12     	; 0x38a <DIO_u8GetPinValue+0x5a>
 37e:	2e 81       	ldd	r18, Y+6	; 0x06
 380:	3f 81       	ldd	r19, Y+7	; 0x07
 382:	21 15       	cp	r18, r1
 384:	31 05       	cpc	r19, r1
 386:	69 f0       	breq	.+26     	; 0x3a2 <DIO_u8GetPinValue+0x72>
 388:	5c c0       	rjmp	.+184    	; 0x442 <DIO_u8GetPinValue+0x112>
 38a:	4e 81       	ldd	r20, Y+6	; 0x06
 38c:	5f 81       	ldd	r21, Y+7	; 0x07
 38e:	42 30       	cpi	r20, 0x02	; 2
 390:	51 05       	cpc	r21, r1
 392:	79 f1       	breq	.+94     	; 0x3f2 <DIO_u8GetPinValue+0xc2>
 394:	8e 81       	ldd	r24, Y+6	; 0x06
 396:	9f 81       	ldd	r25, Y+7	; 0x07
 398:	83 30       	cpi	r24, 0x03	; 3
 39a:	91 05       	cpc	r25, r1
 39c:	09 f4       	brne	.+2      	; 0x3a0 <DIO_u8GetPinValue+0x70>
 39e:	3d c0       	rjmp	.+122    	; 0x41a <DIO_u8GetPinValue+0xea>
 3a0:	50 c0       	rjmp	.+160    	; 0x442 <DIO_u8GetPinValue+0x112>
		case DIO_u8PORTA: *Copy_pu8Value = GET_BIT(PINA,Copy_u8Pin); break;
 3a2:	e9 e3       	ldi	r30, 0x39	; 57
 3a4:	f0 e0       	ldi	r31, 0x00	; 0
 3a6:	80 81       	ld	r24, Z
 3a8:	28 2f       	mov	r18, r24
 3aa:	30 e0       	ldi	r19, 0x00	; 0
 3ac:	8b 81       	ldd	r24, Y+3	; 0x03
 3ae:	88 2f       	mov	r24, r24
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	a9 01       	movw	r20, r18
 3b4:	02 c0       	rjmp	.+4      	; 0x3ba <DIO_u8GetPinValue+0x8a>
 3b6:	55 95       	asr	r21
 3b8:	47 95       	ror	r20
 3ba:	8a 95       	dec	r24
 3bc:	e2 f7       	brpl	.-8      	; 0x3b6 <DIO_u8GetPinValue+0x86>
 3be:	ca 01       	movw	r24, r20
 3c0:	81 70       	andi	r24, 0x01	; 1
 3c2:	ec 81       	ldd	r30, Y+4	; 0x04
 3c4:	fd 81       	ldd	r31, Y+5	; 0x05
 3c6:	80 83       	st	Z, r24
 3c8:	41 c0       	rjmp	.+130    	; 0x44c <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTB: *Copy_pu8Value = GET_BIT(PINB,Copy_u8Pin); break;
 3ca:	e6 e3       	ldi	r30, 0x36	; 54
 3cc:	f0 e0       	ldi	r31, 0x00	; 0
 3ce:	80 81       	ld	r24, Z
 3d0:	28 2f       	mov	r18, r24
 3d2:	30 e0       	ldi	r19, 0x00	; 0
 3d4:	8b 81       	ldd	r24, Y+3	; 0x03
 3d6:	88 2f       	mov	r24, r24
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	a9 01       	movw	r20, r18
 3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <DIO_u8GetPinValue+0xb2>
 3de:	55 95       	asr	r21
 3e0:	47 95       	ror	r20
 3e2:	8a 95       	dec	r24
 3e4:	e2 f7       	brpl	.-8      	; 0x3de <DIO_u8GetPinValue+0xae>
 3e6:	ca 01       	movw	r24, r20
 3e8:	81 70       	andi	r24, 0x01	; 1
 3ea:	ec 81       	ldd	r30, Y+4	; 0x04
 3ec:	fd 81       	ldd	r31, Y+5	; 0x05
 3ee:	80 83       	st	Z, r24
 3f0:	2d c0       	rjmp	.+90     	; 0x44c <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTC: *Copy_pu8Value = GET_BIT(PINC,Copy_u8Pin); break;
 3f2:	e3 e3       	ldi	r30, 0x33	; 51
 3f4:	f0 e0       	ldi	r31, 0x00	; 0
 3f6:	80 81       	ld	r24, Z
 3f8:	28 2f       	mov	r18, r24
 3fa:	30 e0       	ldi	r19, 0x00	; 0
 3fc:	8b 81       	ldd	r24, Y+3	; 0x03
 3fe:	88 2f       	mov	r24, r24
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	a9 01       	movw	r20, r18
 404:	02 c0       	rjmp	.+4      	; 0x40a <DIO_u8GetPinValue+0xda>
 406:	55 95       	asr	r21
 408:	47 95       	ror	r20
 40a:	8a 95       	dec	r24
 40c:	e2 f7       	brpl	.-8      	; 0x406 <DIO_u8GetPinValue+0xd6>
 40e:	ca 01       	movw	r24, r20
 410:	81 70       	andi	r24, 0x01	; 1
 412:	ec 81       	ldd	r30, Y+4	; 0x04
 414:	fd 81       	ldd	r31, Y+5	; 0x05
 416:	80 83       	st	Z, r24
 418:	19 c0       	rjmp	.+50     	; 0x44c <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTD: *Copy_pu8Value = GET_BIT(PIND,Copy_u8Pin); break;
 41a:	e0 e3       	ldi	r30, 0x30	; 48
 41c:	f0 e0       	ldi	r31, 0x00	; 0
 41e:	80 81       	ld	r24, Z
 420:	28 2f       	mov	r18, r24
 422:	30 e0       	ldi	r19, 0x00	; 0
 424:	8b 81       	ldd	r24, Y+3	; 0x03
 426:	88 2f       	mov	r24, r24
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	a9 01       	movw	r20, r18
 42c:	02 c0       	rjmp	.+4      	; 0x432 <DIO_u8GetPinValue+0x102>
 42e:	55 95       	asr	r21
 430:	47 95       	ror	r20
 432:	8a 95       	dec	r24
 434:	e2 f7       	brpl	.-8      	; 0x42e <DIO_u8GetPinValue+0xfe>
 436:	ca 01       	movw	r24, r20
 438:	81 70       	andi	r24, 0x01	; 1
 43a:	ec 81       	ldd	r30, Y+4	; 0x04
 43c:	fd 81       	ldd	r31, Y+5	; 0x05
 43e:	80 83       	st	Z, r24
 440:	05 c0       	rjmp	.+10     	; 0x44c <DIO_u8GetPinValue+0x11c>
		default:Local_u8ErrorState=NOK ;
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	89 83       	std	Y+1, r24	; 0x01
 446:	02 c0       	rjmp	.+4      	; 0x44c <DIO_u8GetPinValue+0x11c>
		}
	}
	else{
		Local_u8ErrorState=NOK;
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState ;
 44c:	89 81       	ldd	r24, Y+1	; 0x01
}
 44e:	27 96       	adiw	r28, 0x07	; 7
 450:	0f b6       	in	r0, 0x3f	; 63
 452:	f8 94       	cli
 454:	de bf       	out	0x3e, r29	; 62
 456:	0f be       	out	0x3f, r0	; 63
 458:	cd bf       	out	0x3d, r28	; 61
 45a:	cf 91       	pop	r28
 45c:	df 91       	pop	r29
 45e:	08 95       	ret

00000460 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8Port,u8* Copy_pu8Value){
 460:	df 93       	push	r29
 462:	cf 93       	push	r28
 464:	00 d0       	rcall	.+0      	; 0x466 <DIO_u8GetPortValue+0x6>
 466:	00 d0       	rcall	.+0      	; 0x468 <DIO_u8GetPortValue+0x8>
 468:	00 d0       	rcall	.+0      	; 0x46a <DIO_u8GetPortValue+0xa>
 46a:	cd b7       	in	r28, 0x3d	; 61
 46c:	de b7       	in	r29, 0x3e	; 62
 46e:	8a 83       	std	Y+2, r24	; 0x02
 470:	7c 83       	std	Y+4, r23	; 0x04
 472:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=OK;
 474:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8Port)
 476:	8a 81       	ldd	r24, Y+2	; 0x02
 478:	28 2f       	mov	r18, r24
 47a:	30 e0       	ldi	r19, 0x00	; 0
 47c:	3e 83       	std	Y+6, r19	; 0x06
 47e:	2d 83       	std	Y+5, r18	; 0x05
 480:	8d 81       	ldd	r24, Y+5	; 0x05
 482:	9e 81       	ldd	r25, Y+6	; 0x06
 484:	81 30       	cpi	r24, 0x01	; 1
 486:	91 05       	cpc	r25, r1
 488:	e1 f0       	breq	.+56     	; 0x4c2 <DIO_u8GetPortValue+0x62>
 48a:	2d 81       	ldd	r18, Y+5	; 0x05
 48c:	3e 81       	ldd	r19, Y+6	; 0x06
 48e:	22 30       	cpi	r18, 0x02	; 2
 490:	31 05       	cpc	r19, r1
 492:	2c f4       	brge	.+10     	; 0x49e <DIO_u8GetPortValue+0x3e>
 494:	8d 81       	ldd	r24, Y+5	; 0x05
 496:	9e 81       	ldd	r25, Y+6	; 0x06
 498:	00 97       	sbiw	r24, 0x00	; 0
 49a:	61 f0       	breq	.+24     	; 0x4b4 <DIO_u8GetPortValue+0x54>
 49c:	27 c0       	rjmp	.+78     	; 0x4ec <DIO_u8GetPortValue+0x8c>
 49e:	2d 81       	ldd	r18, Y+5	; 0x05
 4a0:	3e 81       	ldd	r19, Y+6	; 0x06
 4a2:	22 30       	cpi	r18, 0x02	; 2
 4a4:	31 05       	cpc	r19, r1
 4a6:	a1 f0       	breq	.+40     	; 0x4d0 <DIO_u8GetPortValue+0x70>
 4a8:	8d 81       	ldd	r24, Y+5	; 0x05
 4aa:	9e 81       	ldd	r25, Y+6	; 0x06
 4ac:	83 30       	cpi	r24, 0x03	; 3
 4ae:	91 05       	cpc	r25, r1
 4b0:	b1 f0       	breq	.+44     	; 0x4de <DIO_u8GetPortValue+0x7e>
 4b2:	1c c0       	rjmp	.+56     	; 0x4ec <DIO_u8GetPortValue+0x8c>
	{
	case DIO_u8PORTA: *Copy_pu8Value = PINA; break;
 4b4:	e9 e3       	ldi	r30, 0x39	; 57
 4b6:	f0 e0       	ldi	r31, 0x00	; 0
 4b8:	80 81       	ld	r24, Z
 4ba:	eb 81       	ldd	r30, Y+3	; 0x03
 4bc:	fc 81       	ldd	r31, Y+4	; 0x04
 4be:	80 83       	st	Z, r24
 4c0:	17 c0       	rjmp	.+46     	; 0x4f0 <DIO_u8GetPortValue+0x90>
	case DIO_u8PORTB: *Copy_pu8Value = PINB; break;
 4c2:	e6 e3       	ldi	r30, 0x36	; 54
 4c4:	f0 e0       	ldi	r31, 0x00	; 0
 4c6:	80 81       	ld	r24, Z
 4c8:	eb 81       	ldd	r30, Y+3	; 0x03
 4ca:	fc 81       	ldd	r31, Y+4	; 0x04
 4cc:	80 83       	st	Z, r24
 4ce:	10 c0       	rjmp	.+32     	; 0x4f0 <DIO_u8GetPortValue+0x90>
	case DIO_u8PORTC: *Copy_pu8Value = PINC; break;
 4d0:	e3 e3       	ldi	r30, 0x33	; 51
 4d2:	f0 e0       	ldi	r31, 0x00	; 0
 4d4:	80 81       	ld	r24, Z
 4d6:	eb 81       	ldd	r30, Y+3	; 0x03
 4d8:	fc 81       	ldd	r31, Y+4	; 0x04
 4da:	80 83       	st	Z, r24
 4dc:	09 c0       	rjmp	.+18     	; 0x4f0 <DIO_u8GetPortValue+0x90>
	case DIO_u8PORTD: *Copy_pu8Value = PIND; break;
 4de:	e0 e3       	ldi	r30, 0x30	; 48
 4e0:	f0 e0       	ldi	r31, 0x00	; 0
 4e2:	80 81       	ld	r24, Z
 4e4:	eb 81       	ldd	r30, Y+3	; 0x03
 4e6:	fc 81       	ldd	r31, Y+4	; 0x04
 4e8:	80 83       	st	Z, r24
 4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <DIO_u8GetPortValue+0x90>
	default: Local_u8ErrorState=NOK ;
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 4f0:	89 81       	ldd	r24, Y+1	; 0x01
}
 4f2:	26 96       	adiw	r28, 0x06	; 6
 4f4:	0f b6       	in	r0, 0x3f	; 63
 4f6:	f8 94       	cli
 4f8:	de bf       	out	0x3e, r29	; 62
 4fa:	0f be       	out	0x3f, r0	; 63
 4fc:	cd bf       	out	0x3d, r28	; 61
 4fe:	cf 91       	pop	r28
 500:	df 91       	pop	r29
 502:	08 95       	ret

00000504 <DIO_u8TogglePinValue>:

u8 DIO_u8TogglePinValue(u8 Copy_u8Port,u8 Copy_u8Pin){
 504:	df 93       	push	r29
 506:	cf 93       	push	r28
 508:	00 d0       	rcall	.+0      	; 0x50a <DIO_u8TogglePinValue+0x6>
 50a:	00 d0       	rcall	.+0      	; 0x50c <DIO_u8TogglePinValue+0x8>
 50c:	0f 92       	push	r0
 50e:	cd b7       	in	r28, 0x3d	; 61
 510:	de b7       	in	r29, 0x3e	; 62
 512:	8a 83       	std	Y+2, r24	; 0x02
 514:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=OK;
 516:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin <= DIO_u8PIN7){
 518:	8b 81       	ldd	r24, Y+3	; 0x03
 51a:	88 30       	cpi	r24, 0x08	; 8
 51c:	08 f0       	brcs	.+2      	; 0x520 <DIO_u8TogglePinValue+0x1c>
 51e:	72 c0       	rjmp	.+228    	; 0x604 <DIO_u8TogglePinValue+0x100>
			switch(Copy_u8Port){
 520:	8a 81       	ldd	r24, Y+2	; 0x02
 522:	28 2f       	mov	r18, r24
 524:	30 e0       	ldi	r19, 0x00	; 0
 526:	3d 83       	std	Y+5, r19	; 0x05
 528:	2c 83       	std	Y+4, r18	; 0x04
 52a:	8c 81       	ldd	r24, Y+4	; 0x04
 52c:	9d 81       	ldd	r25, Y+5	; 0x05
 52e:	81 30       	cpi	r24, 0x01	; 1
 530:	91 05       	cpc	r25, r1
 532:	49 f1       	breq	.+82     	; 0x586 <DIO_u8TogglePinValue+0x82>
 534:	2c 81       	ldd	r18, Y+4	; 0x04
 536:	3d 81       	ldd	r19, Y+5	; 0x05
 538:	22 30       	cpi	r18, 0x02	; 2
 53a:	31 05       	cpc	r19, r1
 53c:	2c f4       	brge	.+10     	; 0x548 <DIO_u8TogglePinValue+0x44>
 53e:	8c 81       	ldd	r24, Y+4	; 0x04
 540:	9d 81       	ldd	r25, Y+5	; 0x05
 542:	00 97       	sbiw	r24, 0x00	; 0
 544:	61 f0       	breq	.+24     	; 0x55e <DIO_u8TogglePinValue+0x5a>
 546:	5b c0       	rjmp	.+182    	; 0x5fe <DIO_u8TogglePinValue+0xfa>
 548:	2c 81       	ldd	r18, Y+4	; 0x04
 54a:	3d 81       	ldd	r19, Y+5	; 0x05
 54c:	22 30       	cpi	r18, 0x02	; 2
 54e:	31 05       	cpc	r19, r1
 550:	71 f1       	breq	.+92     	; 0x5ae <DIO_u8TogglePinValue+0xaa>
 552:	8c 81       	ldd	r24, Y+4	; 0x04
 554:	9d 81       	ldd	r25, Y+5	; 0x05
 556:	83 30       	cpi	r24, 0x03	; 3
 558:	91 05       	cpc	r25, r1
 55a:	e9 f1       	breq	.+122    	; 0x5d6 <DIO_u8TogglePinValue+0xd2>
 55c:	50 c0       	rjmp	.+160    	; 0x5fe <DIO_u8TogglePinValue+0xfa>
			case DIO_u8PORTA : TOGGLE_BIT(PORTA,Copy_u8Pin); break;
 55e:	ab e3       	ldi	r26, 0x3B	; 59
 560:	b0 e0       	ldi	r27, 0x00	; 0
 562:	eb e3       	ldi	r30, 0x3B	; 59
 564:	f0 e0       	ldi	r31, 0x00	; 0
 566:	80 81       	ld	r24, Z
 568:	48 2f       	mov	r20, r24
 56a:	8b 81       	ldd	r24, Y+3	; 0x03
 56c:	28 2f       	mov	r18, r24
 56e:	30 e0       	ldi	r19, 0x00	; 0
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	02 2e       	mov	r0, r18
 576:	02 c0       	rjmp	.+4      	; 0x57c <DIO_u8TogglePinValue+0x78>
 578:	88 0f       	add	r24, r24
 57a:	99 1f       	adc	r25, r25
 57c:	0a 94       	dec	r0
 57e:	e2 f7       	brpl	.-8      	; 0x578 <DIO_u8TogglePinValue+0x74>
 580:	84 27       	eor	r24, r20
 582:	8c 93       	st	X, r24
 584:	41 c0       	rjmp	.+130    	; 0x608 <DIO_u8TogglePinValue+0x104>
			case DIO_u8PORTB : TOGGLE_BIT(PORTB,Copy_u8Pin); break;
 586:	a8 e3       	ldi	r26, 0x38	; 56
 588:	b0 e0       	ldi	r27, 0x00	; 0
 58a:	e8 e3       	ldi	r30, 0x38	; 56
 58c:	f0 e0       	ldi	r31, 0x00	; 0
 58e:	80 81       	ld	r24, Z
 590:	48 2f       	mov	r20, r24
 592:	8b 81       	ldd	r24, Y+3	; 0x03
 594:	28 2f       	mov	r18, r24
 596:	30 e0       	ldi	r19, 0x00	; 0
 598:	81 e0       	ldi	r24, 0x01	; 1
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	02 2e       	mov	r0, r18
 59e:	02 c0       	rjmp	.+4      	; 0x5a4 <DIO_u8TogglePinValue+0xa0>
 5a0:	88 0f       	add	r24, r24
 5a2:	99 1f       	adc	r25, r25
 5a4:	0a 94       	dec	r0
 5a6:	e2 f7       	brpl	.-8      	; 0x5a0 <DIO_u8TogglePinValue+0x9c>
 5a8:	84 27       	eor	r24, r20
 5aa:	8c 93       	st	X, r24
 5ac:	2d c0       	rjmp	.+90     	; 0x608 <DIO_u8TogglePinValue+0x104>
			case DIO_u8PORTC : TOGGLE_BIT(PORTC,Copy_u8Pin); break;
 5ae:	a5 e3       	ldi	r26, 0x35	; 53
 5b0:	b0 e0       	ldi	r27, 0x00	; 0
 5b2:	e5 e3       	ldi	r30, 0x35	; 53
 5b4:	f0 e0       	ldi	r31, 0x00	; 0
 5b6:	80 81       	ld	r24, Z
 5b8:	48 2f       	mov	r20, r24
 5ba:	8b 81       	ldd	r24, Y+3	; 0x03
 5bc:	28 2f       	mov	r18, r24
 5be:	30 e0       	ldi	r19, 0x00	; 0
 5c0:	81 e0       	ldi	r24, 0x01	; 1
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	02 2e       	mov	r0, r18
 5c6:	02 c0       	rjmp	.+4      	; 0x5cc <DIO_u8TogglePinValue+0xc8>
 5c8:	88 0f       	add	r24, r24
 5ca:	99 1f       	adc	r25, r25
 5cc:	0a 94       	dec	r0
 5ce:	e2 f7       	brpl	.-8      	; 0x5c8 <DIO_u8TogglePinValue+0xc4>
 5d0:	84 27       	eor	r24, r20
 5d2:	8c 93       	st	X, r24
 5d4:	19 c0       	rjmp	.+50     	; 0x608 <DIO_u8TogglePinValue+0x104>
			case DIO_u8PORTD : TOGGLE_BIT(PORTD,Copy_u8Pin); break;
 5d6:	a2 e3       	ldi	r26, 0x32	; 50
 5d8:	b0 e0       	ldi	r27, 0x00	; 0
 5da:	e2 e3       	ldi	r30, 0x32	; 50
 5dc:	f0 e0       	ldi	r31, 0x00	; 0
 5de:	80 81       	ld	r24, Z
 5e0:	48 2f       	mov	r20, r24
 5e2:	8b 81       	ldd	r24, Y+3	; 0x03
 5e4:	28 2f       	mov	r18, r24
 5e6:	30 e0       	ldi	r19, 0x00	; 0
 5e8:	81 e0       	ldi	r24, 0x01	; 1
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	02 2e       	mov	r0, r18
 5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <DIO_u8TogglePinValue+0xf0>
 5f0:	88 0f       	add	r24, r24
 5f2:	99 1f       	adc	r25, r25
 5f4:	0a 94       	dec	r0
 5f6:	e2 f7       	brpl	.-8      	; 0x5f0 <DIO_u8TogglePinValue+0xec>
 5f8:	84 27       	eor	r24, r20
 5fa:	8c 93       	st	X, r24
 5fc:	05 c0       	rjmp	.+10     	; 0x608 <DIO_u8TogglePinValue+0x104>
			default: Local_u8ErrorState=NOK;
 5fe:	81 e0       	ldi	r24, 0x01	; 1
 600:	89 83       	std	Y+1, r24	; 0x01
 602:	02 c0       	rjmp	.+4      	; 0x608 <DIO_u8TogglePinValue+0x104>
			}
		}
		else{
			Local_u8ErrorState=NOK;
 604:	81 e0       	ldi	r24, 0x01	; 1
 606:	89 83       	std	Y+1, r24	; 0x01
		}
	return Local_u8ErrorState;
 608:	89 81       	ldd	r24, Y+1	; 0x01
}
 60a:	0f 90       	pop	r0
 60c:	0f 90       	pop	r0
 60e:	0f 90       	pop	r0
 610:	0f 90       	pop	r0
 612:	0f 90       	pop	r0
 614:	cf 91       	pop	r28
 616:	df 91       	pop	r29
 618:	08 95       	ret

0000061a <PORT_voidInit>:
#include "PORT_config.h"
#include "PORT_private.h"
#include "PORT_interface.h"
#include "PORT_register.h"

void PORT_voidInit(){
 61a:	df 93       	push	r29
 61c:	cf 93       	push	r28
 61e:	cd b7       	in	r28, 0x3d	; 61
 620:	de b7       	in	r29, 0x3e	; 62
    DDRA=PORTA_DIR;
 622:	ea e3       	ldi	r30, 0x3A	; 58
 624:	f0 e0       	ldi	r31, 0x00	; 0
 626:	8f ef       	ldi	r24, 0xFF	; 255
 628:	80 83       	st	Z, r24
    DDRB=PORTB_DIR;
 62a:	e7 e3       	ldi	r30, 0x37	; 55
 62c:	f0 e0       	ldi	r31, 0x00	; 0
 62e:	10 82       	st	Z, r1
    DDRC=PORTC_DIR;
 630:	e4 e3       	ldi	r30, 0x34	; 52
 632:	f0 e0       	ldi	r31, 0x00	; 0
 634:	10 82       	st	Z, r1
    DDRD=PORTD_DIR;
 636:	e1 e3       	ldi	r30, 0x31	; 49
 638:	f0 e0       	ldi	r31, 0x00	; 0
 63a:	82 e0       	ldi	r24, 0x02	; 2
 63c:	80 83       	st	Z, r24
    
    PORTA=PORTA_INIT_VAL;
 63e:	eb e3       	ldi	r30, 0x3B	; 59
 640:	f0 e0       	ldi	r31, 0x00	; 0
 642:	10 82       	st	Z, r1
    PORTB=PORTB_INIT_VAL;
 644:	e8 e3       	ldi	r30, 0x38	; 56
 646:	f0 e0       	ldi	r31, 0x00	; 0
 648:	10 82       	st	Z, r1
    PORTC=PORTC_INIT_VAL;
 64a:	e5 e3       	ldi	r30, 0x35	; 53
 64c:	f0 e0       	ldi	r31, 0x00	; 0
 64e:	10 82       	st	Z, r1
    PORTD=PORTD_INIT_VAL;
 650:	e2 e3       	ldi	r30, 0x32	; 50
 652:	f0 e0       	ldi	r31, 0x00	; 0
 654:	10 82       	st	Z, r1
}
 656:	cf 91       	pop	r28
 658:	df 91       	pop	r29
 65a:	08 95       	ret

0000065c <SPI_voidMasterInit>:
#include "SPI_private.h"
#include "SPI_register.h"

u8* SPI_pu8ReceivedData=NULL;

void SPI_voidMasterInit(void){
 65c:	df 93       	push	r29
 65e:	cf 93       	push	r28
 660:	cd b7       	in	r28, 0x3d	; 61
 662:	de b7       	in	r29, 0x3e	; 62

    //Set to Master
    SET_BIT(SPCR,SPCR_MSTR);
 664:	ad e2       	ldi	r26, 0x2D	; 45
 666:	b0 e0       	ldi	r27, 0x00	; 0
 668:	ed e2       	ldi	r30, 0x2D	; 45
 66a:	f0 e0       	ldi	r31, 0x00	; 0
 66c:	80 81       	ld	r24, Z
 66e:	80 61       	ori	r24, 0x10	; 16
 670:	8c 93       	st	X, r24

    //Set Interrupt
    #if SPI_INTERRUPT == DISABLE
    CLR_BIT(SPCR,SPCR_SPIE);
    #elif SPI_INTERRUPT == ENABLE
    SET_BIT(SPCR,SPCR_SPIE);
 672:	ad e2       	ldi	r26, 0x2D	; 45
 674:	b0 e0       	ldi	r27, 0x00	; 0
 676:	ed e2       	ldi	r30, 0x2D	; 45
 678:	f0 e0       	ldi	r31, 0x00	; 0
 67a:	80 81       	ld	r24, Z
 67c:	80 68       	ori	r24, 0x80	; 128
 67e:	8c 93       	st	X, r24

    //Set Data Order
    #if DATA_ORDER == MSB
    CLR_BIT(SPCR,SPCR_DORD);
    #elif DATA_ORDER == LSB
    SET_BIT(SPCR,SPCR_DORD);
 680:	ad e2       	ldi	r26, 0x2D	; 45
 682:	b0 e0       	ldi	r27, 0x00	; 0
 684:	ed e2       	ldi	r30, 0x2D	; 45
 686:	f0 e0       	ldi	r31, 0x00	; 0
 688:	80 81       	ld	r24, Z
 68a:	80 62       	ori	r24, 0x20	; 32
 68c:	8c 93       	st	X, r24
    #error "WRONG DATA ORDER CONFIGURATION"
    #endif

    //Set Clock Polarity
    #if LEADING_EDGE == RISING
    CLR_BIT(SPCR,SPCR_CPOL);
 68e:	ad e2       	ldi	r26, 0x2D	; 45
 690:	b0 e0       	ldi	r27, 0x00	; 0
 692:	ed e2       	ldi	r30, 0x2D	; 45
 694:	f0 e0       	ldi	r31, 0x00	; 0
 696:	80 81       	ld	r24, Z
 698:	87 7f       	andi	r24, 0xF7	; 247
 69a:	8c 93       	st	X, r24
    #error "WRONG CLOCK POLARITY CONFIGURATION"
    #endif

    //Set Clock Phase
    #if LEADING_EDGE_ACTION == SETUP
    CLR_BIT(SPCR,SPCR_CPHA);
 69c:	ad e2       	ldi	r26, 0x2D	; 45
 69e:	b0 e0       	ldi	r27, 0x00	; 0
 6a0:	ed e2       	ldi	r30, 0x2D	; 45
 6a2:	f0 e0       	ldi	r31, 0x00	; 0
 6a4:	80 81       	ld	r24, Z
 6a6:	8b 7f       	andi	r24, 0xFB	; 251
 6a8:	8c 93       	st	X, r24
    #elif PRESCALER ==DIV_BY_4
    CLR_BIT(SPSR,SPSR_SPI2X);
    CLR_BIT(SPCR,SPCR_SPR1);
    CLR_BIT(SPCR,SPCR_SPR0);
    #elif PRESCALER ==DIV_BY_8
    SET_BIT(SPSR,SPSR_SPI2X);
 6aa:	ae e2       	ldi	r26, 0x2E	; 46
 6ac:	b0 e0       	ldi	r27, 0x00	; 0
 6ae:	ee e2       	ldi	r30, 0x2E	; 46
 6b0:	f0 e0       	ldi	r31, 0x00	; 0
 6b2:	80 81       	ld	r24, Z
 6b4:	81 60       	ori	r24, 0x01	; 1
 6b6:	8c 93       	st	X, r24
    CLR_BIT(SPCR,SPCR_SPR1);
 6b8:	ad e2       	ldi	r26, 0x2D	; 45
 6ba:	b0 e0       	ldi	r27, 0x00	; 0
 6bc:	ed e2       	ldi	r30, 0x2D	; 45
 6be:	f0 e0       	ldi	r31, 0x00	; 0
 6c0:	80 81       	ld	r24, Z
 6c2:	8d 7f       	andi	r24, 0xFD	; 253
 6c4:	8c 93       	st	X, r24
    SET_BIT(SPCR,SPCR_SPR0);
 6c6:	ad e2       	ldi	r26, 0x2D	; 45
 6c8:	b0 e0       	ldi	r27, 0x00	; 0
 6ca:	ed e2       	ldi	r30, 0x2D	; 45
 6cc:	f0 e0       	ldi	r31, 0x00	; 0
 6ce:	80 81       	ld	r24, Z
 6d0:	81 60       	ori	r24, 0x01	; 1
 6d2:	8c 93       	st	X, r24

    //ENABLE SPI
    #if SPI_ENABLE == DISABLE
    CLR_BIT(SPCR,SPCR_SPE);
    #elif SPI_ENABLE == ENABLE
    SET_BIT(SPCR,SPCR_SPE);
 6d4:	ad e2       	ldi	r26, 0x2D	; 45
 6d6:	b0 e0       	ldi	r27, 0x00	; 0
 6d8:	ed e2       	ldi	r30, 0x2D	; 45
 6da:	f0 e0       	ldi	r31, 0x00	; 0
 6dc:	80 81       	ld	r24, Z
 6de:	80 64       	ori	r24, 0x40	; 64
 6e0:	8c 93       	st	X, r24
    #else
    #error "WRONG SPI CONFIGURATION"
    #endif

}
 6e2:	cf 91       	pop	r28
 6e4:	df 91       	pop	r29
 6e6:	08 95       	ret

000006e8 <SPI_voidSlaveInit>:
void SPI_voidSlaveInit(void){
 6e8:	df 93       	push	r29
 6ea:	cf 93       	push	r28
 6ec:	cd b7       	in	r28, 0x3d	; 61
 6ee:	de b7       	in	r29, 0x3e	; 62
    //Set to Slave
    CLR_BIT(SPCR,SPCR_MSTR);
 6f0:	ad e2       	ldi	r26, 0x2D	; 45
 6f2:	b0 e0       	ldi	r27, 0x00	; 0
 6f4:	ed e2       	ldi	r30, 0x2D	; 45
 6f6:	f0 e0       	ldi	r31, 0x00	; 0
 6f8:	80 81       	ld	r24, Z
 6fa:	8f 7e       	andi	r24, 0xEF	; 239
 6fc:	8c 93       	st	X, r24

    //Set Interrupt
    #if SPI_INTERRUPT == DISABLE
    CLR_BIT(SPCR,SPCR_SPIE);
    #elif SPI_INTERRUPT == ENABLE
    SET_BIT(SPCR,SPCR_SPIE);
 6fe:	ad e2       	ldi	r26, 0x2D	; 45
 700:	b0 e0       	ldi	r27, 0x00	; 0
 702:	ed e2       	ldi	r30, 0x2D	; 45
 704:	f0 e0       	ldi	r31, 0x00	; 0
 706:	80 81       	ld	r24, Z
 708:	80 68       	ori	r24, 0x80	; 128
 70a:	8c 93       	st	X, r24

    //Set Data Order
    #if DATA_ORDER == MSB
    CLR_BIT(SPCR,SPCR_DORD);
    #elif DATA_ORDER == LSB
    SET_BIT(SPCR,SPCR_DORD);
 70c:	ad e2       	ldi	r26, 0x2D	; 45
 70e:	b0 e0       	ldi	r27, 0x00	; 0
 710:	ed e2       	ldi	r30, 0x2D	; 45
 712:	f0 e0       	ldi	r31, 0x00	; 0
 714:	80 81       	ld	r24, Z
 716:	80 62       	ori	r24, 0x20	; 32
 718:	8c 93       	st	X, r24
    #error "WRONG DATA ORDER CONFIGURATION"
    #endif

    //Set Clock Polarity
    #if LEADING_EDGE == RISING
    CLR_BIT(SPCR,SPCR_CPOL);
 71a:	ad e2       	ldi	r26, 0x2D	; 45
 71c:	b0 e0       	ldi	r27, 0x00	; 0
 71e:	ed e2       	ldi	r30, 0x2D	; 45
 720:	f0 e0       	ldi	r31, 0x00	; 0
 722:	80 81       	ld	r24, Z
 724:	87 7f       	andi	r24, 0xF7	; 247
 726:	8c 93       	st	X, r24
    #error "WRONG CLOCK POLARITY CONFIGURATION"
    #endif

    //Set Clock Phase
    #if LEADING_EDGE_ACTION == SETUP
    CLR_BIT(SPCR,SPCR_CPHA);
 728:	ad e2       	ldi	r26, 0x2D	; 45
 72a:	b0 e0       	ldi	r27, 0x00	; 0
 72c:	ed e2       	ldi	r30, 0x2D	; 45
 72e:	f0 e0       	ldi	r31, 0x00	; 0
 730:	80 81       	ld	r24, Z
 732:	8b 7f       	andi	r24, 0xFB	; 251
 734:	8c 93       	st	X, r24

    //ENABLE SPI
    #if SPI_ENABLE == DISABLE
    CLR_BIT(SPCR,SPCR_SPE);
    #elif SPI_ENABLE == ENABLE
    SET_BIT(SPCR,SPCR_SPE);
 736:	ad e2       	ldi	r26, 0x2D	; 45
 738:	b0 e0       	ldi	r27, 0x00	; 0
 73a:	ed e2       	ldi	r30, 0x2D	; 45
 73c:	f0 e0       	ldi	r31, 0x00	; 0
 73e:	80 81       	ld	r24, Z
 740:	80 64       	ori	r24, 0x40	; 64
 742:	8c 93       	st	X, r24
    #else
    #error "WRONG SPI CONFIGURATION"
    #endif
    
}
 744:	cf 91       	pop	r28
 746:	df 91       	pop	r29
 748:	08 95       	ret

0000074a <SPI_u8SynchTranscieve>:


u8 SPI_u8SynchTranscieve(u8 Copy_u8Data,u8* Copy_pu8ReceivedData){
 74a:	df 93       	push	r29
 74c:	cf 93       	push	r28
 74e:	cd b7       	in	r28, 0x3d	; 61
 750:	de b7       	in	r29, 0x3e	; 62
 752:	28 97       	sbiw	r28, 0x08	; 8
 754:	0f b6       	in	r0, 0x3f	; 63
 756:	f8 94       	cli
 758:	de bf       	out	0x3e, r29	; 62
 75a:	0f be       	out	0x3f, r0	; 63
 75c:	cd bf       	out	0x3d, r28	; 61
 75e:	8e 83       	std	Y+6, r24	; 0x06
 760:	78 87       	std	Y+8, r23	; 0x08
 762:	6f 83       	std	Y+7, r22	; 0x07
    u8 Local_u8ErrorState=OK;
 764:	1d 82       	std	Y+5, r1	; 0x05
    if(Copy_pu8ReceivedData!=NULL){
 766:	8f 81       	ldd	r24, Y+7	; 0x07
 768:	98 85       	ldd	r25, Y+8	; 0x08
 76a:	00 97       	sbiw	r24, 0x00	; 0
 76c:	d9 f1       	breq	.+118    	; 0x7e4 <SPI_u8SynchTranscieve+0x9a>
        u32 Local_u32Counter=0;
 76e:	19 82       	std	Y+1, r1	; 0x01
 770:	1a 82       	std	Y+2, r1	; 0x02
 772:	1b 82       	std	Y+3, r1	; 0x03
 774:	1c 82       	std	Y+4, r1	; 0x04
        SPDR = Copy_u8Data;
 776:	ef e2       	ldi	r30, 0x2F	; 47
 778:	f0 e0       	ldi	r31, 0x00	; 0
 77a:	8e 81       	ldd	r24, Y+6	; 0x06
 77c:	80 83       	st	Z, r24
 77e:	0b c0       	rjmp	.+22     	; 0x796 <SPI_u8SynchTranscieve+0x4c>
        while (GET_BIT(SPSR,SPSR_SPIF)==0&&Local_u32Counter!=TIMEOUT){
            Local_u32Counter++;
 780:	89 81       	ldd	r24, Y+1	; 0x01
 782:	9a 81       	ldd	r25, Y+2	; 0x02
 784:	ab 81       	ldd	r26, Y+3	; 0x03
 786:	bc 81       	ldd	r27, Y+4	; 0x04
 788:	01 96       	adiw	r24, 0x01	; 1
 78a:	a1 1d       	adc	r26, r1
 78c:	b1 1d       	adc	r27, r1
 78e:	89 83       	std	Y+1, r24	; 0x01
 790:	9a 83       	std	Y+2, r25	; 0x02
 792:	ab 83       	std	Y+3, r26	; 0x03
 794:	bc 83       	std	Y+4, r27	; 0x04
u8 SPI_u8SynchTranscieve(u8 Copy_u8Data,u8* Copy_pu8ReceivedData){
    u8 Local_u8ErrorState=OK;
    if(Copy_pu8ReceivedData!=NULL){
        u32 Local_u32Counter=0;
        SPDR = Copy_u8Data;
        while (GET_BIT(SPSR,SPSR_SPIF)==0&&Local_u32Counter!=TIMEOUT){
 796:	ee e2       	ldi	r30, 0x2E	; 46
 798:	f0 e0       	ldi	r31, 0x00	; 0
 79a:	80 81       	ld	r24, Z
 79c:	88 23       	and	r24, r24
 79e:	64 f0       	brlt	.+24     	; 0x7b8 <SPI_u8SynchTranscieve+0x6e>
 7a0:	89 81       	ldd	r24, Y+1	; 0x01
 7a2:	9a 81       	ldd	r25, Y+2	; 0x02
 7a4:	ab 81       	ldd	r26, Y+3	; 0x03
 7a6:	bc 81       	ldd	r27, Y+4	; 0x04
 7a8:	80 32       	cpi	r24, 0x20	; 32
 7aa:	21 ea       	ldi	r18, 0xA1	; 161
 7ac:	92 07       	cpc	r25, r18
 7ae:	27 e0       	ldi	r18, 0x07	; 7
 7b0:	a2 07       	cpc	r26, r18
 7b2:	20 e0       	ldi	r18, 0x00	; 0
 7b4:	b2 07       	cpc	r27, r18
 7b6:	21 f7       	brne	.-56     	; 0x780 <SPI_u8SynchTranscieve+0x36>
            Local_u32Counter++;
        }
        if(Local_u32Counter==TIMEOUT){
 7b8:	89 81       	ldd	r24, Y+1	; 0x01
 7ba:	9a 81       	ldd	r25, Y+2	; 0x02
 7bc:	ab 81       	ldd	r26, Y+3	; 0x03
 7be:	bc 81       	ldd	r27, Y+4	; 0x04
 7c0:	80 32       	cpi	r24, 0x20	; 32
 7c2:	21 ea       	ldi	r18, 0xA1	; 161
 7c4:	92 07       	cpc	r25, r18
 7c6:	27 e0       	ldi	r18, 0x07	; 7
 7c8:	a2 07       	cpc	r26, r18
 7ca:	20 e0       	ldi	r18, 0x00	; 0
 7cc:	b2 07       	cpc	r27, r18
 7ce:	19 f4       	brne	.+6      	; 0x7d6 <SPI_u8SynchTranscieve+0x8c>
            Local_u8ErrorState=NOK;
 7d0:	81 e0       	ldi	r24, 0x01	; 1
 7d2:	8d 83       	std	Y+5, r24	; 0x05
 7d4:	09 c0       	rjmp	.+18     	; 0x7e8 <SPI_u8SynchTranscieve+0x9e>
        }
        else{
            *Copy_pu8ReceivedData = SPDR;
 7d6:	ef e2       	ldi	r30, 0x2F	; 47
 7d8:	f0 e0       	ldi	r31, 0x00	; 0
 7da:	80 81       	ld	r24, Z
 7dc:	ef 81       	ldd	r30, Y+7	; 0x07
 7de:	f8 85       	ldd	r31, Y+8	; 0x08
 7e0:	80 83       	st	Z, r24
 7e2:	02 c0       	rjmp	.+4      	; 0x7e8 <SPI_u8SynchTranscieve+0x9e>
        }

    }
    else{
        Local_u8ErrorState=NULL_POINTER;
 7e4:	82 e0       	ldi	r24, 0x02	; 2
 7e6:	8d 83       	std	Y+5, r24	; 0x05
    }
    
    return Local_u8ErrorState;
 7e8:	8d 81       	ldd	r24, Y+5	; 0x05
}
 7ea:	28 96       	adiw	r28, 0x08	; 8
 7ec:	0f b6       	in	r0, 0x3f	; 63
 7ee:	f8 94       	cli
 7f0:	de bf       	out	0x3e, r29	; 62
 7f2:	0f be       	out	0x3f, r0	; 63
 7f4:	cd bf       	out	0x3d, r28	; 61
 7f6:	cf 91       	pop	r28
 7f8:	df 91       	pop	r29
 7fa:	08 95       	ret

000007fc <SPI_u8AsynchTranscieve>:

u8 SPI_u8AsynchTranscieve(u8 Copy_u8Data,u8* Copy_pu8ReceivedData){
 7fc:	df 93       	push	r29
 7fe:	cf 93       	push	r28
 800:	00 d0       	rcall	.+0      	; 0x802 <SPI_u8AsynchTranscieve+0x6>
 802:	00 d0       	rcall	.+0      	; 0x804 <SPI_u8AsynchTranscieve+0x8>
 804:	cd b7       	in	r28, 0x3d	; 61
 806:	de b7       	in	r29, 0x3e	; 62
 808:	8a 83       	std	Y+2, r24	; 0x02
 80a:	7c 83       	std	Y+4, r23	; 0x04
 80c:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ErrorState=OK;
 80e:	19 82       	std	Y+1, r1	; 0x01
    if(Copy_pu8ReceivedData!=NULL){
 810:	8b 81       	ldd	r24, Y+3	; 0x03
 812:	9c 81       	ldd	r25, Y+4	; 0x04
 814:	00 97       	sbiw	r24, 0x00	; 0
 816:	91 f0       	breq	.+36     	; 0x83c <SPI_u8AsynchTranscieve+0x40>
        SET_BIT(SPCR,SPCR_SPIE);
 818:	ad e2       	ldi	r26, 0x2D	; 45
 81a:	b0 e0       	ldi	r27, 0x00	; 0
 81c:	ed e2       	ldi	r30, 0x2D	; 45
 81e:	f0 e0       	ldi	r31, 0x00	; 0
 820:	80 81       	ld	r24, Z
 822:	80 68       	ori	r24, 0x80	; 128
 824:	8c 93       	st	X, r24
        SPDR = Copy_u8Data;
 826:	ef e2       	ldi	r30, 0x2F	; 47
 828:	f0 e0       	ldi	r31, 0x00	; 0
 82a:	8a 81       	ldd	r24, Y+2	; 0x02
 82c:	80 83       	st	Z, r24
        SPI_pu8ReceivedData=Copy_pu8ReceivedData;
 82e:	8b 81       	ldd	r24, Y+3	; 0x03
 830:	9c 81       	ldd	r25, Y+4	; 0x04
 832:	90 93 61 00 	sts	0x0061, r25
 836:	80 93 60 00 	sts	0x0060, r24
 83a:	02 c0       	rjmp	.+4      	; 0x840 <SPI_u8AsynchTranscieve+0x44>
    }
    else{
        Local_u8ErrorState=NULL_POINTER;
 83c:	82 e0       	ldi	r24, 0x02	; 2
 83e:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8ErrorState;
 840:	89 81       	ldd	r24, Y+1	; 0x01
    

}
 842:	0f 90       	pop	r0
 844:	0f 90       	pop	r0
 846:	0f 90       	pop	r0
 848:	0f 90       	pop	r0
 84a:	cf 91       	pop	r28
 84c:	df 91       	pop	r29
 84e:	08 95       	ret

00000850 <__vector_12>:

void __vector_12 (void)  __attribute__((signal));
void __vector_12 (void){
 850:	1f 92       	push	r1
 852:	0f 92       	push	r0
 854:	0f b6       	in	r0, 0x3f	; 63
 856:	0f 92       	push	r0
 858:	11 24       	eor	r1, r1
 85a:	8f 93       	push	r24
 85c:	af 93       	push	r26
 85e:	bf 93       	push	r27
 860:	ef 93       	push	r30
 862:	ff 93       	push	r31
 864:	df 93       	push	r29
 866:	cf 93       	push	r28
 868:	cd b7       	in	r28, 0x3d	; 61
 86a:	de b7       	in	r29, 0x3e	; 62

    *SPI_pu8ReceivedData=SPDR;
 86c:	e0 91 60 00 	lds	r30, 0x0060
 870:	f0 91 61 00 	lds	r31, 0x0061
 874:	af e2       	ldi	r26, 0x2F	; 47
 876:	b0 e0       	ldi	r27, 0x00	; 0
 878:	8c 91       	ld	r24, X
 87a:	80 83       	st	Z, r24

}
 87c:	cf 91       	pop	r28
 87e:	df 91       	pop	r29
 880:	ff 91       	pop	r31
 882:	ef 91       	pop	r30
 884:	bf 91       	pop	r27
 886:	af 91       	pop	r26
 888:	8f 91       	pop	r24
 88a:	0f 90       	pop	r0
 88c:	0f be       	out	0x3f, r0	; 63
 88e:	0f 90       	pop	r0
 890:	1f 90       	pop	r1
 892:	18 95       	reti

00000894 <main>:

#include "PORT_interface.h"
#include "DIO_interface.h"
#include "SPI_interface.h"

void main(){
 894:	df 93       	push	r29
 896:	cf 93       	push	r28
 898:	cd b7       	in	r28, 0x3d	; 61
 89a:	de b7       	in	r29, 0x3e	; 62
 89c:	ff cf       	rjmp	.-2      	; 0x89c <main+0x8>

0000089e <_exit>:
 89e:	f8 94       	cli

000008a0 <__stop_program>:
 8a0:	ff cf       	rjmp	.-2      	; 0x8a0 <__stop_program>
