
MOTOR_DASHBOARD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003bd8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000f2  00800060  00003bd8  00003c6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  00800152  00800152  00003d5e  2**0
                  ALLOC
  3 .stab         00003e40  00000000  00000000  00003d60  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000016ee  00000000  00000000  00007ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000928e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000093ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000953e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000b187  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000c072  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ce20  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000cf80  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000d20d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d9db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 64 1c 	jmp	0x38c8	; 0x38c8 <__vector_4>
      14:	0c 94 97 1c 	jmp	0x392e	; 0x392e <__vector_5>
      18:	0c 94 a7 1c 	jmp	0x394e	; 0x394e <__vector_6>
      1c:	0c 94 b7 1c 	jmp	0x396e	; 0x396e <__vector_7>
      20:	0c 94 c7 1c 	jmp	0x398e	; 0x398e <__vector_8>
      24:	0c 94 d7 1c 	jmp	0x39ae	; 0x39ae <__vector_9>
      28:	0c 94 e7 1c 	jmp	0x39ce	; 0x39ce <__vector_10>
      2c:	0c 94 1a 1d 	jmp	0x3a34	; 0x3a34 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 13 07 	jmp	0xe26	; 0xe26 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ed       	ldi	r30, 0xD8	; 216
      68:	fb e3       	ldi	r31, 0x3B	; 59
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 35       	cpi	r26, 0x52	; 82
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e5       	ldi	r26, 0x52	; 82
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 35       	cpi	r26, 0x5F	; 95
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 2a 1d 	call	0x3a54	; 0x3a54 <main>
      8a:	0c 94 ea 1d 	jmp	0x3bd4	; 0x3bd4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b3 1d 	jmp	0x3b66	; 0x3b66 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 e3       	ldi	r26, 0x31	; 49
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 cf 1d 	jmp	0x3b9e	; 0x3b9e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 bf 1d 	jmp	0x3b7e	; 0x3b7e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 db 1d 	jmp	0x3bb6	; 0x3bb6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 bf 1d 	jmp	0x3b7e	; 0x3b7e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 db 1d 	jmp	0x3bb6	; 0x3bb6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b3 1d 	jmp	0x3b66	; 0x3b66 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	81 e3       	ldi	r24, 0x31	; 49
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 cf 1d 	jmp	0x3b9e	; 0x3b9e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 bf 1d 	jmp	0x3b7e	; 0x3b7e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 db 1d 	jmp	0x3bb6	; 0x3bb6 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 bf 1d 	jmp	0x3b7e	; 0x3b7e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 db 1d 	jmp	0x3bb6	; 0x3bb6 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 bf 1d 	jmp	0x3b7e	; 0x3b7e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 db 1d 	jmp	0x3bb6	; 0x3bb6 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 c3 1d 	jmp	0x3b86	; 0x3b86 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 df 1d 	jmp	0x3bbe	; 0x3bbe <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_voidInit>:
static void (*ADC_pvCallBackNotificationFunc)(void)=NULL;
static u8 ADC_u8BusyState=IDLE;
static u8 ADC_ConversionState;
static ADC_Chain_t *ADC_psChain;
static u8 ADC_u8ChainIndex;
void ADC_voidInit(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	//Reference Selection
#if REFERENCE_SELECTION==AREF_REF
	CLR_BIT(ADMUX,ADMUX_REFS1);
	CLR_BIT(ADMUX,ADMUX_REFS0);
#elif REFERENCE_SELECTION==AVCC_REF
	CLR_BIT(ADMUX,ADMUX_REFS1);
     b4e:	a7 e2       	ldi	r26, 0x27	; 39
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e7 e2       	ldi	r30, 0x27	; 39
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	8f 77       	andi	r24, 0x7F	; 127
     b5a:	8c 93       	st	X, r24
	SET_BIT(ADMUX,ADMUX_REFS0);
     b5c:	a7 e2       	ldi	r26, 0x27	; 39
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e7 e2       	ldi	r30, 0x27	; 39
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	80 64       	ori	r24, 0x40	; 64
     b68:	8c 93       	st	X, r24
#endif
	//Adjust Resultion
#if ADC_RESOLUTION==10
	CLR_BIT(ADMUX,ADMUX_ADLAR);
#elif ADC_RESOLUTION==8
	SET_BIT(ADMUX,ADMUX_ADLAR);
     b6a:	a7 e2       	ldi	r26, 0x27	; 39
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e7 e2       	ldi	r30, 0x27	; 39
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	80 62       	ori	r24, 0x20	; 32
     b76:	8c 93       	st	X, r24
	SFIOR|=(AUTO_TRIGGER_SOURCE<<5);
#if AUTO_TRIGGER_SOURCE==FREE_RUNNING
	SET_BIT(ADCSRA,ADCSRA_ADSC);
#endif
#elif AUTO_TRIGGER==DISABLE
	CLR_BIT(ADCSRA,ADCSRA_ADATE);
     b78:	a6 e2       	ldi	r26, 0x26	; 38
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e6 e2       	ldi	r30, 0x26	; 38
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	8f 7d       	andi	r24, 0xDF	; 223
     b84:	8c 93       	st	X, r24

	//Interrupt enable
#if ADC_INT==ENABLE
	SET_BIT(ADCSRA,ADCSRA_ADIE);
#elif ADC_INT==DISABLE
	CLR_BIT(ADCSRA,ADCSRA_ADIE);
     b86:	a6 e2       	ldi	r26, 0x26	; 38
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e6 e2       	ldi	r30, 0x26	; 38
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	87 7f       	andi	r24, 0xF7	; 247
     b92:	8c 93       	st	X, r24
#else
#error "WRONG INT OPTION"
#endif

	//Prescaler Setting
	ADCSRA&=ADC_PRESCALER_MASK;
     b94:	a6 e2       	ldi	r26, 0x26	; 38
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e6 e2       	ldi	r30, 0x26	; 38
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	88 7f       	andi	r24, 0xF8	; 248
     ba0:	8c 93       	st	X, r24
	ADCSRA|=PRESCALER ;
     ba2:	a6 e2       	ldi	r26, 0x26	; 38
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e6 e2       	ldi	r30, 0x26	; 38
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	87 60       	ori	r24, 0x07	; 7
     bae:	8c 93       	st	X, r24

	//Enable or Disable ADC
#if ADC_ENABLE==ENABLE
	SET_BIT(ADCSRA,ADCSRA_ADEN);
     bb0:	a6 e2       	ldi	r26, 0x26	; 38
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	e6 e2       	ldi	r30, 0x26	; 38
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	80 68       	ori	r24, 0x80	; 128
     bbc:	8c 93       	st	X, r24
#elif ADC_ENABLE==DISABLE
	CLR_BIT(ADCSRA,ADCSRA_ADEN);
#else
#error "Wrong ADC_ENABLE Option"
#endif
}
     bbe:	cf 91       	pop	r28
     bc0:	df 91       	pop	r29
     bc2:	08 95       	ret

00000bc4 <ADC_u8StartConversionSynch>:

u8 ADC_u8StartConversionSynch(u8 Copy_u8Channel,u16* Copy_pu16Reading){
     bc4:	df 93       	push	r29
     bc6:	cf 93       	push	r28
     bc8:	cd b7       	in	r28, 0x3d	; 61
     bca:	de b7       	in	r29, 0x3e	; 62
     bcc:	28 97       	sbiw	r28, 0x08	; 8
     bce:	0f b6       	in	r0, 0x3f	; 63
     bd0:	f8 94       	cli
     bd2:	de bf       	out	0x3e, r29	; 62
     bd4:	0f be       	out	0x3f, r0	; 63
     bd6:	cd bf       	out	0x3d, r28	; 61
     bd8:	8e 83       	std	Y+6, r24	; 0x06
     bda:	78 87       	std	Y+8, r23	; 0x08
     bdc:	6f 83       	std	Y+7, r22	; 0x07
	u32 Local_u32Counter=0;
     bde:	1a 82       	std	Y+2, r1	; 0x02
     be0:	1b 82       	std	Y+3, r1	; 0x03
     be2:	1c 82       	std	Y+4, r1	; 0x04
     be4:	1d 82       	std	Y+5, r1	; 0x05
	u8 Local_u8ErrorState=OK;
     be6:	19 82       	std	Y+1, r1	; 0x01
	if(ADC_u8BusyState==IDLE){
     be8:	80 91 56 01 	lds	r24, 0x0156
     bec:	88 23       	and	r24, r24
     bee:	09 f0       	breq	.+2      	; 0xbf2 <ADC_u8StartConversionSynch+0x2e>
     bf0:	65 c0       	rjmp	.+202    	; 0xcbc <ADC_u8StartConversionSynch+0xf8>
		if(Copy_pu16Reading==NULL){
     bf2:	8f 81       	ldd	r24, Y+7	; 0x07
     bf4:	98 85       	ldd	r25, Y+8	; 0x08
     bf6:	00 97       	sbiw	r24, 0x00	; 0
     bf8:	19 f4       	brne	.+6      	; 0xc00 <ADC_u8StartConversionSynch+0x3c>
			Local_u8ErrorState=NULL_POINTER;
     bfa:	82 e0       	ldi	r24, 0x02	; 2
     bfc:	89 83       	std	Y+1, r24	; 0x01
     bfe:	60 c0       	rjmp	.+192    	; 0xcc0 <ADC_u8StartConversionSynch+0xfc>
		}
		else{
			ADC_u8BusyState=BUSY;
     c00:	81 e0       	ldi	r24, 0x01	; 1
     c02:	80 93 56 01 	sts	0x0156, r24
			//adjusting the channel using bit masking
			ADMUX&=CHANNEL_MUX_MASK;
     c06:	a7 e2       	ldi	r26, 0x27	; 39
     c08:	b0 e0       	ldi	r27, 0x00	; 0
     c0a:	e7 e2       	ldi	r30, 0x27	; 39
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	80 81       	ld	r24, Z
     c10:	80 7e       	andi	r24, 0xE0	; 224
     c12:	8c 93       	st	X, r24
			ADMUX|=Copy_u8Channel;
     c14:	a7 e2       	ldi	r26, 0x27	; 39
     c16:	b0 e0       	ldi	r27, 0x00	; 0
     c18:	e7 e2       	ldi	r30, 0x27	; 39
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	90 81       	ld	r25, Z
     c1e:	8e 81       	ldd	r24, Y+6	; 0x06
     c20:	89 2b       	or	r24, r25
     c22:	8c 93       	st	X, r24
			//start conversion
			SET_BIT(ADCSRA,ADCSRA_ADSC);
     c24:	a6 e2       	ldi	r26, 0x26	; 38
     c26:	b0 e0       	ldi	r27, 0x00	; 0
     c28:	e6 e2       	ldi	r30, 0x26	; 38
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	80 81       	ld	r24, Z
     c2e:	80 64       	ori	r24, 0x40	; 64
     c30:	8c 93       	st	X, r24
     c32:	0b c0       	rjmp	.+22     	; 0xc4a <ADC_u8StartConversionSynch+0x86>
			//polling until the conversion is finished using the interrupt flag
			while((GET_BIT(ADCSRA,ADCSRA_ADIF)==0) && (Local_u32Counter!=ADC_u32TIMEOUT)){
				Local_u32Counter++;
     c34:	8a 81       	ldd	r24, Y+2	; 0x02
     c36:	9b 81       	ldd	r25, Y+3	; 0x03
     c38:	ac 81       	ldd	r26, Y+4	; 0x04
     c3a:	bd 81       	ldd	r27, Y+5	; 0x05
     c3c:	01 96       	adiw	r24, 0x01	; 1
     c3e:	a1 1d       	adc	r26, r1
     c40:	b1 1d       	adc	r27, r1
     c42:	8a 83       	std	Y+2, r24	; 0x02
     c44:	9b 83       	std	Y+3, r25	; 0x03
     c46:	ac 83       	std	Y+4, r26	; 0x04
     c48:	bd 83       	std	Y+5, r27	; 0x05
			ADMUX&=CHANNEL_MUX_MASK;
			ADMUX|=Copy_u8Channel;
			//start conversion
			SET_BIT(ADCSRA,ADCSRA_ADSC);
			//polling until the conversion is finished using the interrupt flag
			while((GET_BIT(ADCSRA,ADCSRA_ADIF)==0) && (Local_u32Counter!=ADC_u32TIMEOUT)){
     c4a:	e6 e2       	ldi	r30, 0x26	; 38
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	80 81       	ld	r24, Z
     c50:	82 95       	swap	r24
     c52:	8f 70       	andi	r24, 0x0F	; 15
     c54:	88 2f       	mov	r24, r24
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	81 70       	andi	r24, 0x01	; 1
     c5a:	90 70       	andi	r25, 0x00	; 0
     c5c:	00 97       	sbiw	r24, 0x00	; 0
     c5e:	61 f4       	brne	.+24     	; 0xc78 <ADC_u8StartConversionSynch+0xb4>
     c60:	8a 81       	ldd	r24, Y+2	; 0x02
     c62:	9b 81       	ldd	r25, Y+3	; 0x03
     c64:	ac 81       	ldd	r26, Y+4	; 0x04
     c66:	bd 81       	ldd	r27, Y+5	; 0x05
     c68:	80 35       	cpi	r24, 0x50	; 80
     c6a:	23 ec       	ldi	r18, 0xC3	; 195
     c6c:	92 07       	cpc	r25, r18
     c6e:	20 e0       	ldi	r18, 0x00	; 0
     c70:	a2 07       	cpc	r26, r18
     c72:	20 e0       	ldi	r18, 0x00	; 0
     c74:	b2 07       	cpc	r27, r18
     c76:	f1 f6       	brne	.-68     	; 0xc34 <ADC_u8StartConversionSynch+0x70>
				Local_u32Counter++;
			}
			//clearing the interrupt flag by writing 1
			if(Local_u32Counter==ADC_u32TIMEOUT){
     c78:	8a 81       	ldd	r24, Y+2	; 0x02
     c7a:	9b 81       	ldd	r25, Y+3	; 0x03
     c7c:	ac 81       	ldd	r26, Y+4	; 0x04
     c7e:	bd 81       	ldd	r27, Y+5	; 0x05
     c80:	80 35       	cpi	r24, 0x50	; 80
     c82:	23 ec       	ldi	r18, 0xC3	; 195
     c84:	92 07       	cpc	r25, r18
     c86:	20 e0       	ldi	r18, 0x00	; 0
     c88:	a2 07       	cpc	r26, r18
     c8a:	20 e0       	ldi	r18, 0x00	; 0
     c8c:	b2 07       	cpc	r27, r18
     c8e:	19 f4       	brne	.+6      	; 0xc96 <ADC_u8StartConversionSynch+0xd2>
				//loop is broken because timeout is reached
				Local_u8ErrorState=NOK;
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	89 83       	std	Y+1, r24	; 0x01
     c94:	15 c0       	rjmp	.+42     	; 0xcc0 <ADC_u8StartConversionSynch+0xfc>
			}
			else{
				//flag is raised
				SET_BIT(ADCSRA,ADCSRA_ADIF);
     c96:	a6 e2       	ldi	r26, 0x26	; 38
     c98:	b0 e0       	ldi	r27, 0x00	; 0
     c9a:	e6 e2       	ldi	r30, 0x26	; 38
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	80 81       	ld	r24, Z
     ca0:	80 61       	ori	r24, 0x10	; 16
     ca2:	8c 93       	st	X, r24
				//returning the reading
#if ADC_RESOLUTION == 8
				*Copy_pu16Reading= ADCH;
     ca4:	e5 e2       	ldi	r30, 0x25	; 37
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	80 81       	ld	r24, Z
     caa:	88 2f       	mov	r24, r24
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	ef 81       	ldd	r30, Y+7	; 0x07
     cb0:	f8 85       	ldd	r31, Y+8	; 0x08
     cb2:	91 83       	std	Z+1, r25	; 0x01
     cb4:	80 83       	st	Z, r24
#elif ADC_RESOLUTION == 10
				*Copy_pu16Reading = ADC;
#else
#error "Wrong ADJUST OPTION"
#endif
				ADC_u8BusyState=IDLE;
     cb6:	10 92 56 01 	sts	0x0156, r1
     cba:	02 c0       	rjmp	.+4      	; 0xcc0 <ADC_u8StartConversionSynch+0xfc>
			}
		}
	}
	else{
		Local_u8ErrorState=BUSY_FUNC;
     cbc:	83 e0       	ldi	r24, 0x03	; 3
     cbe:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErrorState;
     cc0:	89 81       	ldd	r24, Y+1	; 0x01
}
     cc2:	28 96       	adiw	r28, 0x08	; 8
     cc4:	0f b6       	in	r0, 0x3f	; 63
     cc6:	f8 94       	cli
     cc8:	de bf       	out	0x3e, r29	; 62
     cca:	0f be       	out	0x3f, r0	; 63
     ccc:	cd bf       	out	0x3d, r28	; 61
     cce:	cf 91       	pop	r28
     cd0:	df 91       	pop	r29
     cd2:	08 95       	ret

00000cd4 <ADC_u8StartConversionAsynch>:

u8 ADC_u8StartConversionAsynch(u8 Copy_u8Channel,u16* Copy_pu16Reading, void (*Copy_pvNotificationFunc)(void)){
     cd4:	df 93       	push	r29
     cd6:	cf 93       	push	r28
     cd8:	00 d0       	rcall	.+0      	; 0xcda <ADC_u8StartConversionAsynch+0x6>
     cda:	00 d0       	rcall	.+0      	; 0xcdc <ADC_u8StartConversionAsynch+0x8>
     cdc:	00 d0       	rcall	.+0      	; 0xcde <ADC_u8StartConversionAsynch+0xa>
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
     ce2:	8a 83       	std	Y+2, r24	; 0x02
     ce4:	7c 83       	std	Y+4, r23	; 0x04
     ce6:	6b 83       	std	Y+3, r22	; 0x03
     ce8:	5e 83       	std	Y+6, r21	; 0x06
     cea:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState=OK;
     cec:	19 82       	std	Y+1, r1	; 0x01
	if(ADC_u8BusyState==IDLE){
     cee:	80 91 56 01 	lds	r24, 0x0156
     cf2:	88 23       	and	r24, r24
     cf4:	d1 f5       	brne	.+116    	; 0xd6a <ADC_u8StartConversionAsynch+0x96>
		ADC_u8BusyState=BUSY;
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	80 93 56 01 	sts	0x0156, r24
		if(Copy_pu16Reading==NULL||Copy_pvNotificationFunc==NULL){
     cfc:	8b 81       	ldd	r24, Y+3	; 0x03
     cfe:	9c 81       	ldd	r25, Y+4	; 0x04
     d00:	00 97       	sbiw	r24, 0x00	; 0
     d02:	21 f0       	breq	.+8      	; 0xd0c <ADC_u8StartConversionAsynch+0x38>
     d04:	8d 81       	ldd	r24, Y+5	; 0x05
     d06:	9e 81       	ldd	r25, Y+6	; 0x06
     d08:	00 97       	sbiw	r24, 0x00	; 0
     d0a:	19 f4       	brne	.+6      	; 0xd12 <ADC_u8StartConversionAsynch+0x3e>
			Local_u8ErrorState=NULL_POINTER;
     d0c:	82 e0       	ldi	r24, 0x02	; 2
     d0e:	89 83       	std	Y+1, r24	; 0x01
     d10:	2e c0       	rjmp	.+92     	; 0xd6e <ADC_u8StartConversionAsynch+0x9a>
		}
		else{
			ADC_ConversionState=SINGLE;
     d12:	10 92 57 01 	sts	0x0157, r1
			//put the local variables into global so they can be used in the ISR
			ADC_pu16Reading=Copy_pu16Reading;
     d16:	8b 81       	ldd	r24, Y+3	; 0x03
     d18:	9c 81       	ldd	r25, Y+4	; 0x04
     d1a:	90 93 53 01 	sts	0x0153, r25
     d1e:	80 93 52 01 	sts	0x0152, r24
			ADC_pvCallBackNotificationFunc=Copy_pvNotificationFunc;
     d22:	8d 81       	ldd	r24, Y+5	; 0x05
     d24:	9e 81       	ldd	r25, Y+6	; 0x06
     d26:	90 93 55 01 	sts	0x0155, r25
     d2a:	80 93 54 01 	sts	0x0154, r24
			//adjusting the channel using bit masking
			ADMUX&=CHANNEL_MUX_MASK;
     d2e:	a7 e2       	ldi	r26, 0x27	; 39
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	e7 e2       	ldi	r30, 0x27	; 39
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	80 81       	ld	r24, Z
     d38:	80 7e       	andi	r24, 0xE0	; 224
     d3a:	8c 93       	st	X, r24
			ADMUX|=Copy_u8Channel;
     d3c:	a7 e2       	ldi	r26, 0x27	; 39
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	e7 e2       	ldi	r30, 0x27	; 39
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	90 81       	ld	r25, Z
     d46:	8a 81       	ldd	r24, Y+2	; 0x02
     d48:	89 2b       	or	r24, r25
     d4a:	8c 93       	st	X, r24
			//start conversion
			SET_BIT(ADCSRA,ADCSRA_ADSC);
     d4c:	a6 e2       	ldi	r26, 0x26	; 38
     d4e:	b0 e0       	ldi	r27, 0x00	; 0
     d50:	e6 e2       	ldi	r30, 0x26	; 38
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	80 81       	ld	r24, Z
     d56:	80 64       	ori	r24, 0x40	; 64
     d58:	8c 93       	st	X, r24
			//Interrupt enable user enables global interrupt
			SET_BIT(ADCSRA,ADCSRA_ADIE);
     d5a:	a6 e2       	ldi	r26, 0x26	; 38
     d5c:	b0 e0       	ldi	r27, 0x00	; 0
     d5e:	e6 e2       	ldi	r30, 0x26	; 38
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	80 81       	ld	r24, Z
     d64:	88 60       	ori	r24, 0x08	; 8
     d66:	8c 93       	st	X, r24
     d68:	02 c0       	rjmp	.+4      	; 0xd6e <ADC_u8StartConversionAsynch+0x9a>
		}
	}
	else{
		Local_u8ErrorState=BUSY_FUNC;
     d6a:	83 e0       	ldi	r24, 0x03	; 3
     d6c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
     d6e:	89 81       	ldd	r24, Y+1	; 0x01
}
     d70:	26 96       	adiw	r28, 0x06	; 6
     d72:	0f b6       	in	r0, 0x3f	; 63
     d74:	f8 94       	cli
     d76:	de bf       	out	0x3e, r29	; 62
     d78:	0f be       	out	0x3f, r0	; 63
     d7a:	cd bf       	out	0x3d, r28	; 61
     d7c:	cf 91       	pop	r28
     d7e:	df 91       	pop	r29
     d80:	08 95       	ret

00000d82 <ADC_u8StartChainConversion>:

u8 ADC_u8StartChainConversion(ADC_Chain_t* Copy_psADCChain){
     d82:	df 93       	push	r29
     d84:	cf 93       	push	r28
     d86:	00 d0       	rcall	.+0      	; 0xd88 <ADC_u8StartChainConversion+0x6>
     d88:	0f 92       	push	r0
     d8a:	cd b7       	in	r28, 0x3d	; 61
     d8c:	de b7       	in	r29, 0x3e	; 62
     d8e:	9b 83       	std	Y+3, r25	; 0x03
     d90:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
     d92:	19 82       	std	Y+1, r1	; 0x01
	if(ADC_u8BusyState==IDLE){
     d94:	80 91 56 01 	lds	r24, 0x0156
     d98:	88 23       	and	r24, r24
     d9a:	e1 f5       	brne	.+120    	; 0xe14 <ADC_u8StartChainConversion+0x92>
		ADC_u8BusyState=BUSY;
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	80 93 56 01 	sts	0x0156, r24
		if(Copy_psADCChain==NULL){
     da2:	8a 81       	ldd	r24, Y+2	; 0x02
     da4:	9b 81       	ldd	r25, Y+3	; 0x03
     da6:	00 97       	sbiw	r24, 0x00	; 0
     da8:	19 f4       	brne	.+6      	; 0xdb0 <ADC_u8StartChainConversion+0x2e>
			Local_u8ErrorState=NULL_POINTER;
     daa:	82 e0       	ldi	r24, 0x02	; 2
     dac:	89 83       	std	Y+1, r24	; 0x01
     dae:	34 c0       	rjmp	.+104    	; 0xe18 <ADC_u8StartChainConversion+0x96>
		}
		else{
			ADC_ConversionState=CHAIN;
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	80 93 57 01 	sts	0x0157, r24
			//put the local variables into global so they can be used in the ISR
			ADC_psChain=Copy_psADCChain;
     db6:	8a 81       	ldd	r24, Y+2	; 0x02
     db8:	9b 81       	ldd	r25, Y+3	; 0x03
     dba:	90 93 59 01 	sts	0x0159, r25
     dbe:	80 93 58 01 	sts	0x0158, r24
			//adjusting the channel using bit masking
			ADC_u8ChainIndex=0;
     dc2:	10 92 5a 01 	sts	0x015A, r1
			ADMUX&=CHANNEL_MUX_MASK;
     dc6:	a7 e2       	ldi	r26, 0x27	; 39
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	e7 e2       	ldi	r30, 0x27	; 39
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	80 81       	ld	r24, Z
     dd0:	80 7e       	andi	r24, 0xE0	; 224
     dd2:	8c 93       	st	X, r24
			ADMUX|=Copy_psADCChain->ChainID[ADC_u8ChainIndex];
     dd4:	a7 e2       	ldi	r26, 0x27	; 39
     dd6:	b0 e0       	ldi	r27, 0x00	; 0
     dd8:	e7 e2       	ldi	r30, 0x27	; 39
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	40 81       	ld	r20, Z
     dde:	80 91 5a 01 	lds	r24, 0x015A
     de2:	28 2f       	mov	r18, r24
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	8a 81       	ldd	r24, Y+2	; 0x02
     de8:	9b 81       	ldd	r25, Y+3	; 0x03
     dea:	fc 01       	movw	r30, r24
     dec:	e2 0f       	add	r30, r18
     dee:	f3 1f       	adc	r31, r19
     df0:	80 81       	ld	r24, Z
     df2:	84 2b       	or	r24, r20
     df4:	8c 93       	st	X, r24
			//start conversion
			SET_BIT(ADCSRA,ADCSRA_ADSC);
     df6:	a6 e2       	ldi	r26, 0x26	; 38
     df8:	b0 e0       	ldi	r27, 0x00	; 0
     dfa:	e6 e2       	ldi	r30, 0x26	; 38
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	80 64       	ori	r24, 0x40	; 64
     e02:	8c 93       	st	X, r24
			//Interrupt enable user enables global interrupt
			SET_BIT(ADCSRA,ADCSRA_ADIE);
     e04:	a6 e2       	ldi	r26, 0x26	; 38
     e06:	b0 e0       	ldi	r27, 0x00	; 0
     e08:	e6 e2       	ldi	r30, 0x26	; 38
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	80 81       	ld	r24, Z
     e0e:	88 60       	ori	r24, 0x08	; 8
     e10:	8c 93       	st	X, r24
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <ADC_u8StartChainConversion+0x96>
		}
	}
	else{
		Local_u8ErrorState=BUSY_FUNC;
     e14:	83 e0       	ldi	r24, 0x03	; 3
     e16:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
     e18:	89 81       	ldd	r24, Y+1	; 0x01
}
     e1a:	0f 90       	pop	r0
     e1c:	0f 90       	pop	r0
     e1e:	0f 90       	pop	r0
     e20:	cf 91       	pop	r28
     e22:	df 91       	pop	r29
     e24:	08 95       	ret

00000e26 <__vector_16>:

void __vector_16(void)   __attribute__((signal));
void __vector_16(void){
     e26:	1f 92       	push	r1
     e28:	0f 92       	push	r0
     e2a:	0f b6       	in	r0, 0x3f	; 63
     e2c:	0f 92       	push	r0
     e2e:	11 24       	eor	r1, r1
     e30:	2f 93       	push	r18
     e32:	3f 93       	push	r19
     e34:	4f 93       	push	r20
     e36:	5f 93       	push	r21
     e38:	6f 93       	push	r22
     e3a:	7f 93       	push	r23
     e3c:	8f 93       	push	r24
     e3e:	9f 93       	push	r25
     e40:	af 93       	push	r26
     e42:	bf 93       	push	r27
     e44:	ef 93       	push	r30
     e46:	ff 93       	push	r31
     e48:	df 93       	push	r29
     e4a:	cf 93       	push	r28
     e4c:	cd b7       	in	r28, 0x3d	; 61
     e4e:	de b7       	in	r29, 0x3e	; 62
	if(ADC_ConversionState==SINGLE){
     e50:	80 91 57 01 	lds	r24, 0x0157
     e54:	88 23       	and	r24, r24
     e56:	d1 f4       	brne	.+52     	; 0xe8c <__vector_16+0x66>
		//read result
#if ADC_RESOLUTION == 8
		*ADC_pu16Reading= ADCH;
     e58:	a0 91 52 01 	lds	r26, 0x0152
     e5c:	b0 91 53 01 	lds	r27, 0x0153
     e60:	e5 e2       	ldi	r30, 0x25	; 37
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	80 81       	ld	r24, Z
     e66:	88 2f       	mov	r24, r24
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	8d 93       	st	X+, r24
     e6c:	9c 93       	st	X, r25
		*ADC_pu16Reading = ADC;
#else
#error "Wrong ADJUST OPTION"
#endif
		//make the adc idle to work again
		ADC_u8BusyState=IDLE;
     e6e:	10 92 56 01 	sts	0x0156, r1
		//call the notification function
		ADC_pvCallBackNotificationFunc();
     e72:	e0 91 54 01 	lds	r30, 0x0154
     e76:	f0 91 55 01 	lds	r31, 0x0155
     e7a:	09 95       	icall
		//disable interrupt
		CLR_BIT(ADCSRA,ADCSRA_ADIE);
     e7c:	a6 e2       	ldi	r26, 0x26	; 38
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e6 e2       	ldi	r30, 0x26	; 38
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	87 7f       	andi	r24, 0xF7	; 247
     e88:	8c 93       	st	X, r24
     e8a:	5c c0       	rjmp	.+184    	; 0xf44 <__vector_16+0x11e>
	}
	else if(ADC_ConversionState==CHAIN){
     e8c:	80 91 57 01 	lds	r24, 0x0157
     e90:	81 30       	cpi	r24, 0x01	; 1
     e92:	09 f0       	breq	.+2      	; 0xe96 <__vector_16+0x70>
     e94:	57 c0       	rjmp	.+174    	; 0xf44 <__vector_16+0x11e>
		if(ADC_u8ChainIndex==ADC_psChain->Size){
     e96:	e0 91 58 01 	lds	r30, 0x0158
     e9a:	f0 91 59 01 	lds	r31, 0x0159
     e9e:	90 a1       	ldd	r25, Z+32	; 0x20
     ea0:	80 91 5a 01 	lds	r24, 0x015A
     ea4:	98 17       	cp	r25, r24
     ea6:	91 f4       	brne	.+36     	; 0xecc <__vector_16+0xa6>
			ADC_psChain->NotiFunc();
     ea8:	e0 91 58 01 	lds	r30, 0x0158
     eac:	f0 91 59 01 	lds	r31, 0x0159
     eb0:	01 a0       	ldd	r0, Z+33	; 0x21
     eb2:	f2 a1       	ldd	r31, Z+34	; 0x22
     eb4:	e0 2d       	mov	r30, r0
     eb6:	09 95       	icall
			CLR_BIT(ADCSRA,ADCSRA_ADIE);
     eb8:	a6 e2       	ldi	r26, 0x26	; 38
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	e6 e2       	ldi	r30, 0x26	; 38
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	87 7f       	andi	r24, 0xF7	; 247
     ec4:	8c 93       	st	X, r24
			ADC_u8BusyState=IDLE;
     ec6:	10 92 56 01 	sts	0x0156, r1
     eca:	3c c0       	rjmp	.+120    	; 0xf44 <__vector_16+0x11e>
		}
		else{
			//store the result
#if ADC_RESOLUTION == 8
			ADC_psChain->ResultArr[ADC_u8ChainIndex]= ADCH;
     ecc:	60 91 58 01 	lds	r22, 0x0158
     ed0:	70 91 59 01 	lds	r23, 0x0159
     ed4:	80 91 5a 01 	lds	r24, 0x015A
     ed8:	28 2f       	mov	r18, r24
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	e5 e2       	ldi	r30, 0x25	; 37
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	48 2f       	mov	r20, r24
     ee4:	50 e0       	ldi	r21, 0x00	; 0
     ee6:	c9 01       	movw	r24, r18
     ee8:	88 0f       	add	r24, r24
     eea:	99 1f       	adc	r25, r25
     eec:	86 0f       	add	r24, r22
     eee:	97 1f       	adc	r25, r23
     ef0:	fc 01       	movw	r30, r24
     ef2:	b3 96       	adiw	r30, 0x23	; 35
     ef4:	51 83       	std	Z+1, r21	; 0x01
     ef6:	40 83       	st	Z, r20
			ADC_psChain->ResultArr[ADC_u8ChainIndex] = ADC;
#else
#error "WRONG RESOLUTION OPTION"
#endif
			//increment index
			ADC_u8ChainIndex++;
     ef8:	80 91 5a 01 	lds	r24, 0x015A
     efc:	8f 5f       	subi	r24, 0xFF	; 255
     efe:	80 93 5a 01 	sts	0x015A, r24
			//set new channel and start next conversion
			ADMUX&=CHANNEL_MUX_MASK;
     f02:	a7 e2       	ldi	r26, 0x27	; 39
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	e7 e2       	ldi	r30, 0x27	; 39
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	80 7e       	andi	r24, 0xE0	; 224
     f0e:	8c 93       	st	X, r24
			ADMUX|=ADC_psChain->ChainID[ADC_u8ChainIndex];
     f10:	a7 e2       	ldi	r26, 0x27	; 39
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	e7 e2       	ldi	r30, 0x27	; 39
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	40 81       	ld	r20, Z
     f1a:	20 91 58 01 	lds	r18, 0x0158
     f1e:	30 91 59 01 	lds	r19, 0x0159
     f22:	80 91 5a 01 	lds	r24, 0x015A
     f26:	88 2f       	mov	r24, r24
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	f9 01       	movw	r30, r18
     f2c:	e8 0f       	add	r30, r24
     f2e:	f9 1f       	adc	r31, r25
     f30:	80 81       	ld	r24, Z
     f32:	84 2b       	or	r24, r20
     f34:	8c 93       	st	X, r24
			SET_BIT(ADCSRA,ADCSRA_ADSC);
     f36:	a6 e2       	ldi	r26, 0x26	; 38
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	e6 e2       	ldi	r30, 0x26	; 38
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	80 64       	ori	r24, 0x40	; 64
     f42:	8c 93       	st	X, r24

		}
	}
}
     f44:	cf 91       	pop	r28
     f46:	df 91       	pop	r29
     f48:	ff 91       	pop	r31
     f4a:	ef 91       	pop	r30
     f4c:	bf 91       	pop	r27
     f4e:	af 91       	pop	r26
     f50:	9f 91       	pop	r25
     f52:	8f 91       	pop	r24
     f54:	7f 91       	pop	r23
     f56:	6f 91       	pop	r22
     f58:	5f 91       	pop	r21
     f5a:	4f 91       	pop	r20
     f5c:	3f 91       	pop	r19
     f5e:	2f 91       	pop	r18
     f60:	0f 90       	pop	r0
     f62:	0f be       	out	0x3f, r0	; 63
     f64:	0f 90       	pop	r0
     f66:	1f 90       	pop	r1
     f68:	18 95       	reti

00000f6a <APP_voidShowStartMenu>:
#include "DCM_Interface.h"

#include "APP_interface.h"


void APP_voidShowStartMenu(){
     f6a:	df 93       	push	r29
     f6c:	cf 93       	push	r28
     f6e:	cd b7       	in	r28, 0x3d	; 61
     f70:	de b7       	in	r29, 0x3e	; 62
     f72:	2e 97       	sbiw	r28, 0x0e	; 14
     f74:	0f b6       	in	r0, 0x3f	; 63
     f76:	f8 94       	cli
     f78:	de bf       	out	0x3e, r29	; 62
     f7a:	0f be       	out	0x3f, r0	; 63
     f7c:	cd bf       	out	0x3d, r28	; 61
	CLCD_voidCLR();
     f7e:	0e 94 f7 11 	call	0x23ee	; 0x23ee <CLCD_voidCLR>
	CLCD_voidSendString("Welcome to Motor");
     f82:	80 e6       	ldi	r24, 0x60	; 96
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	0e 94 53 10 	call	0x20a6	; 0x20a6 <CLCD_voidSendString>
	CLCD_voidGoToXY(1,0);
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	60 e0       	ldi	r22, 0x00	; 0
     f8e:	0e 94 fd 10 	call	0x21fa	; 0x21fa <CLCD_voidGoToXY>
	CLCD_voidSendString("Dashboard App");
     f92:	81 e7       	ldi	r24, 0x71	; 113
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	0e 94 53 10 	call	0x20a6	; 0x20a6 <CLCD_voidSendString>
     f9a:	80 e0       	ldi	r24, 0x00	; 0
     f9c:	90 e8       	ldi	r25, 0x80	; 128
     f9e:	ab e3       	ldi	r26, 0x3B	; 59
     fa0:	b5 e4       	ldi	r27, 0x45	; 69
     fa2:	8b 87       	std	Y+11, r24	; 0x0b
     fa4:	9c 87       	std	Y+12, r25	; 0x0c
     fa6:	ad 87       	std	Y+13, r26	; 0x0d
     fa8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     faa:	6b 85       	ldd	r22, Y+11	; 0x0b
     fac:	7c 85       	ldd	r23, Y+12	; 0x0c
     fae:	8d 85       	ldd	r24, Y+13	; 0x0d
     fb0:	9e 85       	ldd	r25, Y+14	; 0x0e
     fb2:	20 e0       	ldi	r18, 0x00	; 0
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	4a ef       	ldi	r20, 0xFA	; 250
     fb8:	54 e4       	ldi	r21, 0x44	; 68
     fba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fbe:	dc 01       	movw	r26, r24
     fc0:	cb 01       	movw	r24, r22
     fc2:	8f 83       	std	Y+7, r24	; 0x07
     fc4:	98 87       	std	Y+8, r25	; 0x08
     fc6:	a9 87       	std	Y+9, r26	; 0x09
     fc8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fca:	6f 81       	ldd	r22, Y+7	; 0x07
     fcc:	78 85       	ldd	r23, Y+8	; 0x08
     fce:	89 85       	ldd	r24, Y+9	; 0x09
     fd0:	9a 85       	ldd	r25, Y+10	; 0x0a
     fd2:	20 e0       	ldi	r18, 0x00	; 0
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	40 e8       	ldi	r20, 0x80	; 128
     fd8:	5f e3       	ldi	r21, 0x3F	; 63
     fda:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fde:	88 23       	and	r24, r24
     fe0:	2c f4       	brge	.+10     	; 0xfec <APP_voidShowStartMenu+0x82>
		__ticks = 1;
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	9e 83       	std	Y+6, r25	; 0x06
     fe8:	8d 83       	std	Y+5, r24	; 0x05
     fea:	3f c0       	rjmp	.+126    	; 0x106a <APP_voidShowStartMenu+0x100>
	else if (__tmp > 65535)
     fec:	6f 81       	ldd	r22, Y+7	; 0x07
     fee:	78 85       	ldd	r23, Y+8	; 0x08
     ff0:	89 85       	ldd	r24, Y+9	; 0x09
     ff2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ff4:	20 e0       	ldi	r18, 0x00	; 0
     ff6:	3f ef       	ldi	r19, 0xFF	; 255
     ff8:	4f e7       	ldi	r20, 0x7F	; 127
     ffa:	57 e4       	ldi	r21, 0x47	; 71
     ffc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1000:	18 16       	cp	r1, r24
    1002:	4c f5       	brge	.+82     	; 0x1056 <APP_voidShowStartMenu+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1004:	6b 85       	ldd	r22, Y+11	; 0x0b
    1006:	7c 85       	ldd	r23, Y+12	; 0x0c
    1008:	8d 85       	ldd	r24, Y+13	; 0x0d
    100a:	9e 85       	ldd	r25, Y+14	; 0x0e
    100c:	20 e0       	ldi	r18, 0x00	; 0
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	40 e2       	ldi	r20, 0x20	; 32
    1012:	51 e4       	ldi	r21, 0x41	; 65
    1014:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1018:	dc 01       	movw	r26, r24
    101a:	cb 01       	movw	r24, r22
    101c:	bc 01       	movw	r22, r24
    101e:	cd 01       	movw	r24, r26
    1020:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1024:	dc 01       	movw	r26, r24
    1026:	cb 01       	movw	r24, r22
    1028:	9e 83       	std	Y+6, r25	; 0x06
    102a:	8d 83       	std	Y+5, r24	; 0x05
    102c:	0f c0       	rjmp	.+30     	; 0x104c <APP_voidShowStartMenu+0xe2>
    102e:	88 ec       	ldi	r24, 0xC8	; 200
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	9c 83       	std	Y+4, r25	; 0x04
    1034:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1036:	8b 81       	ldd	r24, Y+3	; 0x03
    1038:	9c 81       	ldd	r25, Y+4	; 0x04
    103a:	01 97       	sbiw	r24, 0x01	; 1
    103c:	f1 f7       	brne	.-4      	; 0x103a <APP_voidShowStartMenu+0xd0>
    103e:	9c 83       	std	Y+4, r25	; 0x04
    1040:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1042:	8d 81       	ldd	r24, Y+5	; 0x05
    1044:	9e 81       	ldd	r25, Y+6	; 0x06
    1046:	01 97       	sbiw	r24, 0x01	; 1
    1048:	9e 83       	std	Y+6, r25	; 0x06
    104a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    104c:	8d 81       	ldd	r24, Y+5	; 0x05
    104e:	9e 81       	ldd	r25, Y+6	; 0x06
    1050:	00 97       	sbiw	r24, 0x00	; 0
    1052:	69 f7       	brne	.-38     	; 0x102e <APP_voidShowStartMenu+0xc4>
    1054:	14 c0       	rjmp	.+40     	; 0x107e <APP_voidShowStartMenu+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1056:	6f 81       	ldd	r22, Y+7	; 0x07
    1058:	78 85       	ldd	r23, Y+8	; 0x08
    105a:	89 85       	ldd	r24, Y+9	; 0x09
    105c:	9a 85       	ldd	r25, Y+10	; 0x0a
    105e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1062:	dc 01       	movw	r26, r24
    1064:	cb 01       	movw	r24, r22
    1066:	9e 83       	std	Y+6, r25	; 0x06
    1068:	8d 83       	std	Y+5, r24	; 0x05
    106a:	8d 81       	ldd	r24, Y+5	; 0x05
    106c:	9e 81       	ldd	r25, Y+6	; 0x06
    106e:	9a 83       	std	Y+2, r25	; 0x02
    1070:	89 83       	std	Y+1, r24	; 0x01
    1072:	89 81       	ldd	r24, Y+1	; 0x01
    1074:	9a 81       	ldd	r25, Y+2	; 0x02
    1076:	01 97       	sbiw	r24, 0x01	; 1
    1078:	f1 f7       	brne	.-4      	; 0x1076 <APP_voidShowStartMenu+0x10c>
    107a:	9a 83       	std	Y+2, r25	; 0x02
    107c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3000);
}
    107e:	2e 96       	adiw	r28, 0x0e	; 14
    1080:	0f b6       	in	r0, 0x3f	; 63
    1082:	f8 94       	cli
    1084:	de bf       	out	0x3e, r29	; 62
    1086:	0f be       	out	0x3f, r0	; 63
    1088:	cd bf       	out	0x3d, r28	; 61
    108a:	cf 91       	pop	r28
    108c:	df 91       	pop	r29
    108e:	08 95       	ret

00001090 <APP_voidGetID>:

void APP_voidGetID(u8 *Copy_pu8IDArr){
    1090:	df 93       	push	r29
    1092:	cf 93       	push	r28
    1094:	00 d0       	rcall	.+0      	; 0x1096 <APP_voidGetID+0x6>
    1096:	00 d0       	rcall	.+0      	; 0x1098 <APP_voidGetID+0x8>
    1098:	cd b7       	in	r28, 0x3d	; 61
    109a:	de b7       	in	r29, 0x3e	; 62
    109c:	9c 83       	std	Y+4, r25	; 0x04
    109e:	8b 83       	std	Y+3, r24	; 0x03
	if(Copy_pu8IDArr!=NULL){
    10a0:	8b 81       	ldd	r24, Y+3	; 0x03
    10a2:	9c 81       	ldd	r25, Y+4	; 0x04
    10a4:	00 97       	sbiw	r24, 0x00	; 0
    10a6:	29 f1       	breq	.+74     	; 0x10f2 <APP_voidGetID+0x62>
		u8 Local_u8PressedKey;
		CLCD_voidCLR();
    10a8:	0e 94 f7 11 	call	0x23ee	; 0x23ee <CLCD_voidCLR>
		CLCD_voidSendString("Enter ID:");
    10ac:	8f e7       	ldi	r24, 0x7F	; 127
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	0e 94 53 10 	call	0x20a6	; 0x20a6 <CLCD_voidSendString>
		for(u8 Local_u8Iterator=0;Local_u8Iterator<4;Local_u8Iterator++){
    10b4:	19 82       	std	Y+1, r1	; 0x01
    10b6:	1a c0       	rjmp	.+52     	; 0x10ec <APP_voidGetID+0x5c>
			APP_voidReadKey(&Local_u8PressedKey);
    10b8:	ce 01       	movw	r24, r28
    10ba:	02 96       	adiw	r24, 0x02	; 2
    10bc:	0e 94 9a 0b 	call	0x1734	; 0x1734 <APP_voidReadKey>
			CLCD_voidSendNumber(Local_u8PressedKey);
    10c0:	8a 81       	ldd	r24, Y+2	; 0x02
    10c2:	88 2f       	mov	r24, r24
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	a0 e0       	ldi	r26, 0x00	; 0
    10c8:	b0 e0       	ldi	r27, 0x00	; 0
    10ca:	bc 01       	movw	r22, r24
    10cc:	cd 01       	movw	r24, r26
    10ce:	0e 94 68 11 	call	0x22d0	; 0x22d0 <CLCD_voidSendNumber>
			Copy_pu8IDArr[Local_u8Iterator]=Local_u8PressedKey;
    10d2:	89 81       	ldd	r24, Y+1	; 0x01
    10d4:	28 2f       	mov	r18, r24
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	8b 81       	ldd	r24, Y+3	; 0x03
    10da:	9c 81       	ldd	r25, Y+4	; 0x04
    10dc:	fc 01       	movw	r30, r24
    10de:	e2 0f       	add	r30, r18
    10e0:	f3 1f       	adc	r31, r19
    10e2:	8a 81       	ldd	r24, Y+2	; 0x02
    10e4:	80 83       	st	Z, r24
void APP_voidGetID(u8 *Copy_pu8IDArr){
	if(Copy_pu8IDArr!=NULL){
		u8 Local_u8PressedKey;
		CLCD_voidCLR();
		CLCD_voidSendString("Enter ID:");
		for(u8 Local_u8Iterator=0;Local_u8Iterator<4;Local_u8Iterator++){
    10e6:	89 81       	ldd	r24, Y+1	; 0x01
    10e8:	8f 5f       	subi	r24, 0xFF	; 255
    10ea:	89 83       	std	Y+1, r24	; 0x01
    10ec:	89 81       	ldd	r24, Y+1	; 0x01
    10ee:	84 30       	cpi	r24, 0x04	; 4
    10f0:	18 f3       	brcs	.-58     	; 0x10b8 <APP_voidGetID+0x28>
			APP_voidReadKey(&Local_u8PressedKey);
			CLCD_voidSendNumber(Local_u8PressedKey);
			Copy_pu8IDArr[Local_u8Iterator]=Local_u8PressedKey;
		}
	}
}
    10f2:	0f 90       	pop	r0
    10f4:	0f 90       	pop	r0
    10f6:	0f 90       	pop	r0
    10f8:	0f 90       	pop	r0
    10fa:	cf 91       	pop	r28
    10fc:	df 91       	pop	r29
    10fe:	08 95       	ret

00001100 <APP_voidGetPassword>:

void APP_voidGetPassword(u8* Copy_pu8PassArr){
    1100:	df 93       	push	r29
    1102:	cf 93       	push	r28
    1104:	00 d0       	rcall	.+0      	; 0x1106 <APP_voidGetPassword+0x6>
    1106:	00 d0       	rcall	.+0      	; 0x1108 <APP_voidGetPassword+0x8>
    1108:	cd b7       	in	r28, 0x3d	; 61
    110a:	de b7       	in	r29, 0x3e	; 62
    110c:	9c 83       	std	Y+4, r25	; 0x04
    110e:	8b 83       	std	Y+3, r24	; 0x03
	if(Copy_pu8PassArr!=NULL){
    1110:	8b 81       	ldd	r24, Y+3	; 0x03
    1112:	9c 81       	ldd	r25, Y+4	; 0x04
    1114:	00 97       	sbiw	r24, 0x00	; 0
    1116:	49 f1       	breq	.+82     	; 0x116a <APP_voidGetPassword+0x6a>
		u8 Local_u8PressedKey;
		CLCD_voidCLR();
    1118:	0e 94 f7 11 	call	0x23ee	; 0x23ee <CLCD_voidCLR>
		CLCD_voidSendString("Enter Password:");
    111c:	89 e8       	ldi	r24, 0x89	; 137
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	0e 94 53 10 	call	0x20a6	; 0x20a6 <CLCD_voidSendString>
		CLCD_voidGoToXY(1,0);
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	60 e0       	ldi	r22, 0x00	; 0
    1128:	0e 94 fd 10 	call	0x21fa	; 0x21fa <CLCD_voidGoToXY>
		for(u8 Local_u8Iterator=0;Local_u8Iterator<4;Local_u8Iterator++){
    112c:	19 82       	std	Y+1, r1	; 0x01
    112e:	1a c0       	rjmp	.+52     	; 0x1164 <APP_voidGetPassword+0x64>
			APP_voidReadKey(&Local_u8PressedKey);
    1130:	ce 01       	movw	r24, r28
    1132:	02 96       	adiw	r24, 0x02	; 2
    1134:	0e 94 9a 0b 	call	0x1734	; 0x1734 <APP_voidReadKey>
			CLCD_voidSendNumber(Local_u8PressedKey);
    1138:	8a 81       	ldd	r24, Y+2	; 0x02
    113a:	88 2f       	mov	r24, r24
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	a0 e0       	ldi	r26, 0x00	; 0
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	bc 01       	movw	r22, r24
    1144:	cd 01       	movw	r24, r26
    1146:	0e 94 68 11 	call	0x22d0	; 0x22d0 <CLCD_voidSendNumber>
			Copy_pu8PassArr[Local_u8Iterator]=Local_u8PressedKey;
    114a:	89 81       	ldd	r24, Y+1	; 0x01
    114c:	28 2f       	mov	r18, r24
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	8b 81       	ldd	r24, Y+3	; 0x03
    1152:	9c 81       	ldd	r25, Y+4	; 0x04
    1154:	fc 01       	movw	r30, r24
    1156:	e2 0f       	add	r30, r18
    1158:	f3 1f       	adc	r31, r19
    115a:	8a 81       	ldd	r24, Y+2	; 0x02
    115c:	80 83       	st	Z, r24
	if(Copy_pu8PassArr!=NULL){
		u8 Local_u8PressedKey;
		CLCD_voidCLR();
		CLCD_voidSendString("Enter Password:");
		CLCD_voidGoToXY(1,0);
		for(u8 Local_u8Iterator=0;Local_u8Iterator<4;Local_u8Iterator++){
    115e:	89 81       	ldd	r24, Y+1	; 0x01
    1160:	8f 5f       	subi	r24, 0xFF	; 255
    1162:	89 83       	std	Y+1, r24	; 0x01
    1164:	89 81       	ldd	r24, Y+1	; 0x01
    1166:	84 30       	cpi	r24, 0x04	; 4
    1168:	18 f3       	brcs	.-58     	; 0x1130 <APP_voidGetPassword+0x30>
			APP_voidReadKey(&Local_u8PressedKey);
			CLCD_voidSendNumber(Local_u8PressedKey);
			Copy_pu8PassArr[Local_u8Iterator]=Local_u8PressedKey;
		}
	}
}
    116a:	0f 90       	pop	r0
    116c:	0f 90       	pop	r0
    116e:	0f 90       	pop	r0
    1170:	0f 90       	pop	r0
    1172:	cf 91       	pop	r28
    1174:	df 91       	pop	r29
    1176:	08 95       	ret

00001178 <APP_voidCheckPassword>:
u8 APP_voidCheckPassword(const u8* Copy_pu8IDArr,u8* Copy_pu8PassArr){
    1178:	df 93       	push	r29
    117a:	cf 93       	push	r28
    117c:	cd b7       	in	r28, 0x3d	; 61
    117e:	de b7       	in	r29, 0x3e	; 62
    1180:	e3 97       	sbiw	r28, 0x33	; 51
    1182:	0f b6       	in	r0, 0x3f	; 63
    1184:	f8 94       	cli
    1186:	de bf       	out	0x3e, r29	; 62
    1188:	0f be       	out	0x3f, r0	; 63
    118a:	cd bf       	out	0x3d, r28	; 61
    118c:	98 ab       	std	Y+48, r25	; 0x30
    118e:	8f a7       	std	Y+47, r24	; 0x2f
    1190:	7a ab       	std	Y+50, r23	; 0x32
    1192:	69 ab       	std	Y+49, r22	; 0x31
	u8 Local_u8ErrorState=OK;
    1194:	1e a6       	std	Y+46, r1	; 0x2e
	if(Copy_pu8IDArr!=NULL && Copy_pu8PassArr!=NULL){
    1196:	8f a5       	ldd	r24, Y+47	; 0x2f
    1198:	98 a9       	ldd	r25, Y+48	; 0x30
    119a:	00 97       	sbiw	r24, 0x00	; 0
    119c:	09 f4       	brne	.+2      	; 0x11a0 <APP_voidCheckPassword+0x28>
    119e:	fb c1       	rjmp	.+1014   	; 0x1596 <APP_voidCheckPassword+0x41e>
    11a0:	89 a9       	ldd	r24, Y+49	; 0x31
    11a2:	9a a9       	ldd	r25, Y+50	; 0x32
    11a4:	00 97       	sbiw	r24, 0x00	; 0
    11a6:	09 f4       	brne	.+2      	; 0x11aa <APP_voidCheckPassword+0x32>
    11a8:	f6 c1       	rjmp	.+1004   	; 0x1596 <APP_voidCheckPassword+0x41e>
		for(u8 Local_u8Iterator=1;Local_u8Iterator<4;Local_u8Iterator++){
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	8d a7       	std	Y+45, r24	; 0x2d
    11ae:	5e c1       	rjmp	.+700    	; 0x146c <APP_voidCheckPassword+0x2f4>
			if(Copy_pu8PassArr[3]!=Copy_pu8IDArr[0]||Copy_pu8PassArr[2]!=Copy_pu8IDArr[1]||Copy_pu8PassArr[1]!=Copy_pu8IDArr[2]||Copy_pu8PassArr[0]!=Copy_pu8IDArr[3]){
    11b0:	89 a9       	ldd	r24, Y+49	; 0x31
    11b2:	9a a9       	ldd	r25, Y+50	; 0x32
    11b4:	fc 01       	movw	r30, r24
    11b6:	33 96       	adiw	r30, 0x03	; 3
    11b8:	90 81       	ld	r25, Z
    11ba:	ef a5       	ldd	r30, Y+47	; 0x2f
    11bc:	f8 a9       	ldd	r31, Y+48	; 0x30
    11be:	80 81       	ld	r24, Z
    11c0:	98 17       	cp	r25, r24
    11c2:	19 f5       	brne	.+70     	; 0x120a <APP_voidCheckPassword+0x92>
    11c4:	89 a9       	ldd	r24, Y+49	; 0x31
    11c6:	9a a9       	ldd	r25, Y+50	; 0x32
    11c8:	fc 01       	movw	r30, r24
    11ca:	32 96       	adiw	r30, 0x02	; 2
    11cc:	20 81       	ld	r18, Z
    11ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    11d0:	98 a9       	ldd	r25, Y+48	; 0x30
    11d2:	fc 01       	movw	r30, r24
    11d4:	31 96       	adiw	r30, 0x01	; 1
    11d6:	80 81       	ld	r24, Z
    11d8:	28 17       	cp	r18, r24
    11da:	b9 f4       	brne	.+46     	; 0x120a <APP_voidCheckPassword+0x92>
    11dc:	89 a9       	ldd	r24, Y+49	; 0x31
    11de:	9a a9       	ldd	r25, Y+50	; 0x32
    11e0:	fc 01       	movw	r30, r24
    11e2:	31 96       	adiw	r30, 0x01	; 1
    11e4:	20 81       	ld	r18, Z
    11e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    11e8:	98 a9       	ldd	r25, Y+48	; 0x30
    11ea:	fc 01       	movw	r30, r24
    11ec:	32 96       	adiw	r30, 0x02	; 2
    11ee:	80 81       	ld	r24, Z
    11f0:	28 17       	cp	r18, r24
    11f2:	59 f4       	brne	.+22     	; 0x120a <APP_voidCheckPassword+0x92>
    11f4:	e9 a9       	ldd	r30, Y+49	; 0x31
    11f6:	fa a9       	ldd	r31, Y+50	; 0x32
    11f8:	20 81       	ld	r18, Z
    11fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    11fc:	98 a9       	ldd	r25, Y+48	; 0x30
    11fe:	fc 01       	movw	r30, r24
    1200:	33 96       	adiw	r30, 0x03	; 3
    1202:	80 81       	ld	r24, Z
    1204:	28 17       	cp	r18, r24
    1206:	09 f4       	brne	.+2      	; 0x120a <APP_voidCheckPassword+0x92>
    1208:	2e c1       	rjmp	.+604    	; 0x1466 <APP_voidCheckPassword+0x2ee>
				if(Local_u8Iterator==3){
    120a:	8d a5       	ldd	r24, Y+45	; 0x2d
    120c:	83 30       	cpi	r24, 0x03	; 3
    120e:	09 f0       	breq	.+2      	; 0x1212 <APP_voidCheckPassword+0x9a>
    1210:	9b c0       	rjmp	.+310    	; 0x1348 <APP_voidCheckPassword+0x1d0>
					CLCD_voidCLR();
    1212:	0e 94 f7 11 	call	0x23ee	; 0x23ee <CLCD_voidCLR>
					CLCD_voidSendString("BYE BYE");
    1216:	89 e9       	ldi	r24, 0x99	; 153
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	0e 94 53 10 	call	0x20a6	; 0x20a6 <CLCD_voidSendString>
					for(s8 Local_s8CountDown=3;Local_s8CountDown>=0;Local_s8CountDown--){
    121e:	83 e0       	ldi	r24, 0x03	; 3
    1220:	8c a7       	std	Y+44, r24	; 0x2c
    1222:	83 c0       	rjmp	.+262    	; 0x132a <APP_voidCheckPassword+0x1b2>
						CLCD_voidGoToXY(1,4);
    1224:	81 e0       	ldi	r24, 0x01	; 1
    1226:	64 e0       	ldi	r22, 0x04	; 4
    1228:	0e 94 fd 10 	call	0x21fa	; 0x21fa <CLCD_voidGoToXY>
						CLCD_voidSendNumber(Local_s8CountDown);
    122c:	8c a5       	ldd	r24, Y+44	; 0x2c
    122e:	99 27       	eor	r25, r25
    1230:	87 fd       	sbrc	r24, 7
    1232:	90 95       	com	r25
    1234:	a9 2f       	mov	r26, r25
    1236:	b9 2f       	mov	r27, r25
    1238:	bc 01       	movw	r22, r24
    123a:	cd 01       	movw	r24, r26
    123c:	0e 94 68 11 	call	0x22d0	; 0x22d0 <CLCD_voidSendNumber>
    1240:	80 e0       	ldi	r24, 0x00	; 0
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	aa e7       	ldi	r26, 0x7A	; 122
    1246:	b4 e4       	ldi	r27, 0x44	; 68
    1248:	8f a3       	std	Y+39, r24	; 0x27
    124a:	98 a7       	std	Y+40, r25	; 0x28
    124c:	a9 a7       	std	Y+41, r26	; 0x29
    124e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1250:	6f a1       	ldd	r22, Y+39	; 0x27
    1252:	78 a5       	ldd	r23, Y+40	; 0x28
    1254:	89 a5       	ldd	r24, Y+41	; 0x29
    1256:	9a a5       	ldd	r25, Y+42	; 0x2a
    1258:	20 e0       	ldi	r18, 0x00	; 0
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	4a ef       	ldi	r20, 0xFA	; 250
    125e:	54 e4       	ldi	r21, 0x44	; 68
    1260:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1264:	dc 01       	movw	r26, r24
    1266:	cb 01       	movw	r24, r22
    1268:	8b a3       	std	Y+35, r24	; 0x23
    126a:	9c a3       	std	Y+36, r25	; 0x24
    126c:	ad a3       	std	Y+37, r26	; 0x25
    126e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1270:	6b a1       	ldd	r22, Y+35	; 0x23
    1272:	7c a1       	ldd	r23, Y+36	; 0x24
    1274:	8d a1       	ldd	r24, Y+37	; 0x25
    1276:	9e a1       	ldd	r25, Y+38	; 0x26
    1278:	20 e0       	ldi	r18, 0x00	; 0
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	40 e8       	ldi	r20, 0x80	; 128
    127e:	5f e3       	ldi	r21, 0x3F	; 63
    1280:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1284:	88 23       	and	r24, r24
    1286:	2c f4       	brge	.+10     	; 0x1292 <APP_voidCheckPassword+0x11a>
		__ticks = 1;
    1288:	81 e0       	ldi	r24, 0x01	; 1
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	9a a3       	std	Y+34, r25	; 0x22
    128e:	89 a3       	std	Y+33, r24	; 0x21
    1290:	3f c0       	rjmp	.+126    	; 0x1310 <APP_voidCheckPassword+0x198>
	else if (__tmp > 65535)
    1292:	6b a1       	ldd	r22, Y+35	; 0x23
    1294:	7c a1       	ldd	r23, Y+36	; 0x24
    1296:	8d a1       	ldd	r24, Y+37	; 0x25
    1298:	9e a1       	ldd	r25, Y+38	; 0x26
    129a:	20 e0       	ldi	r18, 0x00	; 0
    129c:	3f ef       	ldi	r19, 0xFF	; 255
    129e:	4f e7       	ldi	r20, 0x7F	; 127
    12a0:	57 e4       	ldi	r21, 0x47	; 71
    12a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12a6:	18 16       	cp	r1, r24
    12a8:	4c f5       	brge	.+82     	; 0x12fc <APP_voidCheckPassword+0x184>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12aa:	6f a1       	ldd	r22, Y+39	; 0x27
    12ac:	78 a5       	ldd	r23, Y+40	; 0x28
    12ae:	89 a5       	ldd	r24, Y+41	; 0x29
    12b0:	9a a5       	ldd	r25, Y+42	; 0x2a
    12b2:	20 e0       	ldi	r18, 0x00	; 0
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	40 e2       	ldi	r20, 0x20	; 32
    12b8:	51 e4       	ldi	r21, 0x41	; 65
    12ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12be:	dc 01       	movw	r26, r24
    12c0:	cb 01       	movw	r24, r22
    12c2:	bc 01       	movw	r22, r24
    12c4:	cd 01       	movw	r24, r26
    12c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12ca:	dc 01       	movw	r26, r24
    12cc:	cb 01       	movw	r24, r22
    12ce:	9a a3       	std	Y+34, r25	; 0x22
    12d0:	89 a3       	std	Y+33, r24	; 0x21
    12d2:	0f c0       	rjmp	.+30     	; 0x12f2 <APP_voidCheckPassword+0x17a>
    12d4:	88 ec       	ldi	r24, 0xC8	; 200
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	98 a3       	std	Y+32, r25	; 0x20
    12da:	8f 8f       	std	Y+31, r24	; 0x1f
    12dc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    12de:	98 a1       	ldd	r25, Y+32	; 0x20
    12e0:	01 97       	sbiw	r24, 0x01	; 1
    12e2:	f1 f7       	brne	.-4      	; 0x12e0 <APP_voidCheckPassword+0x168>
    12e4:	98 a3       	std	Y+32, r25	; 0x20
    12e6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12e8:	89 a1       	ldd	r24, Y+33	; 0x21
    12ea:	9a a1       	ldd	r25, Y+34	; 0x22
    12ec:	01 97       	sbiw	r24, 0x01	; 1
    12ee:	9a a3       	std	Y+34, r25	; 0x22
    12f0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12f2:	89 a1       	ldd	r24, Y+33	; 0x21
    12f4:	9a a1       	ldd	r25, Y+34	; 0x22
    12f6:	00 97       	sbiw	r24, 0x00	; 0
    12f8:	69 f7       	brne	.-38     	; 0x12d4 <APP_voidCheckPassword+0x15c>
    12fa:	14 c0       	rjmp	.+40     	; 0x1324 <APP_voidCheckPassword+0x1ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12fc:	6b a1       	ldd	r22, Y+35	; 0x23
    12fe:	7c a1       	ldd	r23, Y+36	; 0x24
    1300:	8d a1       	ldd	r24, Y+37	; 0x25
    1302:	9e a1       	ldd	r25, Y+38	; 0x26
    1304:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1308:	dc 01       	movw	r26, r24
    130a:	cb 01       	movw	r24, r22
    130c:	9a a3       	std	Y+34, r25	; 0x22
    130e:	89 a3       	std	Y+33, r24	; 0x21
    1310:	89 a1       	ldd	r24, Y+33	; 0x21
    1312:	9a a1       	ldd	r25, Y+34	; 0x22
    1314:	9e 8f       	std	Y+30, r25	; 0x1e
    1316:	8d 8f       	std	Y+29, r24	; 0x1d
    1318:	8d 8d       	ldd	r24, Y+29	; 0x1d
    131a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    131c:	01 97       	sbiw	r24, 0x01	; 1
    131e:	f1 f7       	brne	.-4      	; 0x131c <APP_voidCheckPassword+0x1a4>
    1320:	9e 8f       	std	Y+30, r25	; 0x1e
    1322:	8d 8f       	std	Y+29, r24	; 0x1d
		for(u8 Local_u8Iterator=1;Local_u8Iterator<4;Local_u8Iterator++){
			if(Copy_pu8PassArr[3]!=Copy_pu8IDArr[0]||Copy_pu8PassArr[2]!=Copy_pu8IDArr[1]||Copy_pu8PassArr[1]!=Copy_pu8IDArr[2]||Copy_pu8PassArr[0]!=Copy_pu8IDArr[3]){
				if(Local_u8Iterator==3){
					CLCD_voidCLR();
					CLCD_voidSendString("BYE BYE");
					for(s8 Local_s8CountDown=3;Local_s8CountDown>=0;Local_s8CountDown--){
    1324:	8c a5       	ldd	r24, Y+44	; 0x2c
    1326:	81 50       	subi	r24, 0x01	; 1
    1328:	8c a7       	std	Y+44, r24	; 0x2c
    132a:	8c a5       	ldd	r24, Y+44	; 0x2c
    132c:	88 23       	and	r24, r24
    132e:	0c f0       	brlt	.+2      	; 0x1332 <APP_voidCheckPassword+0x1ba>
    1330:	79 cf       	rjmp	.-270    	; 0x1224 <APP_voidCheckPassword+0xac>
						CLCD_voidGoToXY(1,4);
						CLCD_voidSendNumber(Local_s8CountDown);
						_delay_ms(1000);
					}
					DIO_u8SetPortValue(DIO_u8PORTD,0);
    1332:	83 e0       	ldi	r24, 0x03	; 3
    1334:	60 e0       	ldi	r22, 0x00	; 0
    1336:	0e 94 46 13 	call	0x268c	; 0x268c <DIO_u8SetPortValue>
					CLCD_voidCLR();
    133a:	0e 94 f7 11 	call	0x23ee	; 0x23ee <CLCD_voidCLR>
					Local_u8ErrorState = NOK;
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	8e a7       	std	Y+46, r24	; 0x2e
					return Local_u8ErrorState;
    1342:	8e a5       	ldd	r24, Y+46	; 0x2e
    1344:	8b ab       	std	Y+51, r24	; 0x33
    1346:	29 c1       	rjmp	.+594    	; 0x159a <APP_voidCheckPassword+0x422>
				}
				else{
					CLCD_voidCLR();
    1348:	0e 94 f7 11 	call	0x23ee	; 0x23ee <CLCD_voidCLR>
					CLCD_voidSendString("TRY AGAIN!");
    134c:	81 ea       	ldi	r24, 0xA1	; 161
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	0e 94 53 10 	call	0x20a6	; 0x20a6 <CLCD_voidSendString>
					CLCD_voidGoToXY(1,4);
    1354:	81 e0       	ldi	r24, 0x01	; 1
    1356:	64 e0       	ldi	r22, 0x04	; 4
    1358:	0e 94 fd 10 	call	0x21fa	; 0x21fa <CLCD_voidGoToXY>
					CLCD_voidSendNumber(3-Local_u8Iterator);
    135c:	8d a5       	ldd	r24, Y+45	; 0x2d
    135e:	28 2f       	mov	r18, r24
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	83 e0       	ldi	r24, 0x03	; 3
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	82 1b       	sub	r24, r18
    1368:	93 0b       	sbc	r25, r19
    136a:	aa 27       	eor	r26, r26
    136c:	97 fd       	sbrc	r25, 7
    136e:	a0 95       	com	r26
    1370:	ba 2f       	mov	r27, r26
    1372:	bc 01       	movw	r22, r24
    1374:	cd 01       	movw	r24, r26
    1376:	0e 94 68 11 	call	0x22d0	; 0x22d0 <CLCD_voidSendNumber>
    137a:	80 e0       	ldi	r24, 0x00	; 0
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	aa e7       	ldi	r26, 0x7A	; 122
    1380:	b4 e4       	ldi	r27, 0x44	; 68
    1382:	89 8f       	std	Y+25, r24	; 0x19
    1384:	9a 8f       	std	Y+26, r25	; 0x1a
    1386:	ab 8f       	std	Y+27, r26	; 0x1b
    1388:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    138a:	69 8d       	ldd	r22, Y+25	; 0x19
    138c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    138e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1390:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1392:	20 e0       	ldi	r18, 0x00	; 0
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	4a ef       	ldi	r20, 0xFA	; 250
    1398:	54 e4       	ldi	r21, 0x44	; 68
    139a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    139e:	dc 01       	movw	r26, r24
    13a0:	cb 01       	movw	r24, r22
    13a2:	8d 8b       	std	Y+21, r24	; 0x15
    13a4:	9e 8b       	std	Y+22, r25	; 0x16
    13a6:	af 8b       	std	Y+23, r26	; 0x17
    13a8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    13aa:	6d 89       	ldd	r22, Y+21	; 0x15
    13ac:	7e 89       	ldd	r23, Y+22	; 0x16
    13ae:	8f 89       	ldd	r24, Y+23	; 0x17
    13b0:	98 8d       	ldd	r25, Y+24	; 0x18
    13b2:	20 e0       	ldi	r18, 0x00	; 0
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	40 e8       	ldi	r20, 0x80	; 128
    13b8:	5f e3       	ldi	r21, 0x3F	; 63
    13ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13be:	88 23       	and	r24, r24
    13c0:	2c f4       	brge	.+10     	; 0x13cc <APP_voidCheckPassword+0x254>
		__ticks = 1;
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	9c 8b       	std	Y+20, r25	; 0x14
    13c8:	8b 8b       	std	Y+19, r24	; 0x13
    13ca:	3f c0       	rjmp	.+126    	; 0x144a <APP_voidCheckPassword+0x2d2>
	else if (__tmp > 65535)
    13cc:	6d 89       	ldd	r22, Y+21	; 0x15
    13ce:	7e 89       	ldd	r23, Y+22	; 0x16
    13d0:	8f 89       	ldd	r24, Y+23	; 0x17
    13d2:	98 8d       	ldd	r25, Y+24	; 0x18
    13d4:	20 e0       	ldi	r18, 0x00	; 0
    13d6:	3f ef       	ldi	r19, 0xFF	; 255
    13d8:	4f e7       	ldi	r20, 0x7F	; 127
    13da:	57 e4       	ldi	r21, 0x47	; 71
    13dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13e0:	18 16       	cp	r1, r24
    13e2:	4c f5       	brge	.+82     	; 0x1436 <APP_voidCheckPassword+0x2be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13e4:	69 8d       	ldd	r22, Y+25	; 0x19
    13e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13ec:	20 e0       	ldi	r18, 0x00	; 0
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	40 e2       	ldi	r20, 0x20	; 32
    13f2:	51 e4       	ldi	r21, 0x41	; 65
    13f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13f8:	dc 01       	movw	r26, r24
    13fa:	cb 01       	movw	r24, r22
    13fc:	bc 01       	movw	r22, r24
    13fe:	cd 01       	movw	r24, r26
    1400:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1404:	dc 01       	movw	r26, r24
    1406:	cb 01       	movw	r24, r22
    1408:	9c 8b       	std	Y+20, r25	; 0x14
    140a:	8b 8b       	std	Y+19, r24	; 0x13
    140c:	0f c0       	rjmp	.+30     	; 0x142c <APP_voidCheckPassword+0x2b4>
    140e:	88 ec       	ldi	r24, 0xC8	; 200
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	9a 8b       	std	Y+18, r25	; 0x12
    1414:	89 8b       	std	Y+17, r24	; 0x11
    1416:	89 89       	ldd	r24, Y+17	; 0x11
    1418:	9a 89       	ldd	r25, Y+18	; 0x12
    141a:	01 97       	sbiw	r24, 0x01	; 1
    141c:	f1 f7       	brne	.-4      	; 0x141a <APP_voidCheckPassword+0x2a2>
    141e:	9a 8b       	std	Y+18, r25	; 0x12
    1420:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1422:	8b 89       	ldd	r24, Y+19	; 0x13
    1424:	9c 89       	ldd	r25, Y+20	; 0x14
    1426:	01 97       	sbiw	r24, 0x01	; 1
    1428:	9c 8b       	std	Y+20, r25	; 0x14
    142a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    142c:	8b 89       	ldd	r24, Y+19	; 0x13
    142e:	9c 89       	ldd	r25, Y+20	; 0x14
    1430:	00 97       	sbiw	r24, 0x00	; 0
    1432:	69 f7       	brne	.-38     	; 0x140e <APP_voidCheckPassword+0x296>
    1434:	14 c0       	rjmp	.+40     	; 0x145e <APP_voidCheckPassword+0x2e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1436:	6d 89       	ldd	r22, Y+21	; 0x15
    1438:	7e 89       	ldd	r23, Y+22	; 0x16
    143a:	8f 89       	ldd	r24, Y+23	; 0x17
    143c:	98 8d       	ldd	r25, Y+24	; 0x18
    143e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1442:	dc 01       	movw	r26, r24
    1444:	cb 01       	movw	r24, r22
    1446:	9c 8b       	std	Y+20, r25	; 0x14
    1448:	8b 8b       	std	Y+19, r24	; 0x13
    144a:	8b 89       	ldd	r24, Y+19	; 0x13
    144c:	9c 89       	ldd	r25, Y+20	; 0x14
    144e:	98 8b       	std	Y+16, r25	; 0x10
    1450:	8f 87       	std	Y+15, r24	; 0x0f
    1452:	8f 85       	ldd	r24, Y+15	; 0x0f
    1454:	98 89       	ldd	r25, Y+16	; 0x10
    1456:	01 97       	sbiw	r24, 0x01	; 1
    1458:	f1 f7       	brne	.-4      	; 0x1456 <APP_voidCheckPassword+0x2de>
    145a:	98 8b       	std	Y+16, r25	; 0x10
    145c:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(1000);
					APP_voidGetPassword(Copy_pu8PassArr);
    145e:	89 a9       	ldd	r24, Y+49	; 0x31
    1460:	9a a9       	ldd	r25, Y+50	; 0x32
    1462:	0e 94 80 08 	call	0x1100	; 0x1100 <APP_voidGetPassword>
	}
}
u8 APP_voidCheckPassword(const u8* Copy_pu8IDArr,u8* Copy_pu8PassArr){
	u8 Local_u8ErrorState=OK;
	if(Copy_pu8IDArr!=NULL && Copy_pu8PassArr!=NULL){
		for(u8 Local_u8Iterator=1;Local_u8Iterator<4;Local_u8Iterator++){
    1466:	8d a5       	ldd	r24, Y+45	; 0x2d
    1468:	8f 5f       	subi	r24, 0xFF	; 255
    146a:	8d a7       	std	Y+45, r24	; 0x2d
    146c:	8d a5       	ldd	r24, Y+45	; 0x2d
    146e:	84 30       	cpi	r24, 0x04	; 4
    1470:	08 f4       	brcc	.+2      	; 0x1474 <APP_voidCheckPassword+0x2fc>
    1472:	9e ce       	rjmp	.-708    	; 0x11b0 <APP_voidCheckPassword+0x38>
					_delay_ms(1000);
					APP_voidGetPassword(Copy_pu8PassArr);
				}
			}
		}
		CLCD_voidCLR();
    1474:	0e 94 f7 11 	call	0x23ee	; 0x23ee <CLCD_voidCLR>
		CLCD_voidSendString("Welcome ");
    1478:	8c ea       	ldi	r24, 0xAC	; 172
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	0e 94 53 10 	call	0x20a6	; 0x20a6 <CLCD_voidSendString>
		for(u8 Local_u8Iterator=0;Local_u8Iterator<4;Local_u8Iterator++){
    1480:	1b a6       	std	Y+43, r1	; 0x2b
    1482:	14 c0       	rjmp	.+40     	; 0x14ac <APP_voidCheckPassword+0x334>
			CLCD_voidSendNumber(Copy_pu8IDArr[Local_u8Iterator]);
    1484:	8b a5       	ldd	r24, Y+43	; 0x2b
    1486:	28 2f       	mov	r18, r24
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	8f a5       	ldd	r24, Y+47	; 0x2f
    148c:	98 a9       	ldd	r25, Y+48	; 0x30
    148e:	fc 01       	movw	r30, r24
    1490:	e2 0f       	add	r30, r18
    1492:	f3 1f       	adc	r31, r19
    1494:	80 81       	ld	r24, Z
    1496:	88 2f       	mov	r24, r24
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	a0 e0       	ldi	r26, 0x00	; 0
    149c:	b0 e0       	ldi	r27, 0x00	; 0
    149e:	bc 01       	movw	r22, r24
    14a0:	cd 01       	movw	r24, r26
    14a2:	0e 94 68 11 	call	0x22d0	; 0x22d0 <CLCD_voidSendNumber>
				}
			}
		}
		CLCD_voidCLR();
		CLCD_voidSendString("Welcome ");
		for(u8 Local_u8Iterator=0;Local_u8Iterator<4;Local_u8Iterator++){
    14a6:	8b a5       	ldd	r24, Y+43	; 0x2b
    14a8:	8f 5f       	subi	r24, 0xFF	; 255
    14aa:	8b a7       	std	Y+43, r24	; 0x2b
    14ac:	8b a5       	ldd	r24, Y+43	; 0x2b
    14ae:	84 30       	cpi	r24, 0x04	; 4
    14b0:	48 f3       	brcs	.-46     	; 0x1484 <APP_voidCheckPassword+0x30c>
    14b2:	80 e0       	ldi	r24, 0x00	; 0
    14b4:	90 e8       	ldi	r25, 0x80	; 128
    14b6:	ab e3       	ldi	r26, 0x3B	; 59
    14b8:	b5 e4       	ldi	r27, 0x45	; 69
    14ba:	8b 87       	std	Y+11, r24	; 0x0b
    14bc:	9c 87       	std	Y+12, r25	; 0x0c
    14be:	ad 87       	std	Y+13, r26	; 0x0d
    14c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    14c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    14c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    14c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    14ca:	20 e0       	ldi	r18, 0x00	; 0
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	4a ef       	ldi	r20, 0xFA	; 250
    14d0:	54 e4       	ldi	r21, 0x44	; 68
    14d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14d6:	dc 01       	movw	r26, r24
    14d8:	cb 01       	movw	r24, r22
    14da:	8f 83       	std	Y+7, r24	; 0x07
    14dc:	98 87       	std	Y+8, r25	; 0x08
    14de:	a9 87       	std	Y+9, r26	; 0x09
    14e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14e2:	6f 81       	ldd	r22, Y+7	; 0x07
    14e4:	78 85       	ldd	r23, Y+8	; 0x08
    14e6:	89 85       	ldd	r24, Y+9	; 0x09
    14e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    14ea:	20 e0       	ldi	r18, 0x00	; 0
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	40 e8       	ldi	r20, 0x80	; 128
    14f0:	5f e3       	ldi	r21, 0x3F	; 63
    14f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14f6:	88 23       	and	r24, r24
    14f8:	2c f4       	brge	.+10     	; 0x1504 <APP_voidCheckPassword+0x38c>
		__ticks = 1;
    14fa:	81 e0       	ldi	r24, 0x01	; 1
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	9e 83       	std	Y+6, r25	; 0x06
    1500:	8d 83       	std	Y+5, r24	; 0x05
    1502:	3f c0       	rjmp	.+126    	; 0x1582 <APP_voidCheckPassword+0x40a>
	else if (__tmp > 65535)
    1504:	6f 81       	ldd	r22, Y+7	; 0x07
    1506:	78 85       	ldd	r23, Y+8	; 0x08
    1508:	89 85       	ldd	r24, Y+9	; 0x09
    150a:	9a 85       	ldd	r25, Y+10	; 0x0a
    150c:	20 e0       	ldi	r18, 0x00	; 0
    150e:	3f ef       	ldi	r19, 0xFF	; 255
    1510:	4f e7       	ldi	r20, 0x7F	; 127
    1512:	57 e4       	ldi	r21, 0x47	; 71
    1514:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1518:	18 16       	cp	r1, r24
    151a:	4c f5       	brge	.+82     	; 0x156e <APP_voidCheckPassword+0x3f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    151c:	6b 85       	ldd	r22, Y+11	; 0x0b
    151e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1520:	8d 85       	ldd	r24, Y+13	; 0x0d
    1522:	9e 85       	ldd	r25, Y+14	; 0x0e
    1524:	20 e0       	ldi	r18, 0x00	; 0
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	40 e2       	ldi	r20, 0x20	; 32
    152a:	51 e4       	ldi	r21, 0x41	; 65
    152c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1530:	dc 01       	movw	r26, r24
    1532:	cb 01       	movw	r24, r22
    1534:	bc 01       	movw	r22, r24
    1536:	cd 01       	movw	r24, r26
    1538:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    153c:	dc 01       	movw	r26, r24
    153e:	cb 01       	movw	r24, r22
    1540:	9e 83       	std	Y+6, r25	; 0x06
    1542:	8d 83       	std	Y+5, r24	; 0x05
    1544:	0f c0       	rjmp	.+30     	; 0x1564 <APP_voidCheckPassword+0x3ec>
    1546:	88 ec       	ldi	r24, 0xC8	; 200
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	9c 83       	std	Y+4, r25	; 0x04
    154c:	8b 83       	std	Y+3, r24	; 0x03
    154e:	8b 81       	ldd	r24, Y+3	; 0x03
    1550:	9c 81       	ldd	r25, Y+4	; 0x04
    1552:	01 97       	sbiw	r24, 0x01	; 1
    1554:	f1 f7       	brne	.-4      	; 0x1552 <APP_voidCheckPassword+0x3da>
    1556:	9c 83       	std	Y+4, r25	; 0x04
    1558:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    155a:	8d 81       	ldd	r24, Y+5	; 0x05
    155c:	9e 81       	ldd	r25, Y+6	; 0x06
    155e:	01 97       	sbiw	r24, 0x01	; 1
    1560:	9e 83       	std	Y+6, r25	; 0x06
    1562:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1564:	8d 81       	ldd	r24, Y+5	; 0x05
    1566:	9e 81       	ldd	r25, Y+6	; 0x06
    1568:	00 97       	sbiw	r24, 0x00	; 0
    156a:	69 f7       	brne	.-38     	; 0x1546 <APP_voidCheckPassword+0x3ce>
    156c:	14 c0       	rjmp	.+40     	; 0x1596 <APP_voidCheckPassword+0x41e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    156e:	6f 81       	ldd	r22, Y+7	; 0x07
    1570:	78 85       	ldd	r23, Y+8	; 0x08
    1572:	89 85       	ldd	r24, Y+9	; 0x09
    1574:	9a 85       	ldd	r25, Y+10	; 0x0a
    1576:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    157a:	dc 01       	movw	r26, r24
    157c:	cb 01       	movw	r24, r22
    157e:	9e 83       	std	Y+6, r25	; 0x06
    1580:	8d 83       	std	Y+5, r24	; 0x05
    1582:	8d 81       	ldd	r24, Y+5	; 0x05
    1584:	9e 81       	ldd	r25, Y+6	; 0x06
    1586:	9a 83       	std	Y+2, r25	; 0x02
    1588:	89 83       	std	Y+1, r24	; 0x01
    158a:	89 81       	ldd	r24, Y+1	; 0x01
    158c:	9a 81       	ldd	r25, Y+2	; 0x02
    158e:	01 97       	sbiw	r24, 0x01	; 1
    1590:	f1 f7       	brne	.-4      	; 0x158e <APP_voidCheckPassword+0x416>
    1592:	9a 83       	std	Y+2, r25	; 0x02
    1594:	89 83       	std	Y+1, r24	; 0x01
			CLCD_voidSendNumber(Copy_pu8IDArr[Local_u8Iterator]);
		}
		_delay_ms(3000);
	}
	return Local_u8ErrorState;
    1596:	8e a5       	ldd	r24, Y+46	; 0x2e
    1598:	8b ab       	std	Y+51, r24	; 0x33
    159a:	8b a9       	ldd	r24, Y+51	; 0x33
}
    159c:	e3 96       	adiw	r28, 0x33	; 51
    159e:	0f b6       	in	r0, 0x3f	; 63
    15a0:	f8 94       	cli
    15a2:	de bf       	out	0x3e, r29	; 62
    15a4:	0f be       	out	0x3f, r0	; 63
    15a6:	cd bf       	out	0x3d, r28	; 61
    15a8:	cf 91       	pop	r28
    15aa:	df 91       	pop	r29
    15ac:	08 95       	ret

000015ae <APP_voidShowMainMenu>:

void APP_voidShowMainMenu(){
    15ae:	df 93       	push	r29
    15b0:	cf 93       	push	r28
    15b2:	cd b7       	in	r28, 0x3d	; 61
    15b4:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidCLR();
    15b6:	0e 94 f7 11 	call	0x23ee	; 0x23ee <CLCD_voidCLR>
	CLCD_voidSendString("for DC>1 STPR>2");
    15ba:	85 eb       	ldi	r24, 0xB5	; 181
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	0e 94 53 10 	call	0x20a6	; 0x20a6 <CLCD_voidSendString>
	CLCD_voidGoToXY(1,0);
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	60 e0       	ldi	r22, 0x00	; 0
    15c6:	0e 94 fd 10 	call	0x21fa	; 0x21fa <CLCD_voidGoToXY>
	CLCD_voidSendString("Servo>3 Exit>4");
    15ca:	85 ec       	ldi	r24, 0xC5	; 197
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	0e 94 53 10 	call	0x20a6	; 0x20a6 <CLCD_voidSendString>
}
    15d2:	cf 91       	pop	r28
    15d4:	df 91       	pop	r29
    15d6:	08 95       	ret

000015d8 <APP_voidShowRotateMenu>:

void APP_voidShowRotateMenu(){
    15d8:	df 93       	push	r29
    15da:	cf 93       	push	r28
    15dc:	cd b7       	in	r28, 0x3d	; 61
    15de:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidCLR();
    15e0:	0e 94 f7 11 	call	0x23ee	; 0x23ee <CLCD_voidCLR>
	CLCD_voidSendString("Rotation Dir.");
    15e4:	84 ed       	ldi	r24, 0xD4	; 212
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	0e 94 53 10 	call	0x20a6	; 0x20a6 <CLCD_voidSendString>
	CLCD_voidGoToXY(1,0);
    15ec:	81 e0       	ldi	r24, 0x01	; 1
    15ee:	60 e0       	ldi	r22, 0x00	; 0
    15f0:	0e 94 fd 10 	call	0x21fa	; 0x21fa <CLCD_voidGoToXY>
	CLCD_voidSendString("CW->1 CCW->2");
    15f4:	82 ee       	ldi	r24, 0xE2	; 226
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	0e 94 53 10 	call	0x20a6	; 0x20a6 <CLCD_voidSendString>
}
    15fc:	cf 91       	pop	r28
    15fe:	df 91       	pop	r29
    1600:	08 95       	ret

00001602 <APP_voidShowDCSpeedMenu>:

void APP_voidShowDCSpeedMenu(){
    1602:	df 93       	push	r29
    1604:	cf 93       	push	r28
    1606:	cd b7       	in	r28, 0x3d	; 61
    1608:	de b7       	in	r29, 0x3e	; 62
    160a:	2e 97       	sbiw	r28, 0x0e	; 14
    160c:	0f b6       	in	r0, 0x3f	; 63
    160e:	f8 94       	cli
    1610:	de bf       	out	0x3e, r29	; 62
    1612:	0f be       	out	0x3f, r0	; 63
    1614:	cd bf       	out	0x3d, r28	; 61
	CLCD_voidCLR();
    1616:	0e 94 f7 11 	call	0x23ee	; 0x23ee <CLCD_voidCLR>
	CLCD_voidSendString("Speed Control");
    161a:	8f ee       	ldi	r24, 0xEF	; 239
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	0e 94 53 10 	call	0x20a6	; 0x20a6 <CLCD_voidSendString>
    1622:	80 e0       	ldi	r24, 0x00	; 0
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	aa ef       	ldi	r26, 0xFA	; 250
    1628:	b4 e4       	ldi	r27, 0x44	; 68
    162a:	8b 87       	std	Y+11, r24	; 0x0b
    162c:	9c 87       	std	Y+12, r25	; 0x0c
    162e:	ad 87       	std	Y+13, r26	; 0x0d
    1630:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1632:	6b 85       	ldd	r22, Y+11	; 0x0b
    1634:	7c 85       	ldd	r23, Y+12	; 0x0c
    1636:	8d 85       	ldd	r24, Y+13	; 0x0d
    1638:	9e 85       	ldd	r25, Y+14	; 0x0e
    163a:	20 e0       	ldi	r18, 0x00	; 0
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	4a ef       	ldi	r20, 0xFA	; 250
    1640:	54 e4       	ldi	r21, 0x44	; 68
    1642:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1646:	dc 01       	movw	r26, r24
    1648:	cb 01       	movw	r24, r22
    164a:	8f 83       	std	Y+7, r24	; 0x07
    164c:	98 87       	std	Y+8, r25	; 0x08
    164e:	a9 87       	std	Y+9, r26	; 0x09
    1650:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1652:	6f 81       	ldd	r22, Y+7	; 0x07
    1654:	78 85       	ldd	r23, Y+8	; 0x08
    1656:	89 85       	ldd	r24, Y+9	; 0x09
    1658:	9a 85       	ldd	r25, Y+10	; 0x0a
    165a:	20 e0       	ldi	r18, 0x00	; 0
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	40 e8       	ldi	r20, 0x80	; 128
    1660:	5f e3       	ldi	r21, 0x3F	; 63
    1662:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1666:	88 23       	and	r24, r24
    1668:	2c f4       	brge	.+10     	; 0x1674 <APP_voidShowDCSpeedMenu+0x72>
		__ticks = 1;
    166a:	81 e0       	ldi	r24, 0x01	; 1
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	9e 83       	std	Y+6, r25	; 0x06
    1670:	8d 83       	std	Y+5, r24	; 0x05
    1672:	3f c0       	rjmp	.+126    	; 0x16f2 <APP_voidShowDCSpeedMenu+0xf0>
	else if (__tmp > 65535)
    1674:	6f 81       	ldd	r22, Y+7	; 0x07
    1676:	78 85       	ldd	r23, Y+8	; 0x08
    1678:	89 85       	ldd	r24, Y+9	; 0x09
    167a:	9a 85       	ldd	r25, Y+10	; 0x0a
    167c:	20 e0       	ldi	r18, 0x00	; 0
    167e:	3f ef       	ldi	r19, 0xFF	; 255
    1680:	4f e7       	ldi	r20, 0x7F	; 127
    1682:	57 e4       	ldi	r21, 0x47	; 71
    1684:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1688:	18 16       	cp	r1, r24
    168a:	4c f5       	brge	.+82     	; 0x16de <APP_voidShowDCSpeedMenu+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    168c:	6b 85       	ldd	r22, Y+11	; 0x0b
    168e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1690:	8d 85       	ldd	r24, Y+13	; 0x0d
    1692:	9e 85       	ldd	r25, Y+14	; 0x0e
    1694:	20 e0       	ldi	r18, 0x00	; 0
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	40 e2       	ldi	r20, 0x20	; 32
    169a:	51 e4       	ldi	r21, 0x41	; 65
    169c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16a0:	dc 01       	movw	r26, r24
    16a2:	cb 01       	movw	r24, r22
    16a4:	bc 01       	movw	r22, r24
    16a6:	cd 01       	movw	r24, r26
    16a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ac:	dc 01       	movw	r26, r24
    16ae:	cb 01       	movw	r24, r22
    16b0:	9e 83       	std	Y+6, r25	; 0x06
    16b2:	8d 83       	std	Y+5, r24	; 0x05
    16b4:	0f c0       	rjmp	.+30     	; 0x16d4 <APP_voidShowDCSpeedMenu+0xd2>
    16b6:	88 ec       	ldi	r24, 0xC8	; 200
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	9c 83       	std	Y+4, r25	; 0x04
    16bc:	8b 83       	std	Y+3, r24	; 0x03
    16be:	8b 81       	ldd	r24, Y+3	; 0x03
    16c0:	9c 81       	ldd	r25, Y+4	; 0x04
    16c2:	01 97       	sbiw	r24, 0x01	; 1
    16c4:	f1 f7       	brne	.-4      	; 0x16c2 <APP_voidShowDCSpeedMenu+0xc0>
    16c6:	9c 83       	std	Y+4, r25	; 0x04
    16c8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16ca:	8d 81       	ldd	r24, Y+5	; 0x05
    16cc:	9e 81       	ldd	r25, Y+6	; 0x06
    16ce:	01 97       	sbiw	r24, 0x01	; 1
    16d0:	9e 83       	std	Y+6, r25	; 0x06
    16d2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16d4:	8d 81       	ldd	r24, Y+5	; 0x05
    16d6:	9e 81       	ldd	r25, Y+6	; 0x06
    16d8:	00 97       	sbiw	r24, 0x00	; 0
    16da:	69 f7       	brne	.-38     	; 0x16b6 <APP_voidShowDCSpeedMenu+0xb4>
    16dc:	14 c0       	rjmp	.+40     	; 0x1706 <APP_voidShowDCSpeedMenu+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16de:	6f 81       	ldd	r22, Y+7	; 0x07
    16e0:	78 85       	ldd	r23, Y+8	; 0x08
    16e2:	89 85       	ldd	r24, Y+9	; 0x09
    16e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    16e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ea:	dc 01       	movw	r26, r24
    16ec:	cb 01       	movw	r24, r22
    16ee:	9e 83       	std	Y+6, r25	; 0x06
    16f0:	8d 83       	std	Y+5, r24	; 0x05
    16f2:	8d 81       	ldd	r24, Y+5	; 0x05
    16f4:	9e 81       	ldd	r25, Y+6	; 0x06
    16f6:	9a 83       	std	Y+2, r25	; 0x02
    16f8:	89 83       	std	Y+1, r24	; 0x01
    16fa:	89 81       	ldd	r24, Y+1	; 0x01
    16fc:	9a 81       	ldd	r25, Y+2	; 0x02
    16fe:	01 97       	sbiw	r24, 0x01	; 1
    1700:	f1 f7       	brne	.-4      	; 0x16fe <APP_voidShowDCSpeedMenu+0xfc>
    1702:	9a 83       	std	Y+2, r25	; 0x02
    1704:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000);
	CLCD_voidCLR();
    1706:	0e 94 f7 11 	call	0x23ee	; 0x23ee <CLCD_voidCLR>
	CLCD_voidSendString("Full->1 Poten->2");
    170a:	8d ef       	ldi	r24, 0xFD	; 253
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	0e 94 53 10 	call	0x20a6	; 0x20a6 <CLCD_voidSendString>
	CLCD_voidGoToXY(1,0);
    1712:	81 e0       	ldi	r24, 0x01	; 1
    1714:	60 e0       	ldi	r22, 0x00	; 0
    1716:	0e 94 fd 10 	call	0x21fa	; 0x21fa <CLCD_voidGoToXY>
	CLCD_voidSendString("LM35->3");
    171a:	8e e0       	ldi	r24, 0x0E	; 14
    171c:	91 e0       	ldi	r25, 0x01	; 1
    171e:	0e 94 53 10 	call	0x20a6	; 0x20a6 <CLCD_voidSendString>
}
    1722:	2e 96       	adiw	r28, 0x0e	; 14
    1724:	0f b6       	in	r0, 0x3f	; 63
    1726:	f8 94       	cli
    1728:	de bf       	out	0x3e, r29	; 62
    172a:	0f be       	out	0x3f, r0	; 63
    172c:	cd bf       	out	0x3d, r28	; 61
    172e:	cf 91       	pop	r28
    1730:	df 91       	pop	r29
    1732:	08 95       	ret

00001734 <APP_voidReadKey>:

void APP_voidReadKey(u8* Copy_pu8Key){
    1734:	df 93       	push	r29
    1736:	cf 93       	push	r28
    1738:	00 d0       	rcall	.+0      	; 0x173a <APP_voidReadKey+0x6>
    173a:	cd b7       	in	r28, 0x3d	; 61
    173c:	de b7       	in	r29, 0x3e	; 62
    173e:	9a 83       	std	Y+2, r25	; 0x02
    1740:	89 83       	std	Y+1, r24	; 0x01
	do{
		*Copy_pu8Key=KPD_u8GetPressedKey();
    1742:	0e 94 78 14 	call	0x28f0	; 0x28f0 <KPD_u8GetPressedKey>
    1746:	e9 81       	ldd	r30, Y+1	; 0x01
    1748:	fa 81       	ldd	r31, Y+2	; 0x02
    174a:	80 83       	st	Z, r24
	}while(*Copy_pu8Key==0xff);
    174c:	e9 81       	ldd	r30, Y+1	; 0x01
    174e:	fa 81       	ldd	r31, Y+2	; 0x02
    1750:	80 81       	ld	r24, Z
    1752:	8f 3f       	cpi	r24, 0xFF	; 255
    1754:	b1 f3       	breq	.-20     	; 0x1742 <APP_voidReadKey+0xe>
}
    1756:	0f 90       	pop	r0
    1758:	0f 90       	pop	r0
    175a:	cf 91       	pop	r28
    175c:	df 91       	pop	r29
    175e:	08 95       	ret

00001760 <APP_voidChooseMotor>:

void APP_voidChooseMotor(){
    1760:	af 92       	push	r10
    1762:	bf 92       	push	r11
    1764:	cf 92       	push	r12
    1766:	df 92       	push	r13
    1768:	ef 92       	push	r14
    176a:	ff 92       	push	r15
    176c:	0f 93       	push	r16
    176e:	1f 93       	push	r17
    1770:	df 93       	push	r29
    1772:	cf 93       	push	r28
    1774:	cd b7       	in	r28, 0x3d	; 61
    1776:	de b7       	in	r29, 0x3e	; 62
    1778:	64 97       	sbiw	r28, 0x14	; 20
    177a:	0f b6       	in	r0, 0x3f	; 63
    177c:	f8 94       	cli
    177e:	de bf       	out	0x3e, r29	; 62
    1780:	0f be       	out	0x3f, r0	; 63
    1782:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8PressedKey,Local_u8ServoAngle;u16 Local_u16Reading,Local_u16StepperAngle;
	APP_voidReadKey(&Local_u8PressedKey);
    1784:	ce 01       	movw	r24, r28
    1786:	42 96       	adiw	r24, 0x12	; 18
    1788:	0e 94 9a 0b 	call	0x1734	; 0x1734 <APP_voidReadKey>
	if(Local_u8PressedKey==DC){
    178c:	8a 89       	ldd	r24, Y+18	; 0x12
    178e:	81 30       	cpi	r24, 0x01	; 1
    1790:	09 f0       	breq	.+2      	; 0x1794 <APP_voidChooseMotor+0x34>
    1792:	aa c1       	rjmp	.+852    	; 0x1ae8 <APP_voidChooseMotor+0x388>
		APP_voidShowRotateMenu();
    1794:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <APP_voidShowRotateMenu>
		APP_voidReadKey(&Local_u8PressedKey);
    1798:	ce 01       	movw	r24, r28
    179a:	42 96       	adiw	r24, 0x12	; 18
    179c:	0e 94 9a 0b 	call	0x1734	; 0x1734 <APP_voidReadKey>
		if(Local_u8PressedKey==CW){
    17a0:	8a 89       	ldd	r24, Y+18	; 0x12
    17a2:	81 30       	cpi	r24, 0x01	; 1
    17a4:	09 f0       	breq	.+2      	; 0x17a8 <APP_voidChooseMotor+0x48>
    17a6:	ce c0       	rjmp	.+412    	; 0x1944 <APP_voidChooseMotor+0x1e4>
			APP_voidShowDCSpeedMenu();
    17a8:	0e 94 01 0b 	call	0x1602	; 0x1602 <APP_voidShowDCSpeedMenu>
			APP_voidReadKey(&Local_u8PressedKey);
    17ac:	ce 01       	movw	r24, r28
    17ae:	42 96       	adiw	r24, 0x12	; 18
    17b0:	0e 94 9a 0b 	call	0x1734	; 0x1734 <APP_voidReadKey>
			if(Local_u8PressedKey==FULL){
    17b4:	8a 89       	ldd	r24, Y+18	; 0x12
    17b6:	81 30       	cpi	r24, 0x01	; 1
    17b8:	41 f4       	brne	.+16     	; 0x17ca <APP_voidChooseMotor+0x6a>
				DIO_u8SetPinValue(DCM_PORT,DCM_PIN,DIO_u8PIN_HIGH);
    17ba:	83 e0       	ldi	r24, 0x03	; 3
    17bc:	64 e0       	ldi	r22, 0x04	; 4
    17be:	41 e0       	ldi	r20, 0x01	; 1
    17c0:	0e 94 34 12 	call	0x2468	; 0x2468 <DIO_u8SetPinValue>
				DCM_voidRotateClockwise();
    17c4:	0e 94 01 12 	call	0x2402	; 0x2402 <DCM_voidRotateClockwise>
    17c8:	9e c2       	rjmp	.+1340   	; 0x1d06 <APP_voidChooseMotor+0x5a6>
			}
			else if(Local_u8PressedKey==POTENTIO){
    17ca:	8a 89       	ldd	r24, Y+18	; 0x12
    17cc:	82 30       	cpi	r24, 0x02	; 2
    17ce:	09 f0       	breq	.+2      	; 0x17d2 <APP_voidChooseMotor+0x72>
    17d0:	3f c0       	rjmp	.+126    	; 0x1850 <APP_voidChooseMotor+0xf0>
				DCM_voidRotateClockwise();
    17d2:	0e 94 01 12 	call	0x2402	; 0x2402 <DCM_voidRotateClockwise>
				TIMER1_voidSetTopValue(20000);
    17d6:	80 e2       	ldi	r24, 0x20	; 32
    17d8:	9e e4       	ldi	r25, 0x4E	; 78
    17da:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <TIMER1_voidSetTopValue>
				while(1){
					ADC_u8StartConversionSynch(POTENTIO_CHANNEL,&Local_u16Reading);
    17de:	9e 01       	movw	r18, r28
    17e0:	2d 5e       	subi	r18, 0xED	; 237
    17e2:	3f 4f       	sbci	r19, 0xFF	; 255
    17e4:	80 e0       	ldi	r24, 0x00	; 0
    17e6:	b9 01       	movw	r22, r18
    17e8:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <ADC_u8StartConversionSynch>
					Local_u16Reading=MATH_s32Map(0,255,0,20000,Local_u16Reading);
    17ec:	8b 89       	ldd	r24, Y+19	; 0x13
    17ee:	9c 89       	ldd	r25, Y+20	; 0x14
    17f0:	cc 01       	movw	r24, r24
    17f2:	a0 e0       	ldi	r26, 0x00	; 0
    17f4:	b0 e0       	ldi	r27, 0x00	; 0
    17f6:	00 d0       	rcall	.+0      	; 0x17f8 <APP_voidChooseMotor+0x98>
    17f8:	00 d0       	rcall	.+0      	; 0x17fa <APP_voidChooseMotor+0x9a>
    17fa:	ed b7       	in	r30, 0x3d	; 61
    17fc:	fe b7       	in	r31, 0x3e	; 62
    17fe:	31 96       	adiw	r30, 0x01	; 1
    1800:	80 83       	st	Z, r24
    1802:	91 83       	std	Z+1, r25	; 0x01
    1804:	a2 83       	std	Z+2, r26	; 0x02
    1806:	b3 83       	std	Z+3, r27	; 0x03
    1808:	60 e0       	ldi	r22, 0x00	; 0
    180a:	70 e0       	ldi	r23, 0x00	; 0
    180c:	80 e0       	ldi	r24, 0x00	; 0
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	2f ef       	ldi	r18, 0xFF	; 255
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	40 e0       	ldi	r20, 0x00	; 0
    1816:	50 e0       	ldi	r21, 0x00	; 0
    1818:	ee 24       	eor	r14, r14
    181a:	ff 24       	eor	r15, r15
    181c:	87 01       	movw	r16, r14
    181e:	0f 2e       	mov	r0, r31
    1820:	f0 e2       	ldi	r31, 0x20	; 32
    1822:	af 2e       	mov	r10, r31
    1824:	fe e4       	ldi	r31, 0x4E	; 78
    1826:	bf 2e       	mov	r11, r31
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	cf 2e       	mov	r12, r31
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	df 2e       	mov	r13, r31
    1830:	f0 2d       	mov	r31, r0
    1832:	0e 94 48 15 	call	0x2a90	; 0x2a90 <MATH_s32Map>
    1836:	0f 90       	pop	r0
    1838:	0f 90       	pop	r0
    183a:	0f 90       	pop	r0
    183c:	0f 90       	pop	r0
    183e:	dc 01       	movw	r26, r24
    1840:	cb 01       	movw	r24, r22
    1842:	9c 8b       	std	Y+20, r25	; 0x14
    1844:	8b 8b       	std	Y+19, r24	; 0x13
					TIMER1B_voidSetCompMatchValue(Local_u16Reading);
    1846:	8b 89       	ldd	r24, Y+19	; 0x13
    1848:	9c 89       	ldd	r25, Y+20	; 0x14
    184a:	0e 94 c9 1b 	call	0x3792	; 0x3792 <TIMER1B_voidSetCompMatchValue>
    184e:	c7 cf       	rjmp	.-114    	; 0x17de <APP_voidChooseMotor+0x7e>
				}
			}
			else if(Local_u8PressedKey==LM35){
    1850:	8a 89       	ldd	r24, Y+18	; 0x12
    1852:	83 30       	cpi	r24, 0x03	; 3
    1854:	09 f0       	breq	.+2      	; 0x1858 <APP_voidChooseMotor+0xf8>
    1856:	57 c2       	rjmp	.+1198   	; 0x1d06 <APP_voidChooseMotor+0x5a6>
				DCM_voidRotateClockwise();
    1858:	0e 94 01 12 	call	0x2402	; 0x2402 <DCM_voidRotateClockwise>
				TIMER1_voidSetTopValue(20000);
    185c:	80 e2       	ldi	r24, 0x20	; 32
    185e:	9e e4       	ldi	r25, 0x4E	; 78
    1860:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <TIMER1_voidSetTopValue>
				while(1){
					ADC_u8StartConversionSynch(THER_CHANNEL,&Local_u16Reading);
    1864:	9e 01       	movw	r18, r28
    1866:	2d 5e       	subi	r18, 0xED	; 237
    1868:	3f 4f       	sbci	r19, 0xFF	; 255
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	b9 01       	movw	r22, r18
    186e:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <ADC_u8StartConversionSynch>
					Local_u16Reading=MATH_s32Map(0,255,0,500,Local_u16Reading);
    1872:	8b 89       	ldd	r24, Y+19	; 0x13
    1874:	9c 89       	ldd	r25, Y+20	; 0x14
    1876:	cc 01       	movw	r24, r24
    1878:	a0 e0       	ldi	r26, 0x00	; 0
    187a:	b0 e0       	ldi	r27, 0x00	; 0
    187c:	00 d0       	rcall	.+0      	; 0x187e <APP_voidChooseMotor+0x11e>
    187e:	00 d0       	rcall	.+0      	; 0x1880 <APP_voidChooseMotor+0x120>
    1880:	ed b7       	in	r30, 0x3d	; 61
    1882:	fe b7       	in	r31, 0x3e	; 62
    1884:	31 96       	adiw	r30, 0x01	; 1
    1886:	80 83       	st	Z, r24
    1888:	91 83       	std	Z+1, r25	; 0x01
    188a:	a2 83       	std	Z+2, r26	; 0x02
    188c:	b3 83       	std	Z+3, r27	; 0x03
    188e:	60 e0       	ldi	r22, 0x00	; 0
    1890:	70 e0       	ldi	r23, 0x00	; 0
    1892:	80 e0       	ldi	r24, 0x00	; 0
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	2f ef       	ldi	r18, 0xFF	; 255
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	40 e0       	ldi	r20, 0x00	; 0
    189c:	50 e0       	ldi	r21, 0x00	; 0
    189e:	ee 24       	eor	r14, r14
    18a0:	ff 24       	eor	r15, r15
    18a2:	87 01       	movw	r16, r14
    18a4:	0f 2e       	mov	r0, r31
    18a6:	f4 ef       	ldi	r31, 0xF4	; 244
    18a8:	af 2e       	mov	r10, r31
    18aa:	f1 e0       	ldi	r31, 0x01	; 1
    18ac:	bf 2e       	mov	r11, r31
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	cf 2e       	mov	r12, r31
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	df 2e       	mov	r13, r31
    18b6:	f0 2d       	mov	r31, r0
    18b8:	0e 94 48 15 	call	0x2a90	; 0x2a90 <MATH_s32Map>
    18bc:	0f 90       	pop	r0
    18be:	0f 90       	pop	r0
    18c0:	0f 90       	pop	r0
    18c2:	0f 90       	pop	r0
    18c4:	dc 01       	movw	r26, r24
    18c6:	cb 01       	movw	r24, r22
    18c8:	9c 8b       	std	Y+20, r25	; 0x14
    18ca:	8b 8b       	std	Y+19, r24	; 0x13
					if(Local_u16Reading>=20&&Local_u16Reading<=40){
    18cc:	8b 89       	ldd	r24, Y+19	; 0x13
    18ce:	9c 89       	ldd	r25, Y+20	; 0x14
    18d0:	84 31       	cpi	r24, 0x14	; 20
    18d2:	91 05       	cpc	r25, r1
    18d4:	38 f2       	brcs	.-114    	; 0x1864 <APP_voidChooseMotor+0x104>
    18d6:	8b 89       	ldd	r24, Y+19	; 0x13
    18d8:	9c 89       	ldd	r25, Y+20	; 0x14
    18da:	89 32       	cpi	r24, 0x29	; 41
    18dc:	91 05       	cpc	r25, r1
    18de:	10 f6       	brcc	.-124    	; 0x1864 <APP_voidChooseMotor+0x104>
						Local_u16Reading=MATH_s32Map(20,40,0,20000,Local_u16Reading);
    18e0:	8b 89       	ldd	r24, Y+19	; 0x13
    18e2:	9c 89       	ldd	r25, Y+20	; 0x14
    18e4:	cc 01       	movw	r24, r24
    18e6:	a0 e0       	ldi	r26, 0x00	; 0
    18e8:	b0 e0       	ldi	r27, 0x00	; 0
    18ea:	00 d0       	rcall	.+0      	; 0x18ec <APP_voidChooseMotor+0x18c>
    18ec:	00 d0       	rcall	.+0      	; 0x18ee <APP_voidChooseMotor+0x18e>
    18ee:	ed b7       	in	r30, 0x3d	; 61
    18f0:	fe b7       	in	r31, 0x3e	; 62
    18f2:	31 96       	adiw	r30, 0x01	; 1
    18f4:	80 83       	st	Z, r24
    18f6:	91 83       	std	Z+1, r25	; 0x01
    18f8:	a2 83       	std	Z+2, r26	; 0x02
    18fa:	b3 83       	std	Z+3, r27	; 0x03
    18fc:	64 e1       	ldi	r22, 0x14	; 20
    18fe:	70 e0       	ldi	r23, 0x00	; 0
    1900:	80 e0       	ldi	r24, 0x00	; 0
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	28 e2       	ldi	r18, 0x28	; 40
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	40 e0       	ldi	r20, 0x00	; 0
    190a:	50 e0       	ldi	r21, 0x00	; 0
    190c:	ee 24       	eor	r14, r14
    190e:	ff 24       	eor	r15, r15
    1910:	87 01       	movw	r16, r14
    1912:	0f 2e       	mov	r0, r31
    1914:	f0 e2       	ldi	r31, 0x20	; 32
    1916:	af 2e       	mov	r10, r31
    1918:	fe e4       	ldi	r31, 0x4E	; 78
    191a:	bf 2e       	mov	r11, r31
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	cf 2e       	mov	r12, r31
    1920:	f0 e0       	ldi	r31, 0x00	; 0
    1922:	df 2e       	mov	r13, r31
    1924:	f0 2d       	mov	r31, r0
    1926:	0e 94 48 15 	call	0x2a90	; 0x2a90 <MATH_s32Map>
    192a:	0f 90       	pop	r0
    192c:	0f 90       	pop	r0
    192e:	0f 90       	pop	r0
    1930:	0f 90       	pop	r0
    1932:	dc 01       	movw	r26, r24
    1934:	cb 01       	movw	r24, r22
    1936:	9c 8b       	std	Y+20, r25	; 0x14
    1938:	8b 8b       	std	Y+19, r24	; 0x13
						TIMER1B_voidSetCompMatchValue(Local_u16Reading);
    193a:	8b 89       	ldd	r24, Y+19	; 0x13
    193c:	9c 89       	ldd	r25, Y+20	; 0x14
    193e:	0e 94 c9 1b 	call	0x3792	; 0x3792 <TIMER1B_voidSetCompMatchValue>
    1942:	90 cf       	rjmp	.-224    	; 0x1864 <APP_voidChooseMotor+0x104>

				}

			}
		}
		else if(Local_u8PressedKey==CCW){
    1944:	8a 89       	ldd	r24, Y+18	; 0x12
    1946:	82 30       	cpi	r24, 0x02	; 2
    1948:	09 f0       	breq	.+2      	; 0x194c <APP_voidChooseMotor+0x1ec>
    194a:	dd c1       	rjmp	.+954    	; 0x1d06 <APP_voidChooseMotor+0x5a6>
			APP_voidShowDCSpeedMenu();
    194c:	0e 94 01 0b 	call	0x1602	; 0x1602 <APP_voidShowDCSpeedMenu>
			APP_voidReadKey(&Local_u8PressedKey);
    1950:	ce 01       	movw	r24, r28
    1952:	42 96       	adiw	r24, 0x12	; 18
    1954:	0e 94 9a 0b 	call	0x1734	; 0x1734 <APP_voidReadKey>
			if(Local_u8PressedKey==FULL){
    1958:	8a 89       	ldd	r24, Y+18	; 0x12
    195a:	81 30       	cpi	r24, 0x01	; 1
    195c:	41 f4       	brne	.+16     	; 0x196e <APP_voidChooseMotor+0x20e>
				DIO_u8SetPinValue(DCM_PORT,DCM_PIN,DIO_u8PIN_HIGH);
    195e:	83 e0       	ldi	r24, 0x03	; 3
    1960:	64 e0       	ldi	r22, 0x04	; 4
    1962:	41 e0       	ldi	r20, 0x01	; 1
    1964:	0e 94 34 12 	call	0x2468	; 0x2468 <DIO_u8SetPinValue>
				DCM_voidRotateCounterClockwise();
    1968:	0e 94 12 12 	call	0x2424	; 0x2424 <DCM_voidRotateCounterClockwise>
    196c:	cc c1       	rjmp	.+920    	; 0x1d06 <APP_voidChooseMotor+0x5a6>
			}
			else if(Local_u8PressedKey==POTENTIO){
    196e:	8a 89       	ldd	r24, Y+18	; 0x12
    1970:	82 30       	cpi	r24, 0x02	; 2
    1972:	09 f0       	breq	.+2      	; 0x1976 <APP_voidChooseMotor+0x216>
    1974:	3f c0       	rjmp	.+126    	; 0x19f4 <APP_voidChooseMotor+0x294>
				DCM_voidRotateCounterClockwise();
    1976:	0e 94 12 12 	call	0x2424	; 0x2424 <DCM_voidRotateCounterClockwise>
				TIMER1_voidSetTopValue(20000);
    197a:	80 e2       	ldi	r24, 0x20	; 32
    197c:	9e e4       	ldi	r25, 0x4E	; 78
    197e:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <TIMER1_voidSetTopValue>
				while(1){
					ADC_u8StartConversionSynch(POTENTIO_CHANNEL,&Local_u16Reading);
    1982:	9e 01       	movw	r18, r28
    1984:	2d 5e       	subi	r18, 0xED	; 237
    1986:	3f 4f       	sbci	r19, 0xFF	; 255
    1988:	80 e0       	ldi	r24, 0x00	; 0
    198a:	b9 01       	movw	r22, r18
    198c:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <ADC_u8StartConversionSynch>
					Local_u16Reading=MATH_s32Map(0,255,0,20000,Local_u16Reading);
    1990:	8b 89       	ldd	r24, Y+19	; 0x13
    1992:	9c 89       	ldd	r25, Y+20	; 0x14
    1994:	cc 01       	movw	r24, r24
    1996:	a0 e0       	ldi	r26, 0x00	; 0
    1998:	b0 e0       	ldi	r27, 0x00	; 0
    199a:	00 d0       	rcall	.+0      	; 0x199c <APP_voidChooseMotor+0x23c>
    199c:	00 d0       	rcall	.+0      	; 0x199e <APP_voidChooseMotor+0x23e>
    199e:	ed b7       	in	r30, 0x3d	; 61
    19a0:	fe b7       	in	r31, 0x3e	; 62
    19a2:	31 96       	adiw	r30, 0x01	; 1
    19a4:	80 83       	st	Z, r24
    19a6:	91 83       	std	Z+1, r25	; 0x01
    19a8:	a2 83       	std	Z+2, r26	; 0x02
    19aa:	b3 83       	std	Z+3, r27	; 0x03
    19ac:	60 e0       	ldi	r22, 0x00	; 0
    19ae:	70 e0       	ldi	r23, 0x00	; 0
    19b0:	80 e0       	ldi	r24, 0x00	; 0
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	2f ef       	ldi	r18, 0xFF	; 255
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	40 e0       	ldi	r20, 0x00	; 0
    19ba:	50 e0       	ldi	r21, 0x00	; 0
    19bc:	ee 24       	eor	r14, r14
    19be:	ff 24       	eor	r15, r15
    19c0:	87 01       	movw	r16, r14
    19c2:	0f 2e       	mov	r0, r31
    19c4:	f0 e2       	ldi	r31, 0x20	; 32
    19c6:	af 2e       	mov	r10, r31
    19c8:	fe e4       	ldi	r31, 0x4E	; 78
    19ca:	bf 2e       	mov	r11, r31
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	cf 2e       	mov	r12, r31
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	df 2e       	mov	r13, r31
    19d4:	f0 2d       	mov	r31, r0
    19d6:	0e 94 48 15 	call	0x2a90	; 0x2a90 <MATH_s32Map>
    19da:	0f 90       	pop	r0
    19dc:	0f 90       	pop	r0
    19de:	0f 90       	pop	r0
    19e0:	0f 90       	pop	r0
    19e2:	dc 01       	movw	r26, r24
    19e4:	cb 01       	movw	r24, r22
    19e6:	9c 8b       	std	Y+20, r25	; 0x14
    19e8:	8b 8b       	std	Y+19, r24	; 0x13
					TIMER1B_voidSetCompMatchValue(Local_u16Reading);
    19ea:	8b 89       	ldd	r24, Y+19	; 0x13
    19ec:	9c 89       	ldd	r25, Y+20	; 0x14
    19ee:	0e 94 c9 1b 	call	0x3792	; 0x3792 <TIMER1B_voidSetCompMatchValue>
    19f2:	c7 cf       	rjmp	.-114    	; 0x1982 <APP_voidChooseMotor+0x222>
				}
			}
			else if(Local_u8PressedKey==LM35){
    19f4:	8a 89       	ldd	r24, Y+18	; 0x12
    19f6:	83 30       	cpi	r24, 0x03	; 3
    19f8:	09 f0       	breq	.+2      	; 0x19fc <APP_voidChooseMotor+0x29c>
    19fa:	85 c1       	rjmp	.+778    	; 0x1d06 <APP_voidChooseMotor+0x5a6>
				DCM_voidRotateCounterClockwise();
    19fc:	0e 94 12 12 	call	0x2424	; 0x2424 <DCM_voidRotateCounterClockwise>
				TIMER1_voidSetTopValue(20000);
    1a00:	80 e2       	ldi	r24, 0x20	; 32
    1a02:	9e e4       	ldi	r25, 0x4E	; 78
    1a04:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <TIMER1_voidSetTopValue>
				while(1){
					ADC_u8StartConversionSynch(THER_CHANNEL,&Local_u16Reading);
    1a08:	9e 01       	movw	r18, r28
    1a0a:	2d 5e       	subi	r18, 0xED	; 237
    1a0c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a0e:	81 e0       	ldi	r24, 0x01	; 1
    1a10:	b9 01       	movw	r22, r18
    1a12:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <ADC_u8StartConversionSynch>
					Local_u16Reading=MATH_s32Map(0,255,0,500,Local_u16Reading);
    1a16:	8b 89       	ldd	r24, Y+19	; 0x13
    1a18:	9c 89       	ldd	r25, Y+20	; 0x14
    1a1a:	cc 01       	movw	r24, r24
    1a1c:	a0 e0       	ldi	r26, 0x00	; 0
    1a1e:	b0 e0       	ldi	r27, 0x00	; 0
    1a20:	00 d0       	rcall	.+0      	; 0x1a22 <APP_voidChooseMotor+0x2c2>
    1a22:	00 d0       	rcall	.+0      	; 0x1a24 <APP_voidChooseMotor+0x2c4>
    1a24:	ed b7       	in	r30, 0x3d	; 61
    1a26:	fe b7       	in	r31, 0x3e	; 62
    1a28:	31 96       	adiw	r30, 0x01	; 1
    1a2a:	80 83       	st	Z, r24
    1a2c:	91 83       	std	Z+1, r25	; 0x01
    1a2e:	a2 83       	std	Z+2, r26	; 0x02
    1a30:	b3 83       	std	Z+3, r27	; 0x03
    1a32:	60 e0       	ldi	r22, 0x00	; 0
    1a34:	70 e0       	ldi	r23, 0x00	; 0
    1a36:	80 e0       	ldi	r24, 0x00	; 0
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	2f ef       	ldi	r18, 0xFF	; 255
    1a3c:	30 e0       	ldi	r19, 0x00	; 0
    1a3e:	40 e0       	ldi	r20, 0x00	; 0
    1a40:	50 e0       	ldi	r21, 0x00	; 0
    1a42:	ee 24       	eor	r14, r14
    1a44:	ff 24       	eor	r15, r15
    1a46:	87 01       	movw	r16, r14
    1a48:	0f 2e       	mov	r0, r31
    1a4a:	f4 ef       	ldi	r31, 0xF4	; 244
    1a4c:	af 2e       	mov	r10, r31
    1a4e:	f1 e0       	ldi	r31, 0x01	; 1
    1a50:	bf 2e       	mov	r11, r31
    1a52:	f0 e0       	ldi	r31, 0x00	; 0
    1a54:	cf 2e       	mov	r12, r31
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	df 2e       	mov	r13, r31
    1a5a:	f0 2d       	mov	r31, r0
    1a5c:	0e 94 48 15 	call	0x2a90	; 0x2a90 <MATH_s32Map>
    1a60:	0f 90       	pop	r0
    1a62:	0f 90       	pop	r0
    1a64:	0f 90       	pop	r0
    1a66:	0f 90       	pop	r0
    1a68:	dc 01       	movw	r26, r24
    1a6a:	cb 01       	movw	r24, r22
    1a6c:	9c 8b       	std	Y+20, r25	; 0x14
    1a6e:	8b 8b       	std	Y+19, r24	; 0x13
					if(Local_u16Reading>=20&&Local_u16Reading<=40){
    1a70:	8b 89       	ldd	r24, Y+19	; 0x13
    1a72:	9c 89       	ldd	r25, Y+20	; 0x14
    1a74:	84 31       	cpi	r24, 0x14	; 20
    1a76:	91 05       	cpc	r25, r1
    1a78:	38 f2       	brcs	.-114    	; 0x1a08 <APP_voidChooseMotor+0x2a8>
    1a7a:	8b 89       	ldd	r24, Y+19	; 0x13
    1a7c:	9c 89       	ldd	r25, Y+20	; 0x14
    1a7e:	89 32       	cpi	r24, 0x29	; 41
    1a80:	91 05       	cpc	r25, r1
    1a82:	10 f6       	brcc	.-124    	; 0x1a08 <APP_voidChooseMotor+0x2a8>
						Local_u16Reading=MATH_s32Map(20,40,0,20000,Local_u16Reading);
    1a84:	8b 89       	ldd	r24, Y+19	; 0x13
    1a86:	9c 89       	ldd	r25, Y+20	; 0x14
    1a88:	cc 01       	movw	r24, r24
    1a8a:	a0 e0       	ldi	r26, 0x00	; 0
    1a8c:	b0 e0       	ldi	r27, 0x00	; 0
    1a8e:	00 d0       	rcall	.+0      	; 0x1a90 <APP_voidChooseMotor+0x330>
    1a90:	00 d0       	rcall	.+0      	; 0x1a92 <APP_voidChooseMotor+0x332>
    1a92:	ed b7       	in	r30, 0x3d	; 61
    1a94:	fe b7       	in	r31, 0x3e	; 62
    1a96:	31 96       	adiw	r30, 0x01	; 1
    1a98:	80 83       	st	Z, r24
    1a9a:	91 83       	std	Z+1, r25	; 0x01
    1a9c:	a2 83       	std	Z+2, r26	; 0x02
    1a9e:	b3 83       	std	Z+3, r27	; 0x03
    1aa0:	64 e1       	ldi	r22, 0x14	; 20
    1aa2:	70 e0       	ldi	r23, 0x00	; 0
    1aa4:	80 e0       	ldi	r24, 0x00	; 0
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	28 e2       	ldi	r18, 0x28	; 40
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	40 e0       	ldi	r20, 0x00	; 0
    1aae:	50 e0       	ldi	r21, 0x00	; 0
    1ab0:	ee 24       	eor	r14, r14
    1ab2:	ff 24       	eor	r15, r15
    1ab4:	87 01       	movw	r16, r14
    1ab6:	0f 2e       	mov	r0, r31
    1ab8:	f0 e2       	ldi	r31, 0x20	; 32
    1aba:	af 2e       	mov	r10, r31
    1abc:	fe e4       	ldi	r31, 0x4E	; 78
    1abe:	bf 2e       	mov	r11, r31
    1ac0:	f0 e0       	ldi	r31, 0x00	; 0
    1ac2:	cf 2e       	mov	r12, r31
    1ac4:	f0 e0       	ldi	r31, 0x00	; 0
    1ac6:	df 2e       	mov	r13, r31
    1ac8:	f0 2d       	mov	r31, r0
    1aca:	0e 94 48 15 	call	0x2a90	; 0x2a90 <MATH_s32Map>
    1ace:	0f 90       	pop	r0
    1ad0:	0f 90       	pop	r0
    1ad2:	0f 90       	pop	r0
    1ad4:	0f 90       	pop	r0
    1ad6:	dc 01       	movw	r26, r24
    1ad8:	cb 01       	movw	r24, r22
    1ada:	9c 8b       	std	Y+20, r25	; 0x14
    1adc:	8b 8b       	std	Y+19, r24	; 0x13
						TIMER1B_voidSetCompMatchValue(Local_u16Reading);
    1ade:	8b 89       	ldd	r24, Y+19	; 0x13
    1ae0:	9c 89       	ldd	r25, Y+20	; 0x14
    1ae2:	0e 94 c9 1b 	call	0x3792	; 0x3792 <TIMER1B_voidSetCompMatchValue>
    1ae6:	90 cf       	rjmp	.-224    	; 0x1a08 <APP_voidChooseMotor+0x2a8>
				}

			}
		}
	}
	else if(Local_u8PressedKey==STPR){
    1ae8:	8a 89       	ldd	r24, Y+18	; 0x12
    1aea:	82 30       	cpi	r24, 0x02	; 2
    1aec:	b9 f5       	brne	.+110    	; 0x1b5c <APP_voidChooseMotor+0x3fc>
		APP_voidShowRotateMenu();
    1aee:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <APP_voidShowRotateMenu>
		APP_voidReadKey(&Local_u8PressedKey);
    1af2:	ce 01       	movw	r24, r28
    1af4:	42 96       	adiw	r24, 0x12	; 18
    1af6:	0e 94 9a 0b 	call	0x1734	; 0x1734 <APP_voidReadKey>
		if(Local_u8PressedKey==CW){
    1afa:	8a 89       	ldd	r24, Y+18	; 0x12
    1afc:	81 30       	cpi	r24, 0x01	; 1
    1afe:	a9 f4       	brne	.+42     	; 0x1b2a <APP_voidChooseMotor+0x3ca>
			CLCD_voidCLR();
    1b00:	0e 94 f7 11 	call	0x23ee	; 0x23ee <CLCD_voidCLR>
			CLCD_voidSendString("Angle:");
    1b04:	86 e1       	ldi	r24, 0x16	; 22
    1b06:	91 e0       	ldi	r25, 0x01	; 1
    1b08:	0e 94 53 10 	call	0x20a6	; 0x20a6 <CLCD_voidSendString>
			Local_u16StepperAngle=APP_u16GetAngle();
    1b0c:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <APP_u16GetAngle>
    1b10:	98 8b       	std	Y+16, r25	; 0x10
    1b12:	8f 87       	std	Y+15, r24	; 0x0f
			STPR_voidRotateAngle(STPR_CLOCKWISE,Local_u16StepperAngle);
    1b14:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b16:	98 89       	ldd	r25, Y+16	; 0x10
    1b18:	9c 01       	movw	r18, r24
    1b1a:	40 e0       	ldi	r20, 0x00	; 0
    1b1c:	50 e0       	ldi	r21, 0x00	; 0
    1b1e:	80 e0       	ldi	r24, 0x00	; 0
    1b20:	ba 01       	movw	r22, r20
    1b22:	a9 01       	movw	r20, r18
    1b24:	0e 94 3b 1a 	call	0x3476	; 0x3476 <STPR_voidRotateAngle>
    1b28:	ee c0       	rjmp	.+476    	; 0x1d06 <APP_voidChooseMotor+0x5a6>
		}
		else if(Local_u8PressedKey==CCW){
    1b2a:	8a 89       	ldd	r24, Y+18	; 0x12
    1b2c:	82 30       	cpi	r24, 0x02	; 2
    1b2e:	09 f0       	breq	.+2      	; 0x1b32 <APP_voidChooseMotor+0x3d2>
    1b30:	ea c0       	rjmp	.+468    	; 0x1d06 <APP_voidChooseMotor+0x5a6>
			CLCD_voidCLR();
    1b32:	0e 94 f7 11 	call	0x23ee	; 0x23ee <CLCD_voidCLR>
			CLCD_voidSendString("Angle:");
    1b36:	86 e1       	ldi	r24, 0x16	; 22
    1b38:	91 e0       	ldi	r25, 0x01	; 1
    1b3a:	0e 94 53 10 	call	0x20a6	; 0x20a6 <CLCD_voidSendString>
			Local_u16StepperAngle=APP_u16GetAngle();
    1b3e:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <APP_u16GetAngle>
    1b42:	98 8b       	std	Y+16, r25	; 0x10
    1b44:	8f 87       	std	Y+15, r24	; 0x0f
			STPR_voidRotateAngle(STPR_COUNTER_CLOCKWISE,Local_u16StepperAngle);
    1b46:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b48:	98 89       	ldd	r25, Y+16	; 0x10
    1b4a:	9c 01       	movw	r18, r24
    1b4c:	40 e0       	ldi	r20, 0x00	; 0
    1b4e:	50 e0       	ldi	r21, 0x00	; 0
    1b50:	81 e0       	ldi	r24, 0x01	; 1
    1b52:	ba 01       	movw	r22, r20
    1b54:	a9 01       	movw	r20, r18
    1b56:	0e 94 3b 1a 	call	0x3476	; 0x3476 <STPR_voidRotateAngle>
    1b5a:	d5 c0       	rjmp	.+426    	; 0x1d06 <APP_voidChooseMotor+0x5a6>
		}
	}
	else if(Local_u8PressedKey==SERVO){
    1b5c:	8a 89       	ldd	r24, Y+18	; 0x12
    1b5e:	83 30       	cpi	r24, 0x03	; 3
    1b60:	09 f0       	breq	.+2      	; 0x1b64 <APP_voidChooseMotor+0x404>
    1b62:	52 c0       	rjmp	.+164    	; 0x1c08 <APP_voidChooseMotor+0x4a8>
		CLCD_voidCLR();
    1b64:	0e 94 f7 11 	call	0x23ee	; 0x23ee <CLCD_voidCLR>
		CLCD_voidSendString("Angle:");
    1b68:	86 e1       	ldi	r24, 0x16	; 22
    1b6a:	91 e0       	ldi	r25, 0x01	; 1
    1b6c:	0e 94 53 10 	call	0x20a6	; 0x20a6 <CLCD_voidSendString>
		CLCD_voidGoToXY(1,0);
    1b70:	81 e0       	ldi	r24, 0x01	; 1
    1b72:	60 e0       	ldi	r22, 0x00	; 0
    1b74:	0e 94 fd 10 	call	0x21fa	; 0x21fa <CLCD_voidGoToXY>
		CLCD_voidSendString("(0->180)");
    1b78:	8d e1       	ldi	r24, 0x1D	; 29
    1b7a:	91 e0       	ldi	r25, 0x01	; 1
    1b7c:	0e 94 53 10 	call	0x20a6	; 0x20a6 <CLCD_voidSendString>
		CLCD_voidGoToXY(0,6);
    1b80:	80 e0       	ldi	r24, 0x00	; 0
    1b82:	66 e0       	ldi	r22, 0x06	; 6
    1b84:	0e 94 fd 10 	call	0x21fa	; 0x21fa <CLCD_voidGoToXY>
		Local_u8ServoAngle=APP_u16GetAngle();
    1b88:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <APP_u16GetAngle>
    1b8c:	89 8b       	std	Y+17, r24	; 0x11
		TIMER1_voidSetTopValue(20000);
    1b8e:	80 e2       	ldi	r24, 0x20	; 32
    1b90:	9e e4       	ldi	r25, 0x4E	; 78
    1b92:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <TIMER1_voidSetTopValue>
		Local_u16Reading=MATH_s32Map(0,180,400,2500,Local_u8ServoAngle);
    1b96:	89 89       	ldd	r24, Y+17	; 0x11
    1b98:	88 2f       	mov	r24, r24
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	a0 e0       	ldi	r26, 0x00	; 0
    1b9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ba0:	00 d0       	rcall	.+0      	; 0x1ba2 <APP_voidChooseMotor+0x442>
    1ba2:	00 d0       	rcall	.+0      	; 0x1ba4 <APP_voidChooseMotor+0x444>
    1ba4:	ed b7       	in	r30, 0x3d	; 61
    1ba6:	fe b7       	in	r31, 0x3e	; 62
    1ba8:	31 96       	adiw	r30, 0x01	; 1
    1baa:	80 83       	st	Z, r24
    1bac:	91 83       	std	Z+1, r25	; 0x01
    1bae:	a2 83       	std	Z+2, r26	; 0x02
    1bb0:	b3 83       	std	Z+3, r27	; 0x03
    1bb2:	60 e0       	ldi	r22, 0x00	; 0
    1bb4:	70 e0       	ldi	r23, 0x00	; 0
    1bb6:	80 e0       	ldi	r24, 0x00	; 0
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	24 eb       	ldi	r18, 0xB4	; 180
    1bbc:	30 e0       	ldi	r19, 0x00	; 0
    1bbe:	40 e0       	ldi	r20, 0x00	; 0
    1bc0:	50 e0       	ldi	r21, 0x00	; 0
    1bc2:	0f 2e       	mov	r0, r31
    1bc4:	f0 e9       	ldi	r31, 0x90	; 144
    1bc6:	ef 2e       	mov	r14, r31
    1bc8:	f1 e0       	ldi	r31, 0x01	; 1
    1bca:	ff 2e       	mov	r15, r31
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	0f 2f       	mov	r16, r31
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	1f 2f       	mov	r17, r31
    1bd4:	f0 2d       	mov	r31, r0
    1bd6:	0f 2e       	mov	r0, r31
    1bd8:	f4 ec       	ldi	r31, 0xC4	; 196
    1bda:	af 2e       	mov	r10, r31
    1bdc:	f9 e0       	ldi	r31, 0x09	; 9
    1bde:	bf 2e       	mov	r11, r31
    1be0:	f0 e0       	ldi	r31, 0x00	; 0
    1be2:	cf 2e       	mov	r12, r31
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
    1be6:	df 2e       	mov	r13, r31
    1be8:	f0 2d       	mov	r31, r0
    1bea:	0e 94 48 15 	call	0x2a90	; 0x2a90 <MATH_s32Map>
    1bee:	0f 90       	pop	r0
    1bf0:	0f 90       	pop	r0
    1bf2:	0f 90       	pop	r0
    1bf4:	0f 90       	pop	r0
    1bf6:	dc 01       	movw	r26, r24
    1bf8:	cb 01       	movw	r24, r22
    1bfa:	9c 8b       	std	Y+20, r25	; 0x14
    1bfc:	8b 8b       	std	Y+19, r24	; 0x13
		TIMER1A_voidSetCompMatchValue(Local_u16Reading);
    1bfe:	8b 89       	ldd	r24, Y+19	; 0x13
    1c00:	9c 89       	ldd	r25, Y+20	; 0x14
    1c02:	0e 94 b7 1b 	call	0x376e	; 0x376e <TIMER1A_voidSetCompMatchValue>
    1c06:	7f c0       	rjmp	.+254    	; 0x1d06 <APP_voidChooseMotor+0x5a6>
	}
	else if(Local_u8PressedKey==EXIT){
    1c08:	8a 89       	ldd	r24, Y+18	; 0x12
    1c0a:	84 30       	cpi	r24, 0x04	; 4
    1c0c:	09 f0       	breq	.+2      	; 0x1c10 <APP_voidChooseMotor+0x4b0>
    1c0e:	7b c0       	rjmp	.+246    	; 0x1d06 <APP_voidChooseMotor+0x5a6>
		CLCD_voidCLR();
    1c10:	0e 94 f7 11 	call	0x23ee	; 0x23ee <CLCD_voidCLR>
		CLCD_voidSendString("Thank You!");
    1c14:	86 e2       	ldi	r24, 0x26	; 38
    1c16:	91 e0       	ldi	r25, 0x01	; 1
    1c18:	0e 94 53 10 	call	0x20a6	; 0x20a6 <CLCD_voidSendString>
    1c1c:	80 e0       	ldi	r24, 0x00	; 0
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	aa e7       	ldi	r26, 0x7A	; 122
    1c22:	b4 e4       	ldi	r27, 0x44	; 68
    1c24:	8b 87       	std	Y+11, r24	; 0x0b
    1c26:	9c 87       	std	Y+12, r25	; 0x0c
    1c28:	ad 87       	std	Y+13, r26	; 0x0d
    1c2a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c30:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c32:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c34:	20 e0       	ldi	r18, 0x00	; 0
    1c36:	30 e0       	ldi	r19, 0x00	; 0
    1c38:	4a ef       	ldi	r20, 0xFA	; 250
    1c3a:	54 e4       	ldi	r21, 0x44	; 68
    1c3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c40:	dc 01       	movw	r26, r24
    1c42:	cb 01       	movw	r24, r22
    1c44:	8f 83       	std	Y+7, r24	; 0x07
    1c46:	98 87       	std	Y+8, r25	; 0x08
    1c48:	a9 87       	std	Y+9, r26	; 0x09
    1c4a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c4c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c4e:	78 85       	ldd	r23, Y+8	; 0x08
    1c50:	89 85       	ldd	r24, Y+9	; 0x09
    1c52:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c54:	20 e0       	ldi	r18, 0x00	; 0
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	40 e8       	ldi	r20, 0x80	; 128
    1c5a:	5f e3       	ldi	r21, 0x3F	; 63
    1c5c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c60:	88 23       	and	r24, r24
    1c62:	2c f4       	brge	.+10     	; 0x1c6e <APP_voidChooseMotor+0x50e>
		__ticks = 1;
    1c64:	81 e0       	ldi	r24, 0x01	; 1
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	9e 83       	std	Y+6, r25	; 0x06
    1c6a:	8d 83       	std	Y+5, r24	; 0x05
    1c6c:	3f c0       	rjmp	.+126    	; 0x1cec <APP_voidChooseMotor+0x58c>
	else if (__tmp > 65535)
    1c6e:	6f 81       	ldd	r22, Y+7	; 0x07
    1c70:	78 85       	ldd	r23, Y+8	; 0x08
    1c72:	89 85       	ldd	r24, Y+9	; 0x09
    1c74:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c76:	20 e0       	ldi	r18, 0x00	; 0
    1c78:	3f ef       	ldi	r19, 0xFF	; 255
    1c7a:	4f e7       	ldi	r20, 0x7F	; 127
    1c7c:	57 e4       	ldi	r21, 0x47	; 71
    1c7e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c82:	18 16       	cp	r1, r24
    1c84:	4c f5       	brge	.+82     	; 0x1cd8 <APP_voidChooseMotor+0x578>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c86:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c88:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c8e:	20 e0       	ldi	r18, 0x00	; 0
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	40 e2       	ldi	r20, 0x20	; 32
    1c94:	51 e4       	ldi	r21, 0x41	; 65
    1c96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c9a:	dc 01       	movw	r26, r24
    1c9c:	cb 01       	movw	r24, r22
    1c9e:	bc 01       	movw	r22, r24
    1ca0:	cd 01       	movw	r24, r26
    1ca2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ca6:	dc 01       	movw	r26, r24
    1ca8:	cb 01       	movw	r24, r22
    1caa:	9e 83       	std	Y+6, r25	; 0x06
    1cac:	8d 83       	std	Y+5, r24	; 0x05
    1cae:	0f c0       	rjmp	.+30     	; 0x1cce <APP_voidChooseMotor+0x56e>
    1cb0:	88 ec       	ldi	r24, 0xC8	; 200
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	9c 83       	std	Y+4, r25	; 0x04
    1cb6:	8b 83       	std	Y+3, r24	; 0x03
    1cb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cba:	9c 81       	ldd	r25, Y+4	; 0x04
    1cbc:	01 97       	sbiw	r24, 0x01	; 1
    1cbe:	f1 f7       	brne	.-4      	; 0x1cbc <APP_voidChooseMotor+0x55c>
    1cc0:	9c 83       	std	Y+4, r25	; 0x04
    1cc2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cc4:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc6:	9e 81       	ldd	r25, Y+6	; 0x06
    1cc8:	01 97       	sbiw	r24, 0x01	; 1
    1cca:	9e 83       	std	Y+6, r25	; 0x06
    1ccc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cce:	8d 81       	ldd	r24, Y+5	; 0x05
    1cd0:	9e 81       	ldd	r25, Y+6	; 0x06
    1cd2:	00 97       	sbiw	r24, 0x00	; 0
    1cd4:	69 f7       	brne	.-38     	; 0x1cb0 <APP_voidChooseMotor+0x550>
    1cd6:	14 c0       	rjmp	.+40     	; 0x1d00 <APP_voidChooseMotor+0x5a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cd8:	6f 81       	ldd	r22, Y+7	; 0x07
    1cda:	78 85       	ldd	r23, Y+8	; 0x08
    1cdc:	89 85       	ldd	r24, Y+9	; 0x09
    1cde:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ce0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce4:	dc 01       	movw	r26, r24
    1ce6:	cb 01       	movw	r24, r22
    1ce8:	9e 83       	std	Y+6, r25	; 0x06
    1cea:	8d 83       	std	Y+5, r24	; 0x05
    1cec:	8d 81       	ldd	r24, Y+5	; 0x05
    1cee:	9e 81       	ldd	r25, Y+6	; 0x06
    1cf0:	9a 83       	std	Y+2, r25	; 0x02
    1cf2:	89 83       	std	Y+1, r24	; 0x01
    1cf4:	89 81       	ldd	r24, Y+1	; 0x01
    1cf6:	9a 81       	ldd	r25, Y+2	; 0x02
    1cf8:	01 97       	sbiw	r24, 0x01	; 1
    1cfa:	f1 f7       	brne	.-4      	; 0x1cf8 <APP_voidChooseMotor+0x598>
    1cfc:	9a 83       	std	Y+2, r25	; 0x02
    1cfe:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		CLCD_voidCLR();
    1d00:	0e 94 f7 11 	call	0x23ee	; 0x23ee <CLCD_voidCLR>
    1d04:	ff cf       	rjmp	.-2      	; 0x1d04 <APP_voidChooseMotor+0x5a4>
		while(1);
	}
}
    1d06:	64 96       	adiw	r28, 0x14	; 20
    1d08:	0f b6       	in	r0, 0x3f	; 63
    1d0a:	f8 94       	cli
    1d0c:	de bf       	out	0x3e, r29	; 62
    1d0e:	0f be       	out	0x3f, r0	; 63
    1d10:	cd bf       	out	0x3d, r28	; 61
    1d12:	cf 91       	pop	r28
    1d14:	df 91       	pop	r29
    1d16:	1f 91       	pop	r17
    1d18:	0f 91       	pop	r16
    1d1a:	ff 90       	pop	r15
    1d1c:	ef 90       	pop	r14
    1d1e:	df 90       	pop	r13
    1d20:	cf 90       	pop	r12
    1d22:	bf 90       	pop	r11
    1d24:	af 90       	pop	r10
    1d26:	08 95       	ret

00001d28 <APP_u16GetAngle>:
u16 APP_u16GetAngle(){
    1d28:	ef 92       	push	r14
    1d2a:	ff 92       	push	r15
    1d2c:	0f 93       	push	r16
    1d2e:	1f 93       	push	r17
    1d30:	df 93       	push	r29
    1d32:	cf 93       	push	r28
    1d34:	cd b7       	in	r28, 0x3d	; 61
    1d36:	de b7       	in	r29, 0x3e	; 62
    1d38:	69 97       	sbiw	r28, 0x19	; 25
    1d3a:	0f b6       	in	r0, 0x3f	; 63
    1d3c:	f8 94       	cli
    1d3e:	de bf       	out	0x3e, r29	; 62
    1d40:	0f be       	out	0x3f, r0	; 63
    1d42:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8AngleArr[20],Local_u8Iterator,Local_u8DigitNum=0,Local_u8PressedKey;
    1d44:	1b 82       	std	Y+3, r1	; 0x03
	u16 Local_u16Angle=0;
    1d46:	1a 82       	std	Y+2, r1	; 0x02
    1d48:	19 82       	std	Y+1, r1	; 0x01
	while(1){
		APP_voidReadKey(&Local_u8PressedKey);
    1d4a:	ce 01       	movw	r24, r28
    1d4c:	49 96       	adiw	r24, 0x19	; 25
    1d4e:	0e 94 9a 0b 	call	0x1734	; 0x1734 <APP_voidReadKey>
		if(Local_u8PressedKey=='x'){
    1d52:	89 8d       	ldd	r24, Y+25	; 0x19
    1d54:	88 37       	cpi	r24, 0x78	; 120
    1d56:	61 f4       	brne	.+24     	; 0x1d70 <APP_u16GetAngle+0x48>
			Local_u8AngleArr[Local_u8DigitNum]=Local_u8PressedKey;
    1d58:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5a:	28 2f       	mov	r18, r24
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	49 8d       	ldd	r20, Y+25	; 0x19
    1d60:	ce 01       	movw	r24, r28
    1d62:	05 96       	adiw	r24, 0x05	; 5
    1d64:	fc 01       	movw	r30, r24
    1d66:	e2 0f       	add	r30, r18
    1d68:	f3 1f       	adc	r31, r19
    1d6a:	40 83       	st	Z, r20
		}
		CLCD_voidSendNumber(Local_u8PressedKey);
		Local_u8AngleArr[Local_u8DigitNum++]=Local_u8PressedKey;
	}

	for(Local_u8Iterator=0;Local_u8Iterator<Local_u8DigitNum;Local_u8Iterator++){
    1d6c:	1c 82       	std	Y+4, r1	; 0x04
    1d6e:	4c c0       	rjmp	.+152    	; 0x1e08 <APP_u16GetAngle+0xe0>
		APP_voidReadKey(&Local_u8PressedKey);
		if(Local_u8PressedKey=='x'){
			Local_u8AngleArr[Local_u8DigitNum]=Local_u8PressedKey;
			break;
		}
		CLCD_voidSendNumber(Local_u8PressedKey);
    1d70:	89 8d       	ldd	r24, Y+25	; 0x19
    1d72:	88 2f       	mov	r24, r24
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	a0 e0       	ldi	r26, 0x00	; 0
    1d78:	b0 e0       	ldi	r27, 0x00	; 0
    1d7a:	bc 01       	movw	r22, r24
    1d7c:	cd 01       	movw	r24, r26
    1d7e:	0e 94 68 11 	call	0x22d0	; 0x22d0 <CLCD_voidSendNumber>
		Local_u8AngleArr[Local_u8DigitNum++]=Local_u8PressedKey;
    1d82:	8b 81       	ldd	r24, Y+3	; 0x03
    1d84:	28 2f       	mov	r18, r24
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	49 8d       	ldd	r20, Y+25	; 0x19
    1d8a:	ce 01       	movw	r24, r28
    1d8c:	05 96       	adiw	r24, 0x05	; 5
    1d8e:	fc 01       	movw	r30, r24
    1d90:	e2 0f       	add	r30, r18
    1d92:	f3 1f       	adc	r31, r19
    1d94:	40 83       	st	Z, r20
    1d96:	8b 81       	ldd	r24, Y+3	; 0x03
    1d98:	8f 5f       	subi	r24, 0xFF	; 255
    1d9a:	8b 83       	std	Y+3, r24	; 0x03
    1d9c:	d6 cf       	rjmp	.-84     	; 0x1d4a <APP_u16GetAngle+0x22>
	}

	for(Local_u8Iterator=0;Local_u8Iterator<Local_u8DigitNum;Local_u8Iterator++){
		Local_u16Angle+=Local_u8AngleArr[Local_u8Iterator]*(MATH_u32Power(10,Local_u8DigitNum-Local_u8Iterator-1));
    1d9e:	8c 81       	ldd	r24, Y+4	; 0x04
    1da0:	28 2f       	mov	r18, r24
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	ce 01       	movw	r24, r28
    1da6:	05 96       	adiw	r24, 0x05	; 5
    1da8:	fc 01       	movw	r30, r24
    1daa:	e2 0f       	add	r30, r18
    1dac:	f3 1f       	adc	r31, r19
    1dae:	80 81       	ld	r24, Z
    1db0:	e8 2e       	mov	r14, r24
    1db2:	ff 24       	eor	r15, r15
    1db4:	00 e0       	ldi	r16, 0x00	; 0
    1db6:	10 e0       	ldi	r17, 0x00	; 0
    1db8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dba:	28 2f       	mov	r18, r24
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	8c 81       	ldd	r24, Y+4	; 0x04
    1dc0:	88 2f       	mov	r24, r24
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	a9 01       	movw	r20, r18
    1dc6:	48 1b       	sub	r20, r24
    1dc8:	59 0b       	sbc	r21, r25
    1dca:	ca 01       	movw	r24, r20
    1dcc:	01 97       	sbiw	r24, 0x01	; 1
    1dce:	9c 01       	movw	r18, r24
    1dd0:	44 27       	eor	r20, r20
    1dd2:	37 fd       	sbrc	r19, 7
    1dd4:	40 95       	com	r20
    1dd6:	54 2f       	mov	r21, r20
    1dd8:	6a e0       	ldi	r22, 0x0A	; 10
    1dda:	70 e0       	ldi	r23, 0x00	; 0
    1ddc:	80 e0       	ldi	r24, 0x00	; 0
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <MATH_u32Power>
    1de4:	9b 01       	movw	r18, r22
    1de6:	ac 01       	movw	r20, r24
    1de8:	c8 01       	movw	r24, r16
    1dea:	b7 01       	movw	r22, r14
    1dec:	0e 94 57 1d 	call	0x3aae	; 0x3aae <__mulsi3>
    1df0:	dc 01       	movw	r26, r24
    1df2:	cb 01       	movw	r24, r22
    1df4:	9c 01       	movw	r18, r24
    1df6:	89 81       	ldd	r24, Y+1	; 0x01
    1df8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dfa:	82 0f       	add	r24, r18
    1dfc:	93 1f       	adc	r25, r19
    1dfe:	9a 83       	std	Y+2, r25	; 0x02
    1e00:	89 83       	std	Y+1, r24	; 0x01
		}
		CLCD_voidSendNumber(Local_u8PressedKey);
		Local_u8AngleArr[Local_u8DigitNum++]=Local_u8PressedKey;
	}

	for(Local_u8Iterator=0;Local_u8Iterator<Local_u8DigitNum;Local_u8Iterator++){
    1e02:	8c 81       	ldd	r24, Y+4	; 0x04
    1e04:	8f 5f       	subi	r24, 0xFF	; 255
    1e06:	8c 83       	std	Y+4, r24	; 0x04
    1e08:	9c 81       	ldd	r25, Y+4	; 0x04
    1e0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0c:	98 17       	cp	r25, r24
    1e0e:	38 f2       	brcs	.-114    	; 0x1d9e <APP_u16GetAngle+0x76>
		Local_u16Angle+=Local_u8AngleArr[Local_u8Iterator]*(MATH_u32Power(10,Local_u8DigitNum-Local_u8Iterator-1));
	}
	return Local_u16Angle;
    1e10:	89 81       	ldd	r24, Y+1	; 0x01
    1e12:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1e14:	69 96       	adiw	r28, 0x19	; 25
    1e16:	0f b6       	in	r0, 0x3f	; 63
    1e18:	f8 94       	cli
    1e1a:	de bf       	out	0x3e, r29	; 62
    1e1c:	0f be       	out	0x3f, r0	; 63
    1e1e:	cd bf       	out	0x3d, r28	; 61
    1e20:	cf 91       	pop	r28
    1e22:	df 91       	pop	r29
    1e24:	1f 91       	pop	r17
    1e26:	0f 91       	pop	r16
    1e28:	ff 90       	pop	r15
    1e2a:	ef 90       	pop	r14
    1e2c:	08 95       	ret

00001e2e <CLCD_voidSendCommand>:
#include "CLCD_private.h"
#include "CLCD_config.h"



void CLCD_voidSendCommand(u8 Copy_u8Command){
    1e2e:	df 93       	push	r29
    1e30:	cf 93       	push	r28
    1e32:	cd b7       	in	r28, 0x3d	; 61
    1e34:	de b7       	in	r29, 0x3e	; 62
    1e36:	2f 97       	sbiw	r28, 0x0f	; 15
    1e38:	0f b6       	in	r0, 0x3f	; 63
    1e3a:	f8 94       	cli
    1e3c:	de bf       	out	0x3e, r29	; 62
    1e3e:	0f be       	out	0x3f, r0	; 63
    1e40:	cd bf       	out	0x3d, r28	; 61
    1e42:	8f 87       	std	Y+15, r24	; 0x0f
	/*set RS pin to low for command*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
    1e44:	80 e0       	ldi	r24, 0x00	; 0
    1e46:	67 e0       	ldi	r22, 0x07	; 7
    1e48:	40 e0       	ldi	r20, 0x00	; 0
    1e4a:	0e 94 34 12 	call	0x2468	; 0x2468 <DIO_u8SetPinValue>
	/*set RW pin to low for write*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
    1e4e:	80 e0       	ldi	r24, 0x00	; 0
    1e50:	66 e0       	ldi	r22, 0x06	; 6
    1e52:	40 e0       	ldi	r20, 0x00	; 0
    1e54:	0e 94 34 12 	call	0x2468	; 0x2468 <DIO_u8SetPinValue>
	/*set data port to command*/
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Command);
    1e58:	82 e0       	ldi	r24, 0x02	; 2
    1e5a:	6f 85       	ldd	r22, Y+15	; 0x0f
    1e5c:	0e 94 46 13 	call	0x268c	; 0x268c <DIO_u8SetPortValue>
	/*send enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    1e60:	80 e0       	ldi	r24, 0x00	; 0
    1e62:	65 e0       	ldi	r22, 0x05	; 5
    1e64:	41 e0       	ldi	r20, 0x01	; 1
    1e66:	0e 94 34 12 	call	0x2468	; 0x2468 <DIO_u8SetPinValue>
    1e6a:	80 e0       	ldi	r24, 0x00	; 0
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	a0 e0       	ldi	r26, 0x00	; 0
    1e70:	b0 e4       	ldi	r27, 0x40	; 64
    1e72:	8b 87       	std	Y+11, r24	; 0x0b
    1e74:	9c 87       	std	Y+12, r25	; 0x0c
    1e76:	ad 87       	std	Y+13, r26	; 0x0d
    1e78:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e80:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e82:	20 e0       	ldi	r18, 0x00	; 0
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	4a ef       	ldi	r20, 0xFA	; 250
    1e88:	54 e4       	ldi	r21, 0x44	; 68
    1e8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e8e:	dc 01       	movw	r26, r24
    1e90:	cb 01       	movw	r24, r22
    1e92:	8f 83       	std	Y+7, r24	; 0x07
    1e94:	98 87       	std	Y+8, r25	; 0x08
    1e96:	a9 87       	std	Y+9, r26	; 0x09
    1e98:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e9a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e9c:	78 85       	ldd	r23, Y+8	; 0x08
    1e9e:	89 85       	ldd	r24, Y+9	; 0x09
    1ea0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ea2:	20 e0       	ldi	r18, 0x00	; 0
    1ea4:	30 e0       	ldi	r19, 0x00	; 0
    1ea6:	40 e8       	ldi	r20, 0x80	; 128
    1ea8:	5f e3       	ldi	r21, 0x3F	; 63
    1eaa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1eae:	88 23       	and	r24, r24
    1eb0:	2c f4       	brge	.+10     	; 0x1ebc <CLCD_voidSendCommand+0x8e>
		__ticks = 1;
    1eb2:	81 e0       	ldi	r24, 0x01	; 1
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	9e 83       	std	Y+6, r25	; 0x06
    1eb8:	8d 83       	std	Y+5, r24	; 0x05
    1eba:	3f c0       	rjmp	.+126    	; 0x1f3a <CLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    1ebc:	6f 81       	ldd	r22, Y+7	; 0x07
    1ebe:	78 85       	ldd	r23, Y+8	; 0x08
    1ec0:	89 85       	ldd	r24, Y+9	; 0x09
    1ec2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ec4:	20 e0       	ldi	r18, 0x00	; 0
    1ec6:	3f ef       	ldi	r19, 0xFF	; 255
    1ec8:	4f e7       	ldi	r20, 0x7F	; 127
    1eca:	57 e4       	ldi	r21, 0x47	; 71
    1ecc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ed0:	18 16       	cp	r1, r24
    1ed2:	4c f5       	brge	.+82     	; 0x1f26 <CLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ed4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ed6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ed8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eda:	9e 85       	ldd	r25, Y+14	; 0x0e
    1edc:	20 e0       	ldi	r18, 0x00	; 0
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	40 e2       	ldi	r20, 0x20	; 32
    1ee2:	51 e4       	ldi	r21, 0x41	; 65
    1ee4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee8:	dc 01       	movw	r26, r24
    1eea:	cb 01       	movw	r24, r22
    1eec:	bc 01       	movw	r22, r24
    1eee:	cd 01       	movw	r24, r26
    1ef0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ef4:	dc 01       	movw	r26, r24
    1ef6:	cb 01       	movw	r24, r22
    1ef8:	9e 83       	std	Y+6, r25	; 0x06
    1efa:	8d 83       	std	Y+5, r24	; 0x05
    1efc:	0f c0       	rjmp	.+30     	; 0x1f1c <CLCD_voidSendCommand+0xee>
    1efe:	88 ec       	ldi	r24, 0xC8	; 200
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	9c 83       	std	Y+4, r25	; 0x04
    1f04:	8b 83       	std	Y+3, r24	; 0x03
    1f06:	8b 81       	ldd	r24, Y+3	; 0x03
    1f08:	9c 81       	ldd	r25, Y+4	; 0x04
    1f0a:	01 97       	sbiw	r24, 0x01	; 1
    1f0c:	f1 f7       	brne	.-4      	; 0x1f0a <CLCD_voidSendCommand+0xdc>
    1f0e:	9c 83       	std	Y+4, r25	; 0x04
    1f10:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f12:	8d 81       	ldd	r24, Y+5	; 0x05
    1f14:	9e 81       	ldd	r25, Y+6	; 0x06
    1f16:	01 97       	sbiw	r24, 0x01	; 1
    1f18:	9e 83       	std	Y+6, r25	; 0x06
    1f1a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f1e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f20:	00 97       	sbiw	r24, 0x00	; 0
    1f22:	69 f7       	brne	.-38     	; 0x1efe <CLCD_voidSendCommand+0xd0>
    1f24:	14 c0       	rjmp	.+40     	; 0x1f4e <CLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f26:	6f 81       	ldd	r22, Y+7	; 0x07
    1f28:	78 85       	ldd	r23, Y+8	; 0x08
    1f2a:	89 85       	ldd	r24, Y+9	; 0x09
    1f2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f32:	dc 01       	movw	r26, r24
    1f34:	cb 01       	movw	r24, r22
    1f36:	9e 83       	std	Y+6, r25	; 0x06
    1f38:	8d 83       	std	Y+5, r24	; 0x05
    1f3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f3c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f3e:	9a 83       	std	Y+2, r25	; 0x02
    1f40:	89 83       	std	Y+1, r24	; 0x01
    1f42:	89 81       	ldd	r24, Y+1	; 0x01
    1f44:	9a 81       	ldd	r25, Y+2	; 0x02
    1f46:	01 97       	sbiw	r24, 0x01	; 1
    1f48:	f1 f7       	brne	.-4      	; 0x1f46 <CLCD_voidSendCommand+0x118>
    1f4a:	9a 83       	std	Y+2, r25	; 0x02
    1f4c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    1f4e:	80 e0       	ldi	r24, 0x00	; 0
    1f50:	65 e0       	ldi	r22, 0x05	; 5
    1f52:	40 e0       	ldi	r20, 0x00	; 0
    1f54:	0e 94 34 12 	call	0x2468	; 0x2468 <DIO_u8SetPinValue>
}
    1f58:	2f 96       	adiw	r28, 0x0f	; 15
    1f5a:	0f b6       	in	r0, 0x3f	; 63
    1f5c:	f8 94       	cli
    1f5e:	de bf       	out	0x3e, r29	; 62
    1f60:	0f be       	out	0x3f, r0	; 63
    1f62:	cd bf       	out	0x3d, r28	; 61
    1f64:	cf 91       	pop	r28
    1f66:	df 91       	pop	r29
    1f68:	08 95       	ret

00001f6a <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data){
    1f6a:	df 93       	push	r29
    1f6c:	cf 93       	push	r28
    1f6e:	cd b7       	in	r28, 0x3d	; 61
    1f70:	de b7       	in	r29, 0x3e	; 62
    1f72:	2f 97       	sbiw	r28, 0x0f	; 15
    1f74:	0f b6       	in	r0, 0x3f	; 63
    1f76:	f8 94       	cli
    1f78:	de bf       	out	0x3e, r29	; 62
    1f7a:	0f be       	out	0x3f, r0	; 63
    1f7c:	cd bf       	out	0x3d, r28	; 61
    1f7e:	8f 87       	std	Y+15, r24	; 0x0f
	/*set RS pin to high for data*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
    1f80:	80 e0       	ldi	r24, 0x00	; 0
    1f82:	67 e0       	ldi	r22, 0x07	; 7
    1f84:	41 e0       	ldi	r20, 0x01	; 1
    1f86:	0e 94 34 12 	call	0x2468	; 0x2468 <DIO_u8SetPinValue>
	/*set RW pin to low for write*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
    1f8a:	80 e0       	ldi	r24, 0x00	; 0
    1f8c:	66 e0       	ldi	r22, 0x06	; 6
    1f8e:	40 e0       	ldi	r20, 0x00	; 0
    1f90:	0e 94 34 12 	call	0x2468	; 0x2468 <DIO_u8SetPinValue>
	/*set data port to data*/
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Data);
    1f94:	82 e0       	ldi	r24, 0x02	; 2
    1f96:	6f 85       	ldd	r22, Y+15	; 0x0f
    1f98:	0e 94 46 13 	call	0x268c	; 0x268c <DIO_u8SetPortValue>
	/*send enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    1f9c:	80 e0       	ldi	r24, 0x00	; 0
    1f9e:	65 e0       	ldi	r22, 0x05	; 5
    1fa0:	41 e0       	ldi	r20, 0x01	; 1
    1fa2:	0e 94 34 12 	call	0x2468	; 0x2468 <DIO_u8SetPinValue>
    1fa6:	80 e0       	ldi	r24, 0x00	; 0
    1fa8:	90 e0       	ldi	r25, 0x00	; 0
    1faa:	a0 e0       	ldi	r26, 0x00	; 0
    1fac:	b0 e4       	ldi	r27, 0x40	; 64
    1fae:	8b 87       	std	Y+11, r24	; 0x0b
    1fb0:	9c 87       	std	Y+12, r25	; 0x0c
    1fb2:	ad 87       	std	Y+13, r26	; 0x0d
    1fb4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fb6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fb8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fba:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fbc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fbe:	20 e0       	ldi	r18, 0x00	; 0
    1fc0:	30 e0       	ldi	r19, 0x00	; 0
    1fc2:	4a ef       	ldi	r20, 0xFA	; 250
    1fc4:	54 e4       	ldi	r21, 0x44	; 68
    1fc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fca:	dc 01       	movw	r26, r24
    1fcc:	cb 01       	movw	r24, r22
    1fce:	8f 83       	std	Y+7, r24	; 0x07
    1fd0:	98 87       	std	Y+8, r25	; 0x08
    1fd2:	a9 87       	std	Y+9, r26	; 0x09
    1fd4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fd6:	6f 81       	ldd	r22, Y+7	; 0x07
    1fd8:	78 85       	ldd	r23, Y+8	; 0x08
    1fda:	89 85       	ldd	r24, Y+9	; 0x09
    1fdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fde:	20 e0       	ldi	r18, 0x00	; 0
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	40 e8       	ldi	r20, 0x80	; 128
    1fe4:	5f e3       	ldi	r21, 0x3F	; 63
    1fe6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fea:	88 23       	and	r24, r24
    1fec:	2c f4       	brge	.+10     	; 0x1ff8 <CLCD_voidSendData+0x8e>
		__ticks = 1;
    1fee:	81 e0       	ldi	r24, 0x01	; 1
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	9e 83       	std	Y+6, r25	; 0x06
    1ff4:	8d 83       	std	Y+5, r24	; 0x05
    1ff6:	3f c0       	rjmp	.+126    	; 0x2076 <CLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    1ff8:	6f 81       	ldd	r22, Y+7	; 0x07
    1ffa:	78 85       	ldd	r23, Y+8	; 0x08
    1ffc:	89 85       	ldd	r24, Y+9	; 0x09
    1ffe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2000:	20 e0       	ldi	r18, 0x00	; 0
    2002:	3f ef       	ldi	r19, 0xFF	; 255
    2004:	4f e7       	ldi	r20, 0x7F	; 127
    2006:	57 e4       	ldi	r21, 0x47	; 71
    2008:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    200c:	18 16       	cp	r1, r24
    200e:	4c f5       	brge	.+82     	; 0x2062 <CLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2010:	6b 85       	ldd	r22, Y+11	; 0x0b
    2012:	7c 85       	ldd	r23, Y+12	; 0x0c
    2014:	8d 85       	ldd	r24, Y+13	; 0x0d
    2016:	9e 85       	ldd	r25, Y+14	; 0x0e
    2018:	20 e0       	ldi	r18, 0x00	; 0
    201a:	30 e0       	ldi	r19, 0x00	; 0
    201c:	40 e2       	ldi	r20, 0x20	; 32
    201e:	51 e4       	ldi	r21, 0x41	; 65
    2020:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2024:	dc 01       	movw	r26, r24
    2026:	cb 01       	movw	r24, r22
    2028:	bc 01       	movw	r22, r24
    202a:	cd 01       	movw	r24, r26
    202c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2030:	dc 01       	movw	r26, r24
    2032:	cb 01       	movw	r24, r22
    2034:	9e 83       	std	Y+6, r25	; 0x06
    2036:	8d 83       	std	Y+5, r24	; 0x05
    2038:	0f c0       	rjmp	.+30     	; 0x2058 <CLCD_voidSendData+0xee>
    203a:	88 ec       	ldi	r24, 0xC8	; 200
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	9c 83       	std	Y+4, r25	; 0x04
    2040:	8b 83       	std	Y+3, r24	; 0x03
    2042:	8b 81       	ldd	r24, Y+3	; 0x03
    2044:	9c 81       	ldd	r25, Y+4	; 0x04
    2046:	01 97       	sbiw	r24, 0x01	; 1
    2048:	f1 f7       	brne	.-4      	; 0x2046 <CLCD_voidSendData+0xdc>
    204a:	9c 83       	std	Y+4, r25	; 0x04
    204c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    204e:	8d 81       	ldd	r24, Y+5	; 0x05
    2050:	9e 81       	ldd	r25, Y+6	; 0x06
    2052:	01 97       	sbiw	r24, 0x01	; 1
    2054:	9e 83       	std	Y+6, r25	; 0x06
    2056:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2058:	8d 81       	ldd	r24, Y+5	; 0x05
    205a:	9e 81       	ldd	r25, Y+6	; 0x06
    205c:	00 97       	sbiw	r24, 0x00	; 0
    205e:	69 f7       	brne	.-38     	; 0x203a <CLCD_voidSendData+0xd0>
    2060:	14 c0       	rjmp	.+40     	; 0x208a <CLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2062:	6f 81       	ldd	r22, Y+7	; 0x07
    2064:	78 85       	ldd	r23, Y+8	; 0x08
    2066:	89 85       	ldd	r24, Y+9	; 0x09
    2068:	9a 85       	ldd	r25, Y+10	; 0x0a
    206a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    206e:	dc 01       	movw	r26, r24
    2070:	cb 01       	movw	r24, r22
    2072:	9e 83       	std	Y+6, r25	; 0x06
    2074:	8d 83       	std	Y+5, r24	; 0x05
    2076:	8d 81       	ldd	r24, Y+5	; 0x05
    2078:	9e 81       	ldd	r25, Y+6	; 0x06
    207a:	9a 83       	std	Y+2, r25	; 0x02
    207c:	89 83       	std	Y+1, r24	; 0x01
    207e:	89 81       	ldd	r24, Y+1	; 0x01
    2080:	9a 81       	ldd	r25, Y+2	; 0x02
    2082:	01 97       	sbiw	r24, 0x01	; 1
    2084:	f1 f7       	brne	.-4      	; 0x2082 <CLCD_voidSendData+0x118>
    2086:	9a 83       	std	Y+2, r25	; 0x02
    2088:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    208a:	80 e0       	ldi	r24, 0x00	; 0
    208c:	65 e0       	ldi	r22, 0x05	; 5
    208e:	40 e0       	ldi	r20, 0x00	; 0
    2090:	0e 94 34 12 	call	0x2468	; 0x2468 <DIO_u8SetPinValue>
}
    2094:	2f 96       	adiw	r28, 0x0f	; 15
    2096:	0f b6       	in	r0, 0x3f	; 63
    2098:	f8 94       	cli
    209a:	de bf       	out	0x3e, r29	; 62
    209c:	0f be       	out	0x3f, r0	; 63
    209e:	cd bf       	out	0x3d, r28	; 61
    20a0:	cf 91       	pop	r28
    20a2:	df 91       	pop	r29
    20a4:	08 95       	ret

000020a6 <CLCD_voidSendString>:
void CLCD_voidSendString(const char* Copy_pcString){
    20a6:	df 93       	push	r29
    20a8:	cf 93       	push	r28
    20aa:	00 d0       	rcall	.+0      	; 0x20ac <CLCD_voidSendString+0x6>
    20ac:	cd b7       	in	r28, 0x3d	; 61
    20ae:	de b7       	in	r29, 0x3e	; 62
    20b0:	9a 83       	std	Y+2, r25	; 0x02
    20b2:	89 83       	std	Y+1, r24	; 0x01
    20b4:	0a c0       	rjmp	.+20     	; 0x20ca <CLCD_voidSendString+0x24>
	while(*Copy_pcString != '\0'){
		CLCD_voidSendData(*Copy_pcString);
    20b6:	e9 81       	ldd	r30, Y+1	; 0x01
    20b8:	fa 81       	ldd	r31, Y+2	; 0x02
    20ba:	80 81       	ld	r24, Z
    20bc:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <CLCD_voidSendData>
		Copy_pcString++;
    20c0:	89 81       	ldd	r24, Y+1	; 0x01
    20c2:	9a 81       	ldd	r25, Y+2	; 0x02
    20c4:	01 96       	adiw	r24, 0x01	; 1
    20c6:	9a 83       	std	Y+2, r25	; 0x02
    20c8:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
}
void CLCD_voidSendString(const char* Copy_pcString){
	while(*Copy_pcString != '\0'){
    20ca:	e9 81       	ldd	r30, Y+1	; 0x01
    20cc:	fa 81       	ldd	r31, Y+2	; 0x02
    20ce:	80 81       	ld	r24, Z
    20d0:	88 23       	and	r24, r24
    20d2:	89 f7       	brne	.-30     	; 0x20b6 <CLCD_voidSendString+0x10>
		CLCD_voidSendData(*Copy_pcString);
		Copy_pcString++;
	}
}
    20d4:	0f 90       	pop	r0
    20d6:	0f 90       	pop	r0
    20d8:	cf 91       	pop	r28
    20da:	df 91       	pop	r29
    20dc:	08 95       	ret

000020de <CLCD_voidInit>:
void CLCD_voidInit(void){
    20de:	df 93       	push	r29
    20e0:	cf 93       	push	r28
    20e2:	cd b7       	in	r28, 0x3d	; 61
    20e4:	de b7       	in	r29, 0x3e	; 62
    20e6:	2e 97       	sbiw	r28, 0x0e	; 14
    20e8:	0f b6       	in	r0, 0x3f	; 63
    20ea:	f8 94       	cli
    20ec:	de bf       	out	0x3e, r29	; 62
    20ee:	0f be       	out	0x3f, r0	; 63
    20f0:	cd bf       	out	0x3d, r28	; 61
    20f2:	80 e0       	ldi	r24, 0x00	; 0
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	a0 e2       	ldi	r26, 0x20	; 32
    20f8:	b2 e4       	ldi	r27, 0x42	; 66
    20fa:	8b 87       	std	Y+11, r24	; 0x0b
    20fc:	9c 87       	std	Y+12, r25	; 0x0c
    20fe:	ad 87       	std	Y+13, r26	; 0x0d
    2100:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2102:	6b 85       	ldd	r22, Y+11	; 0x0b
    2104:	7c 85       	ldd	r23, Y+12	; 0x0c
    2106:	8d 85       	ldd	r24, Y+13	; 0x0d
    2108:	9e 85       	ldd	r25, Y+14	; 0x0e
    210a:	20 e0       	ldi	r18, 0x00	; 0
    210c:	30 e0       	ldi	r19, 0x00	; 0
    210e:	4a ef       	ldi	r20, 0xFA	; 250
    2110:	54 e4       	ldi	r21, 0x44	; 68
    2112:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2116:	dc 01       	movw	r26, r24
    2118:	cb 01       	movw	r24, r22
    211a:	8f 83       	std	Y+7, r24	; 0x07
    211c:	98 87       	std	Y+8, r25	; 0x08
    211e:	a9 87       	std	Y+9, r26	; 0x09
    2120:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2122:	6f 81       	ldd	r22, Y+7	; 0x07
    2124:	78 85       	ldd	r23, Y+8	; 0x08
    2126:	89 85       	ldd	r24, Y+9	; 0x09
    2128:	9a 85       	ldd	r25, Y+10	; 0x0a
    212a:	20 e0       	ldi	r18, 0x00	; 0
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	40 e8       	ldi	r20, 0x80	; 128
    2130:	5f e3       	ldi	r21, 0x3F	; 63
    2132:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2136:	88 23       	and	r24, r24
    2138:	2c f4       	brge	.+10     	; 0x2144 <CLCD_voidInit+0x66>
		__ticks = 1;
    213a:	81 e0       	ldi	r24, 0x01	; 1
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	9e 83       	std	Y+6, r25	; 0x06
    2140:	8d 83       	std	Y+5, r24	; 0x05
    2142:	3f c0       	rjmp	.+126    	; 0x21c2 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    2144:	6f 81       	ldd	r22, Y+7	; 0x07
    2146:	78 85       	ldd	r23, Y+8	; 0x08
    2148:	89 85       	ldd	r24, Y+9	; 0x09
    214a:	9a 85       	ldd	r25, Y+10	; 0x0a
    214c:	20 e0       	ldi	r18, 0x00	; 0
    214e:	3f ef       	ldi	r19, 0xFF	; 255
    2150:	4f e7       	ldi	r20, 0x7F	; 127
    2152:	57 e4       	ldi	r21, 0x47	; 71
    2154:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2158:	18 16       	cp	r1, r24
    215a:	4c f5       	brge	.+82     	; 0x21ae <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    215c:	6b 85       	ldd	r22, Y+11	; 0x0b
    215e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2160:	8d 85       	ldd	r24, Y+13	; 0x0d
    2162:	9e 85       	ldd	r25, Y+14	; 0x0e
    2164:	20 e0       	ldi	r18, 0x00	; 0
    2166:	30 e0       	ldi	r19, 0x00	; 0
    2168:	40 e2       	ldi	r20, 0x20	; 32
    216a:	51 e4       	ldi	r21, 0x41	; 65
    216c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2170:	dc 01       	movw	r26, r24
    2172:	cb 01       	movw	r24, r22
    2174:	bc 01       	movw	r22, r24
    2176:	cd 01       	movw	r24, r26
    2178:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    217c:	dc 01       	movw	r26, r24
    217e:	cb 01       	movw	r24, r22
    2180:	9e 83       	std	Y+6, r25	; 0x06
    2182:	8d 83       	std	Y+5, r24	; 0x05
    2184:	0f c0       	rjmp	.+30     	; 0x21a4 <CLCD_voidInit+0xc6>
    2186:	88 ec       	ldi	r24, 0xC8	; 200
    2188:	90 e0       	ldi	r25, 0x00	; 0
    218a:	9c 83       	std	Y+4, r25	; 0x04
    218c:	8b 83       	std	Y+3, r24	; 0x03
    218e:	8b 81       	ldd	r24, Y+3	; 0x03
    2190:	9c 81       	ldd	r25, Y+4	; 0x04
    2192:	01 97       	sbiw	r24, 0x01	; 1
    2194:	f1 f7       	brne	.-4      	; 0x2192 <CLCD_voidInit+0xb4>
    2196:	9c 83       	std	Y+4, r25	; 0x04
    2198:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    219a:	8d 81       	ldd	r24, Y+5	; 0x05
    219c:	9e 81       	ldd	r25, Y+6	; 0x06
    219e:	01 97       	sbiw	r24, 0x01	; 1
    21a0:	9e 83       	std	Y+6, r25	; 0x06
    21a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21a4:	8d 81       	ldd	r24, Y+5	; 0x05
    21a6:	9e 81       	ldd	r25, Y+6	; 0x06
    21a8:	00 97       	sbiw	r24, 0x00	; 0
    21aa:	69 f7       	brne	.-38     	; 0x2186 <CLCD_voidInit+0xa8>
    21ac:	14 c0       	rjmp	.+40     	; 0x21d6 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ae:	6f 81       	ldd	r22, Y+7	; 0x07
    21b0:	78 85       	ldd	r23, Y+8	; 0x08
    21b2:	89 85       	ldd	r24, Y+9	; 0x09
    21b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ba:	dc 01       	movw	r26, r24
    21bc:	cb 01       	movw	r24, r22
    21be:	9e 83       	std	Y+6, r25	; 0x06
    21c0:	8d 83       	std	Y+5, r24	; 0x05
    21c2:	8d 81       	ldd	r24, Y+5	; 0x05
    21c4:	9e 81       	ldd	r25, Y+6	; 0x06
    21c6:	9a 83       	std	Y+2, r25	; 0x02
    21c8:	89 83       	std	Y+1, r24	; 0x01
    21ca:	89 81       	ldd	r24, Y+1	; 0x01
    21cc:	9a 81       	ldd	r25, Y+2	; 0x02
    21ce:	01 97       	sbiw	r24, 0x01	; 1
    21d0:	f1 f7       	brne	.-4      	; 0x21ce <CLCD_voidInit+0xf0>
    21d2:	9a 83       	std	Y+2, r25	; 0x02
    21d4:	89 83       	std	Y+1, r24	; 0x01
	/*wait for more than 30 ms*/
	_delay_ms(40);
	/*Function Set Command: 2 lines, 5*8 Font Size*/
	CLCD_voidSendCommand(0b00111000);
    21d6:	88 e3       	ldi	r24, 0x38	; 56
    21d8:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <CLCD_voidSendCommand>
	/*Display control on off: enable display disable cursor no blinking cursor*/
	CLCD_voidSendCommand(0b00001100);
    21dc:	8c e0       	ldi	r24, 0x0C	; 12
    21de:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <CLCD_voidSendCommand>
	/*clear display*/
	CLCD_voidSendCommand(1);
    21e2:	81 e0       	ldi	r24, 0x01	; 1
    21e4:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <CLCD_voidSendCommand>


}
    21e8:	2e 96       	adiw	r28, 0x0e	; 14
    21ea:	0f b6       	in	r0, 0x3f	; 63
    21ec:	f8 94       	cli
    21ee:	de bf       	out	0x3e, r29	; 62
    21f0:	0f be       	out	0x3f, r0	; 63
    21f2:	cd bf       	out	0x3d, r28	; 61
    21f4:	cf 91       	pop	r28
    21f6:	df 91       	pop	r29
    21f8:	08 95       	ret

000021fa <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(u8 Copy_u8XPos,u8 Copy_u8YPos){
    21fa:	df 93       	push	r29
    21fc:	cf 93       	push	r28
    21fe:	00 d0       	rcall	.+0      	; 0x2200 <CLCD_voidGoToXY+0x6>
    2200:	0f 92       	push	r0
    2202:	cd b7       	in	r28, 0x3d	; 61
    2204:	de b7       	in	r29, 0x3e	; 62
    2206:	8a 83       	std	Y+2, r24	; 0x02
    2208:	6b 83       	std	Y+3, r22	; 0x03
	/*converting the position into an address*/
	u8 Local_u8Adress;
	if(Copy_u8XPos==0){
    220a:	8a 81       	ldd	r24, Y+2	; 0x02
    220c:	88 23       	and	r24, r24
    220e:	19 f4       	brne	.+6      	; 0x2216 <CLCD_voidGoToXY+0x1c>
		Local_u8Adress = Copy_u8YPos;
    2210:	8b 81       	ldd	r24, Y+3	; 0x03
    2212:	89 83       	std	Y+1, r24	; 0x01
    2214:	06 c0       	rjmp	.+12     	; 0x2222 <CLCD_voidGoToXY+0x28>
	}
	else if(Copy_u8XPos==1){
    2216:	8a 81       	ldd	r24, Y+2	; 0x02
    2218:	81 30       	cpi	r24, 0x01	; 1
    221a:	19 f4       	brne	.+6      	; 0x2222 <CLCD_voidGoToXY+0x28>
		Local_u8Adress = Copy_u8YPos+0x40;
    221c:	8b 81       	ldd	r24, Y+3	; 0x03
    221e:	80 5c       	subi	r24, 0xC0	; 192
    2220:	89 83       	std	Y+1, r24	; 0x01
	}
	/*setting the 7th bit so we can send the set ddram address command*/
	SET_BIT(Local_u8Adress,7);
    2222:	89 81       	ldd	r24, Y+1	; 0x01
    2224:	80 68       	ori	r24, 0x80	; 128
    2226:	89 83       	std	Y+1, r24	; 0x01
	CLCD_voidSendCommand(Local_u8Adress);
    2228:	89 81       	ldd	r24, Y+1	; 0x01
    222a:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <CLCD_voidSendCommand>
}
    222e:	0f 90       	pop	r0
    2230:	0f 90       	pop	r0
    2232:	0f 90       	pop	r0
    2234:	cf 91       	pop	r28
    2236:	df 91       	pop	r29
    2238:	08 95       	ret

0000223a <CLCD_voidWriteSpecialCharacter>:

void CLCD_voidWriteSpecialCharacter(u8* Copy_pu8Arr,u8 Copy_u8PatternNumber){
    223a:	df 93       	push	r29
    223c:	cf 93       	push	r28
    223e:	00 d0       	rcall	.+0      	; 0x2240 <CLCD_voidWriteSpecialCharacter+0x6>
    2240:	00 d0       	rcall	.+0      	; 0x2242 <CLCD_voidWriteSpecialCharacter+0x8>
    2242:	0f 92       	push	r0
    2244:	cd b7       	in	r28, 0x3d	; 61
    2246:	de b7       	in	r29, 0x3e	; 62
    2248:	9c 83       	std	Y+4, r25	; 0x04
    224a:	8b 83       	std	Y+3, r24	; 0x03
    224c:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8Iterator;
	/*calculate CGRAM address of block 8 bytes*/
	u8 Local_u8CGRAMAdress = Copy_u8PatternNumber*8;
    224e:	8d 81       	ldd	r24, Y+5	; 0x05
    2250:	88 2f       	mov	r24, r24
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	88 0f       	add	r24, r24
    2256:	99 1f       	adc	r25, r25
    2258:	88 0f       	add	r24, r24
    225a:	99 1f       	adc	r25, r25
    225c:	88 0f       	add	r24, r24
    225e:	99 1f       	adc	r25, r25
    2260:	89 83       	std	Y+1, r24	; 0x01
	/*set bit 6 for command and set the CGRAM address command*/
	SET_BIT(Local_u8CGRAMAdress,6);
    2262:	89 81       	ldd	r24, Y+1	; 0x01
    2264:	80 64       	ori	r24, 0x40	; 64
    2266:	89 83       	std	Y+1, r24	; 0x01
	CLCD_voidSendCommand(Local_u8CGRAMAdress);
    2268:	89 81       	ldd	r24, Y+1	; 0x01
    226a:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <CLCD_voidSendCommand>
	/*write the pattern on CGRAM*/
	for(Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++){
    226e:	1a 82       	std	Y+2, r1	; 0x02
    2270:	0e c0       	rjmp	.+28     	; 0x228e <CLCD_voidWriteSpecialCharacter+0x54>
		CLCD_voidSendData(Copy_pu8Arr[Local_u8Iterator]);
    2272:	8a 81       	ldd	r24, Y+2	; 0x02
    2274:	28 2f       	mov	r18, r24
    2276:	30 e0       	ldi	r19, 0x00	; 0
    2278:	8b 81       	ldd	r24, Y+3	; 0x03
    227a:	9c 81       	ldd	r25, Y+4	; 0x04
    227c:	fc 01       	movw	r30, r24
    227e:	e2 0f       	add	r30, r18
    2280:	f3 1f       	adc	r31, r19
    2282:	80 81       	ld	r24, Z
    2284:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <CLCD_voidSendData>
	u8 Local_u8CGRAMAdress = Copy_u8PatternNumber*8;
	/*set bit 6 for command and set the CGRAM address command*/
	SET_BIT(Local_u8CGRAMAdress,6);
	CLCD_voidSendCommand(Local_u8CGRAMAdress);
	/*write the pattern on CGRAM*/
	for(Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++){
    2288:	8a 81       	ldd	r24, Y+2	; 0x02
    228a:	8f 5f       	subi	r24, 0xFF	; 255
    228c:	8a 83       	std	Y+2, r24	; 0x02
    228e:	8a 81       	ldd	r24, Y+2	; 0x02
    2290:	88 30       	cpi	r24, 0x08	; 8
    2292:	78 f3       	brcs	.-34     	; 0x2272 <CLCD_voidWriteSpecialCharacter+0x38>
		CLCD_voidSendData(Copy_pu8Arr[Local_u8Iterator]);
	}
}
    2294:	0f 90       	pop	r0
    2296:	0f 90       	pop	r0
    2298:	0f 90       	pop	r0
    229a:	0f 90       	pop	r0
    229c:	0f 90       	pop	r0
    229e:	cf 91       	pop	r28
    22a0:	df 91       	pop	r29
    22a2:	08 95       	ret

000022a4 <CLCD_voidSendSpecialCharacter>:
void CLCD_voidSendSpecialCharacter(u8 Copy_u8PatternNumber,u8 Copy_u8XPos,u8 Copy_u8YPos){
    22a4:	df 93       	push	r29
    22a6:	cf 93       	push	r28
    22a8:	00 d0       	rcall	.+0      	; 0x22aa <CLCD_voidSendSpecialCharacter+0x6>
    22aa:	0f 92       	push	r0
    22ac:	cd b7       	in	r28, 0x3d	; 61
    22ae:	de b7       	in	r29, 0x3e	; 62
    22b0:	89 83       	std	Y+1, r24	; 0x01
    22b2:	6a 83       	std	Y+2, r22	; 0x02
    22b4:	4b 83       	std	Y+3, r20	; 0x03
	/*go back to ddram to display pattern and send pattern by choosing battern blovk*/
	CLCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
    22b6:	8a 81       	ldd	r24, Y+2	; 0x02
    22b8:	6b 81       	ldd	r22, Y+3	; 0x03
    22ba:	0e 94 fd 10 	call	0x21fa	; 0x21fa <CLCD_voidGoToXY>
	CLCD_voidSendData(Copy_u8PatternNumber);
    22be:	89 81       	ldd	r24, Y+1	; 0x01
    22c0:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <CLCD_voidSendData>
}
    22c4:	0f 90       	pop	r0
    22c6:	0f 90       	pop	r0
    22c8:	0f 90       	pop	r0
    22ca:	cf 91       	pop	r28
    22cc:	df 91       	pop	r29
    22ce:	08 95       	ret

000022d0 <CLCD_voidSendNumber>:


void CLCD_voidSendNumber(u32 Copy_u32Number){
    22d0:	df 93       	push	r29
    22d2:	cf 93       	push	r28
    22d4:	cd b7       	in	r28, 0x3d	; 61
    22d6:	de b7       	in	r29, 0x3e	; 62
    22d8:	2b 97       	sbiw	r28, 0x0b	; 11
    22da:	0f b6       	in	r0, 0x3f	; 63
    22dc:	f8 94       	cli
    22de:	de bf       	out	0x3e, r29	; 62
    22e0:	0f be       	out	0x3f, r0	; 63
    22e2:	cd bf       	out	0x3d, r28	; 61
    22e4:	68 87       	std	Y+8, r22	; 0x08
    22e6:	79 87       	std	Y+9, r23	; 0x09
    22e8:	8a 87       	std	Y+10, r24	; 0x0a
    22ea:	9b 87       	std	Y+11, r25	; 0x0b
	/*set local variables to know the number of digits and the digit to print*/
	u8 Local_u8Quotient=1;
    22ec:	81 e0       	ldi	r24, 0x01	; 1
    22ee:	8f 83       	std	Y+7, r24	; 0x07
	u8 Local_u8NumOfDigits=0;
    22f0:	1e 82       	std	Y+6, r1	; 0x06
    22f2:	1b c0       	rjmp	.+54     	; 0x232a <CLCD_voidSendNumber+0x5a>
    u8 Local_u8Digit;
    /*calculating the number of digits in the number*/
	while(Local_u8Quotient!=0){
		Local_u8Quotient = Copy_u32Number/MATH_u32Power(10,++Local_u8NumOfDigits);
    22f4:	8e 81       	ldd	r24, Y+6	; 0x06
    22f6:	8f 5f       	subi	r24, 0xFF	; 255
    22f8:	8e 83       	std	Y+6, r24	; 0x06
    22fa:	8e 81       	ldd	r24, Y+6	; 0x06
    22fc:	28 2f       	mov	r18, r24
    22fe:	30 e0       	ldi	r19, 0x00	; 0
    2300:	40 e0       	ldi	r20, 0x00	; 0
    2302:	50 e0       	ldi	r21, 0x00	; 0
    2304:	6a e0       	ldi	r22, 0x0A	; 10
    2306:	70 e0       	ldi	r23, 0x00	; 0
    2308:	80 e0       	ldi	r24, 0x00	; 0
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <MATH_u32Power>
    2310:	9b 01       	movw	r18, r22
    2312:	ac 01       	movw	r20, r24
    2314:	88 85       	ldd	r24, Y+8	; 0x08
    2316:	99 85       	ldd	r25, Y+9	; 0x09
    2318:	aa 85       	ldd	r26, Y+10	; 0x0a
    231a:	bb 85       	ldd	r27, Y+11	; 0x0b
    231c:	bc 01       	movw	r22, r24
    231e:	cd 01       	movw	r24, r26
    2320:	0e 94 76 1d 	call	0x3aec	; 0x3aec <__udivmodsi4>
    2324:	da 01       	movw	r26, r20
    2326:	c9 01       	movw	r24, r18
    2328:	8f 83       	std	Y+7, r24	; 0x07
	/*set local variables to know the number of digits and the digit to print*/
	u8 Local_u8Quotient=1;
	u8 Local_u8NumOfDigits=0;
    u8 Local_u8Digit;
    /*calculating the number of digits in the number*/
	while(Local_u8Quotient!=0){
    232a:	8f 81       	ldd	r24, Y+7	; 0x07
    232c:	88 23       	and	r24, r24
    232e:	11 f7       	brne	.-60     	; 0x22f4 <CLCD_voidSendNumber+0x24>
		Local_u8Quotient = Copy_u32Number/MATH_u32Power(10,++Local_u8NumOfDigits);
	}
	/*separating each digit then sending then sending them separately to the CLCD*/
	for(s32 Local_u8Power =Local_u8NumOfDigits-1;Local_u8Power>=0;Local_u8Power--){
    2330:	8e 81       	ldd	r24, Y+6	; 0x06
    2332:	88 2f       	mov	r24, r24
    2334:	90 e0       	ldi	r25, 0x00	; 0
    2336:	01 97       	sbiw	r24, 0x01	; 1
    2338:	aa 27       	eor	r26, r26
    233a:	97 fd       	sbrc	r25, 7
    233c:	a0 95       	com	r26
    233e:	ba 2f       	mov	r27, r26
    2340:	89 83       	std	Y+1, r24	; 0x01
    2342:	9a 83       	std	Y+2, r25	; 0x02
    2344:	ab 83       	std	Y+3, r26	; 0x03
    2346:	bc 83       	std	Y+4, r27	; 0x04
    2348:	42 c0       	rjmp	.+132    	; 0x23ce <CLCD_voidSendNumber+0xfe>
	        Local_u8Digit=Copy_u32Number/MATH_u32Power(10,Local_u8Power);
    234a:	29 81       	ldd	r18, Y+1	; 0x01
    234c:	3a 81       	ldd	r19, Y+2	; 0x02
    234e:	4b 81       	ldd	r20, Y+3	; 0x03
    2350:	5c 81       	ldd	r21, Y+4	; 0x04
    2352:	6a e0       	ldi	r22, 0x0A	; 10
    2354:	70 e0       	ldi	r23, 0x00	; 0
    2356:	80 e0       	ldi	r24, 0x00	; 0
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <MATH_u32Power>
    235e:	9b 01       	movw	r18, r22
    2360:	ac 01       	movw	r20, r24
    2362:	88 85       	ldd	r24, Y+8	; 0x08
    2364:	99 85       	ldd	r25, Y+9	; 0x09
    2366:	aa 85       	ldd	r26, Y+10	; 0x0a
    2368:	bb 85       	ldd	r27, Y+11	; 0x0b
    236a:	bc 01       	movw	r22, r24
    236c:	cd 01       	movw	r24, r26
    236e:	0e 94 76 1d 	call	0x3aec	; 0x3aec <__udivmodsi4>
    2372:	da 01       	movw	r26, r20
    2374:	c9 01       	movw	r24, r18
    2376:	8d 83       	std	Y+5, r24	; 0x05
	        Copy_u32Number %= MATH_u32Power(10,Local_u8Power);
    2378:	29 81       	ldd	r18, Y+1	; 0x01
    237a:	3a 81       	ldd	r19, Y+2	; 0x02
    237c:	4b 81       	ldd	r20, Y+3	; 0x03
    237e:	5c 81       	ldd	r21, Y+4	; 0x04
    2380:	6a e0       	ldi	r22, 0x0A	; 10
    2382:	70 e0       	ldi	r23, 0x00	; 0
    2384:	80 e0       	ldi	r24, 0x00	; 0
    2386:	90 e0       	ldi	r25, 0x00	; 0
    2388:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <MATH_u32Power>
    238c:	9b 01       	movw	r18, r22
    238e:	ac 01       	movw	r20, r24
    2390:	88 85       	ldd	r24, Y+8	; 0x08
    2392:	99 85       	ldd	r25, Y+9	; 0x09
    2394:	aa 85       	ldd	r26, Y+10	; 0x0a
    2396:	bb 85       	ldd	r27, Y+11	; 0x0b
    2398:	bc 01       	movw	r22, r24
    239a:	cd 01       	movw	r24, r26
    239c:	0e 94 76 1d 	call	0x3aec	; 0x3aec <__udivmodsi4>
    23a0:	dc 01       	movw	r26, r24
    23a2:	cb 01       	movw	r24, r22
    23a4:	88 87       	std	Y+8, r24	; 0x08
    23a6:	99 87       	std	Y+9, r25	; 0x09
    23a8:	aa 87       	std	Y+10, r26	; 0x0a
    23aa:	bb 87       	std	Y+11, r27	; 0x0b
	        Local_u8Digit+=48;
    23ac:	8d 81       	ldd	r24, Y+5	; 0x05
    23ae:	80 5d       	subi	r24, 0xD0	; 208
    23b0:	8d 83       	std	Y+5, r24	; 0x05
	        CLCD_voidSendData(Local_u8Digit);
    23b2:	8d 81       	ldd	r24, Y+5	; 0x05
    23b4:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <CLCD_voidSendData>
    /*calculating the number of digits in the number*/
	while(Local_u8Quotient!=0){
		Local_u8Quotient = Copy_u32Number/MATH_u32Power(10,++Local_u8NumOfDigits);
	}
	/*separating each digit then sending then sending them separately to the CLCD*/
	for(s32 Local_u8Power =Local_u8NumOfDigits-1;Local_u8Power>=0;Local_u8Power--){
    23b8:	89 81       	ldd	r24, Y+1	; 0x01
    23ba:	9a 81       	ldd	r25, Y+2	; 0x02
    23bc:	ab 81       	ldd	r26, Y+3	; 0x03
    23be:	bc 81       	ldd	r27, Y+4	; 0x04
    23c0:	01 97       	sbiw	r24, 0x01	; 1
    23c2:	a1 09       	sbc	r26, r1
    23c4:	b1 09       	sbc	r27, r1
    23c6:	89 83       	std	Y+1, r24	; 0x01
    23c8:	9a 83       	std	Y+2, r25	; 0x02
    23ca:	ab 83       	std	Y+3, r26	; 0x03
    23cc:	bc 83       	std	Y+4, r27	; 0x04
    23ce:	89 81       	ldd	r24, Y+1	; 0x01
    23d0:	9a 81       	ldd	r25, Y+2	; 0x02
    23d2:	ab 81       	ldd	r26, Y+3	; 0x03
    23d4:	bc 81       	ldd	r27, Y+4	; 0x04
    23d6:	bb 23       	and	r27, r27
    23d8:	0c f0       	brlt	.+2      	; 0x23dc <CLCD_voidSendNumber+0x10c>
    23da:	b7 cf       	rjmp	.-146    	; 0x234a <CLCD_voidSendNumber+0x7a>
	        Local_u8Digit=Copy_u32Number/MATH_u32Power(10,Local_u8Power);
	        Copy_u32Number %= MATH_u32Power(10,Local_u8Power);
	        Local_u8Digit+=48;
	        CLCD_voidSendData(Local_u8Digit);
	    }
}
    23dc:	2b 96       	adiw	r28, 0x0b	; 11
    23de:	0f b6       	in	r0, 0x3f	; 63
    23e0:	f8 94       	cli
    23e2:	de bf       	out	0x3e, r29	; 62
    23e4:	0f be       	out	0x3f, r0	; 63
    23e6:	cd bf       	out	0x3d, r28	; 61
    23e8:	cf 91       	pop	r28
    23ea:	df 91       	pop	r29
    23ec:	08 95       	ret

000023ee <CLCD_voidCLR>:

void CLCD_voidCLR(void){
    23ee:	df 93       	push	r29
    23f0:	cf 93       	push	r28
    23f2:	cd b7       	in	r28, 0x3d	; 61
    23f4:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSendCommand(CLCD_CLR);
    23f6:	81 e0       	ldi	r24, 0x01	; 1
    23f8:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <CLCD_voidSendCommand>
}
    23fc:	cf 91       	pop	r28
    23fe:	df 91       	pop	r29
    2400:	08 95       	ret

00002402 <DCM_voidRotateClockwise>:

#include "DCM_config.h"
#include "DCM_private.h"
#include "DCM_Interface.h"

void DCM_voidRotateClockwise(){
    2402:	df 93       	push	r29
    2404:	cf 93       	push	r28
    2406:	cd b7       	in	r28, 0x3d	; 61
    2408:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(DCM_PORT,DCM_CTR_CLKWISE_PIN,DIO_u8PIN_LOW);
    240a:	80 e0       	ldi	r24, 0x00	; 0
    240c:	63 e0       	ldi	r22, 0x03	; 3
    240e:	40 e0       	ldi	r20, 0x00	; 0
    2410:	0e 94 34 12 	call	0x2468	; 0x2468 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DCM_PORT,DCM_CLKWISE_PIN,DIO_u8PIN_HIGH);
    2414:	80 e0       	ldi	r24, 0x00	; 0
    2416:	64 e0       	ldi	r22, 0x04	; 4
    2418:	41 e0       	ldi	r20, 0x01	; 1
    241a:	0e 94 34 12 	call	0x2468	; 0x2468 <DIO_u8SetPinValue>
}
    241e:	cf 91       	pop	r28
    2420:	df 91       	pop	r29
    2422:	08 95       	ret

00002424 <DCM_voidRotateCounterClockwise>:
void DCM_voidRotateCounterClockwise(){
    2424:	df 93       	push	r29
    2426:	cf 93       	push	r28
    2428:	cd b7       	in	r28, 0x3d	; 61
    242a:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(DCM_PORT,DCM_CLKWISE_PIN,DIO_u8PIN_LOW);
    242c:	80 e0       	ldi	r24, 0x00	; 0
    242e:	64 e0       	ldi	r22, 0x04	; 4
    2430:	40 e0       	ldi	r20, 0x00	; 0
    2432:	0e 94 34 12 	call	0x2468	; 0x2468 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DCM_PORT,DCM_CTR_CLKWISE_PIN,DIO_u8PIN_HIGH);
    2436:	80 e0       	ldi	r24, 0x00	; 0
    2438:	63 e0       	ldi	r22, 0x03	; 3
    243a:	41 e0       	ldi	r20, 0x01	; 1
    243c:	0e 94 34 12 	call	0x2468	; 0x2468 <DIO_u8SetPinValue>
}
    2440:	cf 91       	pop	r28
    2442:	df 91       	pop	r29
    2444:	08 95       	ret

00002446 <DCM_voidStop>:

void DCM_voidStop(){
    2446:	df 93       	push	r29
    2448:	cf 93       	push	r28
    244a:	cd b7       	in	r28, 0x3d	; 61
    244c:	de b7       	in	r29, 0x3e	; 62
		DIO_u8SetPinValue(DCM_PORT,DCM_CLKWISE_PIN,DIO_u8PIN_LOW);
    244e:	80 e0       	ldi	r24, 0x00	; 0
    2450:	64 e0       	ldi	r22, 0x04	; 4
    2452:	40 e0       	ldi	r20, 0x00	; 0
    2454:	0e 94 34 12 	call	0x2468	; 0x2468 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DCM_PORT,DCM_CTR_CLKWISE_PIN,DIO_u8PIN_LOW);
    2458:	80 e0       	ldi	r24, 0x00	; 0
    245a:	63 e0       	ldi	r22, 0x03	; 3
    245c:	40 e0       	ldi	r20, 0x00	; 0
    245e:	0e 94 34 12 	call	0x2468	; 0x2468 <DIO_u8SetPinValue>
    2462:	cf 91       	pop	r28
    2464:	df 91       	pop	r29
    2466:	08 95       	ret

00002468 <DIO_u8SetPinValue>:
#include "DIO_private.h"
#include "DIO_config.h"



u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value){
    2468:	df 93       	push	r29
    246a:	cf 93       	push	r28
    246c:	cd b7       	in	r28, 0x3d	; 61
    246e:	de b7       	in	r29, 0x3e	; 62
    2470:	28 97       	sbiw	r28, 0x08	; 8
    2472:	0f b6       	in	r0, 0x3f	; 63
    2474:	f8 94       	cli
    2476:	de bf       	out	0x3e, r29	; 62
    2478:	0f be       	out	0x3f, r0	; 63
    247a:	cd bf       	out	0x3d, r28	; 61
    247c:	8a 83       	std	Y+2, r24	; 0x02
    247e:	6b 83       	std	Y+3, r22	; 0x03
    2480:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    2482:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin <= DIO_u8PIN7){
    2484:	8b 81       	ldd	r24, Y+3	; 0x03
    2486:	88 30       	cpi	r24, 0x08	; 8
    2488:	08 f0       	brcs	.+2      	; 0x248c <DIO_u8SetPinValue+0x24>
    248a:	f4 c0       	rjmp	.+488    	; 0x2674 <DIO_u8SetPinValue+0x20c>
		if(Copy_u8Value == DIO_u8PIN_LOW){
    248c:	8c 81       	ldd	r24, Y+4	; 0x04
    248e:	88 23       	and	r24, r24
    2490:	09 f0       	breq	.+2      	; 0x2494 <DIO_u8SetPinValue+0x2c>
    2492:	77 c0       	rjmp	.+238    	; 0x2582 <DIO_u8SetPinValue+0x11a>
			switch(Copy_u8Port){
    2494:	8a 81       	ldd	r24, Y+2	; 0x02
    2496:	28 2f       	mov	r18, r24
    2498:	30 e0       	ldi	r19, 0x00	; 0
    249a:	38 87       	std	Y+8, r19	; 0x08
    249c:	2f 83       	std	Y+7, r18	; 0x07
    249e:	8f 81       	ldd	r24, Y+7	; 0x07
    24a0:	98 85       	ldd	r25, Y+8	; 0x08
    24a2:	81 30       	cpi	r24, 0x01	; 1
    24a4:	91 05       	cpc	r25, r1
    24a6:	59 f1       	breq	.+86     	; 0x24fe <DIO_u8SetPinValue+0x96>
    24a8:	2f 81       	ldd	r18, Y+7	; 0x07
    24aa:	38 85       	ldd	r19, Y+8	; 0x08
    24ac:	22 30       	cpi	r18, 0x02	; 2
    24ae:	31 05       	cpc	r19, r1
    24b0:	2c f4       	brge	.+10     	; 0x24bc <DIO_u8SetPinValue+0x54>
    24b2:	8f 81       	ldd	r24, Y+7	; 0x07
    24b4:	98 85       	ldd	r25, Y+8	; 0x08
    24b6:	00 97       	sbiw	r24, 0x00	; 0
    24b8:	69 f0       	breq	.+26     	; 0x24d4 <DIO_u8SetPinValue+0x6c>
    24ba:	60 c0       	rjmp	.+192    	; 0x257c <DIO_u8SetPinValue+0x114>
    24bc:	2f 81       	ldd	r18, Y+7	; 0x07
    24be:	38 85       	ldd	r19, Y+8	; 0x08
    24c0:	22 30       	cpi	r18, 0x02	; 2
    24c2:	31 05       	cpc	r19, r1
    24c4:	89 f1       	breq	.+98     	; 0x2528 <DIO_u8SetPinValue+0xc0>
    24c6:	8f 81       	ldd	r24, Y+7	; 0x07
    24c8:	98 85       	ldd	r25, Y+8	; 0x08
    24ca:	83 30       	cpi	r24, 0x03	; 3
    24cc:	91 05       	cpc	r25, r1
    24ce:	09 f4       	brne	.+2      	; 0x24d2 <DIO_u8SetPinValue+0x6a>
    24d0:	40 c0       	rjmp	.+128    	; 0x2552 <DIO_u8SetPinValue+0xea>
    24d2:	54 c0       	rjmp	.+168    	; 0x257c <DIO_u8SetPinValue+0x114>
			case DIO_u8PORTA : CLR_BIT(PORTA,Copy_u8Pin); break;
    24d4:	ab e3       	ldi	r26, 0x3B	; 59
    24d6:	b0 e0       	ldi	r27, 0x00	; 0
    24d8:	eb e3       	ldi	r30, 0x3B	; 59
    24da:	f0 e0       	ldi	r31, 0x00	; 0
    24dc:	80 81       	ld	r24, Z
    24de:	48 2f       	mov	r20, r24
    24e0:	8b 81       	ldd	r24, Y+3	; 0x03
    24e2:	28 2f       	mov	r18, r24
    24e4:	30 e0       	ldi	r19, 0x00	; 0
    24e6:	81 e0       	ldi	r24, 0x01	; 1
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	02 2e       	mov	r0, r18
    24ec:	02 c0       	rjmp	.+4      	; 0x24f2 <DIO_u8SetPinValue+0x8a>
    24ee:	88 0f       	add	r24, r24
    24f0:	99 1f       	adc	r25, r25
    24f2:	0a 94       	dec	r0
    24f4:	e2 f7       	brpl	.-8      	; 0x24ee <DIO_u8SetPinValue+0x86>
    24f6:	80 95       	com	r24
    24f8:	84 23       	and	r24, r20
    24fa:	8c 93       	st	X, r24
    24fc:	bd c0       	rjmp	.+378    	; 0x2678 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB : CLR_BIT(PORTB,Copy_u8Pin); break;
    24fe:	a8 e3       	ldi	r26, 0x38	; 56
    2500:	b0 e0       	ldi	r27, 0x00	; 0
    2502:	e8 e3       	ldi	r30, 0x38	; 56
    2504:	f0 e0       	ldi	r31, 0x00	; 0
    2506:	80 81       	ld	r24, Z
    2508:	48 2f       	mov	r20, r24
    250a:	8b 81       	ldd	r24, Y+3	; 0x03
    250c:	28 2f       	mov	r18, r24
    250e:	30 e0       	ldi	r19, 0x00	; 0
    2510:	81 e0       	ldi	r24, 0x01	; 1
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	02 2e       	mov	r0, r18
    2516:	02 c0       	rjmp	.+4      	; 0x251c <DIO_u8SetPinValue+0xb4>
    2518:	88 0f       	add	r24, r24
    251a:	99 1f       	adc	r25, r25
    251c:	0a 94       	dec	r0
    251e:	e2 f7       	brpl	.-8      	; 0x2518 <DIO_u8SetPinValue+0xb0>
    2520:	80 95       	com	r24
    2522:	84 23       	and	r24, r20
    2524:	8c 93       	st	X, r24
    2526:	a8 c0       	rjmp	.+336    	; 0x2678 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC : CLR_BIT(PORTC,Copy_u8Pin); break;
    2528:	a5 e3       	ldi	r26, 0x35	; 53
    252a:	b0 e0       	ldi	r27, 0x00	; 0
    252c:	e5 e3       	ldi	r30, 0x35	; 53
    252e:	f0 e0       	ldi	r31, 0x00	; 0
    2530:	80 81       	ld	r24, Z
    2532:	48 2f       	mov	r20, r24
    2534:	8b 81       	ldd	r24, Y+3	; 0x03
    2536:	28 2f       	mov	r18, r24
    2538:	30 e0       	ldi	r19, 0x00	; 0
    253a:	81 e0       	ldi	r24, 0x01	; 1
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	02 2e       	mov	r0, r18
    2540:	02 c0       	rjmp	.+4      	; 0x2546 <DIO_u8SetPinValue+0xde>
    2542:	88 0f       	add	r24, r24
    2544:	99 1f       	adc	r25, r25
    2546:	0a 94       	dec	r0
    2548:	e2 f7       	brpl	.-8      	; 0x2542 <DIO_u8SetPinValue+0xda>
    254a:	80 95       	com	r24
    254c:	84 23       	and	r24, r20
    254e:	8c 93       	st	X, r24
    2550:	93 c0       	rjmp	.+294    	; 0x2678 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD : CLR_BIT(PORTD,Copy_u8Pin); break;
    2552:	a2 e3       	ldi	r26, 0x32	; 50
    2554:	b0 e0       	ldi	r27, 0x00	; 0
    2556:	e2 e3       	ldi	r30, 0x32	; 50
    2558:	f0 e0       	ldi	r31, 0x00	; 0
    255a:	80 81       	ld	r24, Z
    255c:	48 2f       	mov	r20, r24
    255e:	8b 81       	ldd	r24, Y+3	; 0x03
    2560:	28 2f       	mov	r18, r24
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	81 e0       	ldi	r24, 0x01	; 1
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	02 2e       	mov	r0, r18
    256a:	02 c0       	rjmp	.+4      	; 0x2570 <DIO_u8SetPinValue+0x108>
    256c:	88 0f       	add	r24, r24
    256e:	99 1f       	adc	r25, r25
    2570:	0a 94       	dec	r0
    2572:	e2 f7       	brpl	.-8      	; 0x256c <DIO_u8SetPinValue+0x104>
    2574:	80 95       	com	r24
    2576:	84 23       	and	r24, r20
    2578:	8c 93       	st	X, r24
    257a:	7e c0       	rjmp	.+252    	; 0x2678 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1;
    257c:	81 e0       	ldi	r24, 0x01	; 1
    257e:	89 83       	std	Y+1, r24	; 0x01
    2580:	7b c0       	rjmp	.+246    	; 0x2678 <DIO_u8SetPinValue+0x210>
			}
		}
		else if(Copy_u8Value == DIO_u8PIN_HIGH){
    2582:	8c 81       	ldd	r24, Y+4	; 0x04
    2584:	81 30       	cpi	r24, 0x01	; 1
    2586:	09 f0       	breq	.+2      	; 0x258a <DIO_u8SetPinValue+0x122>
    2588:	72 c0       	rjmp	.+228    	; 0x266e <DIO_u8SetPinValue+0x206>
			switch(Copy_u8Port){
    258a:	8a 81       	ldd	r24, Y+2	; 0x02
    258c:	28 2f       	mov	r18, r24
    258e:	30 e0       	ldi	r19, 0x00	; 0
    2590:	3e 83       	std	Y+6, r19	; 0x06
    2592:	2d 83       	std	Y+5, r18	; 0x05
    2594:	8d 81       	ldd	r24, Y+5	; 0x05
    2596:	9e 81       	ldd	r25, Y+6	; 0x06
    2598:	81 30       	cpi	r24, 0x01	; 1
    259a:	91 05       	cpc	r25, r1
    259c:	49 f1       	breq	.+82     	; 0x25f0 <DIO_u8SetPinValue+0x188>
    259e:	2d 81       	ldd	r18, Y+5	; 0x05
    25a0:	3e 81       	ldd	r19, Y+6	; 0x06
    25a2:	22 30       	cpi	r18, 0x02	; 2
    25a4:	31 05       	cpc	r19, r1
    25a6:	2c f4       	brge	.+10     	; 0x25b2 <DIO_u8SetPinValue+0x14a>
    25a8:	8d 81       	ldd	r24, Y+5	; 0x05
    25aa:	9e 81       	ldd	r25, Y+6	; 0x06
    25ac:	00 97       	sbiw	r24, 0x00	; 0
    25ae:	61 f0       	breq	.+24     	; 0x25c8 <DIO_u8SetPinValue+0x160>
    25b0:	5b c0       	rjmp	.+182    	; 0x2668 <DIO_u8SetPinValue+0x200>
    25b2:	2d 81       	ldd	r18, Y+5	; 0x05
    25b4:	3e 81       	ldd	r19, Y+6	; 0x06
    25b6:	22 30       	cpi	r18, 0x02	; 2
    25b8:	31 05       	cpc	r19, r1
    25ba:	71 f1       	breq	.+92     	; 0x2618 <DIO_u8SetPinValue+0x1b0>
    25bc:	8d 81       	ldd	r24, Y+5	; 0x05
    25be:	9e 81       	ldd	r25, Y+6	; 0x06
    25c0:	83 30       	cpi	r24, 0x03	; 3
    25c2:	91 05       	cpc	r25, r1
    25c4:	e9 f1       	breq	.+122    	; 0x2640 <DIO_u8SetPinValue+0x1d8>
    25c6:	50 c0       	rjmp	.+160    	; 0x2668 <DIO_u8SetPinValue+0x200>
			case DIO_u8PORTA : SET_BIT(PORTA,Copy_u8Pin); break;
    25c8:	ab e3       	ldi	r26, 0x3B	; 59
    25ca:	b0 e0       	ldi	r27, 0x00	; 0
    25cc:	eb e3       	ldi	r30, 0x3B	; 59
    25ce:	f0 e0       	ldi	r31, 0x00	; 0
    25d0:	80 81       	ld	r24, Z
    25d2:	48 2f       	mov	r20, r24
    25d4:	8b 81       	ldd	r24, Y+3	; 0x03
    25d6:	28 2f       	mov	r18, r24
    25d8:	30 e0       	ldi	r19, 0x00	; 0
    25da:	81 e0       	ldi	r24, 0x01	; 1
    25dc:	90 e0       	ldi	r25, 0x00	; 0
    25de:	02 2e       	mov	r0, r18
    25e0:	02 c0       	rjmp	.+4      	; 0x25e6 <DIO_u8SetPinValue+0x17e>
    25e2:	88 0f       	add	r24, r24
    25e4:	99 1f       	adc	r25, r25
    25e6:	0a 94       	dec	r0
    25e8:	e2 f7       	brpl	.-8      	; 0x25e2 <DIO_u8SetPinValue+0x17a>
    25ea:	84 2b       	or	r24, r20
    25ec:	8c 93       	st	X, r24
    25ee:	44 c0       	rjmp	.+136    	; 0x2678 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB : SET_BIT(PORTB,Copy_u8Pin); break;
    25f0:	a8 e3       	ldi	r26, 0x38	; 56
    25f2:	b0 e0       	ldi	r27, 0x00	; 0
    25f4:	e8 e3       	ldi	r30, 0x38	; 56
    25f6:	f0 e0       	ldi	r31, 0x00	; 0
    25f8:	80 81       	ld	r24, Z
    25fa:	48 2f       	mov	r20, r24
    25fc:	8b 81       	ldd	r24, Y+3	; 0x03
    25fe:	28 2f       	mov	r18, r24
    2600:	30 e0       	ldi	r19, 0x00	; 0
    2602:	81 e0       	ldi	r24, 0x01	; 1
    2604:	90 e0       	ldi	r25, 0x00	; 0
    2606:	02 2e       	mov	r0, r18
    2608:	02 c0       	rjmp	.+4      	; 0x260e <DIO_u8SetPinValue+0x1a6>
    260a:	88 0f       	add	r24, r24
    260c:	99 1f       	adc	r25, r25
    260e:	0a 94       	dec	r0
    2610:	e2 f7       	brpl	.-8      	; 0x260a <DIO_u8SetPinValue+0x1a2>
    2612:	84 2b       	or	r24, r20
    2614:	8c 93       	st	X, r24
    2616:	30 c0       	rjmp	.+96     	; 0x2678 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC : SET_BIT(PORTC,Copy_u8Pin); break;
    2618:	a5 e3       	ldi	r26, 0x35	; 53
    261a:	b0 e0       	ldi	r27, 0x00	; 0
    261c:	e5 e3       	ldi	r30, 0x35	; 53
    261e:	f0 e0       	ldi	r31, 0x00	; 0
    2620:	80 81       	ld	r24, Z
    2622:	48 2f       	mov	r20, r24
    2624:	8b 81       	ldd	r24, Y+3	; 0x03
    2626:	28 2f       	mov	r18, r24
    2628:	30 e0       	ldi	r19, 0x00	; 0
    262a:	81 e0       	ldi	r24, 0x01	; 1
    262c:	90 e0       	ldi	r25, 0x00	; 0
    262e:	02 2e       	mov	r0, r18
    2630:	02 c0       	rjmp	.+4      	; 0x2636 <DIO_u8SetPinValue+0x1ce>
    2632:	88 0f       	add	r24, r24
    2634:	99 1f       	adc	r25, r25
    2636:	0a 94       	dec	r0
    2638:	e2 f7       	brpl	.-8      	; 0x2632 <DIO_u8SetPinValue+0x1ca>
    263a:	84 2b       	or	r24, r20
    263c:	8c 93       	st	X, r24
    263e:	1c c0       	rjmp	.+56     	; 0x2678 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD : SET_BIT(PORTD,Copy_u8Pin); break;
    2640:	a2 e3       	ldi	r26, 0x32	; 50
    2642:	b0 e0       	ldi	r27, 0x00	; 0
    2644:	e2 e3       	ldi	r30, 0x32	; 50
    2646:	f0 e0       	ldi	r31, 0x00	; 0
    2648:	80 81       	ld	r24, Z
    264a:	48 2f       	mov	r20, r24
    264c:	8b 81       	ldd	r24, Y+3	; 0x03
    264e:	28 2f       	mov	r18, r24
    2650:	30 e0       	ldi	r19, 0x00	; 0
    2652:	81 e0       	ldi	r24, 0x01	; 1
    2654:	90 e0       	ldi	r25, 0x00	; 0
    2656:	02 2e       	mov	r0, r18
    2658:	02 c0       	rjmp	.+4      	; 0x265e <DIO_u8SetPinValue+0x1f6>
    265a:	88 0f       	add	r24, r24
    265c:	99 1f       	adc	r25, r25
    265e:	0a 94       	dec	r0
    2660:	e2 f7       	brpl	.-8      	; 0x265a <DIO_u8SetPinValue+0x1f2>
    2662:	84 2b       	or	r24, r20
    2664:	8c 93       	st	X, r24
    2666:	08 c0       	rjmp	.+16     	; 0x2678 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1;
    2668:	81 e0       	ldi	r24, 0x01	; 1
    266a:	89 83       	std	Y+1, r24	; 0x01
    266c:	05 c0       	rjmp	.+10     	; 0x2678 <DIO_u8SetPinValue+0x210>
			}
		}
		else{
			Local_u8ErrorState=1;
    266e:	81 e0       	ldi	r24, 0x01	; 1
    2670:	89 83       	std	Y+1, r24	; 0x01
    2672:	02 c0       	rjmp	.+4      	; 0x2678 <DIO_u8SetPinValue+0x210>
		}
	}
	else{
		Local_u8ErrorState=1;
    2674:	81 e0       	ldi	r24, 0x01	; 1
    2676:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState ;
    2678:	89 81       	ldd	r24, Y+1	; 0x01
}
    267a:	28 96       	adiw	r28, 0x08	; 8
    267c:	0f b6       	in	r0, 0x3f	; 63
    267e:	f8 94       	cli
    2680:	de bf       	out	0x3e, r29	; 62
    2682:	0f be       	out	0x3f, r0	; 63
    2684:	cd bf       	out	0x3d, r28	; 61
    2686:	cf 91       	pop	r28
    2688:	df 91       	pop	r29
    268a:	08 95       	ret

0000268c <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8Port,u8 Copy_u8Value){
    268c:	df 93       	push	r29
    268e:	cf 93       	push	r28
    2690:	00 d0       	rcall	.+0      	; 0x2692 <DIO_u8SetPortValue+0x6>
    2692:	00 d0       	rcall	.+0      	; 0x2694 <DIO_u8SetPortValue+0x8>
    2694:	0f 92       	push	r0
    2696:	cd b7       	in	r28, 0x3d	; 61
    2698:	de b7       	in	r29, 0x3e	; 62
    269a:	8a 83       	std	Y+2, r24	; 0x02
    269c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    269e:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8Port)
    26a0:	8a 81       	ldd	r24, Y+2	; 0x02
    26a2:	28 2f       	mov	r18, r24
    26a4:	30 e0       	ldi	r19, 0x00	; 0
    26a6:	3d 83       	std	Y+5, r19	; 0x05
    26a8:	2c 83       	std	Y+4, r18	; 0x04
    26aa:	8c 81       	ldd	r24, Y+4	; 0x04
    26ac:	9d 81       	ldd	r25, Y+5	; 0x05
    26ae:	81 30       	cpi	r24, 0x01	; 1
    26b0:	91 05       	cpc	r25, r1
    26b2:	d1 f0       	breq	.+52     	; 0x26e8 <DIO_u8SetPortValue+0x5c>
    26b4:	2c 81       	ldd	r18, Y+4	; 0x04
    26b6:	3d 81       	ldd	r19, Y+5	; 0x05
    26b8:	22 30       	cpi	r18, 0x02	; 2
    26ba:	31 05       	cpc	r19, r1
    26bc:	2c f4       	brge	.+10     	; 0x26c8 <DIO_u8SetPortValue+0x3c>
    26be:	8c 81       	ldd	r24, Y+4	; 0x04
    26c0:	9d 81       	ldd	r25, Y+5	; 0x05
    26c2:	00 97       	sbiw	r24, 0x00	; 0
    26c4:	61 f0       	breq	.+24     	; 0x26de <DIO_u8SetPortValue+0x52>
    26c6:	1f c0       	rjmp	.+62     	; 0x2706 <DIO_u8SetPortValue+0x7a>
    26c8:	2c 81       	ldd	r18, Y+4	; 0x04
    26ca:	3d 81       	ldd	r19, Y+5	; 0x05
    26cc:	22 30       	cpi	r18, 0x02	; 2
    26ce:	31 05       	cpc	r19, r1
    26d0:	81 f0       	breq	.+32     	; 0x26f2 <DIO_u8SetPortValue+0x66>
    26d2:	8c 81       	ldd	r24, Y+4	; 0x04
    26d4:	9d 81       	ldd	r25, Y+5	; 0x05
    26d6:	83 30       	cpi	r24, 0x03	; 3
    26d8:	91 05       	cpc	r25, r1
    26da:	81 f0       	breq	.+32     	; 0x26fc <DIO_u8SetPortValue+0x70>
    26dc:	14 c0       	rjmp	.+40     	; 0x2706 <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA: PORTA=Copy_u8Value; break;
    26de:	eb e3       	ldi	r30, 0x3B	; 59
    26e0:	f0 e0       	ldi	r31, 0x00	; 0
    26e2:	8b 81       	ldd	r24, Y+3	; 0x03
    26e4:	80 83       	st	Z, r24
    26e6:	11 c0       	rjmp	.+34     	; 0x270a <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB: PORTB=Copy_u8Value; break;
    26e8:	e8 e3       	ldi	r30, 0x38	; 56
    26ea:	f0 e0       	ldi	r31, 0x00	; 0
    26ec:	8b 81       	ldd	r24, Y+3	; 0x03
    26ee:	80 83       	st	Z, r24
    26f0:	0c c0       	rjmp	.+24     	; 0x270a <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC: PORTC=Copy_u8Value; break;
    26f2:	e5 e3       	ldi	r30, 0x35	; 53
    26f4:	f0 e0       	ldi	r31, 0x00	; 0
    26f6:	8b 81       	ldd	r24, Y+3	; 0x03
    26f8:	80 83       	st	Z, r24
    26fa:	07 c0       	rjmp	.+14     	; 0x270a <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD: PORTD=Copy_u8Value; break;
    26fc:	e2 e3       	ldi	r30, 0x32	; 50
    26fe:	f0 e0       	ldi	r31, 0x00	; 0
    2700:	8b 81       	ldd	r24, Y+3	; 0x03
    2702:	80 83       	st	Z, r24
    2704:	02 c0       	rjmp	.+4      	; 0x270a <DIO_u8SetPortValue+0x7e>
	default: Local_u8ErrorState=1 ;
    2706:	81 e0       	ldi	r24, 0x01	; 1
    2708:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState ;
    270a:	89 81       	ldd	r24, Y+1	; 0x01
}
    270c:	0f 90       	pop	r0
    270e:	0f 90       	pop	r0
    2710:	0f 90       	pop	r0
    2712:	0f 90       	pop	r0
    2714:	0f 90       	pop	r0
    2716:	cf 91       	pop	r28
    2718:	df 91       	pop	r29
    271a:	08 95       	ret

0000271c <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin, u8* Copy_pu8Value){
    271c:	df 93       	push	r29
    271e:	cf 93       	push	r28
    2720:	cd b7       	in	r28, 0x3d	; 61
    2722:	de b7       	in	r29, 0x3e	; 62
    2724:	27 97       	sbiw	r28, 0x07	; 7
    2726:	0f b6       	in	r0, 0x3f	; 63
    2728:	f8 94       	cli
    272a:	de bf       	out	0x3e, r29	; 62
    272c:	0f be       	out	0x3f, r0	; 63
    272e:	cd bf       	out	0x3d, r28	; 61
    2730:	8a 83       	std	Y+2, r24	; 0x02
    2732:	6b 83       	std	Y+3, r22	; 0x03
    2734:	5d 83       	std	Y+5, r21	; 0x05
    2736:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    2738:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_pu8Value != NULL) && (Copy_u8Pin <= DIO_u8PIN7)){
    273a:	8c 81       	ldd	r24, Y+4	; 0x04
    273c:	9d 81       	ldd	r25, Y+5	; 0x05
    273e:	00 97       	sbiw	r24, 0x00	; 0
    2740:	09 f4       	brne	.+2      	; 0x2744 <DIO_u8GetPinValue+0x28>
    2742:	78 c0       	rjmp	.+240    	; 0x2834 <DIO_u8GetPinValue+0x118>
    2744:	8b 81       	ldd	r24, Y+3	; 0x03
    2746:	88 30       	cpi	r24, 0x08	; 8
    2748:	08 f0       	brcs	.+2      	; 0x274c <DIO_u8GetPinValue+0x30>
    274a:	74 c0       	rjmp	.+232    	; 0x2834 <DIO_u8GetPinValue+0x118>
		switch (Copy_u8Port){
    274c:	8a 81       	ldd	r24, Y+2	; 0x02
    274e:	28 2f       	mov	r18, r24
    2750:	30 e0       	ldi	r19, 0x00	; 0
    2752:	3f 83       	std	Y+7, r19	; 0x07
    2754:	2e 83       	std	Y+6, r18	; 0x06
    2756:	4e 81       	ldd	r20, Y+6	; 0x06
    2758:	5f 81       	ldd	r21, Y+7	; 0x07
    275a:	41 30       	cpi	r20, 0x01	; 1
    275c:	51 05       	cpc	r21, r1
    275e:	59 f1       	breq	.+86     	; 0x27b6 <DIO_u8GetPinValue+0x9a>
    2760:	8e 81       	ldd	r24, Y+6	; 0x06
    2762:	9f 81       	ldd	r25, Y+7	; 0x07
    2764:	82 30       	cpi	r24, 0x02	; 2
    2766:	91 05       	cpc	r25, r1
    2768:	34 f4       	brge	.+12     	; 0x2776 <DIO_u8GetPinValue+0x5a>
    276a:	2e 81       	ldd	r18, Y+6	; 0x06
    276c:	3f 81       	ldd	r19, Y+7	; 0x07
    276e:	21 15       	cp	r18, r1
    2770:	31 05       	cpc	r19, r1
    2772:	69 f0       	breq	.+26     	; 0x278e <DIO_u8GetPinValue+0x72>
    2774:	5c c0       	rjmp	.+184    	; 0x282e <DIO_u8GetPinValue+0x112>
    2776:	4e 81       	ldd	r20, Y+6	; 0x06
    2778:	5f 81       	ldd	r21, Y+7	; 0x07
    277a:	42 30       	cpi	r20, 0x02	; 2
    277c:	51 05       	cpc	r21, r1
    277e:	79 f1       	breq	.+94     	; 0x27de <DIO_u8GetPinValue+0xc2>
    2780:	8e 81       	ldd	r24, Y+6	; 0x06
    2782:	9f 81       	ldd	r25, Y+7	; 0x07
    2784:	83 30       	cpi	r24, 0x03	; 3
    2786:	91 05       	cpc	r25, r1
    2788:	09 f4       	brne	.+2      	; 0x278c <DIO_u8GetPinValue+0x70>
    278a:	3d c0       	rjmp	.+122    	; 0x2806 <DIO_u8GetPinValue+0xea>
    278c:	50 c0       	rjmp	.+160    	; 0x282e <DIO_u8GetPinValue+0x112>
		case DIO_u8PORTA: *Copy_pu8Value = GET_BIT(PINA,Copy_u8Pin); break;
    278e:	e9 e3       	ldi	r30, 0x39	; 57
    2790:	f0 e0       	ldi	r31, 0x00	; 0
    2792:	80 81       	ld	r24, Z
    2794:	28 2f       	mov	r18, r24
    2796:	30 e0       	ldi	r19, 0x00	; 0
    2798:	8b 81       	ldd	r24, Y+3	; 0x03
    279a:	88 2f       	mov	r24, r24
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	a9 01       	movw	r20, r18
    27a0:	02 c0       	rjmp	.+4      	; 0x27a6 <DIO_u8GetPinValue+0x8a>
    27a2:	55 95       	asr	r21
    27a4:	47 95       	ror	r20
    27a6:	8a 95       	dec	r24
    27a8:	e2 f7       	brpl	.-8      	; 0x27a2 <DIO_u8GetPinValue+0x86>
    27aa:	ca 01       	movw	r24, r20
    27ac:	81 70       	andi	r24, 0x01	; 1
    27ae:	ec 81       	ldd	r30, Y+4	; 0x04
    27b0:	fd 81       	ldd	r31, Y+5	; 0x05
    27b2:	80 83       	st	Z, r24
    27b4:	41 c0       	rjmp	.+130    	; 0x2838 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTB: *Copy_pu8Value = GET_BIT(PINB,Copy_u8Pin); break;
    27b6:	e6 e3       	ldi	r30, 0x36	; 54
    27b8:	f0 e0       	ldi	r31, 0x00	; 0
    27ba:	80 81       	ld	r24, Z
    27bc:	28 2f       	mov	r18, r24
    27be:	30 e0       	ldi	r19, 0x00	; 0
    27c0:	8b 81       	ldd	r24, Y+3	; 0x03
    27c2:	88 2f       	mov	r24, r24
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	a9 01       	movw	r20, r18
    27c8:	02 c0       	rjmp	.+4      	; 0x27ce <DIO_u8GetPinValue+0xb2>
    27ca:	55 95       	asr	r21
    27cc:	47 95       	ror	r20
    27ce:	8a 95       	dec	r24
    27d0:	e2 f7       	brpl	.-8      	; 0x27ca <DIO_u8GetPinValue+0xae>
    27d2:	ca 01       	movw	r24, r20
    27d4:	81 70       	andi	r24, 0x01	; 1
    27d6:	ec 81       	ldd	r30, Y+4	; 0x04
    27d8:	fd 81       	ldd	r31, Y+5	; 0x05
    27da:	80 83       	st	Z, r24
    27dc:	2d c0       	rjmp	.+90     	; 0x2838 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTC: *Copy_pu8Value = GET_BIT(PINC,Copy_u8Pin); break;
    27de:	e3 e3       	ldi	r30, 0x33	; 51
    27e0:	f0 e0       	ldi	r31, 0x00	; 0
    27e2:	80 81       	ld	r24, Z
    27e4:	28 2f       	mov	r18, r24
    27e6:	30 e0       	ldi	r19, 0x00	; 0
    27e8:	8b 81       	ldd	r24, Y+3	; 0x03
    27ea:	88 2f       	mov	r24, r24
    27ec:	90 e0       	ldi	r25, 0x00	; 0
    27ee:	a9 01       	movw	r20, r18
    27f0:	02 c0       	rjmp	.+4      	; 0x27f6 <DIO_u8GetPinValue+0xda>
    27f2:	55 95       	asr	r21
    27f4:	47 95       	ror	r20
    27f6:	8a 95       	dec	r24
    27f8:	e2 f7       	brpl	.-8      	; 0x27f2 <DIO_u8GetPinValue+0xd6>
    27fa:	ca 01       	movw	r24, r20
    27fc:	81 70       	andi	r24, 0x01	; 1
    27fe:	ec 81       	ldd	r30, Y+4	; 0x04
    2800:	fd 81       	ldd	r31, Y+5	; 0x05
    2802:	80 83       	st	Z, r24
    2804:	19 c0       	rjmp	.+50     	; 0x2838 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTD: *Copy_pu8Value = GET_BIT(PIND,Copy_u8Pin); break;
    2806:	e0 e3       	ldi	r30, 0x30	; 48
    2808:	f0 e0       	ldi	r31, 0x00	; 0
    280a:	80 81       	ld	r24, Z
    280c:	28 2f       	mov	r18, r24
    280e:	30 e0       	ldi	r19, 0x00	; 0
    2810:	8b 81       	ldd	r24, Y+3	; 0x03
    2812:	88 2f       	mov	r24, r24
    2814:	90 e0       	ldi	r25, 0x00	; 0
    2816:	a9 01       	movw	r20, r18
    2818:	02 c0       	rjmp	.+4      	; 0x281e <DIO_u8GetPinValue+0x102>
    281a:	55 95       	asr	r21
    281c:	47 95       	ror	r20
    281e:	8a 95       	dec	r24
    2820:	e2 f7       	brpl	.-8      	; 0x281a <DIO_u8GetPinValue+0xfe>
    2822:	ca 01       	movw	r24, r20
    2824:	81 70       	andi	r24, 0x01	; 1
    2826:	ec 81       	ldd	r30, Y+4	; 0x04
    2828:	fd 81       	ldd	r31, Y+5	; 0x05
    282a:	80 83       	st	Z, r24
    282c:	05 c0       	rjmp	.+10     	; 0x2838 <DIO_u8GetPinValue+0x11c>
		default:Local_u8ErrorState=1 ;
    282e:	81 e0       	ldi	r24, 0x01	; 1
    2830:	89 83       	std	Y+1, r24	; 0x01
    2832:	02 c0       	rjmp	.+4      	; 0x2838 <DIO_u8GetPinValue+0x11c>
		}
	}
	else{
		Local_u8ErrorState=1;
    2834:	81 e0       	ldi	r24, 0x01	; 1
    2836:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState ;
    2838:	89 81       	ldd	r24, Y+1	; 0x01
}
    283a:	27 96       	adiw	r28, 0x07	; 7
    283c:	0f b6       	in	r0, 0x3f	; 63
    283e:	f8 94       	cli
    2840:	de bf       	out	0x3e, r29	; 62
    2842:	0f be       	out	0x3f, r0	; 63
    2844:	cd bf       	out	0x3d, r28	; 61
    2846:	cf 91       	pop	r28
    2848:	df 91       	pop	r29
    284a:	08 95       	ret

0000284c <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8Port,u8* Copy_pu8Value){
    284c:	df 93       	push	r29
    284e:	cf 93       	push	r28
    2850:	00 d0       	rcall	.+0      	; 0x2852 <DIO_u8GetPortValue+0x6>
    2852:	00 d0       	rcall	.+0      	; 0x2854 <DIO_u8GetPortValue+0x8>
    2854:	00 d0       	rcall	.+0      	; 0x2856 <DIO_u8GetPortValue+0xa>
    2856:	cd b7       	in	r28, 0x3d	; 61
    2858:	de b7       	in	r29, 0x3e	; 62
    285a:	8a 83       	std	Y+2, r24	; 0x02
    285c:	7c 83       	std	Y+4, r23	; 0x04
    285e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    2860:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8Port)
    2862:	8a 81       	ldd	r24, Y+2	; 0x02
    2864:	28 2f       	mov	r18, r24
    2866:	30 e0       	ldi	r19, 0x00	; 0
    2868:	3e 83       	std	Y+6, r19	; 0x06
    286a:	2d 83       	std	Y+5, r18	; 0x05
    286c:	8d 81       	ldd	r24, Y+5	; 0x05
    286e:	9e 81       	ldd	r25, Y+6	; 0x06
    2870:	81 30       	cpi	r24, 0x01	; 1
    2872:	91 05       	cpc	r25, r1
    2874:	e1 f0       	breq	.+56     	; 0x28ae <DIO_u8GetPortValue+0x62>
    2876:	2d 81       	ldd	r18, Y+5	; 0x05
    2878:	3e 81       	ldd	r19, Y+6	; 0x06
    287a:	22 30       	cpi	r18, 0x02	; 2
    287c:	31 05       	cpc	r19, r1
    287e:	2c f4       	brge	.+10     	; 0x288a <DIO_u8GetPortValue+0x3e>
    2880:	8d 81       	ldd	r24, Y+5	; 0x05
    2882:	9e 81       	ldd	r25, Y+6	; 0x06
    2884:	00 97       	sbiw	r24, 0x00	; 0
    2886:	61 f0       	breq	.+24     	; 0x28a0 <DIO_u8GetPortValue+0x54>
    2888:	27 c0       	rjmp	.+78     	; 0x28d8 <DIO_u8GetPortValue+0x8c>
    288a:	2d 81       	ldd	r18, Y+5	; 0x05
    288c:	3e 81       	ldd	r19, Y+6	; 0x06
    288e:	22 30       	cpi	r18, 0x02	; 2
    2890:	31 05       	cpc	r19, r1
    2892:	a1 f0       	breq	.+40     	; 0x28bc <DIO_u8GetPortValue+0x70>
    2894:	8d 81       	ldd	r24, Y+5	; 0x05
    2896:	9e 81       	ldd	r25, Y+6	; 0x06
    2898:	83 30       	cpi	r24, 0x03	; 3
    289a:	91 05       	cpc	r25, r1
    289c:	b1 f0       	breq	.+44     	; 0x28ca <DIO_u8GetPortValue+0x7e>
    289e:	1c c0       	rjmp	.+56     	; 0x28d8 <DIO_u8GetPortValue+0x8c>
	{
	case DIO_u8PORTA: *Copy_pu8Value = PINA; break;
    28a0:	e9 e3       	ldi	r30, 0x39	; 57
    28a2:	f0 e0       	ldi	r31, 0x00	; 0
    28a4:	80 81       	ld	r24, Z
    28a6:	eb 81       	ldd	r30, Y+3	; 0x03
    28a8:	fc 81       	ldd	r31, Y+4	; 0x04
    28aa:	80 83       	st	Z, r24
    28ac:	17 c0       	rjmp	.+46     	; 0x28dc <DIO_u8GetPortValue+0x90>
	case DIO_u8PORTB: *Copy_pu8Value = PINB; break;
    28ae:	e6 e3       	ldi	r30, 0x36	; 54
    28b0:	f0 e0       	ldi	r31, 0x00	; 0
    28b2:	80 81       	ld	r24, Z
    28b4:	eb 81       	ldd	r30, Y+3	; 0x03
    28b6:	fc 81       	ldd	r31, Y+4	; 0x04
    28b8:	80 83       	st	Z, r24
    28ba:	10 c0       	rjmp	.+32     	; 0x28dc <DIO_u8GetPortValue+0x90>
	case DIO_u8PORTC: *Copy_pu8Value = PINC; break;
    28bc:	e3 e3       	ldi	r30, 0x33	; 51
    28be:	f0 e0       	ldi	r31, 0x00	; 0
    28c0:	80 81       	ld	r24, Z
    28c2:	eb 81       	ldd	r30, Y+3	; 0x03
    28c4:	fc 81       	ldd	r31, Y+4	; 0x04
    28c6:	80 83       	st	Z, r24
    28c8:	09 c0       	rjmp	.+18     	; 0x28dc <DIO_u8GetPortValue+0x90>
	case DIO_u8PORTD: *Copy_pu8Value = PIND; break;
    28ca:	e0 e3       	ldi	r30, 0x30	; 48
    28cc:	f0 e0       	ldi	r31, 0x00	; 0
    28ce:	80 81       	ld	r24, Z
    28d0:	eb 81       	ldd	r30, Y+3	; 0x03
    28d2:	fc 81       	ldd	r31, Y+4	; 0x04
    28d4:	80 83       	st	Z, r24
    28d6:	02 c0       	rjmp	.+4      	; 0x28dc <DIO_u8GetPortValue+0x90>
	default: Local_u8ErrorState=1 ;
    28d8:	81 e0       	ldi	r24, 0x01	; 1
    28da:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    28dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    28de:	26 96       	adiw	r28, 0x06	; 6
    28e0:	0f b6       	in	r0, 0x3f	; 63
    28e2:	f8 94       	cli
    28e4:	de bf       	out	0x3e, r29	; 62
    28e6:	0f be       	out	0x3f, r0	; 63
    28e8:	cd bf       	out	0x3d, r28	; 61
    28ea:	cf 91       	pop	r28
    28ec:	df 91       	pop	r29
    28ee:	08 95       	ret

000028f0 <KPD_u8GetPressedKey>:
#include "KPD_config.h"
#include "KPD_interface.h"
#include "KPD_private.h"

u8 KPD_u8GetPressedKey(void)
{
    28f0:	df 93       	push	r29
    28f2:	cf 93       	push	r28
    28f4:	00 d0       	rcall	.+0      	; 0x28f6 <KPD_u8GetPressedKey+0x6>
    28f6:	00 d0       	rcall	.+0      	; 0x28f8 <KPD_u8GetPressedKey+0x8>
    28f8:	0f 92       	push	r0
    28fa:	cd b7       	in	r28, 0x3d	; 61
    28fc:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8PressedKey = KPD_NO_PRESSED_KEY, Local_u8ColumnIdx,Local_u8RowIdx,Local_u8PinState;
    28fe:	8f ef       	ldi	r24, 0xFF	; 255
    2900:	8b 83       	std	Y+3, r24	; 0x03
	static u8 Local_u8KPDArr[ROW_NUM][COLUMN_NUM] = KPD_ARR_VAL;
	static u8 Local_u8ColumnArr[COLUMN_NUM] ={KPD_COLUMN0_PIN,KPD_COLUMN1_PIN,KPD_COLUMN2_PIN,KPD_COLUMN3_PIN};
	static u8 Local_u8RowArr[ROW_NUM] = {KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};

	for(Local_u8ColumnIdx=0;Local_u8ColumnIdx<COLUMN_NUM;Local_u8ColumnIdx++)
    2902:	1a 82       	std	Y+2, r1	; 0x02
    2904:	5e c0       	rjmp	.+188    	; 0x29c2 <KPD_u8GetPressedKey+0xd2>
	{
		//Activate Current Column
		DIO_u8SetPinValue(KPD_PORT,Local_u8ColumnArr[Local_u8ColumnIdx],DIO_u8PIN_LOW);
    2906:	8a 81       	ldd	r24, Y+2	; 0x02
    2908:	88 2f       	mov	r24, r24
    290a:	90 e0       	ldi	r25, 0x00	; 0
    290c:	fc 01       	movw	r30, r24
    290e:	e3 5c       	subi	r30, 0xC3	; 195
    2910:	fe 4f       	sbci	r31, 0xFE	; 254
    2912:	90 81       	ld	r25, Z
    2914:	81 e0       	ldi	r24, 0x01	; 1
    2916:	69 2f       	mov	r22, r25
    2918:	40 e0       	ldi	r20, 0x00	; 0
    291a:	0e 94 34 12 	call	0x2468	; 0x2468 <DIO_u8SetPinValue>
		for(Local_u8RowIdx=0;Local_u8RowIdx<ROW_NUM;Local_u8RowIdx++)
    291e:	19 82       	std	Y+1, r1	; 0x01
    2920:	3d c0       	rjmp	.+122    	; 0x299c <KPD_u8GetPressedKey+0xac>
		{
			//Read the current Row
			DIO_u8GetPinValue(KPD_PORT,Local_u8RowArr[Local_u8RowIdx],&Local_u8PinState);
    2922:	89 81       	ldd	r24, Y+1	; 0x01
    2924:	88 2f       	mov	r24, r24
    2926:	90 e0       	ldi	r25, 0x00	; 0
    2928:	fc 01       	movw	r30, r24
    292a:	e7 5c       	subi	r30, 0xC7	; 199
    292c:	fe 4f       	sbci	r31, 0xFE	; 254
    292e:	90 81       	ld	r25, Z
    2930:	9e 01       	movw	r18, r28
    2932:	2c 5f       	subi	r18, 0xFC	; 252
    2934:	3f 4f       	sbci	r19, 0xFF	; 255
    2936:	81 e0       	ldi	r24, 0x01	; 1
    2938:	69 2f       	mov	r22, r25
    293a:	a9 01       	movw	r20, r18
    293c:	0e 94 8e 13 	call	0x271c	; 0x271c <DIO_u8GetPinValue>
			//check if switch is pressed
			if(DIO_u8PIN_LOW==Local_u8PinState)
    2940:	8c 81       	ldd	r24, Y+4	; 0x04
    2942:	88 23       	and	r24, r24
    2944:	41 f5       	brne	.+80     	; 0x2996 <KPD_u8GetPressedKey+0xa6>
			{
				Local_u8PressedKey= Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumnIdx];
    2946:	89 81       	ldd	r24, Y+1	; 0x01
    2948:	48 2f       	mov	r20, r24
    294a:	50 e0       	ldi	r21, 0x00	; 0
    294c:	8a 81       	ldd	r24, Y+2	; 0x02
    294e:	28 2f       	mov	r18, r24
    2950:	30 e0       	ldi	r19, 0x00	; 0
    2952:	ca 01       	movw	r24, r20
    2954:	88 0f       	add	r24, r24
    2956:	99 1f       	adc	r25, r25
    2958:	88 0f       	add	r24, r24
    295a:	99 1f       	adc	r25, r25
    295c:	82 0f       	add	r24, r18
    295e:	93 1f       	adc	r25, r19
    2960:	fc 01       	movw	r30, r24
    2962:	ef 5b       	subi	r30, 0xBF	; 191
    2964:	fe 4f       	sbci	r31, 0xFE	; 254
    2966:	80 81       	ld	r24, Z
    2968:	8b 83       	std	Y+3, r24	; 0x03
    296a:	0f c0       	rjmp	.+30     	; 0x298a <KPD_u8GetPressedKey+0x9a>
				//polling(busy waiting until the key is released
				while(DIO_u8PIN_LOW==Local_u8PinState)
				{
					DIO_u8GetPinValue(KPD_PORT,Local_u8RowArr[Local_u8RowIdx],&Local_u8PinState);
    296c:	89 81       	ldd	r24, Y+1	; 0x01
    296e:	88 2f       	mov	r24, r24
    2970:	90 e0       	ldi	r25, 0x00	; 0
    2972:	fc 01       	movw	r30, r24
    2974:	e7 5c       	subi	r30, 0xC7	; 199
    2976:	fe 4f       	sbci	r31, 0xFE	; 254
    2978:	90 81       	ld	r25, Z
    297a:	9e 01       	movw	r18, r28
    297c:	2c 5f       	subi	r18, 0xFC	; 252
    297e:	3f 4f       	sbci	r19, 0xFF	; 255
    2980:	81 e0       	ldi	r24, 0x01	; 1
    2982:	69 2f       	mov	r22, r25
    2984:	a9 01       	movw	r20, r18
    2986:	0e 94 8e 13 	call	0x271c	; 0x271c <DIO_u8GetPinValue>
			//check if switch is pressed
			if(DIO_u8PIN_LOW==Local_u8PinState)
			{
				Local_u8PressedKey= Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumnIdx];
				//polling(busy waiting until the key is released
				while(DIO_u8PIN_LOW==Local_u8PinState)
    298a:	8c 81       	ldd	r24, Y+4	; 0x04
    298c:	88 23       	and	r24, r24
    298e:	71 f3       	breq	.-36     	; 0x296c <KPD_u8GetPressedKey+0x7c>
				{
					DIO_u8GetPinValue(KPD_PORT,Local_u8RowArr[Local_u8RowIdx],&Local_u8PinState);
				}
				return Local_u8PressedKey;
    2990:	8b 81       	ldd	r24, Y+3	; 0x03
    2992:	8d 83       	std	Y+5, r24	; 0x05
    2994:	1c c0       	rjmp	.+56     	; 0x29ce <KPD_u8GetPressedKey+0xde>

	for(Local_u8ColumnIdx=0;Local_u8ColumnIdx<COLUMN_NUM;Local_u8ColumnIdx++)
	{
		//Activate Current Column
		DIO_u8SetPinValue(KPD_PORT,Local_u8ColumnArr[Local_u8ColumnIdx],DIO_u8PIN_LOW);
		for(Local_u8RowIdx=0;Local_u8RowIdx<ROW_NUM;Local_u8RowIdx++)
    2996:	89 81       	ldd	r24, Y+1	; 0x01
    2998:	8f 5f       	subi	r24, 0xFF	; 255
    299a:	89 83       	std	Y+1, r24	; 0x01
    299c:	89 81       	ldd	r24, Y+1	; 0x01
    299e:	84 30       	cpi	r24, 0x04	; 4
    29a0:	08 f4       	brcc	.+2      	; 0x29a4 <KPD_u8GetPressedKey+0xb4>
    29a2:	bf cf       	rjmp	.-130    	; 0x2922 <KPD_u8GetPressedKey+0x32>
				}
				return Local_u8PressedKey;
			}
		}
		//Activate Current Column
		DIO_u8SetPinValue(KPD_PORT,Local_u8ColumnArr[Local_u8ColumnIdx],DIO_u8PIN_HIGH);
    29a4:	8a 81       	ldd	r24, Y+2	; 0x02
    29a6:	88 2f       	mov	r24, r24
    29a8:	90 e0       	ldi	r25, 0x00	; 0
    29aa:	fc 01       	movw	r30, r24
    29ac:	e3 5c       	subi	r30, 0xC3	; 195
    29ae:	fe 4f       	sbci	r31, 0xFE	; 254
    29b0:	90 81       	ld	r25, Z
    29b2:	81 e0       	ldi	r24, 0x01	; 1
    29b4:	69 2f       	mov	r22, r25
    29b6:	41 e0       	ldi	r20, 0x01	; 1
    29b8:	0e 94 34 12 	call	0x2468	; 0x2468 <DIO_u8SetPinValue>
	u8 Local_u8PressedKey = KPD_NO_PRESSED_KEY, Local_u8ColumnIdx,Local_u8RowIdx,Local_u8PinState;
	static u8 Local_u8KPDArr[ROW_NUM][COLUMN_NUM] = KPD_ARR_VAL;
	static u8 Local_u8ColumnArr[COLUMN_NUM] ={KPD_COLUMN0_PIN,KPD_COLUMN1_PIN,KPD_COLUMN2_PIN,KPD_COLUMN3_PIN};
	static u8 Local_u8RowArr[ROW_NUM] = {KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};

	for(Local_u8ColumnIdx=0;Local_u8ColumnIdx<COLUMN_NUM;Local_u8ColumnIdx++)
    29bc:	8a 81       	ldd	r24, Y+2	; 0x02
    29be:	8f 5f       	subi	r24, 0xFF	; 255
    29c0:	8a 83       	std	Y+2, r24	; 0x02
    29c2:	8a 81       	ldd	r24, Y+2	; 0x02
    29c4:	84 30       	cpi	r24, 0x04	; 4
    29c6:	08 f4       	brcc	.+2      	; 0x29ca <KPD_u8GetPressedKey+0xda>
    29c8:	9e cf       	rjmp	.-196    	; 0x2906 <KPD_u8GetPressedKey+0x16>
		}
		//Activate Current Column
		DIO_u8SetPinValue(KPD_PORT,Local_u8ColumnArr[Local_u8ColumnIdx],DIO_u8PIN_HIGH);
	}

	return Local_u8PressedKey;
    29ca:	8b 81       	ldd	r24, Y+3	; 0x03
    29cc:	8d 83       	std	Y+5, r24	; 0x05
    29ce:	8d 81       	ldd	r24, Y+5	; 0x05
}
    29d0:	0f 90       	pop	r0
    29d2:	0f 90       	pop	r0
    29d4:	0f 90       	pop	r0
    29d6:	0f 90       	pop	r0
    29d8:	0f 90       	pop	r0
    29da:	cf 91       	pop	r28
    29dc:	df 91       	pop	r29
    29de:	08 95       	ret

000029e0 <MATH_u32Power>:
#include "STD_TYPES.h"
#include "BIT_MATH.h"
#include "MATH_HELPER.h"

u32 MATH_u32Power(u32 Copy_u32Base,s32 Copy_u32Exponent){
    29e0:	df 93       	push	r29
    29e2:	cf 93       	push	r28
    29e4:	cd b7       	in	r28, 0x3d	; 61
    29e6:	de b7       	in	r29, 0x3e	; 62
    29e8:	60 97       	sbiw	r28, 0x10	; 16
    29ea:	0f b6       	in	r0, 0x3f	; 63
    29ec:	f8 94       	cli
    29ee:	de bf       	out	0x3e, r29	; 62
    29f0:	0f be       	out	0x3f, r0	; 63
    29f2:	cd bf       	out	0x3d, r28	; 61
    29f4:	69 87       	std	Y+9, r22	; 0x09
    29f6:	7a 87       	std	Y+10, r23	; 0x0a
    29f8:	8b 87       	std	Y+11, r24	; 0x0b
    29fa:	9c 87       	std	Y+12, r25	; 0x0c
    29fc:	2d 87       	std	Y+13, r18	; 0x0d
    29fe:	3e 87       	std	Y+14, r19	; 0x0e
    2a00:	4f 87       	std	Y+15, r20	; 0x0f
    2a02:	58 8b       	std	Y+16, r21	; 0x10
	u32 Local_u32Result=1;
    2a04:	81 e0       	ldi	r24, 0x01	; 1
    2a06:	90 e0       	ldi	r25, 0x00	; 0
    2a08:	a0 e0       	ldi	r26, 0x00	; 0
    2a0a:	b0 e0       	ldi	r27, 0x00	; 0
    2a0c:	8d 83       	std	Y+5, r24	; 0x05
    2a0e:	9e 83       	std	Y+6, r25	; 0x06
    2a10:	af 83       	std	Y+7, r26	; 0x07
    2a12:	b8 87       	std	Y+8, r27	; 0x08
	for(u32 i=0;i<Copy_u32Exponent;i++){
    2a14:	19 82       	std	Y+1, r1	; 0x01
    2a16:	1a 82       	std	Y+2, r1	; 0x02
    2a18:	1b 82       	std	Y+3, r1	; 0x03
    2a1a:	1c 82       	std	Y+4, r1	; 0x04
    2a1c:	1d c0       	rjmp	.+58     	; 0x2a58 <MATH_u32Power+0x78>
		Local_u32Result*=Copy_u32Base;
    2a1e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a20:	9e 81       	ldd	r25, Y+6	; 0x06
    2a22:	af 81       	ldd	r26, Y+7	; 0x07
    2a24:	b8 85       	ldd	r27, Y+8	; 0x08
    2a26:	29 85       	ldd	r18, Y+9	; 0x09
    2a28:	3a 85       	ldd	r19, Y+10	; 0x0a
    2a2a:	4b 85       	ldd	r20, Y+11	; 0x0b
    2a2c:	5c 85       	ldd	r21, Y+12	; 0x0c
    2a2e:	bc 01       	movw	r22, r24
    2a30:	cd 01       	movw	r24, r26
    2a32:	0e 94 57 1d 	call	0x3aae	; 0x3aae <__mulsi3>
    2a36:	dc 01       	movw	r26, r24
    2a38:	cb 01       	movw	r24, r22
    2a3a:	8d 83       	std	Y+5, r24	; 0x05
    2a3c:	9e 83       	std	Y+6, r25	; 0x06
    2a3e:	af 83       	std	Y+7, r26	; 0x07
    2a40:	b8 87       	std	Y+8, r27	; 0x08
#include "BIT_MATH.h"
#include "MATH_HELPER.h"

u32 MATH_u32Power(u32 Copy_u32Base,s32 Copy_u32Exponent){
	u32 Local_u32Result=1;
	for(u32 i=0;i<Copy_u32Exponent;i++){
    2a42:	89 81       	ldd	r24, Y+1	; 0x01
    2a44:	9a 81       	ldd	r25, Y+2	; 0x02
    2a46:	ab 81       	ldd	r26, Y+3	; 0x03
    2a48:	bc 81       	ldd	r27, Y+4	; 0x04
    2a4a:	01 96       	adiw	r24, 0x01	; 1
    2a4c:	a1 1d       	adc	r26, r1
    2a4e:	b1 1d       	adc	r27, r1
    2a50:	89 83       	std	Y+1, r24	; 0x01
    2a52:	9a 83       	std	Y+2, r25	; 0x02
    2a54:	ab 83       	std	Y+3, r26	; 0x03
    2a56:	bc 83       	std	Y+4, r27	; 0x04
    2a58:	2d 85       	ldd	r18, Y+13	; 0x0d
    2a5a:	3e 85       	ldd	r19, Y+14	; 0x0e
    2a5c:	4f 85       	ldd	r20, Y+15	; 0x0f
    2a5e:	58 89       	ldd	r21, Y+16	; 0x10
    2a60:	89 81       	ldd	r24, Y+1	; 0x01
    2a62:	9a 81       	ldd	r25, Y+2	; 0x02
    2a64:	ab 81       	ldd	r26, Y+3	; 0x03
    2a66:	bc 81       	ldd	r27, Y+4	; 0x04
    2a68:	82 17       	cp	r24, r18
    2a6a:	93 07       	cpc	r25, r19
    2a6c:	a4 07       	cpc	r26, r20
    2a6e:	b5 07       	cpc	r27, r21
    2a70:	b0 f2       	brcs	.-84     	; 0x2a1e <MATH_u32Power+0x3e>
		Local_u32Result*=Copy_u32Base;
	}
	return Local_u32Result;
    2a72:	8d 81       	ldd	r24, Y+5	; 0x05
    2a74:	9e 81       	ldd	r25, Y+6	; 0x06
    2a76:	af 81       	ldd	r26, Y+7	; 0x07
    2a78:	b8 85       	ldd	r27, Y+8	; 0x08
}
    2a7a:	bc 01       	movw	r22, r24
    2a7c:	cd 01       	movw	r24, r26
    2a7e:	60 96       	adiw	r28, 0x10	; 16
    2a80:	0f b6       	in	r0, 0x3f	; 63
    2a82:	f8 94       	cli
    2a84:	de bf       	out	0x3e, r29	; 62
    2a86:	0f be       	out	0x3f, r0	; 63
    2a88:	cd bf       	out	0x3d, r28	; 61
    2a8a:	cf 91       	pop	r28
    2a8c:	df 91       	pop	r29
    2a8e:	08 95       	ret

00002a90 <MATH_s32Map>:

s32 MATH_s32Map(s32 Copy_s32InputMin,s32 Copy_s32InputMax,s32 Copy_s32OutputMin,s32 Copy_s32OutputMax,s32 Copy_s32InputVal){
    2a90:	af 92       	push	r10
    2a92:	bf 92       	push	r11
    2a94:	cf 92       	push	r12
    2a96:	df 92       	push	r13
    2a98:	ef 92       	push	r14
    2a9a:	ff 92       	push	r15
    2a9c:	0f 93       	push	r16
    2a9e:	1f 93       	push	r17
    2aa0:	df 93       	push	r29
    2aa2:	cf 93       	push	r28
    2aa4:	cd b7       	in	r28, 0x3d	; 61
    2aa6:	de b7       	in	r29, 0x3e	; 62
    2aa8:	64 97       	sbiw	r28, 0x14	; 20
    2aaa:	0f b6       	in	r0, 0x3f	; 63
    2aac:	f8 94       	cli
    2aae:	de bf       	out	0x3e, r29	; 62
    2ab0:	0f be       	out	0x3f, r0	; 63
    2ab2:	cd bf       	out	0x3d, r28	; 61
    2ab4:	6d 83       	std	Y+5, r22	; 0x05
    2ab6:	7e 83       	std	Y+6, r23	; 0x06
    2ab8:	8f 83       	std	Y+7, r24	; 0x07
    2aba:	98 87       	std	Y+8, r25	; 0x08
    2abc:	29 87       	std	Y+9, r18	; 0x09
    2abe:	3a 87       	std	Y+10, r19	; 0x0a
    2ac0:	4b 87       	std	Y+11, r20	; 0x0b
    2ac2:	5c 87       	std	Y+12, r21	; 0x0c
    2ac4:	ed 86       	std	Y+13, r14	; 0x0d
    2ac6:	fe 86       	std	Y+14, r15	; 0x0e
    2ac8:	0f 87       	std	Y+15, r16	; 0x0f
    2aca:	18 8b       	std	Y+16, r17	; 0x10
    2acc:	a9 8a       	std	Y+17, r10	; 0x11
    2ace:	ba 8a       	std	Y+18, r11	; 0x12
    2ad0:	cb 8a       	std	Y+19, r12	; 0x13
    2ad2:	dc 8a       	std	Y+20, r13	; 0x14
    s32 Local_s32OutputVal;
    Local_s32OutputVal= (((Copy_s32OutputMax-Copy_s32OutputMin)*(Copy_s32InputVal-Copy_s32InputMin))/(Copy_s32InputMax-Copy_s32InputMin))+Copy_s32OutputMin;
    2ad4:	29 89       	ldd	r18, Y+17	; 0x11
    2ad6:	3a 89       	ldd	r19, Y+18	; 0x12
    2ad8:	4b 89       	ldd	r20, Y+19	; 0x13
    2ada:	5c 89       	ldd	r21, Y+20	; 0x14
    2adc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ade:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ae0:	af 85       	ldd	r26, Y+15	; 0x0f
    2ae2:	b8 89       	ldd	r27, Y+16	; 0x10
    2ae4:	79 01       	movw	r14, r18
    2ae6:	8a 01       	movw	r16, r20
    2ae8:	e8 1a       	sub	r14, r24
    2aea:	f9 0a       	sbc	r15, r25
    2aec:	0a 0b       	sbc	r16, r26
    2aee:	1b 0b       	sbc	r17, r27
    2af0:	29 a1       	ldd	r18, Y+33	; 0x21
    2af2:	3a a1       	ldd	r19, Y+34	; 0x22
    2af4:	4b a1       	ldd	r20, Y+35	; 0x23
    2af6:	5c a1       	ldd	r21, Y+36	; 0x24
    2af8:	8d 81       	ldd	r24, Y+5	; 0x05
    2afa:	9e 81       	ldd	r25, Y+6	; 0x06
    2afc:	af 81       	ldd	r26, Y+7	; 0x07
    2afe:	b8 85       	ldd	r27, Y+8	; 0x08
    2b00:	28 1b       	sub	r18, r24
    2b02:	39 0b       	sbc	r19, r25
    2b04:	4a 0b       	sbc	r20, r26
    2b06:	5b 0b       	sbc	r21, r27
    2b08:	c8 01       	movw	r24, r16
    2b0a:	b7 01       	movw	r22, r14
    2b0c:	0e 94 57 1d 	call	0x3aae	; 0x3aae <__mulsi3>
    2b10:	7b 01       	movw	r14, r22
    2b12:	8c 01       	movw	r16, r24
    2b14:	29 85       	ldd	r18, Y+9	; 0x09
    2b16:	3a 85       	ldd	r19, Y+10	; 0x0a
    2b18:	4b 85       	ldd	r20, Y+11	; 0x0b
    2b1a:	5c 85       	ldd	r21, Y+12	; 0x0c
    2b1c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b1e:	9e 81       	ldd	r25, Y+6	; 0x06
    2b20:	af 81       	ldd	r26, Y+7	; 0x07
    2b22:	b8 85       	ldd	r27, Y+8	; 0x08
    2b24:	28 1b       	sub	r18, r24
    2b26:	39 0b       	sbc	r19, r25
    2b28:	4a 0b       	sbc	r20, r26
    2b2a:	5b 0b       	sbc	r21, r27
    2b2c:	c8 01       	movw	r24, r16
    2b2e:	b7 01       	movw	r22, r14
    2b30:	0e 94 98 1d 	call	0x3b30	; 0x3b30 <__divmodsi4>
    2b34:	da 01       	movw	r26, r20
    2b36:	c9 01       	movw	r24, r18
    2b38:	9c 01       	movw	r18, r24
    2b3a:	ad 01       	movw	r20, r26
    2b3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b40:	af 85       	ldd	r26, Y+15	; 0x0f
    2b42:	b8 89       	ldd	r27, Y+16	; 0x10
    2b44:	82 0f       	add	r24, r18
    2b46:	93 1f       	adc	r25, r19
    2b48:	a4 1f       	adc	r26, r20
    2b4a:	b5 1f       	adc	r27, r21
    2b4c:	89 83       	std	Y+1, r24	; 0x01
    2b4e:	9a 83       	std	Y+2, r25	; 0x02
    2b50:	ab 83       	std	Y+3, r26	; 0x03
    2b52:	bc 83       	std	Y+4, r27	; 0x04
    return Local_s32OutputVal;
    2b54:	89 81       	ldd	r24, Y+1	; 0x01
    2b56:	9a 81       	ldd	r25, Y+2	; 0x02
    2b58:	ab 81       	ldd	r26, Y+3	; 0x03
    2b5a:	bc 81       	ldd	r27, Y+4	; 0x04
    2b5c:	bc 01       	movw	r22, r24
    2b5e:	cd 01       	movw	r24, r26
    2b60:	64 96       	adiw	r28, 0x14	; 20
    2b62:	0f b6       	in	r0, 0x3f	; 63
    2b64:	f8 94       	cli
    2b66:	de bf       	out	0x3e, r29	; 62
    2b68:	0f be       	out	0x3f, r0	; 63
    2b6a:	cd bf       	out	0x3d, r28	; 61
    2b6c:	cf 91       	pop	r28
    2b6e:	df 91       	pop	r29
    2b70:	1f 91       	pop	r17
    2b72:	0f 91       	pop	r16
    2b74:	ff 90       	pop	r15
    2b76:	ef 90       	pop	r14
    2b78:	df 90       	pop	r13
    2b7a:	cf 90       	pop	r12
    2b7c:	bf 90       	pop	r11
    2b7e:	af 90       	pop	r10
    2b80:	08 95       	ret

00002b82 <PORT_voidInit>:
#include "PORT_config.h"
#include "PORT_private.h"
#include "PORT_interface.h"
#include "PORT_register.h"

void PORT_voidInit(){
    2b82:	df 93       	push	r29
    2b84:	cf 93       	push	r28
    2b86:	cd b7       	in	r28, 0x3d	; 61
    2b88:	de b7       	in	r29, 0x3e	; 62
    DDRA=PORTA_DIR;
    2b8a:	ea e3       	ldi	r30, 0x3A	; 58
    2b8c:	f0 e0       	ldi	r31, 0x00	; 0
    2b8e:	8c ef       	ldi	r24, 0xFC	; 252
    2b90:	80 83       	st	Z, r24
    DDRB=PORTB_DIR;
    2b92:	e7 e3       	ldi	r30, 0x37	; 55
    2b94:	f0 e0       	ldi	r31, 0x00	; 0
    2b96:	8f e0       	ldi	r24, 0x0F	; 15
    2b98:	80 83       	st	Z, r24
    DDRC=PORTC_DIR;
    2b9a:	e4 e3       	ldi	r30, 0x34	; 52
    2b9c:	f0 e0       	ldi	r31, 0x00	; 0
    2b9e:	8f ef       	ldi	r24, 0xFF	; 255
    2ba0:	80 83       	st	Z, r24
    DDRD=PORTD_DIR;
    2ba2:	e1 e3       	ldi	r30, 0x31	; 49
    2ba4:	f0 e0       	ldi	r31, 0x00	; 0
    2ba6:	8f e3       	ldi	r24, 0x3F	; 63
    2ba8:	80 83       	st	Z, r24
    
    PORTA=PORTA_INIT_VAL;
    2baa:	eb e3       	ldi	r30, 0x3B	; 59
    2bac:	f0 e0       	ldi	r31, 0x00	; 0
    2bae:	10 82       	st	Z, r1
    PORTB=PORTB_INIT_VAL;
    2bb0:	e8 e3       	ldi	r30, 0x38	; 56
    2bb2:	f0 e0       	ldi	r31, 0x00	; 0
    2bb4:	8f ef       	ldi	r24, 0xFF	; 255
    2bb6:	80 83       	st	Z, r24
    PORTC=PORTC_INIT_VAL;
    2bb8:	e5 e3       	ldi	r30, 0x35	; 53
    2bba:	f0 e0       	ldi	r31, 0x00	; 0
    2bbc:	10 82       	st	Z, r1
    PORTD=PORTD_INIT_VAL;
    2bbe:	e2 e3       	ldi	r30, 0x32	; 50
    2bc0:	f0 e0       	ldi	r31, 0x00	; 0
    2bc2:	10 82       	st	Z, r1
}
    2bc4:	cf 91       	pop	r28
    2bc6:	df 91       	pop	r29
    2bc8:	08 95       	ret

00002bca <STPR_voidRotateClockwise>:

#include "STPR_config.h"
#include "STPR_private.h"
#include "STPR_Interface.h"

void STPR_voidRotateClockwise(){
    2bca:	df 93       	push	r29
    2bcc:	cf 93       	push	r28
    2bce:	cd b7       	in	r28, 0x3d	; 61
    2bd0:	de b7       	in	r29, 0x3e	; 62
    2bd2:	e8 97       	sbiw	r28, 0x38	; 56
    2bd4:	0f b6       	in	r0, 0x3f	; 63
    2bd6:	f8 94       	cli
    2bd8:	de bf       	out	0x3e, r29	; 62
    2bda:	0f be       	out	0x3f, r0	; 63
    2bdc:	cd bf       	out	0x3d, r28	; 61
	DIO_u8SetPinValue(STPR_PORT,STPR_COIL_BLUE,DIO_u8PIN_LOW);
    2bde:	83 e0       	ldi	r24, 0x03	; 3
    2be0:	60 e0       	ldi	r22, 0x00	; 0
    2be2:	40 e0       	ldi	r20, 0x00	; 0
    2be4:	0e 94 34 12 	call	0x2468	; 0x2468 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STPR_PORT,STPR_COIL_PINK,DIO_u8PIN_LOW);
    2be8:	83 e0       	ldi	r24, 0x03	; 3
    2bea:	61 e0       	ldi	r22, 0x01	; 1
    2bec:	40 e0       	ldi	r20, 0x00	; 0
    2bee:	0e 94 34 12 	call	0x2468	; 0x2468 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STPR_PORT,STPR_COIL_YELLOW,DIO_u8PIN_LOW);
    2bf2:	83 e0       	ldi	r24, 0x03	; 3
    2bf4:	62 e0       	ldi	r22, 0x02	; 2
    2bf6:	40 e0       	ldi	r20, 0x00	; 0
    2bf8:	0e 94 34 12 	call	0x2468	; 0x2468 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STPR_PORT,STPR_COIL_ORANGE,DIO_u8PIN_HIGH);
    2bfc:	83 e0       	ldi	r24, 0x03	; 3
    2bfe:	63 e0       	ldi	r22, 0x03	; 3
    2c00:	41 e0       	ldi	r20, 0x01	; 1
    2c02:	0e 94 34 12 	call	0x2468	; 0x2468 <DIO_u8SetPinValue>
    2c06:	80 e0       	ldi	r24, 0x00	; 0
    2c08:	90 e0       	ldi	r25, 0x00	; 0
    2c0a:	a0 e0       	ldi	r26, 0x00	; 0
    2c0c:	b0 e4       	ldi	r27, 0x40	; 64
    2c0e:	8d ab       	std	Y+53, r24	; 0x35
    2c10:	9e ab       	std	Y+54, r25	; 0x36
    2c12:	af ab       	std	Y+55, r26	; 0x37
    2c14:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c16:	6d a9       	ldd	r22, Y+53	; 0x35
    2c18:	7e a9       	ldd	r23, Y+54	; 0x36
    2c1a:	8f a9       	ldd	r24, Y+55	; 0x37
    2c1c:	98 ad       	ldd	r25, Y+56	; 0x38
    2c1e:	20 e0       	ldi	r18, 0x00	; 0
    2c20:	30 e0       	ldi	r19, 0x00	; 0
    2c22:	4a ef       	ldi	r20, 0xFA	; 250
    2c24:	54 e4       	ldi	r21, 0x44	; 68
    2c26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c2a:	dc 01       	movw	r26, r24
    2c2c:	cb 01       	movw	r24, r22
    2c2e:	89 ab       	std	Y+49, r24	; 0x31
    2c30:	9a ab       	std	Y+50, r25	; 0x32
    2c32:	ab ab       	std	Y+51, r26	; 0x33
    2c34:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2c36:	69 a9       	ldd	r22, Y+49	; 0x31
    2c38:	7a a9       	ldd	r23, Y+50	; 0x32
    2c3a:	8b a9       	ldd	r24, Y+51	; 0x33
    2c3c:	9c a9       	ldd	r25, Y+52	; 0x34
    2c3e:	20 e0       	ldi	r18, 0x00	; 0
    2c40:	30 e0       	ldi	r19, 0x00	; 0
    2c42:	40 e8       	ldi	r20, 0x80	; 128
    2c44:	5f e3       	ldi	r21, 0x3F	; 63
    2c46:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c4a:	88 23       	and	r24, r24
    2c4c:	2c f4       	brge	.+10     	; 0x2c58 <STPR_voidRotateClockwise+0x8e>
		__ticks = 1;
    2c4e:	81 e0       	ldi	r24, 0x01	; 1
    2c50:	90 e0       	ldi	r25, 0x00	; 0
    2c52:	98 ab       	std	Y+48, r25	; 0x30
    2c54:	8f a7       	std	Y+47, r24	; 0x2f
    2c56:	3f c0       	rjmp	.+126    	; 0x2cd6 <STPR_voidRotateClockwise+0x10c>
	else if (__tmp > 65535)
    2c58:	69 a9       	ldd	r22, Y+49	; 0x31
    2c5a:	7a a9       	ldd	r23, Y+50	; 0x32
    2c5c:	8b a9       	ldd	r24, Y+51	; 0x33
    2c5e:	9c a9       	ldd	r25, Y+52	; 0x34
    2c60:	20 e0       	ldi	r18, 0x00	; 0
    2c62:	3f ef       	ldi	r19, 0xFF	; 255
    2c64:	4f e7       	ldi	r20, 0x7F	; 127
    2c66:	57 e4       	ldi	r21, 0x47	; 71
    2c68:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c6c:	18 16       	cp	r1, r24
    2c6e:	4c f5       	brge	.+82     	; 0x2cc2 <STPR_voidRotateClockwise+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c70:	6d a9       	ldd	r22, Y+53	; 0x35
    2c72:	7e a9       	ldd	r23, Y+54	; 0x36
    2c74:	8f a9       	ldd	r24, Y+55	; 0x37
    2c76:	98 ad       	ldd	r25, Y+56	; 0x38
    2c78:	20 e0       	ldi	r18, 0x00	; 0
    2c7a:	30 e0       	ldi	r19, 0x00	; 0
    2c7c:	40 e2       	ldi	r20, 0x20	; 32
    2c7e:	51 e4       	ldi	r21, 0x41	; 65
    2c80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c84:	dc 01       	movw	r26, r24
    2c86:	cb 01       	movw	r24, r22
    2c88:	bc 01       	movw	r22, r24
    2c8a:	cd 01       	movw	r24, r26
    2c8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c90:	dc 01       	movw	r26, r24
    2c92:	cb 01       	movw	r24, r22
    2c94:	98 ab       	std	Y+48, r25	; 0x30
    2c96:	8f a7       	std	Y+47, r24	; 0x2f
    2c98:	0f c0       	rjmp	.+30     	; 0x2cb8 <STPR_voidRotateClockwise+0xee>
    2c9a:	88 ec       	ldi	r24, 0xC8	; 200
    2c9c:	90 e0       	ldi	r25, 0x00	; 0
    2c9e:	9e a7       	std	Y+46, r25	; 0x2e
    2ca0:	8d a7       	std	Y+45, r24	; 0x2d
    2ca2:	8d a5       	ldd	r24, Y+45	; 0x2d
    2ca4:	9e a5       	ldd	r25, Y+46	; 0x2e
    2ca6:	01 97       	sbiw	r24, 0x01	; 1
    2ca8:	f1 f7       	brne	.-4      	; 0x2ca6 <STPR_voidRotateClockwise+0xdc>
    2caa:	9e a7       	std	Y+46, r25	; 0x2e
    2cac:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cae:	8f a5       	ldd	r24, Y+47	; 0x2f
    2cb0:	98 a9       	ldd	r25, Y+48	; 0x30
    2cb2:	01 97       	sbiw	r24, 0x01	; 1
    2cb4:	98 ab       	std	Y+48, r25	; 0x30
    2cb6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cb8:	8f a5       	ldd	r24, Y+47	; 0x2f
    2cba:	98 a9       	ldd	r25, Y+48	; 0x30
    2cbc:	00 97       	sbiw	r24, 0x00	; 0
    2cbe:	69 f7       	brne	.-38     	; 0x2c9a <STPR_voidRotateClockwise+0xd0>
    2cc0:	14 c0       	rjmp	.+40     	; 0x2cea <STPR_voidRotateClockwise+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cc2:	69 a9       	ldd	r22, Y+49	; 0x31
    2cc4:	7a a9       	ldd	r23, Y+50	; 0x32
    2cc6:	8b a9       	ldd	r24, Y+51	; 0x33
    2cc8:	9c a9       	ldd	r25, Y+52	; 0x34
    2cca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cce:	dc 01       	movw	r26, r24
    2cd0:	cb 01       	movw	r24, r22
    2cd2:	98 ab       	std	Y+48, r25	; 0x30
    2cd4:	8f a7       	std	Y+47, r24	; 0x2f
    2cd6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2cd8:	98 a9       	ldd	r25, Y+48	; 0x30
    2cda:	9c a7       	std	Y+44, r25	; 0x2c
    2cdc:	8b a7       	std	Y+43, r24	; 0x2b
    2cde:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ce0:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ce2:	01 97       	sbiw	r24, 0x01	; 1
    2ce4:	f1 f7       	brne	.-4      	; 0x2ce2 <STPR_voidRotateClockwise+0x118>
    2ce6:	9c a7       	std	Y+44, r25	; 0x2c
    2ce8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	DIO_u8SetPinValue(STPR_PORT,STPR_COIL_BLUE,DIO_u8PIN_LOW);
    2cea:	83 e0       	ldi	r24, 0x03	; 3
    2cec:	60 e0       	ldi	r22, 0x00	; 0
    2cee:	40 e0       	ldi	r20, 0x00	; 0
    2cf0:	0e 94 34 12 	call	0x2468	; 0x2468 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STPR_PORT,STPR_COIL_PINK,DIO_u8PIN_LOW);
    2cf4:	83 e0       	ldi	r24, 0x03	; 3
    2cf6:	61 e0       	ldi	r22, 0x01	; 1
    2cf8:	40 e0       	ldi	r20, 0x00	; 0
    2cfa:	0e 94 34 12 	call	0x2468	; 0x2468 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STPR_PORT,STPR_COIL_YELLOW,DIO_u8PIN_HIGH);
    2cfe:	83 e0       	ldi	r24, 0x03	; 3
    2d00:	62 e0       	ldi	r22, 0x02	; 2
    2d02:	41 e0       	ldi	r20, 0x01	; 1
    2d04:	0e 94 34 12 	call	0x2468	; 0x2468 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STPR_PORT,STPR_COIL_ORANGE,DIO_u8PIN_LOW);
    2d08:	83 e0       	ldi	r24, 0x03	; 3
    2d0a:	63 e0       	ldi	r22, 0x03	; 3
    2d0c:	40 e0       	ldi	r20, 0x00	; 0
    2d0e:	0e 94 34 12 	call	0x2468	; 0x2468 <DIO_u8SetPinValue>
    2d12:	80 e0       	ldi	r24, 0x00	; 0
    2d14:	90 e0       	ldi	r25, 0x00	; 0
    2d16:	a0 e0       	ldi	r26, 0x00	; 0
    2d18:	b0 e4       	ldi	r27, 0x40	; 64
    2d1a:	8f a3       	std	Y+39, r24	; 0x27
    2d1c:	98 a7       	std	Y+40, r25	; 0x28
    2d1e:	a9 a7       	std	Y+41, r26	; 0x29
    2d20:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d22:	6f a1       	ldd	r22, Y+39	; 0x27
    2d24:	78 a5       	ldd	r23, Y+40	; 0x28
    2d26:	89 a5       	ldd	r24, Y+41	; 0x29
    2d28:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d2a:	20 e0       	ldi	r18, 0x00	; 0
    2d2c:	30 e0       	ldi	r19, 0x00	; 0
    2d2e:	4a ef       	ldi	r20, 0xFA	; 250
    2d30:	54 e4       	ldi	r21, 0x44	; 68
    2d32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d36:	dc 01       	movw	r26, r24
    2d38:	cb 01       	movw	r24, r22
    2d3a:	8b a3       	std	Y+35, r24	; 0x23
    2d3c:	9c a3       	std	Y+36, r25	; 0x24
    2d3e:	ad a3       	std	Y+37, r26	; 0x25
    2d40:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2d42:	6b a1       	ldd	r22, Y+35	; 0x23
    2d44:	7c a1       	ldd	r23, Y+36	; 0x24
    2d46:	8d a1       	ldd	r24, Y+37	; 0x25
    2d48:	9e a1       	ldd	r25, Y+38	; 0x26
    2d4a:	20 e0       	ldi	r18, 0x00	; 0
    2d4c:	30 e0       	ldi	r19, 0x00	; 0
    2d4e:	40 e8       	ldi	r20, 0x80	; 128
    2d50:	5f e3       	ldi	r21, 0x3F	; 63
    2d52:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d56:	88 23       	and	r24, r24
    2d58:	2c f4       	brge	.+10     	; 0x2d64 <STPR_voidRotateClockwise+0x19a>
		__ticks = 1;
    2d5a:	81 e0       	ldi	r24, 0x01	; 1
    2d5c:	90 e0       	ldi	r25, 0x00	; 0
    2d5e:	9a a3       	std	Y+34, r25	; 0x22
    2d60:	89 a3       	std	Y+33, r24	; 0x21
    2d62:	3f c0       	rjmp	.+126    	; 0x2de2 <STPR_voidRotateClockwise+0x218>
	else if (__tmp > 65535)
    2d64:	6b a1       	ldd	r22, Y+35	; 0x23
    2d66:	7c a1       	ldd	r23, Y+36	; 0x24
    2d68:	8d a1       	ldd	r24, Y+37	; 0x25
    2d6a:	9e a1       	ldd	r25, Y+38	; 0x26
    2d6c:	20 e0       	ldi	r18, 0x00	; 0
    2d6e:	3f ef       	ldi	r19, 0xFF	; 255
    2d70:	4f e7       	ldi	r20, 0x7F	; 127
    2d72:	57 e4       	ldi	r21, 0x47	; 71
    2d74:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d78:	18 16       	cp	r1, r24
    2d7a:	4c f5       	brge	.+82     	; 0x2dce <STPR_voidRotateClockwise+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d7c:	6f a1       	ldd	r22, Y+39	; 0x27
    2d7e:	78 a5       	ldd	r23, Y+40	; 0x28
    2d80:	89 a5       	ldd	r24, Y+41	; 0x29
    2d82:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d84:	20 e0       	ldi	r18, 0x00	; 0
    2d86:	30 e0       	ldi	r19, 0x00	; 0
    2d88:	40 e2       	ldi	r20, 0x20	; 32
    2d8a:	51 e4       	ldi	r21, 0x41	; 65
    2d8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d90:	dc 01       	movw	r26, r24
    2d92:	cb 01       	movw	r24, r22
    2d94:	bc 01       	movw	r22, r24
    2d96:	cd 01       	movw	r24, r26
    2d98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d9c:	dc 01       	movw	r26, r24
    2d9e:	cb 01       	movw	r24, r22
    2da0:	9a a3       	std	Y+34, r25	; 0x22
    2da2:	89 a3       	std	Y+33, r24	; 0x21
    2da4:	0f c0       	rjmp	.+30     	; 0x2dc4 <STPR_voidRotateClockwise+0x1fa>
    2da6:	88 ec       	ldi	r24, 0xC8	; 200
    2da8:	90 e0       	ldi	r25, 0x00	; 0
    2daa:	98 a3       	std	Y+32, r25	; 0x20
    2dac:	8f 8f       	std	Y+31, r24	; 0x1f
    2dae:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2db0:	98 a1       	ldd	r25, Y+32	; 0x20
    2db2:	01 97       	sbiw	r24, 0x01	; 1
    2db4:	f1 f7       	brne	.-4      	; 0x2db2 <STPR_voidRotateClockwise+0x1e8>
    2db6:	98 a3       	std	Y+32, r25	; 0x20
    2db8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dba:	89 a1       	ldd	r24, Y+33	; 0x21
    2dbc:	9a a1       	ldd	r25, Y+34	; 0x22
    2dbe:	01 97       	sbiw	r24, 0x01	; 1
    2dc0:	9a a3       	std	Y+34, r25	; 0x22
    2dc2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dc4:	89 a1       	ldd	r24, Y+33	; 0x21
    2dc6:	9a a1       	ldd	r25, Y+34	; 0x22
    2dc8:	00 97       	sbiw	r24, 0x00	; 0
    2dca:	69 f7       	brne	.-38     	; 0x2da6 <STPR_voidRotateClockwise+0x1dc>
    2dcc:	14 c0       	rjmp	.+40     	; 0x2df6 <STPR_voidRotateClockwise+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dce:	6b a1       	ldd	r22, Y+35	; 0x23
    2dd0:	7c a1       	ldd	r23, Y+36	; 0x24
    2dd2:	8d a1       	ldd	r24, Y+37	; 0x25
    2dd4:	9e a1       	ldd	r25, Y+38	; 0x26
    2dd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dda:	dc 01       	movw	r26, r24
    2ddc:	cb 01       	movw	r24, r22
    2dde:	9a a3       	std	Y+34, r25	; 0x22
    2de0:	89 a3       	std	Y+33, r24	; 0x21
    2de2:	89 a1       	ldd	r24, Y+33	; 0x21
    2de4:	9a a1       	ldd	r25, Y+34	; 0x22
    2de6:	9e 8f       	std	Y+30, r25	; 0x1e
    2de8:	8d 8f       	std	Y+29, r24	; 0x1d
    2dea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2dec:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2dee:	01 97       	sbiw	r24, 0x01	; 1
    2df0:	f1 f7       	brne	.-4      	; 0x2dee <STPR_voidRotateClockwise+0x224>
    2df2:	9e 8f       	std	Y+30, r25	; 0x1e
    2df4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	DIO_u8SetPinValue(STPR_PORT,STPR_COIL_BLUE,DIO_u8PIN_LOW);
    2df6:	83 e0       	ldi	r24, 0x03	; 3
    2df8:	60 e0       	ldi	r22, 0x00	; 0
    2dfa:	40 e0       	ldi	r20, 0x00	; 0
    2dfc:	0e 94 34 12 	call	0x2468	; 0x2468 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STPR_PORT,STPR_COIL_PINK,DIO_u8PIN_HIGH);
    2e00:	83 e0       	ldi	r24, 0x03	; 3
    2e02:	61 e0       	ldi	r22, 0x01	; 1
    2e04:	41 e0       	ldi	r20, 0x01	; 1
    2e06:	0e 94 34 12 	call	0x2468	; 0x2468 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STPR_PORT,STPR_COIL_YELLOW,DIO_u8PIN_LOW);
    2e0a:	83 e0       	ldi	r24, 0x03	; 3
    2e0c:	62 e0       	ldi	r22, 0x02	; 2
    2e0e:	40 e0       	ldi	r20, 0x00	; 0
    2e10:	0e 94 34 12 	call	0x2468	; 0x2468 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STPR_PORT,STPR_COIL_ORANGE,DIO_u8PIN_LOW);
    2e14:	83 e0       	ldi	r24, 0x03	; 3
    2e16:	63 e0       	ldi	r22, 0x03	; 3
    2e18:	40 e0       	ldi	r20, 0x00	; 0
    2e1a:	0e 94 34 12 	call	0x2468	; 0x2468 <DIO_u8SetPinValue>
    2e1e:	80 e0       	ldi	r24, 0x00	; 0
    2e20:	90 e0       	ldi	r25, 0x00	; 0
    2e22:	a0 e0       	ldi	r26, 0x00	; 0
    2e24:	b0 e4       	ldi	r27, 0x40	; 64
    2e26:	89 8f       	std	Y+25, r24	; 0x19
    2e28:	9a 8f       	std	Y+26, r25	; 0x1a
    2e2a:	ab 8f       	std	Y+27, r26	; 0x1b
    2e2c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e2e:	69 8d       	ldd	r22, Y+25	; 0x19
    2e30:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e32:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e34:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e36:	20 e0       	ldi	r18, 0x00	; 0
    2e38:	30 e0       	ldi	r19, 0x00	; 0
    2e3a:	4a ef       	ldi	r20, 0xFA	; 250
    2e3c:	54 e4       	ldi	r21, 0x44	; 68
    2e3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e42:	dc 01       	movw	r26, r24
    2e44:	cb 01       	movw	r24, r22
    2e46:	8d 8b       	std	Y+21, r24	; 0x15
    2e48:	9e 8b       	std	Y+22, r25	; 0x16
    2e4a:	af 8b       	std	Y+23, r26	; 0x17
    2e4c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e4e:	6d 89       	ldd	r22, Y+21	; 0x15
    2e50:	7e 89       	ldd	r23, Y+22	; 0x16
    2e52:	8f 89       	ldd	r24, Y+23	; 0x17
    2e54:	98 8d       	ldd	r25, Y+24	; 0x18
    2e56:	20 e0       	ldi	r18, 0x00	; 0
    2e58:	30 e0       	ldi	r19, 0x00	; 0
    2e5a:	40 e8       	ldi	r20, 0x80	; 128
    2e5c:	5f e3       	ldi	r21, 0x3F	; 63
    2e5e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e62:	88 23       	and	r24, r24
    2e64:	2c f4       	brge	.+10     	; 0x2e70 <STPR_voidRotateClockwise+0x2a6>
		__ticks = 1;
    2e66:	81 e0       	ldi	r24, 0x01	; 1
    2e68:	90 e0       	ldi	r25, 0x00	; 0
    2e6a:	9c 8b       	std	Y+20, r25	; 0x14
    2e6c:	8b 8b       	std	Y+19, r24	; 0x13
    2e6e:	3f c0       	rjmp	.+126    	; 0x2eee <STPR_voidRotateClockwise+0x324>
	else if (__tmp > 65535)
    2e70:	6d 89       	ldd	r22, Y+21	; 0x15
    2e72:	7e 89       	ldd	r23, Y+22	; 0x16
    2e74:	8f 89       	ldd	r24, Y+23	; 0x17
    2e76:	98 8d       	ldd	r25, Y+24	; 0x18
    2e78:	20 e0       	ldi	r18, 0x00	; 0
    2e7a:	3f ef       	ldi	r19, 0xFF	; 255
    2e7c:	4f e7       	ldi	r20, 0x7F	; 127
    2e7e:	57 e4       	ldi	r21, 0x47	; 71
    2e80:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e84:	18 16       	cp	r1, r24
    2e86:	4c f5       	brge	.+82     	; 0x2eda <STPR_voidRotateClockwise+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e88:	69 8d       	ldd	r22, Y+25	; 0x19
    2e8a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e8c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e8e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e90:	20 e0       	ldi	r18, 0x00	; 0
    2e92:	30 e0       	ldi	r19, 0x00	; 0
    2e94:	40 e2       	ldi	r20, 0x20	; 32
    2e96:	51 e4       	ldi	r21, 0x41	; 65
    2e98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e9c:	dc 01       	movw	r26, r24
    2e9e:	cb 01       	movw	r24, r22
    2ea0:	bc 01       	movw	r22, r24
    2ea2:	cd 01       	movw	r24, r26
    2ea4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ea8:	dc 01       	movw	r26, r24
    2eaa:	cb 01       	movw	r24, r22
    2eac:	9c 8b       	std	Y+20, r25	; 0x14
    2eae:	8b 8b       	std	Y+19, r24	; 0x13
    2eb0:	0f c0       	rjmp	.+30     	; 0x2ed0 <STPR_voidRotateClockwise+0x306>
    2eb2:	88 ec       	ldi	r24, 0xC8	; 200
    2eb4:	90 e0       	ldi	r25, 0x00	; 0
    2eb6:	9a 8b       	std	Y+18, r25	; 0x12
    2eb8:	89 8b       	std	Y+17, r24	; 0x11
    2eba:	89 89       	ldd	r24, Y+17	; 0x11
    2ebc:	9a 89       	ldd	r25, Y+18	; 0x12
    2ebe:	01 97       	sbiw	r24, 0x01	; 1
    2ec0:	f1 f7       	brne	.-4      	; 0x2ebe <STPR_voidRotateClockwise+0x2f4>
    2ec2:	9a 8b       	std	Y+18, r25	; 0x12
    2ec4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ec6:	8b 89       	ldd	r24, Y+19	; 0x13
    2ec8:	9c 89       	ldd	r25, Y+20	; 0x14
    2eca:	01 97       	sbiw	r24, 0x01	; 1
    2ecc:	9c 8b       	std	Y+20, r25	; 0x14
    2ece:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ed0:	8b 89       	ldd	r24, Y+19	; 0x13
    2ed2:	9c 89       	ldd	r25, Y+20	; 0x14
    2ed4:	00 97       	sbiw	r24, 0x00	; 0
    2ed6:	69 f7       	brne	.-38     	; 0x2eb2 <STPR_voidRotateClockwise+0x2e8>
    2ed8:	14 c0       	rjmp	.+40     	; 0x2f02 <STPR_voidRotateClockwise+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eda:	6d 89       	ldd	r22, Y+21	; 0x15
    2edc:	7e 89       	ldd	r23, Y+22	; 0x16
    2ede:	8f 89       	ldd	r24, Y+23	; 0x17
    2ee0:	98 8d       	ldd	r25, Y+24	; 0x18
    2ee2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ee6:	dc 01       	movw	r26, r24
    2ee8:	cb 01       	movw	r24, r22
    2eea:	9c 8b       	std	Y+20, r25	; 0x14
    2eec:	8b 8b       	std	Y+19, r24	; 0x13
    2eee:	8b 89       	ldd	r24, Y+19	; 0x13
    2ef0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ef2:	98 8b       	std	Y+16, r25	; 0x10
    2ef4:	8f 87       	std	Y+15, r24	; 0x0f
    2ef6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ef8:	98 89       	ldd	r25, Y+16	; 0x10
    2efa:	01 97       	sbiw	r24, 0x01	; 1
    2efc:	f1 f7       	brne	.-4      	; 0x2efa <STPR_voidRotateClockwise+0x330>
    2efe:	98 8b       	std	Y+16, r25	; 0x10
    2f00:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinValue(STPR_PORT,STPR_COIL_BLUE,DIO_u8PIN_HIGH);
    2f02:	83 e0       	ldi	r24, 0x03	; 3
    2f04:	60 e0       	ldi	r22, 0x00	; 0
    2f06:	41 e0       	ldi	r20, 0x01	; 1
    2f08:	0e 94 34 12 	call	0x2468	; 0x2468 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STPR_PORT,STPR_COIL_PINK,DIO_u8PIN_LOW);
    2f0c:	83 e0       	ldi	r24, 0x03	; 3
    2f0e:	61 e0       	ldi	r22, 0x01	; 1
    2f10:	40 e0       	ldi	r20, 0x00	; 0
    2f12:	0e 94 34 12 	call	0x2468	; 0x2468 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STPR_PORT,STPR_COIL_YELLOW,DIO_u8PIN_LOW);
    2f16:	83 e0       	ldi	r24, 0x03	; 3
    2f18:	62 e0       	ldi	r22, 0x02	; 2
    2f1a:	40 e0       	ldi	r20, 0x00	; 0
    2f1c:	0e 94 34 12 	call	0x2468	; 0x2468 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STPR_PORT,STPR_COIL_ORANGE,DIO_u8PIN_LOW);
    2f20:	83 e0       	ldi	r24, 0x03	; 3
    2f22:	63 e0       	ldi	r22, 0x03	; 3
    2f24:	40 e0       	ldi	r20, 0x00	; 0
    2f26:	0e 94 34 12 	call	0x2468	; 0x2468 <DIO_u8SetPinValue>
    2f2a:	80 e0       	ldi	r24, 0x00	; 0
    2f2c:	90 e0       	ldi	r25, 0x00	; 0
    2f2e:	a0 e0       	ldi	r26, 0x00	; 0
    2f30:	b0 e4       	ldi	r27, 0x40	; 64
    2f32:	8b 87       	std	Y+11, r24	; 0x0b
    2f34:	9c 87       	std	Y+12, r25	; 0x0c
    2f36:	ad 87       	std	Y+13, r26	; 0x0d
    2f38:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f40:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f42:	20 e0       	ldi	r18, 0x00	; 0
    2f44:	30 e0       	ldi	r19, 0x00	; 0
    2f46:	4a ef       	ldi	r20, 0xFA	; 250
    2f48:	54 e4       	ldi	r21, 0x44	; 68
    2f4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f4e:	dc 01       	movw	r26, r24
    2f50:	cb 01       	movw	r24, r22
    2f52:	8f 83       	std	Y+7, r24	; 0x07
    2f54:	98 87       	std	Y+8, r25	; 0x08
    2f56:	a9 87       	std	Y+9, r26	; 0x09
    2f58:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f5a:	6f 81       	ldd	r22, Y+7	; 0x07
    2f5c:	78 85       	ldd	r23, Y+8	; 0x08
    2f5e:	89 85       	ldd	r24, Y+9	; 0x09
    2f60:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f62:	20 e0       	ldi	r18, 0x00	; 0
    2f64:	30 e0       	ldi	r19, 0x00	; 0
    2f66:	40 e8       	ldi	r20, 0x80	; 128
    2f68:	5f e3       	ldi	r21, 0x3F	; 63
    2f6a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f6e:	88 23       	and	r24, r24
    2f70:	2c f4       	brge	.+10     	; 0x2f7c <STPR_voidRotateClockwise+0x3b2>
		__ticks = 1;
    2f72:	81 e0       	ldi	r24, 0x01	; 1
    2f74:	90 e0       	ldi	r25, 0x00	; 0
    2f76:	9e 83       	std	Y+6, r25	; 0x06
    2f78:	8d 83       	std	Y+5, r24	; 0x05
    2f7a:	3f c0       	rjmp	.+126    	; 0x2ffa <STPR_voidRotateClockwise+0x430>
	else if (__tmp > 65535)
    2f7c:	6f 81       	ldd	r22, Y+7	; 0x07
    2f7e:	78 85       	ldd	r23, Y+8	; 0x08
    2f80:	89 85       	ldd	r24, Y+9	; 0x09
    2f82:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f84:	20 e0       	ldi	r18, 0x00	; 0
    2f86:	3f ef       	ldi	r19, 0xFF	; 255
    2f88:	4f e7       	ldi	r20, 0x7F	; 127
    2f8a:	57 e4       	ldi	r21, 0x47	; 71
    2f8c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f90:	18 16       	cp	r1, r24
    2f92:	4c f5       	brge	.+82     	; 0x2fe6 <STPR_voidRotateClockwise+0x41c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f94:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f96:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f98:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f9c:	20 e0       	ldi	r18, 0x00	; 0
    2f9e:	30 e0       	ldi	r19, 0x00	; 0
    2fa0:	40 e2       	ldi	r20, 0x20	; 32
    2fa2:	51 e4       	ldi	r21, 0x41	; 65
    2fa4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fa8:	dc 01       	movw	r26, r24
    2faa:	cb 01       	movw	r24, r22
    2fac:	bc 01       	movw	r22, r24
    2fae:	cd 01       	movw	r24, r26
    2fb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fb4:	dc 01       	movw	r26, r24
    2fb6:	cb 01       	movw	r24, r22
    2fb8:	9e 83       	std	Y+6, r25	; 0x06
    2fba:	8d 83       	std	Y+5, r24	; 0x05
    2fbc:	0f c0       	rjmp	.+30     	; 0x2fdc <STPR_voidRotateClockwise+0x412>
    2fbe:	88 ec       	ldi	r24, 0xC8	; 200
    2fc0:	90 e0       	ldi	r25, 0x00	; 0
    2fc2:	9c 83       	std	Y+4, r25	; 0x04
    2fc4:	8b 83       	std	Y+3, r24	; 0x03
    2fc6:	8b 81       	ldd	r24, Y+3	; 0x03
    2fc8:	9c 81       	ldd	r25, Y+4	; 0x04
    2fca:	01 97       	sbiw	r24, 0x01	; 1
    2fcc:	f1 f7       	brne	.-4      	; 0x2fca <STPR_voidRotateClockwise+0x400>
    2fce:	9c 83       	std	Y+4, r25	; 0x04
    2fd0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fd2:	8d 81       	ldd	r24, Y+5	; 0x05
    2fd4:	9e 81       	ldd	r25, Y+6	; 0x06
    2fd6:	01 97       	sbiw	r24, 0x01	; 1
    2fd8:	9e 83       	std	Y+6, r25	; 0x06
    2fda:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fdc:	8d 81       	ldd	r24, Y+5	; 0x05
    2fde:	9e 81       	ldd	r25, Y+6	; 0x06
    2fe0:	00 97       	sbiw	r24, 0x00	; 0
    2fe2:	69 f7       	brne	.-38     	; 0x2fbe <STPR_voidRotateClockwise+0x3f4>
    2fe4:	14 c0       	rjmp	.+40     	; 0x300e <STPR_voidRotateClockwise+0x444>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fe6:	6f 81       	ldd	r22, Y+7	; 0x07
    2fe8:	78 85       	ldd	r23, Y+8	; 0x08
    2fea:	89 85       	ldd	r24, Y+9	; 0x09
    2fec:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ff2:	dc 01       	movw	r26, r24
    2ff4:	cb 01       	movw	r24, r22
    2ff6:	9e 83       	std	Y+6, r25	; 0x06
    2ff8:	8d 83       	std	Y+5, r24	; 0x05
    2ffa:	8d 81       	ldd	r24, Y+5	; 0x05
    2ffc:	9e 81       	ldd	r25, Y+6	; 0x06
    2ffe:	9a 83       	std	Y+2, r25	; 0x02
    3000:	89 83       	std	Y+1, r24	; 0x01
    3002:	89 81       	ldd	r24, Y+1	; 0x01
    3004:	9a 81       	ldd	r25, Y+2	; 0x02
    3006:	01 97       	sbiw	r24, 0x01	; 1
    3008:	f1 f7       	brne	.-4      	; 0x3006 <STPR_voidRotateClockwise+0x43c>
    300a:	9a 83       	std	Y+2, r25	; 0x02
    300c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    300e:	e8 96       	adiw	r28, 0x38	; 56
    3010:	0f b6       	in	r0, 0x3f	; 63
    3012:	f8 94       	cli
    3014:	de bf       	out	0x3e, r29	; 62
    3016:	0f be       	out	0x3f, r0	; 63
    3018:	cd bf       	out	0x3d, r28	; 61
    301a:	cf 91       	pop	r28
    301c:	df 91       	pop	r29
    301e:	08 95       	ret

00003020 <STPR_voidRotateCounterClockwise>:
void STPR_voidRotateCounterClockwise(){
    3020:	df 93       	push	r29
    3022:	cf 93       	push	r28
    3024:	cd b7       	in	r28, 0x3d	; 61
    3026:	de b7       	in	r29, 0x3e	; 62
    3028:	e8 97       	sbiw	r28, 0x38	; 56
    302a:	0f b6       	in	r0, 0x3f	; 63
    302c:	f8 94       	cli
    302e:	de bf       	out	0x3e, r29	; 62
    3030:	0f be       	out	0x3f, r0	; 63
    3032:	cd bf       	out	0x3d, r28	; 61
	DIO_u8SetPinValue(STPR_PORT,STPR_COIL_BLUE,DIO_u8PIN_HIGH);
    3034:	83 e0       	ldi	r24, 0x03	; 3
    3036:	60 e0       	ldi	r22, 0x00	; 0
    3038:	41 e0       	ldi	r20, 0x01	; 1
    303a:	0e 94 34 12 	call	0x2468	; 0x2468 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STPR_PORT,STPR_COIL_PINK,DIO_u8PIN_LOW);
    303e:	83 e0       	ldi	r24, 0x03	; 3
    3040:	61 e0       	ldi	r22, 0x01	; 1
    3042:	40 e0       	ldi	r20, 0x00	; 0
    3044:	0e 94 34 12 	call	0x2468	; 0x2468 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STPR_PORT,STPR_COIL_YELLOW,DIO_u8PIN_LOW);
    3048:	83 e0       	ldi	r24, 0x03	; 3
    304a:	62 e0       	ldi	r22, 0x02	; 2
    304c:	40 e0       	ldi	r20, 0x00	; 0
    304e:	0e 94 34 12 	call	0x2468	; 0x2468 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STPR_PORT,STPR_COIL_ORANGE,DIO_u8PIN_LOW);
    3052:	83 e0       	ldi	r24, 0x03	; 3
    3054:	63 e0       	ldi	r22, 0x03	; 3
    3056:	40 e0       	ldi	r20, 0x00	; 0
    3058:	0e 94 34 12 	call	0x2468	; 0x2468 <DIO_u8SetPinValue>
    305c:	80 e0       	ldi	r24, 0x00	; 0
    305e:	90 e0       	ldi	r25, 0x00	; 0
    3060:	a0 e0       	ldi	r26, 0x00	; 0
    3062:	b0 e4       	ldi	r27, 0x40	; 64
    3064:	8d ab       	std	Y+53, r24	; 0x35
    3066:	9e ab       	std	Y+54, r25	; 0x36
    3068:	af ab       	std	Y+55, r26	; 0x37
    306a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    306c:	6d a9       	ldd	r22, Y+53	; 0x35
    306e:	7e a9       	ldd	r23, Y+54	; 0x36
    3070:	8f a9       	ldd	r24, Y+55	; 0x37
    3072:	98 ad       	ldd	r25, Y+56	; 0x38
    3074:	20 e0       	ldi	r18, 0x00	; 0
    3076:	30 e0       	ldi	r19, 0x00	; 0
    3078:	4a ef       	ldi	r20, 0xFA	; 250
    307a:	54 e4       	ldi	r21, 0x44	; 68
    307c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3080:	dc 01       	movw	r26, r24
    3082:	cb 01       	movw	r24, r22
    3084:	89 ab       	std	Y+49, r24	; 0x31
    3086:	9a ab       	std	Y+50, r25	; 0x32
    3088:	ab ab       	std	Y+51, r26	; 0x33
    308a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    308c:	69 a9       	ldd	r22, Y+49	; 0x31
    308e:	7a a9       	ldd	r23, Y+50	; 0x32
    3090:	8b a9       	ldd	r24, Y+51	; 0x33
    3092:	9c a9       	ldd	r25, Y+52	; 0x34
    3094:	20 e0       	ldi	r18, 0x00	; 0
    3096:	30 e0       	ldi	r19, 0x00	; 0
    3098:	40 e8       	ldi	r20, 0x80	; 128
    309a:	5f e3       	ldi	r21, 0x3F	; 63
    309c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30a0:	88 23       	and	r24, r24
    30a2:	2c f4       	brge	.+10     	; 0x30ae <STPR_voidRotateCounterClockwise+0x8e>
		__ticks = 1;
    30a4:	81 e0       	ldi	r24, 0x01	; 1
    30a6:	90 e0       	ldi	r25, 0x00	; 0
    30a8:	98 ab       	std	Y+48, r25	; 0x30
    30aa:	8f a7       	std	Y+47, r24	; 0x2f
    30ac:	3f c0       	rjmp	.+126    	; 0x312c <STPR_voidRotateCounterClockwise+0x10c>
	else if (__tmp > 65535)
    30ae:	69 a9       	ldd	r22, Y+49	; 0x31
    30b0:	7a a9       	ldd	r23, Y+50	; 0x32
    30b2:	8b a9       	ldd	r24, Y+51	; 0x33
    30b4:	9c a9       	ldd	r25, Y+52	; 0x34
    30b6:	20 e0       	ldi	r18, 0x00	; 0
    30b8:	3f ef       	ldi	r19, 0xFF	; 255
    30ba:	4f e7       	ldi	r20, 0x7F	; 127
    30bc:	57 e4       	ldi	r21, 0x47	; 71
    30be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30c2:	18 16       	cp	r1, r24
    30c4:	4c f5       	brge	.+82     	; 0x3118 <STPR_voidRotateCounterClockwise+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30c6:	6d a9       	ldd	r22, Y+53	; 0x35
    30c8:	7e a9       	ldd	r23, Y+54	; 0x36
    30ca:	8f a9       	ldd	r24, Y+55	; 0x37
    30cc:	98 ad       	ldd	r25, Y+56	; 0x38
    30ce:	20 e0       	ldi	r18, 0x00	; 0
    30d0:	30 e0       	ldi	r19, 0x00	; 0
    30d2:	40 e2       	ldi	r20, 0x20	; 32
    30d4:	51 e4       	ldi	r21, 0x41	; 65
    30d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30da:	dc 01       	movw	r26, r24
    30dc:	cb 01       	movw	r24, r22
    30de:	bc 01       	movw	r22, r24
    30e0:	cd 01       	movw	r24, r26
    30e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30e6:	dc 01       	movw	r26, r24
    30e8:	cb 01       	movw	r24, r22
    30ea:	98 ab       	std	Y+48, r25	; 0x30
    30ec:	8f a7       	std	Y+47, r24	; 0x2f
    30ee:	0f c0       	rjmp	.+30     	; 0x310e <STPR_voidRotateCounterClockwise+0xee>
    30f0:	88 ec       	ldi	r24, 0xC8	; 200
    30f2:	90 e0       	ldi	r25, 0x00	; 0
    30f4:	9e a7       	std	Y+46, r25	; 0x2e
    30f6:	8d a7       	std	Y+45, r24	; 0x2d
    30f8:	8d a5       	ldd	r24, Y+45	; 0x2d
    30fa:	9e a5       	ldd	r25, Y+46	; 0x2e
    30fc:	01 97       	sbiw	r24, 0x01	; 1
    30fe:	f1 f7       	brne	.-4      	; 0x30fc <STPR_voidRotateCounterClockwise+0xdc>
    3100:	9e a7       	std	Y+46, r25	; 0x2e
    3102:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3104:	8f a5       	ldd	r24, Y+47	; 0x2f
    3106:	98 a9       	ldd	r25, Y+48	; 0x30
    3108:	01 97       	sbiw	r24, 0x01	; 1
    310a:	98 ab       	std	Y+48, r25	; 0x30
    310c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    310e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3110:	98 a9       	ldd	r25, Y+48	; 0x30
    3112:	00 97       	sbiw	r24, 0x00	; 0
    3114:	69 f7       	brne	.-38     	; 0x30f0 <STPR_voidRotateCounterClockwise+0xd0>
    3116:	14 c0       	rjmp	.+40     	; 0x3140 <STPR_voidRotateCounterClockwise+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3118:	69 a9       	ldd	r22, Y+49	; 0x31
    311a:	7a a9       	ldd	r23, Y+50	; 0x32
    311c:	8b a9       	ldd	r24, Y+51	; 0x33
    311e:	9c a9       	ldd	r25, Y+52	; 0x34
    3120:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3124:	dc 01       	movw	r26, r24
    3126:	cb 01       	movw	r24, r22
    3128:	98 ab       	std	Y+48, r25	; 0x30
    312a:	8f a7       	std	Y+47, r24	; 0x2f
    312c:	8f a5       	ldd	r24, Y+47	; 0x2f
    312e:	98 a9       	ldd	r25, Y+48	; 0x30
    3130:	9c a7       	std	Y+44, r25	; 0x2c
    3132:	8b a7       	std	Y+43, r24	; 0x2b
    3134:	8b a5       	ldd	r24, Y+43	; 0x2b
    3136:	9c a5       	ldd	r25, Y+44	; 0x2c
    3138:	01 97       	sbiw	r24, 0x01	; 1
    313a:	f1 f7       	brne	.-4      	; 0x3138 <STPR_voidRotateCounterClockwise+0x118>
    313c:	9c a7       	std	Y+44, r25	; 0x2c
    313e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	DIO_u8SetPinValue(STPR_PORT,STPR_COIL_BLUE,DIO_u8PIN_LOW);
    3140:	83 e0       	ldi	r24, 0x03	; 3
    3142:	60 e0       	ldi	r22, 0x00	; 0
    3144:	40 e0       	ldi	r20, 0x00	; 0
    3146:	0e 94 34 12 	call	0x2468	; 0x2468 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STPR_PORT,STPR_COIL_PINK,DIO_u8PIN_HIGH);
    314a:	83 e0       	ldi	r24, 0x03	; 3
    314c:	61 e0       	ldi	r22, 0x01	; 1
    314e:	41 e0       	ldi	r20, 0x01	; 1
    3150:	0e 94 34 12 	call	0x2468	; 0x2468 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STPR_PORT,STPR_COIL_YELLOW,DIO_u8PIN_LOW);
    3154:	83 e0       	ldi	r24, 0x03	; 3
    3156:	62 e0       	ldi	r22, 0x02	; 2
    3158:	40 e0       	ldi	r20, 0x00	; 0
    315a:	0e 94 34 12 	call	0x2468	; 0x2468 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STPR_PORT,STPR_COIL_ORANGE,DIO_u8PIN_LOW);
    315e:	83 e0       	ldi	r24, 0x03	; 3
    3160:	63 e0       	ldi	r22, 0x03	; 3
    3162:	40 e0       	ldi	r20, 0x00	; 0
    3164:	0e 94 34 12 	call	0x2468	; 0x2468 <DIO_u8SetPinValue>
    3168:	80 e0       	ldi	r24, 0x00	; 0
    316a:	90 e0       	ldi	r25, 0x00	; 0
    316c:	a0 e0       	ldi	r26, 0x00	; 0
    316e:	b0 e4       	ldi	r27, 0x40	; 64
    3170:	8f a3       	std	Y+39, r24	; 0x27
    3172:	98 a7       	std	Y+40, r25	; 0x28
    3174:	a9 a7       	std	Y+41, r26	; 0x29
    3176:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3178:	6f a1       	ldd	r22, Y+39	; 0x27
    317a:	78 a5       	ldd	r23, Y+40	; 0x28
    317c:	89 a5       	ldd	r24, Y+41	; 0x29
    317e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3180:	20 e0       	ldi	r18, 0x00	; 0
    3182:	30 e0       	ldi	r19, 0x00	; 0
    3184:	4a ef       	ldi	r20, 0xFA	; 250
    3186:	54 e4       	ldi	r21, 0x44	; 68
    3188:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    318c:	dc 01       	movw	r26, r24
    318e:	cb 01       	movw	r24, r22
    3190:	8b a3       	std	Y+35, r24	; 0x23
    3192:	9c a3       	std	Y+36, r25	; 0x24
    3194:	ad a3       	std	Y+37, r26	; 0x25
    3196:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3198:	6b a1       	ldd	r22, Y+35	; 0x23
    319a:	7c a1       	ldd	r23, Y+36	; 0x24
    319c:	8d a1       	ldd	r24, Y+37	; 0x25
    319e:	9e a1       	ldd	r25, Y+38	; 0x26
    31a0:	20 e0       	ldi	r18, 0x00	; 0
    31a2:	30 e0       	ldi	r19, 0x00	; 0
    31a4:	40 e8       	ldi	r20, 0x80	; 128
    31a6:	5f e3       	ldi	r21, 0x3F	; 63
    31a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31ac:	88 23       	and	r24, r24
    31ae:	2c f4       	brge	.+10     	; 0x31ba <STPR_voidRotateCounterClockwise+0x19a>
		__ticks = 1;
    31b0:	81 e0       	ldi	r24, 0x01	; 1
    31b2:	90 e0       	ldi	r25, 0x00	; 0
    31b4:	9a a3       	std	Y+34, r25	; 0x22
    31b6:	89 a3       	std	Y+33, r24	; 0x21
    31b8:	3f c0       	rjmp	.+126    	; 0x3238 <STPR_voidRotateCounterClockwise+0x218>
	else if (__tmp > 65535)
    31ba:	6b a1       	ldd	r22, Y+35	; 0x23
    31bc:	7c a1       	ldd	r23, Y+36	; 0x24
    31be:	8d a1       	ldd	r24, Y+37	; 0x25
    31c0:	9e a1       	ldd	r25, Y+38	; 0x26
    31c2:	20 e0       	ldi	r18, 0x00	; 0
    31c4:	3f ef       	ldi	r19, 0xFF	; 255
    31c6:	4f e7       	ldi	r20, 0x7F	; 127
    31c8:	57 e4       	ldi	r21, 0x47	; 71
    31ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31ce:	18 16       	cp	r1, r24
    31d0:	4c f5       	brge	.+82     	; 0x3224 <STPR_voidRotateCounterClockwise+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31d2:	6f a1       	ldd	r22, Y+39	; 0x27
    31d4:	78 a5       	ldd	r23, Y+40	; 0x28
    31d6:	89 a5       	ldd	r24, Y+41	; 0x29
    31d8:	9a a5       	ldd	r25, Y+42	; 0x2a
    31da:	20 e0       	ldi	r18, 0x00	; 0
    31dc:	30 e0       	ldi	r19, 0x00	; 0
    31de:	40 e2       	ldi	r20, 0x20	; 32
    31e0:	51 e4       	ldi	r21, 0x41	; 65
    31e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31e6:	dc 01       	movw	r26, r24
    31e8:	cb 01       	movw	r24, r22
    31ea:	bc 01       	movw	r22, r24
    31ec:	cd 01       	movw	r24, r26
    31ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31f2:	dc 01       	movw	r26, r24
    31f4:	cb 01       	movw	r24, r22
    31f6:	9a a3       	std	Y+34, r25	; 0x22
    31f8:	89 a3       	std	Y+33, r24	; 0x21
    31fa:	0f c0       	rjmp	.+30     	; 0x321a <STPR_voidRotateCounterClockwise+0x1fa>
    31fc:	88 ec       	ldi	r24, 0xC8	; 200
    31fe:	90 e0       	ldi	r25, 0x00	; 0
    3200:	98 a3       	std	Y+32, r25	; 0x20
    3202:	8f 8f       	std	Y+31, r24	; 0x1f
    3204:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3206:	98 a1       	ldd	r25, Y+32	; 0x20
    3208:	01 97       	sbiw	r24, 0x01	; 1
    320a:	f1 f7       	brne	.-4      	; 0x3208 <STPR_voidRotateCounterClockwise+0x1e8>
    320c:	98 a3       	std	Y+32, r25	; 0x20
    320e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3210:	89 a1       	ldd	r24, Y+33	; 0x21
    3212:	9a a1       	ldd	r25, Y+34	; 0x22
    3214:	01 97       	sbiw	r24, 0x01	; 1
    3216:	9a a3       	std	Y+34, r25	; 0x22
    3218:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    321a:	89 a1       	ldd	r24, Y+33	; 0x21
    321c:	9a a1       	ldd	r25, Y+34	; 0x22
    321e:	00 97       	sbiw	r24, 0x00	; 0
    3220:	69 f7       	brne	.-38     	; 0x31fc <STPR_voidRotateCounterClockwise+0x1dc>
    3222:	14 c0       	rjmp	.+40     	; 0x324c <STPR_voidRotateCounterClockwise+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3224:	6b a1       	ldd	r22, Y+35	; 0x23
    3226:	7c a1       	ldd	r23, Y+36	; 0x24
    3228:	8d a1       	ldd	r24, Y+37	; 0x25
    322a:	9e a1       	ldd	r25, Y+38	; 0x26
    322c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3230:	dc 01       	movw	r26, r24
    3232:	cb 01       	movw	r24, r22
    3234:	9a a3       	std	Y+34, r25	; 0x22
    3236:	89 a3       	std	Y+33, r24	; 0x21
    3238:	89 a1       	ldd	r24, Y+33	; 0x21
    323a:	9a a1       	ldd	r25, Y+34	; 0x22
    323c:	9e 8f       	std	Y+30, r25	; 0x1e
    323e:	8d 8f       	std	Y+29, r24	; 0x1d
    3240:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3242:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3244:	01 97       	sbiw	r24, 0x01	; 1
    3246:	f1 f7       	brne	.-4      	; 0x3244 <STPR_voidRotateCounterClockwise+0x224>
    3248:	9e 8f       	std	Y+30, r25	; 0x1e
    324a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	DIO_u8SetPinValue(STPR_PORT,STPR_COIL_BLUE,DIO_u8PIN_LOW);
    324c:	83 e0       	ldi	r24, 0x03	; 3
    324e:	60 e0       	ldi	r22, 0x00	; 0
    3250:	40 e0       	ldi	r20, 0x00	; 0
    3252:	0e 94 34 12 	call	0x2468	; 0x2468 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STPR_PORT,STPR_COIL_PINK,DIO_u8PIN_LOW);
    3256:	83 e0       	ldi	r24, 0x03	; 3
    3258:	61 e0       	ldi	r22, 0x01	; 1
    325a:	40 e0       	ldi	r20, 0x00	; 0
    325c:	0e 94 34 12 	call	0x2468	; 0x2468 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STPR_PORT,STPR_COIL_YELLOW,DIO_u8PIN_HIGH);
    3260:	83 e0       	ldi	r24, 0x03	; 3
    3262:	62 e0       	ldi	r22, 0x02	; 2
    3264:	41 e0       	ldi	r20, 0x01	; 1
    3266:	0e 94 34 12 	call	0x2468	; 0x2468 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STPR_PORT,STPR_COIL_ORANGE,DIO_u8PIN_LOW);
    326a:	83 e0       	ldi	r24, 0x03	; 3
    326c:	63 e0       	ldi	r22, 0x03	; 3
    326e:	40 e0       	ldi	r20, 0x00	; 0
    3270:	0e 94 34 12 	call	0x2468	; 0x2468 <DIO_u8SetPinValue>
    3274:	80 e0       	ldi	r24, 0x00	; 0
    3276:	90 e0       	ldi	r25, 0x00	; 0
    3278:	a0 e0       	ldi	r26, 0x00	; 0
    327a:	b0 e4       	ldi	r27, 0x40	; 64
    327c:	89 8f       	std	Y+25, r24	; 0x19
    327e:	9a 8f       	std	Y+26, r25	; 0x1a
    3280:	ab 8f       	std	Y+27, r26	; 0x1b
    3282:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3284:	69 8d       	ldd	r22, Y+25	; 0x19
    3286:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3288:	8b 8d       	ldd	r24, Y+27	; 0x1b
    328a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    328c:	20 e0       	ldi	r18, 0x00	; 0
    328e:	30 e0       	ldi	r19, 0x00	; 0
    3290:	4a ef       	ldi	r20, 0xFA	; 250
    3292:	54 e4       	ldi	r21, 0x44	; 68
    3294:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3298:	dc 01       	movw	r26, r24
    329a:	cb 01       	movw	r24, r22
    329c:	8d 8b       	std	Y+21, r24	; 0x15
    329e:	9e 8b       	std	Y+22, r25	; 0x16
    32a0:	af 8b       	std	Y+23, r26	; 0x17
    32a2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    32a4:	6d 89       	ldd	r22, Y+21	; 0x15
    32a6:	7e 89       	ldd	r23, Y+22	; 0x16
    32a8:	8f 89       	ldd	r24, Y+23	; 0x17
    32aa:	98 8d       	ldd	r25, Y+24	; 0x18
    32ac:	20 e0       	ldi	r18, 0x00	; 0
    32ae:	30 e0       	ldi	r19, 0x00	; 0
    32b0:	40 e8       	ldi	r20, 0x80	; 128
    32b2:	5f e3       	ldi	r21, 0x3F	; 63
    32b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32b8:	88 23       	and	r24, r24
    32ba:	2c f4       	brge	.+10     	; 0x32c6 <STPR_voidRotateCounterClockwise+0x2a6>
		__ticks = 1;
    32bc:	81 e0       	ldi	r24, 0x01	; 1
    32be:	90 e0       	ldi	r25, 0x00	; 0
    32c0:	9c 8b       	std	Y+20, r25	; 0x14
    32c2:	8b 8b       	std	Y+19, r24	; 0x13
    32c4:	3f c0       	rjmp	.+126    	; 0x3344 <STPR_voidRotateCounterClockwise+0x324>
	else if (__tmp > 65535)
    32c6:	6d 89       	ldd	r22, Y+21	; 0x15
    32c8:	7e 89       	ldd	r23, Y+22	; 0x16
    32ca:	8f 89       	ldd	r24, Y+23	; 0x17
    32cc:	98 8d       	ldd	r25, Y+24	; 0x18
    32ce:	20 e0       	ldi	r18, 0x00	; 0
    32d0:	3f ef       	ldi	r19, 0xFF	; 255
    32d2:	4f e7       	ldi	r20, 0x7F	; 127
    32d4:	57 e4       	ldi	r21, 0x47	; 71
    32d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32da:	18 16       	cp	r1, r24
    32dc:	4c f5       	brge	.+82     	; 0x3330 <STPR_voidRotateCounterClockwise+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32de:	69 8d       	ldd	r22, Y+25	; 0x19
    32e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32e6:	20 e0       	ldi	r18, 0x00	; 0
    32e8:	30 e0       	ldi	r19, 0x00	; 0
    32ea:	40 e2       	ldi	r20, 0x20	; 32
    32ec:	51 e4       	ldi	r21, 0x41	; 65
    32ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32f2:	dc 01       	movw	r26, r24
    32f4:	cb 01       	movw	r24, r22
    32f6:	bc 01       	movw	r22, r24
    32f8:	cd 01       	movw	r24, r26
    32fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32fe:	dc 01       	movw	r26, r24
    3300:	cb 01       	movw	r24, r22
    3302:	9c 8b       	std	Y+20, r25	; 0x14
    3304:	8b 8b       	std	Y+19, r24	; 0x13
    3306:	0f c0       	rjmp	.+30     	; 0x3326 <STPR_voidRotateCounterClockwise+0x306>
    3308:	88 ec       	ldi	r24, 0xC8	; 200
    330a:	90 e0       	ldi	r25, 0x00	; 0
    330c:	9a 8b       	std	Y+18, r25	; 0x12
    330e:	89 8b       	std	Y+17, r24	; 0x11
    3310:	89 89       	ldd	r24, Y+17	; 0x11
    3312:	9a 89       	ldd	r25, Y+18	; 0x12
    3314:	01 97       	sbiw	r24, 0x01	; 1
    3316:	f1 f7       	brne	.-4      	; 0x3314 <STPR_voidRotateCounterClockwise+0x2f4>
    3318:	9a 8b       	std	Y+18, r25	; 0x12
    331a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    331c:	8b 89       	ldd	r24, Y+19	; 0x13
    331e:	9c 89       	ldd	r25, Y+20	; 0x14
    3320:	01 97       	sbiw	r24, 0x01	; 1
    3322:	9c 8b       	std	Y+20, r25	; 0x14
    3324:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3326:	8b 89       	ldd	r24, Y+19	; 0x13
    3328:	9c 89       	ldd	r25, Y+20	; 0x14
    332a:	00 97       	sbiw	r24, 0x00	; 0
    332c:	69 f7       	brne	.-38     	; 0x3308 <STPR_voidRotateCounterClockwise+0x2e8>
    332e:	14 c0       	rjmp	.+40     	; 0x3358 <STPR_voidRotateCounterClockwise+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3330:	6d 89       	ldd	r22, Y+21	; 0x15
    3332:	7e 89       	ldd	r23, Y+22	; 0x16
    3334:	8f 89       	ldd	r24, Y+23	; 0x17
    3336:	98 8d       	ldd	r25, Y+24	; 0x18
    3338:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    333c:	dc 01       	movw	r26, r24
    333e:	cb 01       	movw	r24, r22
    3340:	9c 8b       	std	Y+20, r25	; 0x14
    3342:	8b 8b       	std	Y+19, r24	; 0x13
    3344:	8b 89       	ldd	r24, Y+19	; 0x13
    3346:	9c 89       	ldd	r25, Y+20	; 0x14
    3348:	98 8b       	std	Y+16, r25	; 0x10
    334a:	8f 87       	std	Y+15, r24	; 0x0f
    334c:	8f 85       	ldd	r24, Y+15	; 0x0f
    334e:	98 89       	ldd	r25, Y+16	; 0x10
    3350:	01 97       	sbiw	r24, 0x01	; 1
    3352:	f1 f7       	brne	.-4      	; 0x3350 <STPR_voidRotateCounterClockwise+0x330>
    3354:	98 8b       	std	Y+16, r25	; 0x10
    3356:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinValue(STPR_PORT,STPR_COIL_BLUE,DIO_u8PIN_LOW);
    3358:	83 e0       	ldi	r24, 0x03	; 3
    335a:	60 e0       	ldi	r22, 0x00	; 0
    335c:	40 e0       	ldi	r20, 0x00	; 0
    335e:	0e 94 34 12 	call	0x2468	; 0x2468 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STPR_PORT,STPR_COIL_PINK,DIO_u8PIN_LOW);
    3362:	83 e0       	ldi	r24, 0x03	; 3
    3364:	61 e0       	ldi	r22, 0x01	; 1
    3366:	40 e0       	ldi	r20, 0x00	; 0
    3368:	0e 94 34 12 	call	0x2468	; 0x2468 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STPR_PORT,STPR_COIL_YELLOW,DIO_u8PIN_LOW);
    336c:	83 e0       	ldi	r24, 0x03	; 3
    336e:	62 e0       	ldi	r22, 0x02	; 2
    3370:	40 e0       	ldi	r20, 0x00	; 0
    3372:	0e 94 34 12 	call	0x2468	; 0x2468 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(STPR_PORT,STPR_COIL_ORANGE,DIO_u8PIN_HIGH);
    3376:	83 e0       	ldi	r24, 0x03	; 3
    3378:	63 e0       	ldi	r22, 0x03	; 3
    337a:	41 e0       	ldi	r20, 0x01	; 1
    337c:	0e 94 34 12 	call	0x2468	; 0x2468 <DIO_u8SetPinValue>
    3380:	80 e0       	ldi	r24, 0x00	; 0
    3382:	90 e0       	ldi	r25, 0x00	; 0
    3384:	a0 e0       	ldi	r26, 0x00	; 0
    3386:	b0 e4       	ldi	r27, 0x40	; 64
    3388:	8b 87       	std	Y+11, r24	; 0x0b
    338a:	9c 87       	std	Y+12, r25	; 0x0c
    338c:	ad 87       	std	Y+13, r26	; 0x0d
    338e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3390:	6b 85       	ldd	r22, Y+11	; 0x0b
    3392:	7c 85       	ldd	r23, Y+12	; 0x0c
    3394:	8d 85       	ldd	r24, Y+13	; 0x0d
    3396:	9e 85       	ldd	r25, Y+14	; 0x0e
    3398:	20 e0       	ldi	r18, 0x00	; 0
    339a:	30 e0       	ldi	r19, 0x00	; 0
    339c:	4a ef       	ldi	r20, 0xFA	; 250
    339e:	54 e4       	ldi	r21, 0x44	; 68
    33a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33a4:	dc 01       	movw	r26, r24
    33a6:	cb 01       	movw	r24, r22
    33a8:	8f 83       	std	Y+7, r24	; 0x07
    33aa:	98 87       	std	Y+8, r25	; 0x08
    33ac:	a9 87       	std	Y+9, r26	; 0x09
    33ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33b0:	6f 81       	ldd	r22, Y+7	; 0x07
    33b2:	78 85       	ldd	r23, Y+8	; 0x08
    33b4:	89 85       	ldd	r24, Y+9	; 0x09
    33b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    33b8:	20 e0       	ldi	r18, 0x00	; 0
    33ba:	30 e0       	ldi	r19, 0x00	; 0
    33bc:	40 e8       	ldi	r20, 0x80	; 128
    33be:	5f e3       	ldi	r21, 0x3F	; 63
    33c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33c4:	88 23       	and	r24, r24
    33c6:	2c f4       	brge	.+10     	; 0x33d2 <STPR_voidRotateCounterClockwise+0x3b2>
		__ticks = 1;
    33c8:	81 e0       	ldi	r24, 0x01	; 1
    33ca:	90 e0       	ldi	r25, 0x00	; 0
    33cc:	9e 83       	std	Y+6, r25	; 0x06
    33ce:	8d 83       	std	Y+5, r24	; 0x05
    33d0:	3f c0       	rjmp	.+126    	; 0x3450 <STPR_voidRotateCounterClockwise+0x430>
	else if (__tmp > 65535)
    33d2:	6f 81       	ldd	r22, Y+7	; 0x07
    33d4:	78 85       	ldd	r23, Y+8	; 0x08
    33d6:	89 85       	ldd	r24, Y+9	; 0x09
    33d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    33da:	20 e0       	ldi	r18, 0x00	; 0
    33dc:	3f ef       	ldi	r19, 0xFF	; 255
    33de:	4f e7       	ldi	r20, 0x7F	; 127
    33e0:	57 e4       	ldi	r21, 0x47	; 71
    33e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33e6:	18 16       	cp	r1, r24
    33e8:	4c f5       	brge	.+82     	; 0x343c <STPR_voidRotateCounterClockwise+0x41c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    33ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    33ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    33f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    33f2:	20 e0       	ldi	r18, 0x00	; 0
    33f4:	30 e0       	ldi	r19, 0x00	; 0
    33f6:	40 e2       	ldi	r20, 0x20	; 32
    33f8:	51 e4       	ldi	r21, 0x41	; 65
    33fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33fe:	dc 01       	movw	r26, r24
    3400:	cb 01       	movw	r24, r22
    3402:	bc 01       	movw	r22, r24
    3404:	cd 01       	movw	r24, r26
    3406:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    340a:	dc 01       	movw	r26, r24
    340c:	cb 01       	movw	r24, r22
    340e:	9e 83       	std	Y+6, r25	; 0x06
    3410:	8d 83       	std	Y+5, r24	; 0x05
    3412:	0f c0       	rjmp	.+30     	; 0x3432 <STPR_voidRotateCounterClockwise+0x412>
    3414:	88 ec       	ldi	r24, 0xC8	; 200
    3416:	90 e0       	ldi	r25, 0x00	; 0
    3418:	9c 83       	std	Y+4, r25	; 0x04
    341a:	8b 83       	std	Y+3, r24	; 0x03
    341c:	8b 81       	ldd	r24, Y+3	; 0x03
    341e:	9c 81       	ldd	r25, Y+4	; 0x04
    3420:	01 97       	sbiw	r24, 0x01	; 1
    3422:	f1 f7       	brne	.-4      	; 0x3420 <STPR_voidRotateCounterClockwise+0x400>
    3424:	9c 83       	std	Y+4, r25	; 0x04
    3426:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3428:	8d 81       	ldd	r24, Y+5	; 0x05
    342a:	9e 81       	ldd	r25, Y+6	; 0x06
    342c:	01 97       	sbiw	r24, 0x01	; 1
    342e:	9e 83       	std	Y+6, r25	; 0x06
    3430:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3432:	8d 81       	ldd	r24, Y+5	; 0x05
    3434:	9e 81       	ldd	r25, Y+6	; 0x06
    3436:	00 97       	sbiw	r24, 0x00	; 0
    3438:	69 f7       	brne	.-38     	; 0x3414 <STPR_voidRotateCounterClockwise+0x3f4>
    343a:	14 c0       	rjmp	.+40     	; 0x3464 <STPR_voidRotateCounterClockwise+0x444>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    343c:	6f 81       	ldd	r22, Y+7	; 0x07
    343e:	78 85       	ldd	r23, Y+8	; 0x08
    3440:	89 85       	ldd	r24, Y+9	; 0x09
    3442:	9a 85       	ldd	r25, Y+10	; 0x0a
    3444:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3448:	dc 01       	movw	r26, r24
    344a:	cb 01       	movw	r24, r22
    344c:	9e 83       	std	Y+6, r25	; 0x06
    344e:	8d 83       	std	Y+5, r24	; 0x05
    3450:	8d 81       	ldd	r24, Y+5	; 0x05
    3452:	9e 81       	ldd	r25, Y+6	; 0x06
    3454:	9a 83       	std	Y+2, r25	; 0x02
    3456:	89 83       	std	Y+1, r24	; 0x01
    3458:	89 81       	ldd	r24, Y+1	; 0x01
    345a:	9a 81       	ldd	r25, Y+2	; 0x02
    345c:	01 97       	sbiw	r24, 0x01	; 1
    345e:	f1 f7       	brne	.-4      	; 0x345c <STPR_voidRotateCounterClockwise+0x43c>
    3460:	9a 83       	std	Y+2, r25	; 0x02
    3462:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    3464:	e8 96       	adiw	r28, 0x38	; 56
    3466:	0f b6       	in	r0, 0x3f	; 63
    3468:	f8 94       	cli
    346a:	de bf       	out	0x3e, r29	; 62
    346c:	0f be       	out	0x3f, r0	; 63
    346e:	cd bf       	out	0x3d, r28	; 61
    3470:	cf 91       	pop	r28
    3472:	df 91       	pop	r29
    3474:	08 95       	ret

00003476 <STPR_voidRotateAngle>:
void STPR_voidRotateAngle(u8 Copy_u8Direction, u32 Copy_u8Angle){
    3476:	df 93       	push	r29
    3478:	cf 93       	push	r28
    347a:	cd b7       	in	r28, 0x3d	; 61
    347c:	de b7       	in	r29, 0x3e	; 62
    347e:	61 97       	sbiw	r28, 0x11	; 17
    3480:	0f b6       	in	r0, 0x3f	; 63
    3482:	f8 94       	cli
    3484:	de bf       	out	0x3e, r29	; 62
    3486:	0f be       	out	0x3f, r0	; 63
    3488:	cd bf       	out	0x3d, r28	; 61
    348a:	8d 87       	std	Y+13, r24	; 0x0d
    348c:	4e 87       	std	Y+14, r20	; 0x0e
    348e:	5f 87       	std	Y+15, r21	; 0x0f
    3490:	68 8b       	std	Y+16, r22	; 0x10
    3492:	79 8b       	std	Y+17, r23	; 0x11
	u32 Local_u8Iterations=((Copy_u8Angle*10)/7);
    3494:	8e 85       	ldd	r24, Y+14	; 0x0e
    3496:	9f 85       	ldd	r25, Y+15	; 0x0f
    3498:	a8 89       	ldd	r26, Y+16	; 0x10
    349a:	b9 89       	ldd	r27, Y+17	; 0x11
    349c:	2a e0       	ldi	r18, 0x0A	; 10
    349e:	30 e0       	ldi	r19, 0x00	; 0
    34a0:	40 e0       	ldi	r20, 0x00	; 0
    34a2:	50 e0       	ldi	r21, 0x00	; 0
    34a4:	bc 01       	movw	r22, r24
    34a6:	cd 01       	movw	r24, r26
    34a8:	0e 94 57 1d 	call	0x3aae	; 0x3aae <__mulsi3>
    34ac:	dc 01       	movw	r26, r24
    34ae:	cb 01       	movw	r24, r22
    34b0:	27 e0       	ldi	r18, 0x07	; 7
    34b2:	30 e0       	ldi	r19, 0x00	; 0
    34b4:	40 e0       	ldi	r20, 0x00	; 0
    34b6:	50 e0       	ldi	r21, 0x00	; 0
    34b8:	bc 01       	movw	r22, r24
    34ba:	cd 01       	movw	r24, r26
    34bc:	0e 94 76 1d 	call	0x3aec	; 0x3aec <__udivmodsi4>
    34c0:	da 01       	movw	r26, r20
    34c2:	c9 01       	movw	r24, r18
    34c4:	89 87       	std	Y+9, r24	; 0x09
    34c6:	9a 87       	std	Y+10, r25	; 0x0a
    34c8:	ab 87       	std	Y+11, r26	; 0x0b
    34ca:	bc 87       	std	Y+12, r27	; 0x0c
	if(Copy_u8Direction==STPR_CLOCKWISE){
    34cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    34ce:	88 23       	and	r24, r24
    34d0:	01 f5       	brne	.+64     	; 0x3512 <STPR_voidRotateAngle+0x9c>
		for(u32 Local_u8Iterator=0;Local_u8Iterator<Local_u8Iterations;Local_u8Iterator++){
    34d2:	1d 82       	std	Y+5, r1	; 0x05
    34d4:	1e 82       	std	Y+6, r1	; 0x06
    34d6:	1f 82       	std	Y+7, r1	; 0x07
    34d8:	18 86       	std	Y+8, r1	; 0x08
    34da:	0d c0       	rjmp	.+26     	; 0x34f6 <STPR_voidRotateAngle+0x80>
			STPR_voidRotateClockwise();
    34dc:	0e 94 e5 15 	call	0x2bca	; 0x2bca <STPR_voidRotateClockwise>
	_delay_ms(2);
}
void STPR_voidRotateAngle(u8 Copy_u8Direction, u32 Copy_u8Angle){
	u32 Local_u8Iterations=((Copy_u8Angle*10)/7);
	if(Copy_u8Direction==STPR_CLOCKWISE){
		for(u32 Local_u8Iterator=0;Local_u8Iterator<Local_u8Iterations;Local_u8Iterator++){
    34e0:	8d 81       	ldd	r24, Y+5	; 0x05
    34e2:	9e 81       	ldd	r25, Y+6	; 0x06
    34e4:	af 81       	ldd	r26, Y+7	; 0x07
    34e6:	b8 85       	ldd	r27, Y+8	; 0x08
    34e8:	01 96       	adiw	r24, 0x01	; 1
    34ea:	a1 1d       	adc	r26, r1
    34ec:	b1 1d       	adc	r27, r1
    34ee:	8d 83       	std	Y+5, r24	; 0x05
    34f0:	9e 83       	std	Y+6, r25	; 0x06
    34f2:	af 83       	std	Y+7, r26	; 0x07
    34f4:	b8 87       	std	Y+8, r27	; 0x08
    34f6:	2d 81       	ldd	r18, Y+5	; 0x05
    34f8:	3e 81       	ldd	r19, Y+6	; 0x06
    34fa:	4f 81       	ldd	r20, Y+7	; 0x07
    34fc:	58 85       	ldd	r21, Y+8	; 0x08
    34fe:	89 85       	ldd	r24, Y+9	; 0x09
    3500:	9a 85       	ldd	r25, Y+10	; 0x0a
    3502:	ab 85       	ldd	r26, Y+11	; 0x0b
    3504:	bc 85       	ldd	r27, Y+12	; 0x0c
    3506:	28 17       	cp	r18, r24
    3508:	39 07       	cpc	r19, r25
    350a:	4a 07       	cpc	r20, r26
    350c:	5b 07       	cpc	r21, r27
    350e:	30 f3       	brcs	.-52     	; 0x34dc <STPR_voidRotateAngle+0x66>
    3510:	22 c0       	rjmp	.+68     	; 0x3556 <STPR_voidRotateAngle+0xe0>
			STPR_voidRotateClockwise();
		}
	}
	else if(Copy_u8Direction==STPR_COUNTER_CLOCKWISE){
    3512:	8d 85       	ldd	r24, Y+13	; 0x0d
    3514:	81 30       	cpi	r24, 0x01	; 1
    3516:	f9 f4       	brne	.+62     	; 0x3556 <STPR_voidRotateAngle+0xe0>
		for(u32 Local_u8Iterator=0;Local_u8Iterator<Local_u8Iterations;Local_u8Iterator++){
    3518:	19 82       	std	Y+1, r1	; 0x01
    351a:	1a 82       	std	Y+2, r1	; 0x02
    351c:	1b 82       	std	Y+3, r1	; 0x03
    351e:	1c 82       	std	Y+4, r1	; 0x04
    3520:	0d c0       	rjmp	.+26     	; 0x353c <STPR_voidRotateAngle+0xc6>
			STPR_voidRotateCounterClockwise();
    3522:	0e 94 10 18 	call	0x3020	; 0x3020 <STPR_voidRotateCounterClockwise>
		for(u32 Local_u8Iterator=0;Local_u8Iterator<Local_u8Iterations;Local_u8Iterator++){
			STPR_voidRotateClockwise();
		}
	}
	else if(Copy_u8Direction==STPR_COUNTER_CLOCKWISE){
		for(u32 Local_u8Iterator=0;Local_u8Iterator<Local_u8Iterations;Local_u8Iterator++){
    3526:	89 81       	ldd	r24, Y+1	; 0x01
    3528:	9a 81       	ldd	r25, Y+2	; 0x02
    352a:	ab 81       	ldd	r26, Y+3	; 0x03
    352c:	bc 81       	ldd	r27, Y+4	; 0x04
    352e:	01 96       	adiw	r24, 0x01	; 1
    3530:	a1 1d       	adc	r26, r1
    3532:	b1 1d       	adc	r27, r1
    3534:	89 83       	std	Y+1, r24	; 0x01
    3536:	9a 83       	std	Y+2, r25	; 0x02
    3538:	ab 83       	std	Y+3, r26	; 0x03
    353a:	bc 83       	std	Y+4, r27	; 0x04
    353c:	29 81       	ldd	r18, Y+1	; 0x01
    353e:	3a 81       	ldd	r19, Y+2	; 0x02
    3540:	4b 81       	ldd	r20, Y+3	; 0x03
    3542:	5c 81       	ldd	r21, Y+4	; 0x04
    3544:	89 85       	ldd	r24, Y+9	; 0x09
    3546:	9a 85       	ldd	r25, Y+10	; 0x0a
    3548:	ab 85       	ldd	r26, Y+11	; 0x0b
    354a:	bc 85       	ldd	r27, Y+12	; 0x0c
    354c:	28 17       	cp	r18, r24
    354e:	39 07       	cpc	r19, r25
    3550:	4a 07       	cpc	r20, r26
    3552:	5b 07       	cpc	r21, r27
    3554:	30 f3       	brcs	.-52     	; 0x3522 <STPR_voidRotateAngle+0xac>
			STPR_voidRotateCounterClockwise();
		}
	}
}
    3556:	61 96       	adiw	r28, 0x11	; 17
    3558:	0f b6       	in	r0, 0x3f	; 63
    355a:	f8 94       	cli
    355c:	de bf       	out	0x3e, r29	; 62
    355e:	0f be       	out	0x3f, r0	; 63
    3560:	cd bf       	out	0x3d, r28	; 61
    3562:	cf 91       	pop	r28
    3564:	df 91       	pop	r29
    3566:	08 95       	ret

00003568 <TIMER0_voidInit>:
static void (*TIMER2_pvCallBackFunc)(void)=NULL;
/********************************************************TIMER0**********************************************************
 ************************************************************************************************************************/


void TIMER0_voidInit(void){
    3568:	df 93       	push	r29
    356a:	cf 93       	push	r28
    356c:	cd b7       	in	r28, 0x3d	; 61
    356e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR0,TCCR0_WGM00);
#elif TIMER0_GEN_MODE==CTC
	SET_BIT(TCCR0,TCCR0_WGM01);
	CLR_BIT(TCCR0,TCCR0_WGM00);
#elif TIMER0_GEN_MODE==FAST_PWM
	SET_BIT(TCCR0,TCCR0_WGM01);
    3570:	a3 e5       	ldi	r26, 0x53	; 83
    3572:	b0 e0       	ldi	r27, 0x00	; 0
    3574:	e3 e5       	ldi	r30, 0x53	; 83
    3576:	f0 e0       	ldi	r31, 0x00	; 0
    3578:	80 81       	ld	r24, Z
    357a:	88 60       	ori	r24, 0x08	; 8
    357c:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_WGM00);
    357e:	a3 e5       	ldi	r26, 0x53	; 83
    3580:	b0 e0       	ldi	r27, 0x00	; 0
    3582:	e3 e5       	ldi	r30, 0x53	; 83
    3584:	f0 e0       	ldi	r31, 0x00	; 0
    3586:	80 81       	ld	r24, Z
    3588:	80 64       	ori	r24, 0x40	; 64
    358a:	8c 93       	st	X, r24
#endif

	//Initialize Compare Match Output Mode
	TCCR0&=COMP_MATCH_OUT_MASK;
    358c:	a3 e5       	ldi	r26, 0x53	; 83
    358e:	b0 e0       	ldi	r27, 0x00	; 0
    3590:	e3 e5       	ldi	r30, 0x53	; 83
    3592:	f0 e0       	ldi	r31, 0x00	; 0
    3594:	80 81       	ld	r24, Z
    3596:	8f 7c       	andi	r24, 0xCF	; 207
    3598:	8c 93       	st	X, r24
	TCCR0|=(TIMER0_COMP_MATCH_OUTPUT_MODE<<4);
    359a:	a3 e5       	ldi	r26, 0x53	; 83
    359c:	b0 e0       	ldi	r27, 0x00	; 0
    359e:	e3 e5       	ldi	r30, 0x53	; 83
    35a0:	f0 e0       	ldi	r31, 0x00	; 0
    35a2:	80 81       	ld	r24, Z
    35a4:	80 62       	ori	r24, 0x20	; 32
    35a6:	8c 93       	st	X, r24

	//Initialize Interrupt Enable pins
#if TIMER0_COMP_MATCH_INT==ENABLE
	SET_BIT(TIMSK,TIMSK_OCIE0);
#elif TIMER0_COMP_MATCH_INT==DISABLE
	CLR_BIT(TIMSK,TIMSK_OCIE0);
    35a8:	a9 e5       	ldi	r26, 0x59	; 89
    35aa:	b0 e0       	ldi	r27, 0x00	; 0
    35ac:	e9 e5       	ldi	r30, 0x59	; 89
    35ae:	f0 e0       	ldi	r31, 0x00	; 0
    35b0:	80 81       	ld	r24, Z
    35b2:	8d 7f       	andi	r24, 0xFD	; 253
    35b4:	8c 93       	st	X, r24
#endif

#if TIMER0_OVERFLOW_INT==ENABLE
	SET_BIT(TIMSK,TIMSK_TOIE0);
#elif TIMER0_OVERFLOW_INT==DISABLE
	CLR_BIT(TIMSK,TIMSK_TOIE0);
    35b6:	a9 e5       	ldi	r26, 0x59	; 89
    35b8:	b0 e0       	ldi	r27, 0x00	; 0
    35ba:	e9 e5       	ldi	r30, 0x59	; 89
    35bc:	f0 e0       	ldi	r31, 0x00	; 0
    35be:	80 81       	ld	r24, Z
    35c0:	8e 7f       	andi	r24, 0xFE	; 254
    35c2:	8c 93       	st	X, r24
#endif

	//Initialize Prescaler
	TCCR0&=PRESCALER_MASK;
    35c4:	a3 e5       	ldi	r26, 0x53	; 83
    35c6:	b0 e0       	ldi	r27, 0x00	; 0
    35c8:	e3 e5       	ldi	r30, 0x53	; 83
    35ca:	f0 e0       	ldi	r31, 0x00	; 0
    35cc:	80 81       	ld	r24, Z
    35ce:	88 7f       	andi	r24, 0xF8	; 248
    35d0:	8c 93       	st	X, r24
	TCCR0|=TIMER0_PRESCALER;
    35d2:	a3 e5       	ldi	r26, 0x53	; 83
    35d4:	b0 e0       	ldi	r27, 0x00	; 0
    35d6:	e3 e5       	ldi	r30, 0x53	; 83
    35d8:	f0 e0       	ldi	r31, 0x00	; 0
    35da:	80 81       	ld	r24, Z
    35dc:	83 60       	ori	r24, 0x03	; 3
    35de:	8c 93       	st	X, r24
}
    35e0:	cf 91       	pop	r28
    35e2:	df 91       	pop	r29
    35e4:	08 95       	ret

000035e6 <TIMER0_voidSetCompMatchValue>:

void TIMER0_voidSetCompMatchValue(u8 Copy_u8Value){
    35e6:	df 93       	push	r29
    35e8:	cf 93       	push	r28
    35ea:	0f 92       	push	r0
    35ec:	cd b7       	in	r28, 0x3d	; 61
    35ee:	de b7       	in	r29, 0x3e	; 62
    35f0:	89 83       	std	Y+1, r24	; 0x01
	OCR0=Copy_u8Value;
    35f2:	ec e5       	ldi	r30, 0x5C	; 92
    35f4:	f0 e0       	ldi	r31, 0x00	; 0
    35f6:	89 81       	ldd	r24, Y+1	; 0x01
    35f8:	80 83       	st	Z, r24
}
    35fa:	0f 90       	pop	r0
    35fc:	cf 91       	pop	r28
    35fe:	df 91       	pop	r29
    3600:	08 95       	ret

00003602 <TIMER0_voidSetPreloadValue>:

void TIMER0_voidSetPreloadValue(u8 Copy_u8Value){
    3602:	df 93       	push	r29
    3604:	cf 93       	push	r28
    3606:	0f 92       	push	r0
    3608:	cd b7       	in	r28, 0x3d	; 61
    360a:	de b7       	in	r29, 0x3e	; 62
    360c:	89 83       	std	Y+1, r24	; 0x01
	TCNT0=Copy_u8Value;
    360e:	e2 e5       	ldi	r30, 0x52	; 82
    3610:	f0 e0       	ldi	r31, 0x00	; 0
    3612:	89 81       	ldd	r24, Y+1	; 0x01
    3614:	80 83       	st	Z, r24
}
    3616:	0f 90       	pop	r0
    3618:	cf 91       	pop	r28
    361a:	df 91       	pop	r29
    361c:	08 95       	ret

0000361e <TIMER0_u8SetCallBack>:

u8 TIMER0_u8SetCallBack(void(*Copy_pvCallBackFunc)(void)){
    361e:	df 93       	push	r29
    3620:	cf 93       	push	r28
    3622:	00 d0       	rcall	.+0      	; 0x3624 <TIMER0_u8SetCallBack+0x6>
    3624:	0f 92       	push	r0
    3626:	cd b7       	in	r28, 0x3d	; 61
    3628:	de b7       	in	r29, 0x3e	; 62
    362a:	9b 83       	std	Y+3, r25	; 0x03
    362c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
    362e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvCallBackFunc!=NULL){
    3630:	8a 81       	ldd	r24, Y+2	; 0x02
    3632:	9b 81       	ldd	r25, Y+3	; 0x03
    3634:	00 97       	sbiw	r24, 0x00	; 0
    3636:	39 f0       	breq	.+14     	; 0x3646 <TIMER0_u8SetCallBack+0x28>
		TIMER0_pvCallBackFunc=Copy_pvCallBackFunc;
    3638:	8a 81       	ldd	r24, Y+2	; 0x02
    363a:	9b 81       	ldd	r25, Y+3	; 0x03
    363c:	90 93 5c 01 	sts	0x015C, r25
    3640:	80 93 5b 01 	sts	0x015B, r24
    3644:	02 c0       	rjmp	.+4      	; 0x364a <TIMER0_u8SetCallBack+0x2c>
	}
	else{
		Local_u8ErrorState=NULL_POINTER;
    3646:	82 e0       	ldi	r24, 0x02	; 2
    3648:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    364a:	89 81       	ldd	r24, Y+1	; 0x01
}
    364c:	0f 90       	pop	r0
    364e:	0f 90       	pop	r0
    3650:	0f 90       	pop	r0
    3652:	cf 91       	pop	r28
    3654:	df 91       	pop	r29
    3656:	08 95       	ret

00003658 <TIMER0_voidPWMGenerate>:

u8 TIMER0_voidPWMGenerate(u8 Copy_u8DutyCycle){
    3658:	ef 92       	push	r14
    365a:	ff 92       	push	r15
    365c:	0f 93       	push	r16
    365e:	1f 93       	push	r17
    3660:	df 93       	push	r29
    3662:	cf 93       	push	r28
    3664:	00 d0       	rcall	.+0      	; 0x3666 <TIMER0_voidPWMGenerate+0xe>
    3666:	cd b7       	in	r28, 0x3d	; 61
    3668:	de b7       	in	r29, 0x3e	; 62
    366a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
    366c:	19 82       	std	Y+1, r1	; 0x01
	if(TIMER0_GEN_MODE==PHC_PWM||TIMER0_GEN_MODE==FAST_PWM){
		if(Copy_u8DutyCycle<=100){
    366e:	8a 81       	ldd	r24, Y+2	; 0x02
    3670:	85 36       	cpi	r24, 0x65	; 101
    3672:	b0 f4       	brcc	.+44     	; 0x36a0 <TIMER0_voidPWMGenerate+0x48>
			OCR0=MATH_s32Map(0,100,0,255,Copy_u8DutyCycle);
    3674:	0f 2e       	mov	r0, r31
    3676:	fc e5       	ldi	r31, 0x5C	; 92
    3678:	ef 2e       	mov	r14, r31
    367a:	ff 24       	eor	r15, r15
    367c:	f0 2d       	mov	r31, r0
    367e:	8a 81       	ldd	r24, Y+2	; 0x02
    3680:	e8 2f       	mov	r30, r24
    3682:	f0 e0       	ldi	r31, 0x00	; 0
    3684:	80 e0       	ldi	r24, 0x00	; 0
    3686:	90 e0       	ldi	r25, 0x00	; 0
    3688:	64 e6       	ldi	r22, 0x64	; 100
    368a:	70 e0       	ldi	r23, 0x00	; 0
    368c:	40 e0       	ldi	r20, 0x00	; 0
    368e:	50 e0       	ldi	r21, 0x00	; 0
    3690:	2f ef       	ldi	r18, 0xFF	; 255
    3692:	30 e0       	ldi	r19, 0x00	; 0
    3694:	8f 01       	movw	r16, r30
    3696:	0e 94 48 15 	call	0x2a90	; 0x2a90 <MATH_s32Map>
    369a:	f7 01       	movw	r30, r14
    369c:	80 83       	st	Z, r24
    369e:	02 c0       	rjmp	.+4      	; 0x36a4 <TIMER0_voidPWMGenerate+0x4c>
		}
		else{
			Local_u8ErrorState=NOK;
    36a0:	81 e0       	ldi	r24, 0x01	; 1
    36a2:	89 83       	std	Y+1, r24	; 0x01
}
	else{
		Local_u8ErrorState=NOK;
	}

	return Local_u8ErrorState;
    36a4:	89 81       	ldd	r24, Y+1	; 0x01

}
    36a6:	0f 90       	pop	r0
    36a8:	0f 90       	pop	r0
    36aa:	cf 91       	pop	r28
    36ac:	df 91       	pop	r29
    36ae:	1f 91       	pop	r17
    36b0:	0f 91       	pop	r16
    36b2:	ff 90       	pop	r15
    36b4:	ef 90       	pop	r14
    36b6:	08 95       	ret

000036b8 <TIMER1_voidInit>:

/********************************************************TIMER1**********************************************************
 ************************************************************************************************************************/


void TIMER1_voidInit(void){
    36b8:	df 93       	push	r29
    36ba:	cf 93       	push	r28
    36bc:	cd b7       	in	r28, 0x3d	; 61
    36be:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR1B,TCCR1B_WGM13);
	SET_BIT(TCCR1B,TCCR1B_WGM12);
	CLR_BIT(TCCR1A,TCCR1A_WGM11);
	CLR_BIT(TCCR1A,TCCR1A_WGM10);
#elif TIMER1_GEN_MODE==T1_FAST_PWM_CUSTOM_TOP
	SET_BIT(TCCR1B,TCCR1B_WGM13);
    36c0:	ae e4       	ldi	r26, 0x4E	; 78
    36c2:	b0 e0       	ldi	r27, 0x00	; 0
    36c4:	ee e4       	ldi	r30, 0x4E	; 78
    36c6:	f0 e0       	ldi	r31, 0x00	; 0
    36c8:	80 81       	ld	r24, Z
    36ca:	80 61       	ori	r24, 0x10	; 16
    36cc:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM12);
    36ce:	ae e4       	ldi	r26, 0x4E	; 78
    36d0:	b0 e0       	ldi	r27, 0x00	; 0
    36d2:	ee e4       	ldi	r30, 0x4E	; 78
    36d4:	f0 e0       	ldi	r31, 0x00	; 0
    36d6:	80 81       	ld	r24, Z
    36d8:	88 60       	ori	r24, 0x08	; 8
    36da:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_WGM11);
    36dc:	af e4       	ldi	r26, 0x4F	; 79
    36de:	b0 e0       	ldi	r27, 0x00	; 0
    36e0:	ef e4       	ldi	r30, 0x4F	; 79
    36e2:	f0 e0       	ldi	r31, 0x00	; 0
    36e4:	80 81       	ld	r24, Z
    36e6:	82 60       	ori	r24, 0x02	; 2
    36e8:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,TCCR1A_WGM10);
    36ea:	af e4       	ldi	r26, 0x4F	; 79
    36ec:	b0 e0       	ldi	r27, 0x00	; 0
    36ee:	ef e4       	ldi	r30, 0x4F	; 79
    36f0:	f0 e0       	ldi	r31, 0x00	; 0
    36f2:	80 81       	ld	r24, Z
    36f4:	8e 7f       	andi	r24, 0xFE	; 254
    36f6:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM12);
	SET_BIT(TCCR1A,TCCR1A_WGM11);
	SET_BIT(TCCR1A,TCCR1A_WGM10);
#endif
	//Set Match Compare Output Mode for both channel A and B
	TCCR1A&=T1_COMP_MATCH_OUT_MASK;
    36f8:	af e4       	ldi	r26, 0x4F	; 79
    36fa:	b0 e0       	ldi	r27, 0x00	; 0
    36fc:	ef e4       	ldi	r30, 0x4F	; 79
    36fe:	f0 e0       	ldi	r31, 0x00	; 0
    3700:	80 81       	ld	r24, Z
    3702:	8f 70       	andi	r24, 0x0F	; 15
    3704:	8c 93       	st	X, r24
	TCCR1A|=(TIMER1B_COMP_MATCH_OUTPUT_MODE<<4);
    3706:	af e4       	ldi	r26, 0x4F	; 79
    3708:	b0 e0       	ldi	r27, 0x00	; 0
    370a:	ef e4       	ldi	r30, 0x4F	; 79
    370c:	f0 e0       	ldi	r31, 0x00	; 0
    370e:	80 81       	ld	r24, Z
    3710:	80 62       	ori	r24, 0x20	; 32
    3712:	8c 93       	st	X, r24
	TCCR1A|=(TIMER1A_COMP_MATCH_OUTPUT_MODE<<6);
    3714:	af e4       	ldi	r26, 0x4F	; 79
    3716:	b0 e0       	ldi	r27, 0x00	; 0
    3718:	ef e4       	ldi	r30, 0x4F	; 79
    371a:	f0 e0       	ldi	r31, 0x00	; 0
    371c:	80 81       	ld	r24, Z
    371e:	80 68       	ori	r24, 0x80	; 128
    3720:	8c 93       	st	X, r24
	//Settine interrupts
#if TIMER1A_COMP_MATCH_INT==ENABLE
	SET_BIT(TIMSK,TIMSK_OCIE1A);
#elif TIMER1A_COMP_MATCH_INT==DISABLE
	CLR_BIT(TIMSK,TIMSK_OCIE1A);
    3722:	a9 e5       	ldi	r26, 0x59	; 89
    3724:	b0 e0       	ldi	r27, 0x00	; 0
    3726:	e9 e5       	ldi	r30, 0x59	; 89
    3728:	f0 e0       	ldi	r31, 0x00	; 0
    372a:	80 81       	ld	r24, Z
    372c:	8f 7e       	andi	r24, 0xEF	; 239
    372e:	8c 93       	st	X, r24
#endif

#if TIMER1B_COMP_MATCH_INT==ENABLE
	SET_BIT(TIMSK,TIMSK_OCIE1B);
#elif TIMER1B_COMP_MATCH_INT==DISABLE
	CLR_BIT(TIMSK,TIMSK_OCIE1B);
    3730:	a9 e5       	ldi	r26, 0x59	; 89
    3732:	b0 e0       	ldi	r27, 0x00	; 0
    3734:	e9 e5       	ldi	r30, 0x59	; 89
    3736:	f0 e0       	ldi	r31, 0x00	; 0
    3738:	80 81       	ld	r24, Z
    373a:	87 7f       	andi	r24, 0xF7	; 247
    373c:	8c 93       	st	X, r24
#endif

#if TIMER1_OVERFLOW_INT==ENABLE
	SET_BIT(TIMSK,TIMSK_TOIE1);
#elif TIMER1_OVERFLOW_INT==DISABLE
	CLR_BIT(TIMSK,TIMSK_TOIE1);
    373e:	a9 e5       	ldi	r26, 0x59	; 89
    3740:	b0 e0       	ldi	r27, 0x00	; 0
    3742:	e9 e5       	ldi	r30, 0x59	; 89
    3744:	f0 e0       	ldi	r31, 0x00	; 0
    3746:	80 81       	ld	r24, Z
    3748:	8b 7f       	andi	r24, 0xFB	; 251
    374a:	8c 93       	st	X, r24
#endif

	//Set Prescaler
	TCCR1B&=PRESCALER_MASK;
    374c:	ae e4       	ldi	r26, 0x4E	; 78
    374e:	b0 e0       	ldi	r27, 0x00	; 0
    3750:	ee e4       	ldi	r30, 0x4E	; 78
    3752:	f0 e0       	ldi	r31, 0x00	; 0
    3754:	80 81       	ld	r24, Z
    3756:	88 7f       	andi	r24, 0xF8	; 248
    3758:	8c 93       	st	X, r24
	TCCR1B|=TIMER1_PRESCALER;
    375a:	ae e4       	ldi	r26, 0x4E	; 78
    375c:	b0 e0       	ldi	r27, 0x00	; 0
    375e:	ee e4       	ldi	r30, 0x4E	; 78
    3760:	f0 e0       	ldi	r31, 0x00	; 0
    3762:	80 81       	ld	r24, Z
    3764:	82 60       	ori	r24, 0x02	; 2
    3766:	8c 93       	st	X, r24

}
    3768:	cf 91       	pop	r28
    376a:	df 91       	pop	r29
    376c:	08 95       	ret

0000376e <TIMER1A_voidSetCompMatchValue>:

void TIMER1A_voidSetCompMatchValue(u16 Copy_u16Value){
    376e:	df 93       	push	r29
    3770:	cf 93       	push	r28
    3772:	00 d0       	rcall	.+0      	; 0x3774 <TIMER1A_voidSetCompMatchValue+0x6>
    3774:	cd b7       	in	r28, 0x3d	; 61
    3776:	de b7       	in	r29, 0x3e	; 62
    3778:	9a 83       	std	Y+2, r25	; 0x02
    377a:	89 83       	std	Y+1, r24	; 0x01
	OCR1A=Copy_u16Value;
    377c:	ea e4       	ldi	r30, 0x4A	; 74
    377e:	f0 e0       	ldi	r31, 0x00	; 0
    3780:	89 81       	ldd	r24, Y+1	; 0x01
    3782:	9a 81       	ldd	r25, Y+2	; 0x02
    3784:	91 83       	std	Z+1, r25	; 0x01
    3786:	80 83       	st	Z, r24
}
    3788:	0f 90       	pop	r0
    378a:	0f 90       	pop	r0
    378c:	cf 91       	pop	r28
    378e:	df 91       	pop	r29
    3790:	08 95       	ret

00003792 <TIMER1B_voidSetCompMatchValue>:

void TIMER1B_voidSetCompMatchValue(u16 Copy_u16Value){
    3792:	df 93       	push	r29
    3794:	cf 93       	push	r28
    3796:	00 d0       	rcall	.+0      	; 0x3798 <TIMER1B_voidSetCompMatchValue+0x6>
    3798:	cd b7       	in	r28, 0x3d	; 61
    379a:	de b7       	in	r29, 0x3e	; 62
    379c:	9a 83       	std	Y+2, r25	; 0x02
    379e:	89 83       	std	Y+1, r24	; 0x01
	OCR1B=Copy_u16Value;
    37a0:	e8 e4       	ldi	r30, 0x48	; 72
    37a2:	f0 e0       	ldi	r31, 0x00	; 0
    37a4:	89 81       	ldd	r24, Y+1	; 0x01
    37a6:	9a 81       	ldd	r25, Y+2	; 0x02
    37a8:	91 83       	std	Z+1, r25	; 0x01
    37aa:	80 83       	st	Z, r24
}
    37ac:	0f 90       	pop	r0
    37ae:	0f 90       	pop	r0
    37b0:	cf 91       	pop	r28
    37b2:	df 91       	pop	r29
    37b4:	08 95       	ret

000037b6 <TIMER1_voidSetTopValue>:

void TIMER1_voidSetTopValue(u16 Copy_u16Value){
    37b6:	df 93       	push	r29
    37b8:	cf 93       	push	r28
    37ba:	00 d0       	rcall	.+0      	; 0x37bc <TIMER1_voidSetTopValue+0x6>
    37bc:	cd b7       	in	r28, 0x3d	; 61
    37be:	de b7       	in	r29, 0x3e	; 62
    37c0:	9a 83       	std	Y+2, r25	; 0x02
    37c2:	89 83       	std	Y+1, r24	; 0x01
	ICR1=Copy_u16Value;
    37c4:	e6 e4       	ldi	r30, 0x46	; 70
    37c6:	f0 e0       	ldi	r31, 0x00	; 0
    37c8:	89 81       	ldd	r24, Y+1	; 0x01
    37ca:	9a 81       	ldd	r25, Y+2	; 0x02
    37cc:	91 83       	std	Z+1, r25	; 0x01
    37ce:	80 83       	st	Z, r24
}
    37d0:	0f 90       	pop	r0
    37d2:	0f 90       	pop	r0
    37d4:	cf 91       	pop	r28
    37d6:	df 91       	pop	r29
    37d8:	08 95       	ret

000037da <TIMER2_voidInit>:

/********************************************************TIMER2**********************************************************
 ************************************************************************************************************************/


void TIMER2_voidInit(void){
    37da:	df 93       	push	r29
    37dc:	cf 93       	push	r28
    37de:	cd b7       	in	r28, 0x3d	; 61
    37e0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR2,TCCR2_WGM20);
#elif TIMER2_GEN_MODE==PWM
	CLR_BIT(TCCR2,TCCR2_WGM21);
	SET_BIT(TCCR2,TCCR2_WGM20);
#elif TIMER2_GEN_MODE==CTC
	SET_BIT(TCCR2,TCCR2_WGM21);
    37e2:	a5 e4       	ldi	r26, 0x45	; 69
    37e4:	b0 e0       	ldi	r27, 0x00	; 0
    37e6:	e5 e4       	ldi	r30, 0x45	; 69
    37e8:	f0 e0       	ldi	r31, 0x00	; 0
    37ea:	80 81       	ld	r24, Z
    37ec:	88 60       	ori	r24, 0x08	; 8
    37ee:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,TCCR2_WGM20);
    37f0:	a5 e4       	ldi	r26, 0x45	; 69
    37f2:	b0 e0       	ldi	r27, 0x00	; 0
    37f4:	e5 e4       	ldi	r30, 0x45	; 69
    37f6:	f0 e0       	ldi	r31, 0x00	; 0
    37f8:	80 81       	ld	r24, Z
    37fa:	8f 7b       	andi	r24, 0xBF	; 191
    37fc:	8c 93       	st	X, r24
	SET_BIT(TCCR2,TCCR2_WGM21);
	SET_BIT(TCCR2,TCCR2_WGM20);
#endif

	//Initialize Compare Match Output Mode
	TCCR2&=COMP_MATCH_OUT_MASK;
    37fe:	a5 e4       	ldi	r26, 0x45	; 69
    3800:	b0 e0       	ldi	r27, 0x00	; 0
    3802:	e5 e4       	ldi	r30, 0x45	; 69
    3804:	f0 e0       	ldi	r31, 0x00	; 0
    3806:	80 81       	ld	r24, Z
    3808:	8f 7c       	andi	r24, 0xCF	; 207
    380a:	8c 93       	st	X, r24
	TCCR2|=(TIMER2_COMP_MATCH_OUTPUT_MODE<<4);
    380c:	a5 e4       	ldi	r26, 0x45	; 69
    380e:	b0 e0       	ldi	r27, 0x00	; 0
    3810:	e5 e4       	ldi	r30, 0x45	; 69
    3812:	f0 e0       	ldi	r31, 0x00	; 0
    3814:	80 81       	ld	r24, Z
    3816:	8c 93       	st	X, r24

	//Initialize Interrupt Enable pins
#if TIMER2_COMP_MATCH_INT==ENABLE
	SET_BIT(TIMSK,TIMSK_OCIE2);
    3818:	a9 e5       	ldi	r26, 0x59	; 89
    381a:	b0 e0       	ldi	r27, 0x00	; 0
    381c:	e9 e5       	ldi	r30, 0x59	; 89
    381e:	f0 e0       	ldi	r31, 0x00	; 0
    3820:	80 81       	ld	r24, Z
    3822:	80 68       	ori	r24, 0x80	; 128
    3824:	8c 93       	st	X, r24
#elif TIMER2_COMP_MATCH_INT==DISABLE
	CLR_BIT(TIMSK,TIMSK_OCIE2);
#endif

#if TIMER2_OVERFLOW_INT==ENABLE
	SET_BIT(TIMSK,TIMSK_TOIE2);
    3826:	a9 e5       	ldi	r26, 0x59	; 89
    3828:	b0 e0       	ldi	r27, 0x00	; 0
    382a:	e9 e5       	ldi	r30, 0x59	; 89
    382c:	f0 e0       	ldi	r31, 0x00	; 0
    382e:	80 81       	ld	r24, Z
    3830:	80 64       	ori	r24, 0x40	; 64
    3832:	8c 93       	st	X, r24
#elif TIMER0_OVERFLOW_INT==DISABLE
	CLR_BIT(TIMSK,TIMSK_TOIE2);
#endif

	//Initialize Prescaler
	TCCR2&=PRESCALER_MASK;
    3834:	a5 e4       	ldi	r26, 0x45	; 69
    3836:	b0 e0       	ldi	r27, 0x00	; 0
    3838:	e5 e4       	ldi	r30, 0x45	; 69
    383a:	f0 e0       	ldi	r31, 0x00	; 0
    383c:	80 81       	ld	r24, Z
    383e:	88 7f       	andi	r24, 0xF8	; 248
    3840:	8c 93       	st	X, r24
	TCCR2|=TIMER2_PRESCALER;
    3842:	a5 e4       	ldi	r26, 0x45	; 69
    3844:	b0 e0       	ldi	r27, 0x00	; 0
    3846:	e5 e4       	ldi	r30, 0x45	; 69
    3848:	f0 e0       	ldi	r31, 0x00	; 0
    384a:	80 81       	ld	r24, Z
    384c:	82 60       	ori	r24, 0x02	; 2
    384e:	8c 93       	st	X, r24
}
    3850:	cf 91       	pop	r28
    3852:	df 91       	pop	r29
    3854:	08 95       	ret

00003856 <TIMER2_voidSetCompMatchValue>:

void TIMER2_voidSetCompMatchValue(u8 Copy_u8Value){
    3856:	df 93       	push	r29
    3858:	cf 93       	push	r28
    385a:	0f 92       	push	r0
    385c:	cd b7       	in	r28, 0x3d	; 61
    385e:	de b7       	in	r29, 0x3e	; 62
    3860:	89 83       	std	Y+1, r24	; 0x01
	OCR2=Copy_u8Value;
    3862:	e3 e4       	ldi	r30, 0x43	; 67
    3864:	f0 e0       	ldi	r31, 0x00	; 0
    3866:	89 81       	ldd	r24, Y+1	; 0x01
    3868:	80 83       	st	Z, r24
}
    386a:	0f 90       	pop	r0
    386c:	cf 91       	pop	r28
    386e:	df 91       	pop	r29
    3870:	08 95       	ret

00003872 <TIMER2_voidSetPreloadValue>:

void TIMER2_voidSetPreloadValue(u8 Copy_u8Value){
    3872:	df 93       	push	r29
    3874:	cf 93       	push	r28
    3876:	0f 92       	push	r0
    3878:	cd b7       	in	r28, 0x3d	; 61
    387a:	de b7       	in	r29, 0x3e	; 62
    387c:	89 83       	std	Y+1, r24	; 0x01
	TCNT2=Copy_u8Value;
    387e:	e4 e4       	ldi	r30, 0x44	; 68
    3880:	f0 e0       	ldi	r31, 0x00	; 0
    3882:	89 81       	ldd	r24, Y+1	; 0x01
    3884:	80 83       	st	Z, r24
}
    3886:	0f 90       	pop	r0
    3888:	cf 91       	pop	r28
    388a:	df 91       	pop	r29
    388c:	08 95       	ret

0000388e <TIMER2_u8SetCallBack>:

u8 TIMER2_u8SetCallBack(void(*Copy_pvCallBackFunc)(void)){
    388e:	df 93       	push	r29
    3890:	cf 93       	push	r28
    3892:	00 d0       	rcall	.+0      	; 0x3894 <TIMER2_u8SetCallBack+0x6>
    3894:	0f 92       	push	r0
    3896:	cd b7       	in	r28, 0x3d	; 61
    3898:	de b7       	in	r29, 0x3e	; 62
    389a:	9b 83       	std	Y+3, r25	; 0x03
    389c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
    389e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvCallBackFunc!=NULL){
    38a0:	8a 81       	ldd	r24, Y+2	; 0x02
    38a2:	9b 81       	ldd	r25, Y+3	; 0x03
    38a4:	00 97       	sbiw	r24, 0x00	; 0
    38a6:	39 f0       	breq	.+14     	; 0x38b6 <TIMER2_u8SetCallBack+0x28>
		TIMER2_pvCallBackFunc=Copy_pvCallBackFunc;
    38a8:	8a 81       	ldd	r24, Y+2	; 0x02
    38aa:	9b 81       	ldd	r25, Y+3	; 0x03
    38ac:	90 93 5e 01 	sts	0x015E, r25
    38b0:	80 93 5d 01 	sts	0x015D, r24
    38b4:	02 c0       	rjmp	.+4      	; 0x38ba <TIMER2_u8SetCallBack+0x2c>
	}
	else{
		Local_u8ErrorState=NULL_POINTER;
    38b6:	82 e0       	ldi	r24, 0x02	; 2
    38b8:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    38ba:	89 81       	ldd	r24, Y+1	; 0x01
}
    38bc:	0f 90       	pop	r0
    38be:	0f 90       	pop	r0
    38c0:	0f 90       	pop	r0
    38c2:	cf 91       	pop	r28
    38c4:	df 91       	pop	r29
    38c6:	08 95       	ret

000038c8 <__vector_4>:



//TIMER2 Compare Match ISR
void __vector_4(void)  __attribute__((signal));
void __vector_4(void){
    38c8:	1f 92       	push	r1
    38ca:	0f 92       	push	r0
    38cc:	0f b6       	in	r0, 0x3f	; 63
    38ce:	0f 92       	push	r0
    38d0:	11 24       	eor	r1, r1
    38d2:	2f 93       	push	r18
    38d4:	3f 93       	push	r19
    38d6:	4f 93       	push	r20
    38d8:	5f 93       	push	r21
    38da:	6f 93       	push	r22
    38dc:	7f 93       	push	r23
    38de:	8f 93       	push	r24
    38e0:	9f 93       	push	r25
    38e2:	af 93       	push	r26
    38e4:	bf 93       	push	r27
    38e6:	ef 93       	push	r30
    38e8:	ff 93       	push	r31
    38ea:	df 93       	push	r29
    38ec:	cf 93       	push	r28
    38ee:	cd b7       	in	r28, 0x3d	; 61
    38f0:	de b7       	in	r29, 0x3e	; 62
	if(TIMER2_pvCallBackFunc!=NULL){
    38f2:	80 91 5d 01 	lds	r24, 0x015D
    38f6:	90 91 5e 01 	lds	r25, 0x015E
    38fa:	00 97       	sbiw	r24, 0x00	; 0
    38fc:	29 f0       	breq	.+10     	; 0x3908 <__vector_4+0x40>
		TIMER2_pvCallBackFunc();
    38fe:	e0 91 5d 01 	lds	r30, 0x015D
    3902:	f0 91 5e 01 	lds	r31, 0x015E
    3906:	09 95       	icall
	}
}
    3908:	cf 91       	pop	r28
    390a:	df 91       	pop	r29
    390c:	ff 91       	pop	r31
    390e:	ef 91       	pop	r30
    3910:	bf 91       	pop	r27
    3912:	af 91       	pop	r26
    3914:	9f 91       	pop	r25
    3916:	8f 91       	pop	r24
    3918:	7f 91       	pop	r23
    391a:	6f 91       	pop	r22
    391c:	5f 91       	pop	r21
    391e:	4f 91       	pop	r20
    3920:	3f 91       	pop	r19
    3922:	2f 91       	pop	r18
    3924:	0f 90       	pop	r0
    3926:	0f be       	out	0x3f, r0	; 63
    3928:	0f 90       	pop	r0
    392a:	1f 90       	pop	r1
    392c:	18 95       	reti

0000392e <__vector_5>:

//TIMER2 Overflow ISR
void __vector_5(void)  __attribute__((signal));
void __vector_5(void){
    392e:	1f 92       	push	r1
    3930:	0f 92       	push	r0
    3932:	0f b6       	in	r0, 0x3f	; 63
    3934:	0f 92       	push	r0
    3936:	11 24       	eor	r1, r1
    3938:	df 93       	push	r29
    393a:	cf 93       	push	r28
    393c:	cd b7       	in	r28, 0x3d	; 61
    393e:	de b7       	in	r29, 0x3e	; 62

}
    3940:	cf 91       	pop	r28
    3942:	df 91       	pop	r29
    3944:	0f 90       	pop	r0
    3946:	0f be       	out	0x3f, r0	; 63
    3948:	0f 90       	pop	r0
    394a:	1f 90       	pop	r1
    394c:	18 95       	reti

0000394e <__vector_6>:

//TIMER1 Capture Event ISR
void __vector_6(void)  __attribute__((signal));
void __vector_6(void){
    394e:	1f 92       	push	r1
    3950:	0f 92       	push	r0
    3952:	0f b6       	in	r0, 0x3f	; 63
    3954:	0f 92       	push	r0
    3956:	11 24       	eor	r1, r1
    3958:	df 93       	push	r29
    395a:	cf 93       	push	r28
    395c:	cd b7       	in	r28, 0x3d	; 61
    395e:	de b7       	in	r29, 0x3e	; 62

}
    3960:	cf 91       	pop	r28
    3962:	df 91       	pop	r29
    3964:	0f 90       	pop	r0
    3966:	0f be       	out	0x3f, r0	; 63
    3968:	0f 90       	pop	r0
    396a:	1f 90       	pop	r1
    396c:	18 95       	reti

0000396e <__vector_7>:


//TIMER1 Compare Match A ISR
void __vector_7(void)  __attribute__((signal));
void __vector_7(void){
    396e:	1f 92       	push	r1
    3970:	0f 92       	push	r0
    3972:	0f b6       	in	r0, 0x3f	; 63
    3974:	0f 92       	push	r0
    3976:	11 24       	eor	r1, r1
    3978:	df 93       	push	r29
    397a:	cf 93       	push	r28
    397c:	cd b7       	in	r28, 0x3d	; 61
    397e:	de b7       	in	r29, 0x3e	; 62

}
    3980:	cf 91       	pop	r28
    3982:	df 91       	pop	r29
    3984:	0f 90       	pop	r0
    3986:	0f be       	out	0x3f, r0	; 63
    3988:	0f 90       	pop	r0
    398a:	1f 90       	pop	r1
    398c:	18 95       	reti

0000398e <__vector_8>:

//TIMER1 Compare Match B ISR
void __vector_8(void)  __attribute__((signal));
void __vector_8(void){
    398e:	1f 92       	push	r1
    3990:	0f 92       	push	r0
    3992:	0f b6       	in	r0, 0x3f	; 63
    3994:	0f 92       	push	r0
    3996:	11 24       	eor	r1, r1
    3998:	df 93       	push	r29
    399a:	cf 93       	push	r28
    399c:	cd b7       	in	r28, 0x3d	; 61
    399e:	de b7       	in	r29, 0x3e	; 62

}
    39a0:	cf 91       	pop	r28
    39a2:	df 91       	pop	r29
    39a4:	0f 90       	pop	r0
    39a6:	0f be       	out	0x3f, r0	; 63
    39a8:	0f 90       	pop	r0
    39aa:	1f 90       	pop	r1
    39ac:	18 95       	reti

000039ae <__vector_9>:

//TIMER1 Overflow ISR
void __vector_9(void)  __attribute__((signal));
void __vector_9(void){
    39ae:	1f 92       	push	r1
    39b0:	0f 92       	push	r0
    39b2:	0f b6       	in	r0, 0x3f	; 63
    39b4:	0f 92       	push	r0
    39b6:	11 24       	eor	r1, r1
    39b8:	df 93       	push	r29
    39ba:	cf 93       	push	r28
    39bc:	cd b7       	in	r28, 0x3d	; 61
    39be:	de b7       	in	r29, 0x3e	; 62

}
    39c0:	cf 91       	pop	r28
    39c2:	df 91       	pop	r29
    39c4:	0f 90       	pop	r0
    39c6:	0f be       	out	0x3f, r0	; 63
    39c8:	0f 90       	pop	r0
    39ca:	1f 90       	pop	r1
    39cc:	18 95       	reti

000039ce <__vector_10>:

//TIMER0 Compare Match ISR
void __vector_10(void)  __attribute__((signal));
void __vector_10(void){
    39ce:	1f 92       	push	r1
    39d0:	0f 92       	push	r0
    39d2:	0f b6       	in	r0, 0x3f	; 63
    39d4:	0f 92       	push	r0
    39d6:	11 24       	eor	r1, r1
    39d8:	2f 93       	push	r18
    39da:	3f 93       	push	r19
    39dc:	4f 93       	push	r20
    39de:	5f 93       	push	r21
    39e0:	6f 93       	push	r22
    39e2:	7f 93       	push	r23
    39e4:	8f 93       	push	r24
    39e6:	9f 93       	push	r25
    39e8:	af 93       	push	r26
    39ea:	bf 93       	push	r27
    39ec:	ef 93       	push	r30
    39ee:	ff 93       	push	r31
    39f0:	df 93       	push	r29
    39f2:	cf 93       	push	r28
    39f4:	cd b7       	in	r28, 0x3d	; 61
    39f6:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_pvCallBackFunc!=NULL){
    39f8:	80 91 5b 01 	lds	r24, 0x015B
    39fc:	90 91 5c 01 	lds	r25, 0x015C
    3a00:	00 97       	sbiw	r24, 0x00	; 0
    3a02:	29 f0       	breq	.+10     	; 0x3a0e <__vector_10+0x40>
		TIMER0_pvCallBackFunc();
    3a04:	e0 91 5b 01 	lds	r30, 0x015B
    3a08:	f0 91 5c 01 	lds	r31, 0x015C
    3a0c:	09 95       	icall
	}
}
    3a0e:	cf 91       	pop	r28
    3a10:	df 91       	pop	r29
    3a12:	ff 91       	pop	r31
    3a14:	ef 91       	pop	r30
    3a16:	bf 91       	pop	r27
    3a18:	af 91       	pop	r26
    3a1a:	9f 91       	pop	r25
    3a1c:	8f 91       	pop	r24
    3a1e:	7f 91       	pop	r23
    3a20:	6f 91       	pop	r22
    3a22:	5f 91       	pop	r21
    3a24:	4f 91       	pop	r20
    3a26:	3f 91       	pop	r19
    3a28:	2f 91       	pop	r18
    3a2a:	0f 90       	pop	r0
    3a2c:	0f be       	out	0x3f, r0	; 63
    3a2e:	0f 90       	pop	r0
    3a30:	1f 90       	pop	r1
    3a32:	18 95       	reti

00003a34 <__vector_11>:

//TIMER0 Overflow ISR
void __vector_11(void)  __attribute__((signal));
void __vector_11(void){
    3a34:	1f 92       	push	r1
    3a36:	0f 92       	push	r0
    3a38:	0f b6       	in	r0, 0x3f	; 63
    3a3a:	0f 92       	push	r0
    3a3c:	11 24       	eor	r1, r1
    3a3e:	df 93       	push	r29
    3a40:	cf 93       	push	r28
    3a42:	cd b7       	in	r28, 0x3d	; 61
    3a44:	de b7       	in	r29, 0x3e	; 62

}
    3a46:	cf 91       	pop	r28
    3a48:	df 91       	pop	r29
    3a4a:	0f 90       	pop	r0
    3a4c:	0f be       	out	0x3f, r0	; 63
    3a4e:	0f 90       	pop	r0
    3a50:	1f 90       	pop	r1
    3a52:	18 95       	reti

00003a54 <main>:
#include "DCM_Interface.h"
#include "STPR_Interface.h"

#include "APP_interface.h"

void main(void){
    3a54:	df 93       	push	r29
    3a56:	cf 93       	push	r28
    3a58:	cd b7       	in	r28, 0x3d	; 61
    3a5a:	de b7       	in	r29, 0x3e	; 62
    3a5c:	29 97       	sbiw	r28, 0x09	; 9
    3a5e:	0f b6       	in	r0, 0x3f	; 63
    3a60:	f8 94       	cli
    3a62:	de bf       	out	0x3e, r29	; 62
    3a64:	0f be       	out	0x3f, r0	; 63
    3a66:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8ErrorState,Local_u8IDArr[4],Local_u8PassArr[4];
	PORT_voidInit();
    3a68:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <PORT_voidInit>
	ADC_voidInit();
    3a6c:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC_voidInit>
	CLCD_voidInit();
    3a70:	0e 94 6f 10 	call	0x20de	; 0x20de <CLCD_voidInit>
	TIMER1_voidInit();
    3a74:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <TIMER1_voidInit>
	APP_voidShowStartMenu();
    3a78:	0e 94 b5 07 	call	0xf6a	; 0xf6a <APP_voidShowStartMenu>
	APP_voidGetID(Local_u8IDArr);
    3a7c:	ce 01       	movw	r24, r28
    3a7e:	02 96       	adiw	r24, 0x02	; 2
    3a80:	0e 94 48 08 	call	0x1090	; 0x1090 <APP_voidGetID>
	APP_voidGetPassword(Local_u8PassArr);
    3a84:	ce 01       	movw	r24, r28
    3a86:	06 96       	adiw	r24, 0x06	; 6
    3a88:	0e 94 80 08 	call	0x1100	; 0x1100 <APP_voidGetPassword>
	Local_u8ErrorState=APP_voidCheckPassword(Local_u8IDArr,Local_u8PassArr);
    3a8c:	ce 01       	movw	r24, r28
    3a8e:	02 96       	adiw	r24, 0x02	; 2
    3a90:	9e 01       	movw	r18, r28
    3a92:	2a 5f       	subi	r18, 0xFA	; 250
    3a94:	3f 4f       	sbci	r19, 0xFF	; 255
    3a96:	b9 01       	movw	r22, r18
    3a98:	0e 94 bc 08 	call	0x1178	; 0x1178 <APP_voidCheckPassword>
    3a9c:	89 83       	std	Y+1, r24	; 0x01
	while(1){
		if(Local_u8ErrorState==OK){
    3a9e:	89 81       	ldd	r24, Y+1	; 0x01
    3aa0:	88 23       	and	r24, r24
    3aa2:	e9 f7       	brne	.-6      	; 0x3a9e <main+0x4a>
			APP_voidShowMainMenu();
    3aa4:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <APP_voidShowMainMenu>
			APP_voidChooseMotor();
    3aa8:	0e 94 b0 0b 	call	0x1760	; 0x1760 <APP_voidChooseMotor>
    3aac:	f8 cf       	rjmp	.-16     	; 0x3a9e <main+0x4a>

00003aae <__mulsi3>:
    3aae:	62 9f       	mul	r22, r18
    3ab0:	d0 01       	movw	r26, r0
    3ab2:	73 9f       	mul	r23, r19
    3ab4:	f0 01       	movw	r30, r0
    3ab6:	82 9f       	mul	r24, r18
    3ab8:	e0 0d       	add	r30, r0
    3aba:	f1 1d       	adc	r31, r1
    3abc:	64 9f       	mul	r22, r20
    3abe:	e0 0d       	add	r30, r0
    3ac0:	f1 1d       	adc	r31, r1
    3ac2:	92 9f       	mul	r25, r18
    3ac4:	f0 0d       	add	r31, r0
    3ac6:	83 9f       	mul	r24, r19
    3ac8:	f0 0d       	add	r31, r0
    3aca:	74 9f       	mul	r23, r20
    3acc:	f0 0d       	add	r31, r0
    3ace:	65 9f       	mul	r22, r21
    3ad0:	f0 0d       	add	r31, r0
    3ad2:	99 27       	eor	r25, r25
    3ad4:	72 9f       	mul	r23, r18
    3ad6:	b0 0d       	add	r27, r0
    3ad8:	e1 1d       	adc	r30, r1
    3ada:	f9 1f       	adc	r31, r25
    3adc:	63 9f       	mul	r22, r19
    3ade:	b0 0d       	add	r27, r0
    3ae0:	e1 1d       	adc	r30, r1
    3ae2:	f9 1f       	adc	r31, r25
    3ae4:	bd 01       	movw	r22, r26
    3ae6:	cf 01       	movw	r24, r30
    3ae8:	11 24       	eor	r1, r1
    3aea:	08 95       	ret

00003aec <__udivmodsi4>:
    3aec:	a1 e2       	ldi	r26, 0x21	; 33
    3aee:	1a 2e       	mov	r1, r26
    3af0:	aa 1b       	sub	r26, r26
    3af2:	bb 1b       	sub	r27, r27
    3af4:	fd 01       	movw	r30, r26
    3af6:	0d c0       	rjmp	.+26     	; 0x3b12 <__udivmodsi4_ep>

00003af8 <__udivmodsi4_loop>:
    3af8:	aa 1f       	adc	r26, r26
    3afa:	bb 1f       	adc	r27, r27
    3afc:	ee 1f       	adc	r30, r30
    3afe:	ff 1f       	adc	r31, r31
    3b00:	a2 17       	cp	r26, r18
    3b02:	b3 07       	cpc	r27, r19
    3b04:	e4 07       	cpc	r30, r20
    3b06:	f5 07       	cpc	r31, r21
    3b08:	20 f0       	brcs	.+8      	; 0x3b12 <__udivmodsi4_ep>
    3b0a:	a2 1b       	sub	r26, r18
    3b0c:	b3 0b       	sbc	r27, r19
    3b0e:	e4 0b       	sbc	r30, r20
    3b10:	f5 0b       	sbc	r31, r21

00003b12 <__udivmodsi4_ep>:
    3b12:	66 1f       	adc	r22, r22
    3b14:	77 1f       	adc	r23, r23
    3b16:	88 1f       	adc	r24, r24
    3b18:	99 1f       	adc	r25, r25
    3b1a:	1a 94       	dec	r1
    3b1c:	69 f7       	brne	.-38     	; 0x3af8 <__udivmodsi4_loop>
    3b1e:	60 95       	com	r22
    3b20:	70 95       	com	r23
    3b22:	80 95       	com	r24
    3b24:	90 95       	com	r25
    3b26:	9b 01       	movw	r18, r22
    3b28:	ac 01       	movw	r20, r24
    3b2a:	bd 01       	movw	r22, r26
    3b2c:	cf 01       	movw	r24, r30
    3b2e:	08 95       	ret

00003b30 <__divmodsi4>:
    3b30:	97 fb       	bst	r25, 7
    3b32:	09 2e       	mov	r0, r25
    3b34:	05 26       	eor	r0, r21
    3b36:	0e d0       	rcall	.+28     	; 0x3b54 <__divmodsi4_neg1>
    3b38:	57 fd       	sbrc	r21, 7
    3b3a:	04 d0       	rcall	.+8      	; 0x3b44 <__divmodsi4_neg2>
    3b3c:	d7 df       	rcall	.-82     	; 0x3aec <__udivmodsi4>
    3b3e:	0a d0       	rcall	.+20     	; 0x3b54 <__divmodsi4_neg1>
    3b40:	00 1c       	adc	r0, r0
    3b42:	38 f4       	brcc	.+14     	; 0x3b52 <__divmodsi4_exit>

00003b44 <__divmodsi4_neg2>:
    3b44:	50 95       	com	r21
    3b46:	40 95       	com	r20
    3b48:	30 95       	com	r19
    3b4a:	21 95       	neg	r18
    3b4c:	3f 4f       	sbci	r19, 0xFF	; 255
    3b4e:	4f 4f       	sbci	r20, 0xFF	; 255
    3b50:	5f 4f       	sbci	r21, 0xFF	; 255

00003b52 <__divmodsi4_exit>:
    3b52:	08 95       	ret

00003b54 <__divmodsi4_neg1>:
    3b54:	f6 f7       	brtc	.-4      	; 0x3b52 <__divmodsi4_exit>
    3b56:	90 95       	com	r25
    3b58:	80 95       	com	r24
    3b5a:	70 95       	com	r23
    3b5c:	61 95       	neg	r22
    3b5e:	7f 4f       	sbci	r23, 0xFF	; 255
    3b60:	8f 4f       	sbci	r24, 0xFF	; 255
    3b62:	9f 4f       	sbci	r25, 0xFF	; 255
    3b64:	08 95       	ret

00003b66 <__prologue_saves__>:
    3b66:	2f 92       	push	r2
    3b68:	3f 92       	push	r3
    3b6a:	4f 92       	push	r4
    3b6c:	5f 92       	push	r5
    3b6e:	6f 92       	push	r6
    3b70:	7f 92       	push	r7
    3b72:	8f 92       	push	r8
    3b74:	9f 92       	push	r9
    3b76:	af 92       	push	r10
    3b78:	bf 92       	push	r11
    3b7a:	cf 92       	push	r12
    3b7c:	df 92       	push	r13
    3b7e:	ef 92       	push	r14
    3b80:	ff 92       	push	r15
    3b82:	0f 93       	push	r16
    3b84:	1f 93       	push	r17
    3b86:	cf 93       	push	r28
    3b88:	df 93       	push	r29
    3b8a:	cd b7       	in	r28, 0x3d	; 61
    3b8c:	de b7       	in	r29, 0x3e	; 62
    3b8e:	ca 1b       	sub	r28, r26
    3b90:	db 0b       	sbc	r29, r27
    3b92:	0f b6       	in	r0, 0x3f	; 63
    3b94:	f8 94       	cli
    3b96:	de bf       	out	0x3e, r29	; 62
    3b98:	0f be       	out	0x3f, r0	; 63
    3b9a:	cd bf       	out	0x3d, r28	; 61
    3b9c:	09 94       	ijmp

00003b9e <__epilogue_restores__>:
    3b9e:	2a 88       	ldd	r2, Y+18	; 0x12
    3ba0:	39 88       	ldd	r3, Y+17	; 0x11
    3ba2:	48 88       	ldd	r4, Y+16	; 0x10
    3ba4:	5f 84       	ldd	r5, Y+15	; 0x0f
    3ba6:	6e 84       	ldd	r6, Y+14	; 0x0e
    3ba8:	7d 84       	ldd	r7, Y+13	; 0x0d
    3baa:	8c 84       	ldd	r8, Y+12	; 0x0c
    3bac:	9b 84       	ldd	r9, Y+11	; 0x0b
    3bae:	aa 84       	ldd	r10, Y+10	; 0x0a
    3bb0:	b9 84       	ldd	r11, Y+9	; 0x09
    3bb2:	c8 84       	ldd	r12, Y+8	; 0x08
    3bb4:	df 80       	ldd	r13, Y+7	; 0x07
    3bb6:	ee 80       	ldd	r14, Y+6	; 0x06
    3bb8:	fd 80       	ldd	r15, Y+5	; 0x05
    3bba:	0c 81       	ldd	r16, Y+4	; 0x04
    3bbc:	1b 81       	ldd	r17, Y+3	; 0x03
    3bbe:	aa 81       	ldd	r26, Y+2	; 0x02
    3bc0:	b9 81       	ldd	r27, Y+1	; 0x01
    3bc2:	ce 0f       	add	r28, r30
    3bc4:	d1 1d       	adc	r29, r1
    3bc6:	0f b6       	in	r0, 0x3f	; 63
    3bc8:	f8 94       	cli
    3bca:	de bf       	out	0x3e, r29	; 62
    3bcc:	0f be       	out	0x3f, r0	; 63
    3bce:	cd bf       	out	0x3d, r28	; 61
    3bd0:	ed 01       	movw	r28, r26
    3bd2:	08 95       	ret

00003bd4 <_exit>:
    3bd4:	f8 94       	cli

00003bd6 <__stop_program>:
    3bd6:	ff cf       	rjmp	.-2      	; 0x3bd6 <__stop_program>
