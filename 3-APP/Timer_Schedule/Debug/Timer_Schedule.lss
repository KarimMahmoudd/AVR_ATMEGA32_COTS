
Timer_Schedule.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002334  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00002334  000023c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  0080007a  0080007a  000023e2  2**0
                  ALLOC
  3 .stab         00002964  00000000  00000000  000023e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d8b  00000000  00000000  00004d48  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 f6 0e 	jmp	0x1dec	; 0x1dec <__vector_4>
      14:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__vector_5>
      18:	0c 94 5c 0f 	jmp	0x1eb8	; 0x1eb8 <__vector_6>
      1c:	0c 94 8f 0f 	jmp	0x1f1e	; 0x1f1e <__vector_7>
      20:	0c 94 c2 0f 	jmp	0x1f84	; 0x1f84 <__vector_8>
      24:	0c 94 f5 0f 	jmp	0x1fea	; 0x1fea <__vector_9>
      28:	0c 94 28 10 	jmp	0x2050	; 0x2050 <__vector_10>
      2c:	0c 94 5b 10 	jmp	0x20b6	; 0x20b6 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e3       	ldi	r30, 0x34	; 52
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 39       	cpi	r26, 0x96	; 150
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 8e 10 	call	0x211c	; 0x211c <main>
      8a:	0c 94 98 11 	jmp	0x2330	; 0x2330 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_u8SetPinValue>:
#include "DIO_private.h"
#include "DIO_config.h"



u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value){
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
      9a:	28 97       	sbiw	r28, 0x08	; 8
      9c:	0f b6       	in	r0, 0x3f	; 63
      9e:	f8 94       	cli
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	0f be       	out	0x3f, r0	; 63
      a4:	cd bf       	out	0x3d, r28	; 61
      a6:	8a 83       	std	Y+2, r24	; 0x02
      a8:	6b 83       	std	Y+3, r22	; 0x03
      aa:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
      ac:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin <= DIO_u8PIN7){
      ae:	8b 81       	ldd	r24, Y+3	; 0x03
      b0:	88 30       	cpi	r24, 0x08	; 8
      b2:	08 f0       	brcs	.+2      	; 0xb6 <DIO_u8SetPinValue+0x24>
      b4:	f4 c0       	rjmp	.+488    	; 0x29e <DIO_u8SetPinValue+0x20c>
		if(Copy_u8Value == DIO_u8PIN_LOW){
      b6:	8c 81       	ldd	r24, Y+4	; 0x04
      b8:	88 23       	and	r24, r24
      ba:	09 f0       	breq	.+2      	; 0xbe <DIO_u8SetPinValue+0x2c>
      bc:	77 c0       	rjmp	.+238    	; 0x1ac <DIO_u8SetPinValue+0x11a>
			switch(Copy_u8Port){
      be:	8a 81       	ldd	r24, Y+2	; 0x02
      c0:	28 2f       	mov	r18, r24
      c2:	30 e0       	ldi	r19, 0x00	; 0
      c4:	38 87       	std	Y+8, r19	; 0x08
      c6:	2f 83       	std	Y+7, r18	; 0x07
      c8:	8f 81       	ldd	r24, Y+7	; 0x07
      ca:	98 85       	ldd	r25, Y+8	; 0x08
      cc:	81 30       	cpi	r24, 0x01	; 1
      ce:	91 05       	cpc	r25, r1
      d0:	59 f1       	breq	.+86     	; 0x128 <DIO_u8SetPinValue+0x96>
      d2:	2f 81       	ldd	r18, Y+7	; 0x07
      d4:	38 85       	ldd	r19, Y+8	; 0x08
      d6:	22 30       	cpi	r18, 0x02	; 2
      d8:	31 05       	cpc	r19, r1
      da:	2c f4       	brge	.+10     	; 0xe6 <DIO_u8SetPinValue+0x54>
      dc:	8f 81       	ldd	r24, Y+7	; 0x07
      de:	98 85       	ldd	r25, Y+8	; 0x08
      e0:	00 97       	sbiw	r24, 0x00	; 0
      e2:	69 f0       	breq	.+26     	; 0xfe <DIO_u8SetPinValue+0x6c>
      e4:	60 c0       	rjmp	.+192    	; 0x1a6 <DIO_u8SetPinValue+0x114>
      e6:	2f 81       	ldd	r18, Y+7	; 0x07
      e8:	38 85       	ldd	r19, Y+8	; 0x08
      ea:	22 30       	cpi	r18, 0x02	; 2
      ec:	31 05       	cpc	r19, r1
      ee:	89 f1       	breq	.+98     	; 0x152 <DIO_u8SetPinValue+0xc0>
      f0:	8f 81       	ldd	r24, Y+7	; 0x07
      f2:	98 85       	ldd	r25, Y+8	; 0x08
      f4:	83 30       	cpi	r24, 0x03	; 3
      f6:	91 05       	cpc	r25, r1
      f8:	09 f4       	brne	.+2      	; 0xfc <DIO_u8SetPinValue+0x6a>
      fa:	40 c0       	rjmp	.+128    	; 0x17c <DIO_u8SetPinValue+0xea>
      fc:	54 c0       	rjmp	.+168    	; 0x1a6 <DIO_u8SetPinValue+0x114>
			case DIO_u8PORTA : CLR_BIT(PORTA,Copy_u8Pin); break;
      fe:	ab e3       	ldi	r26, 0x3B	; 59
     100:	b0 e0       	ldi	r27, 0x00	; 0
     102:	eb e3       	ldi	r30, 0x3B	; 59
     104:	f0 e0       	ldi	r31, 0x00	; 0
     106:	80 81       	ld	r24, Z
     108:	48 2f       	mov	r20, r24
     10a:	8b 81       	ldd	r24, Y+3	; 0x03
     10c:	28 2f       	mov	r18, r24
     10e:	30 e0       	ldi	r19, 0x00	; 0
     110:	81 e0       	ldi	r24, 0x01	; 1
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	02 2e       	mov	r0, r18
     116:	02 c0       	rjmp	.+4      	; 0x11c <DIO_u8SetPinValue+0x8a>
     118:	88 0f       	add	r24, r24
     11a:	99 1f       	adc	r25, r25
     11c:	0a 94       	dec	r0
     11e:	e2 f7       	brpl	.-8      	; 0x118 <DIO_u8SetPinValue+0x86>
     120:	80 95       	com	r24
     122:	84 23       	and	r24, r20
     124:	8c 93       	st	X, r24
     126:	bd c0       	rjmp	.+378    	; 0x2a2 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB : CLR_BIT(PORTB,Copy_u8Pin); break;
     128:	a8 e3       	ldi	r26, 0x38	; 56
     12a:	b0 e0       	ldi	r27, 0x00	; 0
     12c:	e8 e3       	ldi	r30, 0x38	; 56
     12e:	f0 e0       	ldi	r31, 0x00	; 0
     130:	80 81       	ld	r24, Z
     132:	48 2f       	mov	r20, r24
     134:	8b 81       	ldd	r24, Y+3	; 0x03
     136:	28 2f       	mov	r18, r24
     138:	30 e0       	ldi	r19, 0x00	; 0
     13a:	81 e0       	ldi	r24, 0x01	; 1
     13c:	90 e0       	ldi	r25, 0x00	; 0
     13e:	02 2e       	mov	r0, r18
     140:	02 c0       	rjmp	.+4      	; 0x146 <DIO_u8SetPinValue+0xb4>
     142:	88 0f       	add	r24, r24
     144:	99 1f       	adc	r25, r25
     146:	0a 94       	dec	r0
     148:	e2 f7       	brpl	.-8      	; 0x142 <DIO_u8SetPinValue+0xb0>
     14a:	80 95       	com	r24
     14c:	84 23       	and	r24, r20
     14e:	8c 93       	st	X, r24
     150:	a8 c0       	rjmp	.+336    	; 0x2a2 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC : CLR_BIT(PORTC,Copy_u8Pin); break;
     152:	a5 e3       	ldi	r26, 0x35	; 53
     154:	b0 e0       	ldi	r27, 0x00	; 0
     156:	e5 e3       	ldi	r30, 0x35	; 53
     158:	f0 e0       	ldi	r31, 0x00	; 0
     15a:	80 81       	ld	r24, Z
     15c:	48 2f       	mov	r20, r24
     15e:	8b 81       	ldd	r24, Y+3	; 0x03
     160:	28 2f       	mov	r18, r24
     162:	30 e0       	ldi	r19, 0x00	; 0
     164:	81 e0       	ldi	r24, 0x01	; 1
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	02 2e       	mov	r0, r18
     16a:	02 c0       	rjmp	.+4      	; 0x170 <DIO_u8SetPinValue+0xde>
     16c:	88 0f       	add	r24, r24
     16e:	99 1f       	adc	r25, r25
     170:	0a 94       	dec	r0
     172:	e2 f7       	brpl	.-8      	; 0x16c <DIO_u8SetPinValue+0xda>
     174:	80 95       	com	r24
     176:	84 23       	and	r24, r20
     178:	8c 93       	st	X, r24
     17a:	93 c0       	rjmp	.+294    	; 0x2a2 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD : CLR_BIT(PORTD,Copy_u8Pin); break;
     17c:	a2 e3       	ldi	r26, 0x32	; 50
     17e:	b0 e0       	ldi	r27, 0x00	; 0
     180:	e2 e3       	ldi	r30, 0x32	; 50
     182:	f0 e0       	ldi	r31, 0x00	; 0
     184:	80 81       	ld	r24, Z
     186:	48 2f       	mov	r20, r24
     188:	8b 81       	ldd	r24, Y+3	; 0x03
     18a:	28 2f       	mov	r18, r24
     18c:	30 e0       	ldi	r19, 0x00	; 0
     18e:	81 e0       	ldi	r24, 0x01	; 1
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	02 2e       	mov	r0, r18
     194:	02 c0       	rjmp	.+4      	; 0x19a <DIO_u8SetPinValue+0x108>
     196:	88 0f       	add	r24, r24
     198:	99 1f       	adc	r25, r25
     19a:	0a 94       	dec	r0
     19c:	e2 f7       	brpl	.-8      	; 0x196 <DIO_u8SetPinValue+0x104>
     19e:	80 95       	com	r24
     1a0:	84 23       	and	r24, r20
     1a2:	8c 93       	st	X, r24
     1a4:	7e c0       	rjmp	.+252    	; 0x2a2 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1;
     1a6:	81 e0       	ldi	r24, 0x01	; 1
     1a8:	89 83       	std	Y+1, r24	; 0x01
     1aa:	7b c0       	rjmp	.+246    	; 0x2a2 <DIO_u8SetPinValue+0x210>
			}
		}
		else if(Copy_u8Value == DIO_u8PIN_HIGH){
     1ac:	8c 81       	ldd	r24, Y+4	; 0x04
     1ae:	81 30       	cpi	r24, 0x01	; 1
     1b0:	09 f0       	breq	.+2      	; 0x1b4 <DIO_u8SetPinValue+0x122>
     1b2:	72 c0       	rjmp	.+228    	; 0x298 <DIO_u8SetPinValue+0x206>
			switch(Copy_u8Port){
     1b4:	8a 81       	ldd	r24, Y+2	; 0x02
     1b6:	28 2f       	mov	r18, r24
     1b8:	30 e0       	ldi	r19, 0x00	; 0
     1ba:	3e 83       	std	Y+6, r19	; 0x06
     1bc:	2d 83       	std	Y+5, r18	; 0x05
     1be:	8d 81       	ldd	r24, Y+5	; 0x05
     1c0:	9e 81       	ldd	r25, Y+6	; 0x06
     1c2:	81 30       	cpi	r24, 0x01	; 1
     1c4:	91 05       	cpc	r25, r1
     1c6:	49 f1       	breq	.+82     	; 0x21a <DIO_u8SetPinValue+0x188>
     1c8:	2d 81       	ldd	r18, Y+5	; 0x05
     1ca:	3e 81       	ldd	r19, Y+6	; 0x06
     1cc:	22 30       	cpi	r18, 0x02	; 2
     1ce:	31 05       	cpc	r19, r1
     1d0:	2c f4       	brge	.+10     	; 0x1dc <DIO_u8SetPinValue+0x14a>
     1d2:	8d 81       	ldd	r24, Y+5	; 0x05
     1d4:	9e 81       	ldd	r25, Y+6	; 0x06
     1d6:	00 97       	sbiw	r24, 0x00	; 0
     1d8:	61 f0       	breq	.+24     	; 0x1f2 <DIO_u8SetPinValue+0x160>
     1da:	5b c0       	rjmp	.+182    	; 0x292 <DIO_u8SetPinValue+0x200>
     1dc:	2d 81       	ldd	r18, Y+5	; 0x05
     1de:	3e 81       	ldd	r19, Y+6	; 0x06
     1e0:	22 30       	cpi	r18, 0x02	; 2
     1e2:	31 05       	cpc	r19, r1
     1e4:	71 f1       	breq	.+92     	; 0x242 <DIO_u8SetPinValue+0x1b0>
     1e6:	8d 81       	ldd	r24, Y+5	; 0x05
     1e8:	9e 81       	ldd	r25, Y+6	; 0x06
     1ea:	83 30       	cpi	r24, 0x03	; 3
     1ec:	91 05       	cpc	r25, r1
     1ee:	e9 f1       	breq	.+122    	; 0x26a <DIO_u8SetPinValue+0x1d8>
     1f0:	50 c0       	rjmp	.+160    	; 0x292 <DIO_u8SetPinValue+0x200>
			case DIO_u8PORTA : SET_BIT(PORTA,Copy_u8Pin); break;
     1f2:	ab e3       	ldi	r26, 0x3B	; 59
     1f4:	b0 e0       	ldi	r27, 0x00	; 0
     1f6:	eb e3       	ldi	r30, 0x3B	; 59
     1f8:	f0 e0       	ldi	r31, 0x00	; 0
     1fa:	80 81       	ld	r24, Z
     1fc:	48 2f       	mov	r20, r24
     1fe:	8b 81       	ldd	r24, Y+3	; 0x03
     200:	28 2f       	mov	r18, r24
     202:	30 e0       	ldi	r19, 0x00	; 0
     204:	81 e0       	ldi	r24, 0x01	; 1
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	02 2e       	mov	r0, r18
     20a:	02 c0       	rjmp	.+4      	; 0x210 <DIO_u8SetPinValue+0x17e>
     20c:	88 0f       	add	r24, r24
     20e:	99 1f       	adc	r25, r25
     210:	0a 94       	dec	r0
     212:	e2 f7       	brpl	.-8      	; 0x20c <DIO_u8SetPinValue+0x17a>
     214:	84 2b       	or	r24, r20
     216:	8c 93       	st	X, r24
     218:	44 c0       	rjmp	.+136    	; 0x2a2 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB : SET_BIT(PORTB,Copy_u8Pin); break;
     21a:	a8 e3       	ldi	r26, 0x38	; 56
     21c:	b0 e0       	ldi	r27, 0x00	; 0
     21e:	e8 e3       	ldi	r30, 0x38	; 56
     220:	f0 e0       	ldi	r31, 0x00	; 0
     222:	80 81       	ld	r24, Z
     224:	48 2f       	mov	r20, r24
     226:	8b 81       	ldd	r24, Y+3	; 0x03
     228:	28 2f       	mov	r18, r24
     22a:	30 e0       	ldi	r19, 0x00	; 0
     22c:	81 e0       	ldi	r24, 0x01	; 1
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	02 2e       	mov	r0, r18
     232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_u8SetPinValue+0x1a6>
     234:	88 0f       	add	r24, r24
     236:	99 1f       	adc	r25, r25
     238:	0a 94       	dec	r0
     23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_u8SetPinValue+0x1a2>
     23c:	84 2b       	or	r24, r20
     23e:	8c 93       	st	X, r24
     240:	30 c0       	rjmp	.+96     	; 0x2a2 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC : SET_BIT(PORTC,Copy_u8Pin); break;
     242:	a5 e3       	ldi	r26, 0x35	; 53
     244:	b0 e0       	ldi	r27, 0x00	; 0
     246:	e5 e3       	ldi	r30, 0x35	; 53
     248:	f0 e0       	ldi	r31, 0x00	; 0
     24a:	80 81       	ld	r24, Z
     24c:	48 2f       	mov	r20, r24
     24e:	8b 81       	ldd	r24, Y+3	; 0x03
     250:	28 2f       	mov	r18, r24
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	81 e0       	ldi	r24, 0x01	; 1
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	02 2e       	mov	r0, r18
     25a:	02 c0       	rjmp	.+4      	; 0x260 <DIO_u8SetPinValue+0x1ce>
     25c:	88 0f       	add	r24, r24
     25e:	99 1f       	adc	r25, r25
     260:	0a 94       	dec	r0
     262:	e2 f7       	brpl	.-8      	; 0x25c <DIO_u8SetPinValue+0x1ca>
     264:	84 2b       	or	r24, r20
     266:	8c 93       	st	X, r24
     268:	1c c0       	rjmp	.+56     	; 0x2a2 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD : SET_BIT(PORTD,Copy_u8Pin); break;
     26a:	a2 e3       	ldi	r26, 0x32	; 50
     26c:	b0 e0       	ldi	r27, 0x00	; 0
     26e:	e2 e3       	ldi	r30, 0x32	; 50
     270:	f0 e0       	ldi	r31, 0x00	; 0
     272:	80 81       	ld	r24, Z
     274:	48 2f       	mov	r20, r24
     276:	8b 81       	ldd	r24, Y+3	; 0x03
     278:	28 2f       	mov	r18, r24
     27a:	30 e0       	ldi	r19, 0x00	; 0
     27c:	81 e0       	ldi	r24, 0x01	; 1
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	02 2e       	mov	r0, r18
     282:	02 c0       	rjmp	.+4      	; 0x288 <DIO_u8SetPinValue+0x1f6>
     284:	88 0f       	add	r24, r24
     286:	99 1f       	adc	r25, r25
     288:	0a 94       	dec	r0
     28a:	e2 f7       	brpl	.-8      	; 0x284 <DIO_u8SetPinValue+0x1f2>
     28c:	84 2b       	or	r24, r20
     28e:	8c 93       	st	X, r24
     290:	08 c0       	rjmp	.+16     	; 0x2a2 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1;
     292:	81 e0       	ldi	r24, 0x01	; 1
     294:	89 83       	std	Y+1, r24	; 0x01
     296:	05 c0       	rjmp	.+10     	; 0x2a2 <DIO_u8SetPinValue+0x210>
			}
		}
		else{
			Local_u8ErrorState=1;
     298:	81 e0       	ldi	r24, 0x01	; 1
     29a:	89 83       	std	Y+1, r24	; 0x01
     29c:	02 c0       	rjmp	.+4      	; 0x2a2 <DIO_u8SetPinValue+0x210>
		}
	}
	else{
		Local_u8ErrorState=1;
     29e:	81 e0       	ldi	r24, 0x01	; 1
     2a0:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState ;
     2a2:	89 81       	ldd	r24, Y+1	; 0x01
}
     2a4:	28 96       	adiw	r28, 0x08	; 8
     2a6:	0f b6       	in	r0, 0x3f	; 63
     2a8:	f8 94       	cli
     2aa:	de bf       	out	0x3e, r29	; 62
     2ac:	0f be       	out	0x3f, r0	; 63
     2ae:	cd bf       	out	0x3d, r28	; 61
     2b0:	cf 91       	pop	r28
     2b2:	df 91       	pop	r29
     2b4:	08 95       	ret

000002b6 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8Port,u8 Copy_u8Value){
     2b6:	df 93       	push	r29
     2b8:	cf 93       	push	r28
     2ba:	00 d0       	rcall	.+0      	; 0x2bc <DIO_u8SetPortValue+0x6>
     2bc:	00 d0       	rcall	.+0      	; 0x2be <DIO_u8SetPortValue+0x8>
     2be:	0f 92       	push	r0
     2c0:	cd b7       	in	r28, 0x3d	; 61
     2c2:	de b7       	in	r29, 0x3e	; 62
     2c4:	8a 83       	std	Y+2, r24	; 0x02
     2c6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
     2c8:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8Port)
     2ca:	8a 81       	ldd	r24, Y+2	; 0x02
     2cc:	28 2f       	mov	r18, r24
     2ce:	30 e0       	ldi	r19, 0x00	; 0
     2d0:	3d 83       	std	Y+5, r19	; 0x05
     2d2:	2c 83       	std	Y+4, r18	; 0x04
     2d4:	8c 81       	ldd	r24, Y+4	; 0x04
     2d6:	9d 81       	ldd	r25, Y+5	; 0x05
     2d8:	81 30       	cpi	r24, 0x01	; 1
     2da:	91 05       	cpc	r25, r1
     2dc:	d1 f0       	breq	.+52     	; 0x312 <DIO_u8SetPortValue+0x5c>
     2de:	2c 81       	ldd	r18, Y+4	; 0x04
     2e0:	3d 81       	ldd	r19, Y+5	; 0x05
     2e2:	22 30       	cpi	r18, 0x02	; 2
     2e4:	31 05       	cpc	r19, r1
     2e6:	2c f4       	brge	.+10     	; 0x2f2 <DIO_u8SetPortValue+0x3c>
     2e8:	8c 81       	ldd	r24, Y+4	; 0x04
     2ea:	9d 81       	ldd	r25, Y+5	; 0x05
     2ec:	00 97       	sbiw	r24, 0x00	; 0
     2ee:	61 f0       	breq	.+24     	; 0x308 <DIO_u8SetPortValue+0x52>
     2f0:	1f c0       	rjmp	.+62     	; 0x330 <DIO_u8SetPortValue+0x7a>
     2f2:	2c 81       	ldd	r18, Y+4	; 0x04
     2f4:	3d 81       	ldd	r19, Y+5	; 0x05
     2f6:	22 30       	cpi	r18, 0x02	; 2
     2f8:	31 05       	cpc	r19, r1
     2fa:	81 f0       	breq	.+32     	; 0x31c <DIO_u8SetPortValue+0x66>
     2fc:	8c 81       	ldd	r24, Y+4	; 0x04
     2fe:	9d 81       	ldd	r25, Y+5	; 0x05
     300:	83 30       	cpi	r24, 0x03	; 3
     302:	91 05       	cpc	r25, r1
     304:	81 f0       	breq	.+32     	; 0x326 <DIO_u8SetPortValue+0x70>
     306:	14 c0       	rjmp	.+40     	; 0x330 <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA: PORTA=Copy_u8Value; break;
     308:	eb e3       	ldi	r30, 0x3B	; 59
     30a:	f0 e0       	ldi	r31, 0x00	; 0
     30c:	8b 81       	ldd	r24, Y+3	; 0x03
     30e:	80 83       	st	Z, r24
     310:	11 c0       	rjmp	.+34     	; 0x334 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB: PORTB=Copy_u8Value; break;
     312:	e8 e3       	ldi	r30, 0x38	; 56
     314:	f0 e0       	ldi	r31, 0x00	; 0
     316:	8b 81       	ldd	r24, Y+3	; 0x03
     318:	80 83       	st	Z, r24
     31a:	0c c0       	rjmp	.+24     	; 0x334 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC: PORTC=Copy_u8Value; break;
     31c:	e5 e3       	ldi	r30, 0x35	; 53
     31e:	f0 e0       	ldi	r31, 0x00	; 0
     320:	8b 81       	ldd	r24, Y+3	; 0x03
     322:	80 83       	st	Z, r24
     324:	07 c0       	rjmp	.+14     	; 0x334 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD: PORTD=Copy_u8Value; break;
     326:	e2 e3       	ldi	r30, 0x32	; 50
     328:	f0 e0       	ldi	r31, 0x00	; 0
     32a:	8b 81       	ldd	r24, Y+3	; 0x03
     32c:	80 83       	st	Z, r24
     32e:	02 c0       	rjmp	.+4      	; 0x334 <DIO_u8SetPortValue+0x7e>
	default: Local_u8ErrorState=1 ;
     330:	81 e0       	ldi	r24, 0x01	; 1
     332:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState ;
     334:	89 81       	ldd	r24, Y+1	; 0x01
}
     336:	0f 90       	pop	r0
     338:	0f 90       	pop	r0
     33a:	0f 90       	pop	r0
     33c:	0f 90       	pop	r0
     33e:	0f 90       	pop	r0
     340:	cf 91       	pop	r28
     342:	df 91       	pop	r29
     344:	08 95       	ret

00000346 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin, u8* Copy_pu8Value){
     346:	df 93       	push	r29
     348:	cf 93       	push	r28
     34a:	cd b7       	in	r28, 0x3d	; 61
     34c:	de b7       	in	r29, 0x3e	; 62
     34e:	27 97       	sbiw	r28, 0x07	; 7
     350:	0f b6       	in	r0, 0x3f	; 63
     352:	f8 94       	cli
     354:	de bf       	out	0x3e, r29	; 62
     356:	0f be       	out	0x3f, r0	; 63
     358:	cd bf       	out	0x3d, r28	; 61
     35a:	8a 83       	std	Y+2, r24	; 0x02
     35c:	6b 83       	std	Y+3, r22	; 0x03
     35e:	5d 83       	std	Y+5, r21	; 0x05
     360:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
     362:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_pu8Value != NULL) && (Copy_u8Pin <= DIO_u8PIN7)){
     364:	8c 81       	ldd	r24, Y+4	; 0x04
     366:	9d 81       	ldd	r25, Y+5	; 0x05
     368:	00 97       	sbiw	r24, 0x00	; 0
     36a:	09 f4       	brne	.+2      	; 0x36e <DIO_u8GetPinValue+0x28>
     36c:	78 c0       	rjmp	.+240    	; 0x45e <DIO_u8GetPinValue+0x118>
     36e:	8b 81       	ldd	r24, Y+3	; 0x03
     370:	88 30       	cpi	r24, 0x08	; 8
     372:	08 f0       	brcs	.+2      	; 0x376 <DIO_u8GetPinValue+0x30>
     374:	74 c0       	rjmp	.+232    	; 0x45e <DIO_u8GetPinValue+0x118>
		switch (Copy_u8Port){
     376:	8a 81       	ldd	r24, Y+2	; 0x02
     378:	28 2f       	mov	r18, r24
     37a:	30 e0       	ldi	r19, 0x00	; 0
     37c:	3f 83       	std	Y+7, r19	; 0x07
     37e:	2e 83       	std	Y+6, r18	; 0x06
     380:	4e 81       	ldd	r20, Y+6	; 0x06
     382:	5f 81       	ldd	r21, Y+7	; 0x07
     384:	41 30       	cpi	r20, 0x01	; 1
     386:	51 05       	cpc	r21, r1
     388:	59 f1       	breq	.+86     	; 0x3e0 <DIO_u8GetPinValue+0x9a>
     38a:	8e 81       	ldd	r24, Y+6	; 0x06
     38c:	9f 81       	ldd	r25, Y+7	; 0x07
     38e:	82 30       	cpi	r24, 0x02	; 2
     390:	91 05       	cpc	r25, r1
     392:	34 f4       	brge	.+12     	; 0x3a0 <DIO_u8GetPinValue+0x5a>
     394:	2e 81       	ldd	r18, Y+6	; 0x06
     396:	3f 81       	ldd	r19, Y+7	; 0x07
     398:	21 15       	cp	r18, r1
     39a:	31 05       	cpc	r19, r1
     39c:	69 f0       	breq	.+26     	; 0x3b8 <DIO_u8GetPinValue+0x72>
     39e:	5c c0       	rjmp	.+184    	; 0x458 <DIO_u8GetPinValue+0x112>
     3a0:	4e 81       	ldd	r20, Y+6	; 0x06
     3a2:	5f 81       	ldd	r21, Y+7	; 0x07
     3a4:	42 30       	cpi	r20, 0x02	; 2
     3a6:	51 05       	cpc	r21, r1
     3a8:	79 f1       	breq	.+94     	; 0x408 <DIO_u8GetPinValue+0xc2>
     3aa:	8e 81       	ldd	r24, Y+6	; 0x06
     3ac:	9f 81       	ldd	r25, Y+7	; 0x07
     3ae:	83 30       	cpi	r24, 0x03	; 3
     3b0:	91 05       	cpc	r25, r1
     3b2:	09 f4       	brne	.+2      	; 0x3b6 <DIO_u8GetPinValue+0x70>
     3b4:	3d c0       	rjmp	.+122    	; 0x430 <DIO_u8GetPinValue+0xea>
     3b6:	50 c0       	rjmp	.+160    	; 0x458 <DIO_u8GetPinValue+0x112>
		case DIO_u8PORTA: *Copy_pu8Value = GET_BIT(PINA,Copy_u8Pin); break;
     3b8:	e9 e3       	ldi	r30, 0x39	; 57
     3ba:	f0 e0       	ldi	r31, 0x00	; 0
     3bc:	80 81       	ld	r24, Z
     3be:	28 2f       	mov	r18, r24
     3c0:	30 e0       	ldi	r19, 0x00	; 0
     3c2:	8b 81       	ldd	r24, Y+3	; 0x03
     3c4:	88 2f       	mov	r24, r24
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	a9 01       	movw	r20, r18
     3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <DIO_u8GetPinValue+0x8a>
     3cc:	55 95       	asr	r21
     3ce:	47 95       	ror	r20
     3d0:	8a 95       	dec	r24
     3d2:	e2 f7       	brpl	.-8      	; 0x3cc <DIO_u8GetPinValue+0x86>
     3d4:	ca 01       	movw	r24, r20
     3d6:	81 70       	andi	r24, 0x01	; 1
     3d8:	ec 81       	ldd	r30, Y+4	; 0x04
     3da:	fd 81       	ldd	r31, Y+5	; 0x05
     3dc:	80 83       	st	Z, r24
     3de:	41 c0       	rjmp	.+130    	; 0x462 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTB: *Copy_pu8Value = GET_BIT(PINB,Copy_u8Pin); break;
     3e0:	e6 e3       	ldi	r30, 0x36	; 54
     3e2:	f0 e0       	ldi	r31, 0x00	; 0
     3e4:	80 81       	ld	r24, Z
     3e6:	28 2f       	mov	r18, r24
     3e8:	30 e0       	ldi	r19, 0x00	; 0
     3ea:	8b 81       	ldd	r24, Y+3	; 0x03
     3ec:	88 2f       	mov	r24, r24
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	a9 01       	movw	r20, r18
     3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <DIO_u8GetPinValue+0xb2>
     3f4:	55 95       	asr	r21
     3f6:	47 95       	ror	r20
     3f8:	8a 95       	dec	r24
     3fa:	e2 f7       	brpl	.-8      	; 0x3f4 <DIO_u8GetPinValue+0xae>
     3fc:	ca 01       	movw	r24, r20
     3fe:	81 70       	andi	r24, 0x01	; 1
     400:	ec 81       	ldd	r30, Y+4	; 0x04
     402:	fd 81       	ldd	r31, Y+5	; 0x05
     404:	80 83       	st	Z, r24
     406:	2d c0       	rjmp	.+90     	; 0x462 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTC: *Copy_pu8Value = GET_BIT(PINC,Copy_u8Pin); break;
     408:	e3 e3       	ldi	r30, 0x33	; 51
     40a:	f0 e0       	ldi	r31, 0x00	; 0
     40c:	80 81       	ld	r24, Z
     40e:	28 2f       	mov	r18, r24
     410:	30 e0       	ldi	r19, 0x00	; 0
     412:	8b 81       	ldd	r24, Y+3	; 0x03
     414:	88 2f       	mov	r24, r24
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	a9 01       	movw	r20, r18
     41a:	02 c0       	rjmp	.+4      	; 0x420 <DIO_u8GetPinValue+0xda>
     41c:	55 95       	asr	r21
     41e:	47 95       	ror	r20
     420:	8a 95       	dec	r24
     422:	e2 f7       	brpl	.-8      	; 0x41c <DIO_u8GetPinValue+0xd6>
     424:	ca 01       	movw	r24, r20
     426:	81 70       	andi	r24, 0x01	; 1
     428:	ec 81       	ldd	r30, Y+4	; 0x04
     42a:	fd 81       	ldd	r31, Y+5	; 0x05
     42c:	80 83       	st	Z, r24
     42e:	19 c0       	rjmp	.+50     	; 0x462 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTD: *Copy_pu8Value = GET_BIT(PIND,Copy_u8Pin); break;
     430:	e0 e3       	ldi	r30, 0x30	; 48
     432:	f0 e0       	ldi	r31, 0x00	; 0
     434:	80 81       	ld	r24, Z
     436:	28 2f       	mov	r18, r24
     438:	30 e0       	ldi	r19, 0x00	; 0
     43a:	8b 81       	ldd	r24, Y+3	; 0x03
     43c:	88 2f       	mov	r24, r24
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	a9 01       	movw	r20, r18
     442:	02 c0       	rjmp	.+4      	; 0x448 <DIO_u8GetPinValue+0x102>
     444:	55 95       	asr	r21
     446:	47 95       	ror	r20
     448:	8a 95       	dec	r24
     44a:	e2 f7       	brpl	.-8      	; 0x444 <DIO_u8GetPinValue+0xfe>
     44c:	ca 01       	movw	r24, r20
     44e:	81 70       	andi	r24, 0x01	; 1
     450:	ec 81       	ldd	r30, Y+4	; 0x04
     452:	fd 81       	ldd	r31, Y+5	; 0x05
     454:	80 83       	st	Z, r24
     456:	05 c0       	rjmp	.+10     	; 0x462 <DIO_u8GetPinValue+0x11c>
		default:Local_u8ErrorState=1 ;
     458:	81 e0       	ldi	r24, 0x01	; 1
     45a:	89 83       	std	Y+1, r24	; 0x01
     45c:	02 c0       	rjmp	.+4      	; 0x462 <DIO_u8GetPinValue+0x11c>
		}
	}
	else{
		Local_u8ErrorState=1;
     45e:	81 e0       	ldi	r24, 0x01	; 1
     460:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState ;
     462:	89 81       	ldd	r24, Y+1	; 0x01
}
     464:	27 96       	adiw	r28, 0x07	; 7
     466:	0f b6       	in	r0, 0x3f	; 63
     468:	f8 94       	cli
     46a:	de bf       	out	0x3e, r29	; 62
     46c:	0f be       	out	0x3f, r0	; 63
     46e:	cd bf       	out	0x3d, r28	; 61
     470:	cf 91       	pop	r28
     472:	df 91       	pop	r29
     474:	08 95       	ret

00000476 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8Port,u8* Copy_pu8Value){
     476:	df 93       	push	r29
     478:	cf 93       	push	r28
     47a:	00 d0       	rcall	.+0      	; 0x47c <DIO_u8GetPortValue+0x6>
     47c:	00 d0       	rcall	.+0      	; 0x47e <DIO_u8GetPortValue+0x8>
     47e:	00 d0       	rcall	.+0      	; 0x480 <DIO_u8GetPortValue+0xa>
     480:	cd b7       	in	r28, 0x3d	; 61
     482:	de b7       	in	r29, 0x3e	; 62
     484:	8a 83       	std	Y+2, r24	; 0x02
     486:	7c 83       	std	Y+4, r23	; 0x04
     488:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
     48a:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8Port)
     48c:	8a 81       	ldd	r24, Y+2	; 0x02
     48e:	28 2f       	mov	r18, r24
     490:	30 e0       	ldi	r19, 0x00	; 0
     492:	3e 83       	std	Y+6, r19	; 0x06
     494:	2d 83       	std	Y+5, r18	; 0x05
     496:	8d 81       	ldd	r24, Y+5	; 0x05
     498:	9e 81       	ldd	r25, Y+6	; 0x06
     49a:	81 30       	cpi	r24, 0x01	; 1
     49c:	91 05       	cpc	r25, r1
     49e:	e1 f0       	breq	.+56     	; 0x4d8 <DIO_u8GetPortValue+0x62>
     4a0:	2d 81       	ldd	r18, Y+5	; 0x05
     4a2:	3e 81       	ldd	r19, Y+6	; 0x06
     4a4:	22 30       	cpi	r18, 0x02	; 2
     4a6:	31 05       	cpc	r19, r1
     4a8:	2c f4       	brge	.+10     	; 0x4b4 <DIO_u8GetPortValue+0x3e>
     4aa:	8d 81       	ldd	r24, Y+5	; 0x05
     4ac:	9e 81       	ldd	r25, Y+6	; 0x06
     4ae:	00 97       	sbiw	r24, 0x00	; 0
     4b0:	61 f0       	breq	.+24     	; 0x4ca <DIO_u8GetPortValue+0x54>
     4b2:	27 c0       	rjmp	.+78     	; 0x502 <DIO_u8GetPortValue+0x8c>
     4b4:	2d 81       	ldd	r18, Y+5	; 0x05
     4b6:	3e 81       	ldd	r19, Y+6	; 0x06
     4b8:	22 30       	cpi	r18, 0x02	; 2
     4ba:	31 05       	cpc	r19, r1
     4bc:	a1 f0       	breq	.+40     	; 0x4e6 <DIO_u8GetPortValue+0x70>
     4be:	8d 81       	ldd	r24, Y+5	; 0x05
     4c0:	9e 81       	ldd	r25, Y+6	; 0x06
     4c2:	83 30       	cpi	r24, 0x03	; 3
     4c4:	91 05       	cpc	r25, r1
     4c6:	b1 f0       	breq	.+44     	; 0x4f4 <DIO_u8GetPortValue+0x7e>
     4c8:	1c c0       	rjmp	.+56     	; 0x502 <DIO_u8GetPortValue+0x8c>
	{
	case DIO_u8PORTA: *Copy_pu8Value = PINA; break;
     4ca:	e9 e3       	ldi	r30, 0x39	; 57
     4cc:	f0 e0       	ldi	r31, 0x00	; 0
     4ce:	80 81       	ld	r24, Z
     4d0:	eb 81       	ldd	r30, Y+3	; 0x03
     4d2:	fc 81       	ldd	r31, Y+4	; 0x04
     4d4:	80 83       	st	Z, r24
     4d6:	17 c0       	rjmp	.+46     	; 0x506 <DIO_u8GetPortValue+0x90>
	case DIO_u8PORTB: *Copy_pu8Value = PINB; break;
     4d8:	e6 e3       	ldi	r30, 0x36	; 54
     4da:	f0 e0       	ldi	r31, 0x00	; 0
     4dc:	80 81       	ld	r24, Z
     4de:	eb 81       	ldd	r30, Y+3	; 0x03
     4e0:	fc 81       	ldd	r31, Y+4	; 0x04
     4e2:	80 83       	st	Z, r24
     4e4:	10 c0       	rjmp	.+32     	; 0x506 <DIO_u8GetPortValue+0x90>
	case DIO_u8PORTC: *Copy_pu8Value = PINC; break;
     4e6:	e3 e3       	ldi	r30, 0x33	; 51
     4e8:	f0 e0       	ldi	r31, 0x00	; 0
     4ea:	80 81       	ld	r24, Z
     4ec:	eb 81       	ldd	r30, Y+3	; 0x03
     4ee:	fc 81       	ldd	r31, Y+4	; 0x04
     4f0:	80 83       	st	Z, r24
     4f2:	09 c0       	rjmp	.+18     	; 0x506 <DIO_u8GetPortValue+0x90>
	case DIO_u8PORTD: *Copy_pu8Value = PIND; break;
     4f4:	e0 e3       	ldi	r30, 0x30	; 48
     4f6:	f0 e0       	ldi	r31, 0x00	; 0
     4f8:	80 81       	ld	r24, Z
     4fa:	eb 81       	ldd	r30, Y+3	; 0x03
     4fc:	fc 81       	ldd	r31, Y+4	; 0x04
     4fe:	80 83       	st	Z, r24
     500:	02 c0       	rjmp	.+4      	; 0x506 <DIO_u8GetPortValue+0x90>
	default: Local_u8ErrorState=1 ;
     502:	81 e0       	ldi	r24, 0x01	; 1
     504:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
     506:	89 81       	ldd	r24, Y+1	; 0x01
}
     508:	26 96       	adiw	r28, 0x06	; 6
     50a:	0f b6       	in	r0, 0x3f	; 63
     50c:	f8 94       	cli
     50e:	de bf       	out	0x3e, r29	; 62
     510:	0f be       	out	0x3f, r0	; 63
     512:	cd bf       	out	0x3d, r28	; 61
     514:	cf 91       	pop	r28
     516:	df 91       	pop	r29
     518:	08 95       	ret

0000051a <GIE_voidEnable>:
#include "BIT_MATH.h"

#include "GIE_interface.h"
#include "GIE_register.h"

void GIE_voidEnable(void){
     51a:	df 93       	push	r29
     51c:	cf 93       	push	r28
     51e:	cd b7       	in	r28, 0x3d	; 61
     520:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(SREG,SREG_I);
     522:	af e5       	ldi	r26, 0x5F	; 95
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ef e5       	ldi	r30, 0x5F	; 95
     528:	f0 e0       	ldi	r31, 0x00	; 0
     52a:	80 81       	ld	r24, Z
     52c:	80 68       	ori	r24, 0x80	; 128
     52e:	8c 93       	st	X, r24
}
     530:	cf 91       	pop	r28
     532:	df 91       	pop	r29
     534:	08 95       	ret

00000536 <GIE_voidDisable>:

void GIE_voidDisable(void){
     536:	df 93       	push	r29
     538:	cf 93       	push	r28
     53a:	cd b7       	in	r28, 0x3d	; 61
     53c:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(SREG,SREG_I);
     53e:	af e5       	ldi	r26, 0x5F	; 95
     540:	b0 e0       	ldi	r27, 0x00	; 0
     542:	ef e5       	ldi	r30, 0x5F	; 95
     544:	f0 e0       	ldi	r31, 0x00	; 0
     546:	80 81       	ld	r24, Z
     548:	8f 77       	andi	r24, 0x7F	; 127
     54a:	8c 93       	st	X, r24
     54c:	cf 91       	pop	r28
     54e:	df 91       	pop	r29
     550:	08 95       	ret

00000552 <MATH_u32Power>:
#include "STD_TYPES.h"
#include "BIT_MATH.h"
#include "MATH_HELPER.h"

u32 MATH_u32Power(u32 Copy_u32Base,s32 Copy_u32Exponent){
     552:	df 93       	push	r29
     554:	cf 93       	push	r28
     556:	cd b7       	in	r28, 0x3d	; 61
     558:	de b7       	in	r29, 0x3e	; 62
     55a:	60 97       	sbiw	r28, 0x10	; 16
     55c:	0f b6       	in	r0, 0x3f	; 63
     55e:	f8 94       	cli
     560:	de bf       	out	0x3e, r29	; 62
     562:	0f be       	out	0x3f, r0	; 63
     564:	cd bf       	out	0x3d, r28	; 61
     566:	69 87       	std	Y+9, r22	; 0x09
     568:	7a 87       	std	Y+10, r23	; 0x0a
     56a:	8b 87       	std	Y+11, r24	; 0x0b
     56c:	9c 87       	std	Y+12, r25	; 0x0c
     56e:	2d 87       	std	Y+13, r18	; 0x0d
     570:	3e 87       	std	Y+14, r19	; 0x0e
     572:	4f 87       	std	Y+15, r20	; 0x0f
     574:	58 8b       	std	Y+16, r21	; 0x10
	u32 Local_u32Result=1;
     576:	81 e0       	ldi	r24, 0x01	; 1
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	a0 e0       	ldi	r26, 0x00	; 0
     57c:	b0 e0       	ldi	r27, 0x00	; 0
     57e:	8d 83       	std	Y+5, r24	; 0x05
     580:	9e 83       	std	Y+6, r25	; 0x06
     582:	af 83       	std	Y+7, r26	; 0x07
     584:	b8 87       	std	Y+8, r27	; 0x08
	for(u32 i=0;i<Copy_u32Exponent;i++){
     586:	19 82       	std	Y+1, r1	; 0x01
     588:	1a 82       	std	Y+2, r1	; 0x02
     58a:	1b 82       	std	Y+3, r1	; 0x03
     58c:	1c 82       	std	Y+4, r1	; 0x04
     58e:	1d c0       	rjmp	.+58     	; 0x5ca <MATH_u32Power+0x78>
		Local_u32Result*=Copy_u32Base;
     590:	8d 81       	ldd	r24, Y+5	; 0x05
     592:	9e 81       	ldd	r25, Y+6	; 0x06
     594:	af 81       	ldd	r26, Y+7	; 0x07
     596:	b8 85       	ldd	r27, Y+8	; 0x08
     598:	29 85       	ldd	r18, Y+9	; 0x09
     59a:	3a 85       	ldd	r19, Y+10	; 0x0a
     59c:	4b 85       	ldd	r20, Y+11	; 0x0b
     59e:	5c 85       	ldd	r21, Y+12	; 0x0c
     5a0:	bc 01       	movw	r22, r24
     5a2:	cd 01       	movw	r24, r26
     5a4:	0e 94 28 11 	call	0x2250	; 0x2250 <__mulsi3>
     5a8:	dc 01       	movw	r26, r24
     5aa:	cb 01       	movw	r24, r22
     5ac:	8d 83       	std	Y+5, r24	; 0x05
     5ae:	9e 83       	std	Y+6, r25	; 0x06
     5b0:	af 83       	std	Y+7, r26	; 0x07
     5b2:	b8 87       	std	Y+8, r27	; 0x08
#include "BIT_MATH.h"
#include "MATH_HELPER.h"

u32 MATH_u32Power(u32 Copy_u32Base,s32 Copy_u32Exponent){
	u32 Local_u32Result=1;
	for(u32 i=0;i<Copy_u32Exponent;i++){
     5b4:	89 81       	ldd	r24, Y+1	; 0x01
     5b6:	9a 81       	ldd	r25, Y+2	; 0x02
     5b8:	ab 81       	ldd	r26, Y+3	; 0x03
     5ba:	bc 81       	ldd	r27, Y+4	; 0x04
     5bc:	01 96       	adiw	r24, 0x01	; 1
     5be:	a1 1d       	adc	r26, r1
     5c0:	b1 1d       	adc	r27, r1
     5c2:	89 83       	std	Y+1, r24	; 0x01
     5c4:	9a 83       	std	Y+2, r25	; 0x02
     5c6:	ab 83       	std	Y+3, r26	; 0x03
     5c8:	bc 83       	std	Y+4, r27	; 0x04
     5ca:	2d 85       	ldd	r18, Y+13	; 0x0d
     5cc:	3e 85       	ldd	r19, Y+14	; 0x0e
     5ce:	4f 85       	ldd	r20, Y+15	; 0x0f
     5d0:	58 89       	ldd	r21, Y+16	; 0x10
     5d2:	89 81       	ldd	r24, Y+1	; 0x01
     5d4:	9a 81       	ldd	r25, Y+2	; 0x02
     5d6:	ab 81       	ldd	r26, Y+3	; 0x03
     5d8:	bc 81       	ldd	r27, Y+4	; 0x04
     5da:	82 17       	cp	r24, r18
     5dc:	93 07       	cpc	r25, r19
     5de:	a4 07       	cpc	r26, r20
     5e0:	b5 07       	cpc	r27, r21
     5e2:	b0 f2       	brcs	.-84     	; 0x590 <MATH_u32Power+0x3e>
		Local_u32Result*=Copy_u32Base;
	}
	return Local_u32Result;
     5e4:	8d 81       	ldd	r24, Y+5	; 0x05
     5e6:	9e 81       	ldd	r25, Y+6	; 0x06
     5e8:	af 81       	ldd	r26, Y+7	; 0x07
     5ea:	b8 85       	ldd	r27, Y+8	; 0x08
}
     5ec:	bc 01       	movw	r22, r24
     5ee:	cd 01       	movw	r24, r26
     5f0:	60 96       	adiw	r28, 0x10	; 16
     5f2:	0f b6       	in	r0, 0x3f	; 63
     5f4:	f8 94       	cli
     5f6:	de bf       	out	0x3e, r29	; 62
     5f8:	0f be       	out	0x3f, r0	; 63
     5fa:	cd bf       	out	0x3d, r28	; 61
     5fc:	cf 91       	pop	r28
     5fe:	df 91       	pop	r29
     600:	08 95       	ret

00000602 <MATH_s32Map>:

s32 MATH_s32Map(s32 Copy_s32InputMin,s32 Copy_s32InputMax,s32 Copy_s32OutputMin,s32 Copy_s32OutputMax,s32 Copy_s32InputVal){
     602:	af 92       	push	r10
     604:	bf 92       	push	r11
     606:	cf 92       	push	r12
     608:	df 92       	push	r13
     60a:	ef 92       	push	r14
     60c:	ff 92       	push	r15
     60e:	0f 93       	push	r16
     610:	1f 93       	push	r17
     612:	df 93       	push	r29
     614:	cf 93       	push	r28
     616:	cd b7       	in	r28, 0x3d	; 61
     618:	de b7       	in	r29, 0x3e	; 62
     61a:	64 97       	sbiw	r28, 0x14	; 20
     61c:	0f b6       	in	r0, 0x3f	; 63
     61e:	f8 94       	cli
     620:	de bf       	out	0x3e, r29	; 62
     622:	0f be       	out	0x3f, r0	; 63
     624:	cd bf       	out	0x3d, r28	; 61
     626:	6d 83       	std	Y+5, r22	; 0x05
     628:	7e 83       	std	Y+6, r23	; 0x06
     62a:	8f 83       	std	Y+7, r24	; 0x07
     62c:	98 87       	std	Y+8, r25	; 0x08
     62e:	29 87       	std	Y+9, r18	; 0x09
     630:	3a 87       	std	Y+10, r19	; 0x0a
     632:	4b 87       	std	Y+11, r20	; 0x0b
     634:	5c 87       	std	Y+12, r21	; 0x0c
     636:	ed 86       	std	Y+13, r14	; 0x0d
     638:	fe 86       	std	Y+14, r15	; 0x0e
     63a:	0f 87       	std	Y+15, r16	; 0x0f
     63c:	18 8b       	std	Y+16, r17	; 0x10
     63e:	a9 8a       	std	Y+17, r10	; 0x11
     640:	ba 8a       	std	Y+18, r11	; 0x12
     642:	cb 8a       	std	Y+19, r12	; 0x13
     644:	dc 8a       	std	Y+20, r13	; 0x14
    s32 Local_s32OutputVal;
    Local_s32OutputVal= (((Copy_s32OutputMax-Copy_s32OutputMin)*(Copy_s32InputVal-Copy_s32InputMin))/(Copy_s32InputMax-Copy_s32InputMin))+Copy_s32OutputMin;
     646:	29 89       	ldd	r18, Y+17	; 0x11
     648:	3a 89       	ldd	r19, Y+18	; 0x12
     64a:	4b 89       	ldd	r20, Y+19	; 0x13
     64c:	5c 89       	ldd	r21, Y+20	; 0x14
     64e:	8d 85       	ldd	r24, Y+13	; 0x0d
     650:	9e 85       	ldd	r25, Y+14	; 0x0e
     652:	af 85       	ldd	r26, Y+15	; 0x0f
     654:	b8 89       	ldd	r27, Y+16	; 0x10
     656:	79 01       	movw	r14, r18
     658:	8a 01       	movw	r16, r20
     65a:	e8 1a       	sub	r14, r24
     65c:	f9 0a       	sbc	r15, r25
     65e:	0a 0b       	sbc	r16, r26
     660:	1b 0b       	sbc	r17, r27
     662:	29 a1       	ldd	r18, Y+33	; 0x21
     664:	3a a1       	ldd	r19, Y+34	; 0x22
     666:	4b a1       	ldd	r20, Y+35	; 0x23
     668:	5c a1       	ldd	r21, Y+36	; 0x24
     66a:	8d 81       	ldd	r24, Y+5	; 0x05
     66c:	9e 81       	ldd	r25, Y+6	; 0x06
     66e:	af 81       	ldd	r26, Y+7	; 0x07
     670:	b8 85       	ldd	r27, Y+8	; 0x08
     672:	28 1b       	sub	r18, r24
     674:	39 0b       	sbc	r19, r25
     676:	4a 0b       	sbc	r20, r26
     678:	5b 0b       	sbc	r21, r27
     67a:	c8 01       	movw	r24, r16
     67c:	b7 01       	movw	r22, r14
     67e:	0e 94 28 11 	call	0x2250	; 0x2250 <__mulsi3>
     682:	7b 01       	movw	r14, r22
     684:	8c 01       	movw	r16, r24
     686:	29 85       	ldd	r18, Y+9	; 0x09
     688:	3a 85       	ldd	r19, Y+10	; 0x0a
     68a:	4b 85       	ldd	r20, Y+11	; 0x0b
     68c:	5c 85       	ldd	r21, Y+12	; 0x0c
     68e:	8d 81       	ldd	r24, Y+5	; 0x05
     690:	9e 81       	ldd	r25, Y+6	; 0x06
     692:	af 81       	ldd	r26, Y+7	; 0x07
     694:	b8 85       	ldd	r27, Y+8	; 0x08
     696:	28 1b       	sub	r18, r24
     698:	39 0b       	sbc	r19, r25
     69a:	4a 0b       	sbc	r20, r26
     69c:	5b 0b       	sbc	r21, r27
     69e:	c8 01       	movw	r24, r16
     6a0:	b7 01       	movw	r22, r14
     6a2:	0e 94 7d 11 	call	0x22fa	; 0x22fa <__divmodsi4>
     6a6:	da 01       	movw	r26, r20
     6a8:	c9 01       	movw	r24, r18
     6aa:	9c 01       	movw	r18, r24
     6ac:	ad 01       	movw	r20, r26
     6ae:	8d 85       	ldd	r24, Y+13	; 0x0d
     6b0:	9e 85       	ldd	r25, Y+14	; 0x0e
     6b2:	af 85       	ldd	r26, Y+15	; 0x0f
     6b4:	b8 89       	ldd	r27, Y+16	; 0x10
     6b6:	82 0f       	add	r24, r18
     6b8:	93 1f       	adc	r25, r19
     6ba:	a4 1f       	adc	r26, r20
     6bc:	b5 1f       	adc	r27, r21
     6be:	89 83       	std	Y+1, r24	; 0x01
     6c0:	9a 83       	std	Y+2, r25	; 0x02
     6c2:	ab 83       	std	Y+3, r26	; 0x03
     6c4:	bc 83       	std	Y+4, r27	; 0x04
    return Local_s32OutputVal;
     6c6:	89 81       	ldd	r24, Y+1	; 0x01
     6c8:	9a 81       	ldd	r25, Y+2	; 0x02
     6ca:	ab 81       	ldd	r26, Y+3	; 0x03
     6cc:	bc 81       	ldd	r27, Y+4	; 0x04
     6ce:	bc 01       	movw	r22, r24
     6d0:	cd 01       	movw	r24, r26
     6d2:	64 96       	adiw	r28, 0x14	; 20
     6d4:	0f b6       	in	r0, 0x3f	; 63
     6d6:	f8 94       	cli
     6d8:	de bf       	out	0x3e, r29	; 62
     6da:	0f be       	out	0x3f, r0	; 63
     6dc:	cd bf       	out	0x3d, r28	; 61
     6de:	cf 91       	pop	r28
     6e0:	df 91       	pop	r29
     6e2:	1f 91       	pop	r17
     6e4:	0f 91       	pop	r16
     6e6:	ff 90       	pop	r15
     6e8:	ef 90       	pop	r14
     6ea:	df 90       	pop	r13
     6ec:	cf 90       	pop	r12
     6ee:	bf 90       	pop	r11
     6f0:	af 90       	pop	r10
     6f2:	08 95       	ret

000006f4 <PORT_voidInit>:
#include "PORT_config.h"
#include "PORT_private.h"
#include "PORT_interface.h"
#include "PORT_register.h"

void PORT_voidInit(){
     6f4:	df 93       	push	r29
     6f6:	cf 93       	push	r28
     6f8:	cd b7       	in	r28, 0x3d	; 61
     6fa:	de b7       	in	r29, 0x3e	; 62
    DDRA=PORTA_DIR;
     6fc:	ea e3       	ldi	r30, 0x3A	; 58
     6fe:	f0 e0       	ldi	r31, 0x00	; 0
     700:	8f ef       	ldi	r24, 0xFF	; 255
     702:	80 83       	st	Z, r24
    DDRB=PORTB_DIR;
     704:	e7 e3       	ldi	r30, 0x37	; 55
     706:	f0 e0       	ldi	r31, 0x00	; 0
     708:	8f e0       	ldi	r24, 0x0F	; 15
     70a:	80 83       	st	Z, r24
    DDRC=PORTC_DIR;
     70c:	e4 e3       	ldi	r30, 0x34	; 52
     70e:	f0 e0       	ldi	r31, 0x00	; 0
     710:	8f ef       	ldi	r24, 0xFF	; 255
     712:	80 83       	st	Z, r24
    DDRD=PORTD_DIR;
     714:	e1 e3       	ldi	r30, 0x31	; 49
     716:	f0 e0       	ldi	r31, 0x00	; 0
     718:	8b eb       	ldi	r24, 0xBB	; 187
     71a:	80 83       	st	Z, r24
    
    PORTA=PORTA_INIT_VAL;
     71c:	eb e3       	ldi	r30, 0x3B	; 59
     71e:	f0 e0       	ldi	r31, 0x00	; 0
     720:	10 82       	st	Z, r1
    PORTB=PORTB_INIT_VAL;
     722:	e8 e3       	ldi	r30, 0x38	; 56
     724:	f0 e0       	ldi	r31, 0x00	; 0
     726:	10 82       	st	Z, r1
    PORTC=PORTC_INIT_VAL;
     728:	e5 e3       	ldi	r30, 0x35	; 53
     72a:	f0 e0       	ldi	r31, 0x00	; 0
     72c:	10 82       	st	Z, r1
    PORTD=PORTD_INIT_VAL;
     72e:	e2 e3       	ldi	r30, 0x32	; 50
     730:	f0 e0       	ldi	r31, 0x00	; 0
     732:	10 82       	st	Z, r1
}
     734:	cf 91       	pop	r28
     736:	df 91       	pop	r29
     738:	08 95       	ret

0000073a <SERVO_u8Rotate>:
#include "STD_TYPES.h"
#include "MATH_HELPER.h"

#include "TIMER_interface.h"

u8 SERVO_u8Rotate(u8 Copy_u8Degree,Timer1_t* Copy_psTimer){
     73a:	af 92       	push	r10
     73c:	bf 92       	push	r11
     73e:	cf 92       	push	r12
     740:	df 92       	push	r13
     742:	ef 92       	push	r14
     744:	ff 92       	push	r15
     746:	0f 93       	push	r16
     748:	1f 93       	push	r17
     74a:	df 93       	push	r29
     74c:	cf 93       	push	r28
     74e:	00 d0       	rcall	.+0      	; 0x750 <SERVO_u8Rotate+0x16>
     750:	00 d0       	rcall	.+0      	; 0x752 <SERVO_u8Rotate+0x18>
     752:	00 d0       	rcall	.+0      	; 0x754 <SERVO_u8Rotate+0x1a>
     754:	cd b7       	in	r28, 0x3d	; 61
     756:	de b7       	in	r29, 0x3e	; 62
     758:	8c 83       	std	Y+4, r24	; 0x04
     75a:	7e 83       	std	Y+6, r23	; 0x06
     75c:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8ErrorState;
	if(Copy_psTimer!=NULL){
     75e:	8d 81       	ldd	r24, Y+5	; 0x05
     760:	9e 81       	ldd	r25, Y+6	; 0x06
     762:	00 97       	sbiw	r24, 0x00	; 0
     764:	f1 f1       	breq	.+124    	; 0x7e2 <SERVO_u8Rotate+0xa8>
		u16 Local_u16OnTime=MATH_s32Map(0,180,400,2657,Copy_u8Degree);
     766:	8c 81       	ldd	r24, Y+4	; 0x04
     768:	88 2f       	mov	r24, r24
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	a0 e0       	ldi	r26, 0x00	; 0
     76e:	b0 e0       	ldi	r27, 0x00	; 0
     770:	00 d0       	rcall	.+0      	; 0x772 <SERVO_u8Rotate+0x38>
     772:	00 d0       	rcall	.+0      	; 0x774 <SERVO_u8Rotate+0x3a>
     774:	ed b7       	in	r30, 0x3d	; 61
     776:	fe b7       	in	r31, 0x3e	; 62
     778:	31 96       	adiw	r30, 0x01	; 1
     77a:	80 83       	st	Z, r24
     77c:	91 83       	std	Z+1, r25	; 0x01
     77e:	a2 83       	std	Z+2, r26	; 0x02
     780:	b3 83       	std	Z+3, r27	; 0x03
     782:	60 e0       	ldi	r22, 0x00	; 0
     784:	70 e0       	ldi	r23, 0x00	; 0
     786:	80 e0       	ldi	r24, 0x00	; 0
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	24 eb       	ldi	r18, 0xB4	; 180
     78c:	30 e0       	ldi	r19, 0x00	; 0
     78e:	40 e0       	ldi	r20, 0x00	; 0
     790:	50 e0       	ldi	r21, 0x00	; 0
     792:	0f 2e       	mov	r0, r31
     794:	f0 e9       	ldi	r31, 0x90	; 144
     796:	ef 2e       	mov	r14, r31
     798:	f1 e0       	ldi	r31, 0x01	; 1
     79a:	ff 2e       	mov	r15, r31
     79c:	f0 e0       	ldi	r31, 0x00	; 0
     79e:	0f 2f       	mov	r16, r31
     7a0:	f0 e0       	ldi	r31, 0x00	; 0
     7a2:	1f 2f       	mov	r17, r31
     7a4:	f0 2d       	mov	r31, r0
     7a6:	0f 2e       	mov	r0, r31
     7a8:	f1 e6       	ldi	r31, 0x61	; 97
     7aa:	af 2e       	mov	r10, r31
     7ac:	fa e0       	ldi	r31, 0x0A	; 10
     7ae:	bf 2e       	mov	r11, r31
     7b0:	f0 e0       	ldi	r31, 0x00	; 0
     7b2:	cf 2e       	mov	r12, r31
     7b4:	f0 e0       	ldi	r31, 0x00	; 0
     7b6:	df 2e       	mov	r13, r31
     7b8:	f0 2d       	mov	r31, r0
     7ba:	0e 94 01 03 	call	0x602	; 0x602 <MATH_s32Map>
     7be:	0f 90       	pop	r0
     7c0:	0f 90       	pop	r0
     7c2:	0f 90       	pop	r0
     7c4:	0f 90       	pop	r0
     7c6:	dc 01       	movw	r26, r24
     7c8:	cb 01       	movw	r24, r22
     7ca:	9a 83       	std	Y+2, r25	; 0x02
     7cc:	89 83       	std	Y+1, r24	; 0x01
		TIMER1_u8PWMGenerate(Copy_psTimer,20000,Local_u16OnTime);
     7ce:	8d 81       	ldd	r24, Y+5	; 0x05
     7d0:	9e 81       	ldd	r25, Y+6	; 0x06
     7d2:	29 81       	ldd	r18, Y+1	; 0x01
     7d4:	3a 81       	ldd	r19, Y+2	; 0x02
     7d6:	60 e2       	ldi	r22, 0x20	; 32
     7d8:	7e e4       	ldi	r23, 0x4E	; 78
     7da:	a9 01       	movw	r20, r18
     7dc:	0e 94 89 0a 	call	0x1512	; 0x1512 <TIMER1_u8PWMGenerate>
     7e0:	02 c0       	rjmp	.+4      	; 0x7e6 <SERVO_u8Rotate+0xac>
	}
	else{
		Local_u8ErrorState=NULL_POINTER;
     7e2:	82 e0       	ldi	r24, 0x02	; 2
     7e4:	8b 83       	std	Y+3, r24	; 0x03
	}
	return Local_u8ErrorState;
     7e6:	8b 81       	ldd	r24, Y+3	; 0x03
}
     7e8:	26 96       	adiw	r28, 0x06	; 6
     7ea:	0f b6       	in	r0, 0x3f	; 63
     7ec:	f8 94       	cli
     7ee:	de bf       	out	0x3e, r29	; 62
     7f0:	0f be       	out	0x3f, r0	; 63
     7f2:	cd bf       	out	0x3d, r28	; 61
     7f4:	cf 91       	pop	r28
     7f6:	df 91       	pop	r29
     7f8:	1f 91       	pop	r17
     7fa:	0f 91       	pop	r16
     7fc:	ff 90       	pop	r15
     7fe:	ef 90       	pop	r14
     800:	df 90       	pop	r13
     802:	cf 90       	pop	r12
     804:	bf 90       	pop	r11
     806:	af 90       	pop	r10
     808:	08 95       	ret

0000080a <TIMER2_voidScheduleFunc>:
static void (*TIMER2_pvScheduleFunc)(void)=NULL;
static u32 TIMER_u32ScheduleCompMatchCount;
static u8 TIMER_u8ScheduleRepeatability;


static void TIMER2_voidScheduleFunc(void){
     80a:	df 93       	push	r29
     80c:	cf 93       	push	r28
     80e:	cd b7       	in	r28, 0x3d	; 61
     810:	de b7       	in	r29, 0x3e	; 62
	static u32 Local_u32Counter=0;
	Local_u32Counter++;
     812:	80 91 8c 00 	lds	r24, 0x008C
     816:	90 91 8d 00 	lds	r25, 0x008D
     81a:	a0 91 8e 00 	lds	r26, 0x008E
     81e:	b0 91 8f 00 	lds	r27, 0x008F
     822:	01 96       	adiw	r24, 0x01	; 1
     824:	a1 1d       	adc	r26, r1
     826:	b1 1d       	adc	r27, r1
     828:	80 93 8c 00 	sts	0x008C, r24
     82c:	90 93 8d 00 	sts	0x008D, r25
     830:	a0 93 8e 00 	sts	0x008E, r26
     834:	b0 93 8f 00 	sts	0x008F, r27
	if(Local_u32Counter==TIMER_u32ScheduleCompMatchCount){
     838:	20 91 8c 00 	lds	r18, 0x008C
     83c:	30 91 8d 00 	lds	r19, 0x008D
     840:	40 91 8e 00 	lds	r20, 0x008E
     844:	50 91 8f 00 	lds	r21, 0x008F
     848:	80 91 90 00 	lds	r24, 0x0090
     84c:	90 91 91 00 	lds	r25, 0x0091
     850:	a0 91 92 00 	lds	r26, 0x0092
     854:	b0 91 93 00 	lds	r27, 0x0093
     858:	28 17       	cp	r18, r24
     85a:	39 07       	cpc	r19, r25
     85c:	4a 07       	cpc	r20, r26
     85e:	5b 07       	cpc	r21, r27
     860:	f1 f4       	brne	.+60     	; 0x89e <__stack+0x3f>
		TIMER2_pvScheduleFunc();
     862:	e0 91 8a 00 	lds	r30, 0x008A
     866:	f0 91 8b 00 	lds	r31, 0x008B
     86a:	09 95       	icall
		Local_u32Counter=0;
     86c:	10 92 8c 00 	sts	0x008C, r1
     870:	10 92 8d 00 	sts	0x008D, r1
     874:	10 92 8e 00 	sts	0x008E, r1
     878:	10 92 8f 00 	sts	0x008F, r1
		if(TIMER_u8ScheduleRepeatability==REPEAT_ONCE){
     87c:	80 91 94 00 	lds	r24, 0x0094
     880:	81 30       	cpi	r24, 0x01	; 1
     882:	29 f4       	brne	.+10     	; 0x88e <__stack+0x2f>
			TIMER_u8SetIntStatus(INT_TIMER2_COMP,INT_DISABLE);
     884:	80 e0       	ldi	r24, 0x00	; 0
     886:	62 e0       	ldi	r22, 0x02	; 2
     888:	0e 94 46 05 	call	0xa8c	; 0xa8c <TIMER_u8SetIntStatus>
     88c:	08 c0       	rjmp	.+16     	; 0x89e <__stack+0x3f>
		}
		else if(TIMER_u8ScheduleRepeatability==REPEAT_PERIODIC){
     88e:	80 91 94 00 	lds	r24, 0x0094
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	21 f4       	brne	.+8      	; 0x89e <__stack+0x3f>
			TIMER_u8SetIntStatus(INT_TIMER2_COMP,INT_ENABLE);
     896:	80 e0       	ldi	r24, 0x00	; 0
     898:	61 e0       	ldi	r22, 0x01	; 1
     89a:	0e 94 46 05 	call	0xa8c	; 0xa8c <TIMER_u8SetIntStatus>
		}
	}
}
     89e:	cf 91       	pop	r28
     8a0:	df 91       	pop	r29
     8a2:	08 95       	ret

000008a4 <TIMER_u8SetTimerVal>:

/********************************************************GENERAL TIMER FUNCTIONS*****************************************
 ************************************************************************************************************************/

u8 TIMER_u8SetTimerVal(u8 Copy_u8TimerID,u16 Copy_u16Value){
     8a4:	df 93       	push	r29
     8a6:	cf 93       	push	r28
     8a8:	00 d0       	rcall	.+0      	; 0x8aa <TIMER_u8SetTimerVal+0x6>
     8aa:	00 d0       	rcall	.+0      	; 0x8ac <TIMER_u8SetTimerVal+0x8>
     8ac:	00 d0       	rcall	.+0      	; 0x8ae <TIMER_u8SetTimerVal+0xa>
     8ae:	cd b7       	in	r28, 0x3d	; 61
     8b0:	de b7       	in	r29, 0x3e	; 62
     8b2:	8a 83       	std	Y+2, r24	; 0x02
     8b4:	7c 83       	std	Y+4, r23	; 0x04
     8b6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=OK;
     8b8:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8TimerID){
     8ba:	8a 81       	ldd	r24, Y+2	; 0x02
     8bc:	28 2f       	mov	r18, r24
     8be:	30 e0       	ldi	r19, 0x00	; 0
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	2d 83       	std	Y+5, r18	; 0x05
     8c4:	8d 81       	ldd	r24, Y+5	; 0x05
     8c6:	9e 81       	ldd	r25, Y+6	; 0x06
     8c8:	83 30       	cpi	r24, 0x03	; 3
     8ca:	91 05       	cpc	r25, r1
     8cc:	b9 f0       	breq	.+46     	; 0x8fc <TIMER_u8SetTimerVal+0x58>
     8ce:	2d 81       	ldd	r18, Y+5	; 0x05
     8d0:	3e 81       	ldd	r19, Y+6	; 0x06
     8d2:	24 30       	cpi	r18, 0x04	; 4
     8d4:	31 05       	cpc	r19, r1
     8d6:	c9 f0       	breq	.+50     	; 0x90a <TIMER_u8SetTimerVal+0x66>
     8d8:	8d 81       	ldd	r24, Y+5	; 0x05
     8da:	9e 81       	ldd	r25, Y+6	; 0x06
     8dc:	00 97       	sbiw	r24, 0x00	; 0
     8de:	19 f5       	brne	.+70     	; 0x926 <TIMER_u8SetTimerVal+0x82>
	case TIMER0 : if(Copy_u16Value<256){TCNT0  = Copy_u16Value;} else{Local_u8ErrorState=NOK;} break;
     8e0:	8b 81       	ldd	r24, Y+3	; 0x03
     8e2:	9c 81       	ldd	r25, Y+4	; 0x04
     8e4:	8f 3f       	cpi	r24, 0xFF	; 255
     8e6:	91 05       	cpc	r25, r1
     8e8:	09 f0       	breq	.+2      	; 0x8ec <TIMER_u8SetTimerVal+0x48>
     8ea:	28 f4       	brcc	.+10     	; 0x8f6 <TIMER_u8SetTimerVal+0x52>
     8ec:	e2 e5       	ldi	r30, 0x52	; 82
     8ee:	f0 e0       	ldi	r31, 0x00	; 0
     8f0:	8b 81       	ldd	r24, Y+3	; 0x03
     8f2:	80 83       	st	Z, r24
     8f4:	1a c0       	rjmp	.+52     	; 0x92a <TIMER_u8SetTimerVal+0x86>
     8f6:	81 e0       	ldi	r24, 0x01	; 1
     8f8:	89 83       	std	Y+1, r24	; 0x01
     8fa:	17 c0       	rjmp	.+46     	; 0x92a <TIMER_u8SetTimerVal+0x86>
	case TIMER1 : TCNT1 = Copy_u16Value; break;
     8fc:	ec e4       	ldi	r30, 0x4C	; 76
     8fe:	f0 e0       	ldi	r31, 0x00	; 0
     900:	8b 81       	ldd	r24, Y+3	; 0x03
     902:	9c 81       	ldd	r25, Y+4	; 0x04
     904:	91 83       	std	Z+1, r25	; 0x01
     906:	80 83       	st	Z, r24
     908:	10 c0       	rjmp	.+32     	; 0x92a <TIMER_u8SetTimerVal+0x86>
	case TIMER2 : if(Copy_u16Value<256){TCNT2  = Copy_u16Value;} else{Local_u8ErrorState=NOK;} break;
     90a:	8b 81       	ldd	r24, Y+3	; 0x03
     90c:	9c 81       	ldd	r25, Y+4	; 0x04
     90e:	8f 3f       	cpi	r24, 0xFF	; 255
     910:	91 05       	cpc	r25, r1
     912:	09 f0       	breq	.+2      	; 0x916 <TIMER_u8SetTimerVal+0x72>
     914:	28 f4       	brcc	.+10     	; 0x920 <TIMER_u8SetTimerVal+0x7c>
     916:	e4 e4       	ldi	r30, 0x44	; 68
     918:	f0 e0       	ldi	r31, 0x00	; 0
     91a:	8b 81       	ldd	r24, Y+3	; 0x03
     91c:	80 83       	st	Z, r24
     91e:	05 c0       	rjmp	.+10     	; 0x92a <TIMER_u8SetTimerVal+0x86>
     920:	81 e0       	ldi	r24, 0x01	; 1
     922:	89 83       	std	Y+1, r24	; 0x01
     924:	02 c0       	rjmp	.+4      	; 0x92a <TIMER_u8SetTimerVal+0x86>
	default: Local_u8ErrorState=NOK;
     926:	81 e0       	ldi	r24, 0x01	; 1
     928:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
     92a:	89 81       	ldd	r24, Y+1	; 0x01
}
     92c:	26 96       	adiw	r28, 0x06	; 6
     92e:	0f b6       	in	r0, 0x3f	; 63
     930:	f8 94       	cli
     932:	de bf       	out	0x3e, r29	; 62
     934:	0f be       	out	0x3f, r0	; 63
     936:	cd bf       	out	0x3d, r28	; 61
     938:	cf 91       	pop	r28
     93a:	df 91       	pop	r29
     93c:	08 95       	ret

0000093e <TIMER_u8GetTimerVal>:


u8 TIMER_u8GetTimerVal(u8 Copy_u8TimerID,u16* Copy_pu16Value){
     93e:	df 93       	push	r29
     940:	cf 93       	push	r28
     942:	00 d0       	rcall	.+0      	; 0x944 <TIMER_u8GetTimerVal+0x6>
     944:	00 d0       	rcall	.+0      	; 0x946 <TIMER_u8GetTimerVal+0x8>
     946:	00 d0       	rcall	.+0      	; 0x948 <TIMER_u8GetTimerVal+0xa>
     948:	cd b7       	in	r28, 0x3d	; 61
     94a:	de b7       	in	r29, 0x3e	; 62
     94c:	8a 83       	std	Y+2, r24	; 0x02
     94e:	7c 83       	std	Y+4, r23	; 0x04
     950:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=OK;
     952:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8TimerID){
     954:	8a 81       	ldd	r24, Y+2	; 0x02
     956:	28 2f       	mov	r18, r24
     958:	30 e0       	ldi	r19, 0x00	; 0
     95a:	3e 83       	std	Y+6, r19	; 0x06
     95c:	2d 83       	std	Y+5, r18	; 0x05
     95e:	8d 81       	ldd	r24, Y+5	; 0x05
     960:	9e 81       	ldd	r25, Y+6	; 0x06
     962:	83 30       	cpi	r24, 0x03	; 3
     964:	91 05       	cpc	r25, r1
     966:	99 f0       	breq	.+38     	; 0x98e <TIMER_u8GetTimerVal+0x50>
     968:	2d 81       	ldd	r18, Y+5	; 0x05
     96a:	3e 81       	ldd	r19, Y+6	; 0x06
     96c:	24 30       	cpi	r18, 0x04	; 4
     96e:	31 05       	cpc	r19, r1
     970:	b9 f0       	breq	.+46     	; 0x9a0 <TIMER_u8GetTimerVal+0x62>
     972:	8d 81       	ldd	r24, Y+5	; 0x05
     974:	9e 81       	ldd	r25, Y+6	; 0x06
     976:	00 97       	sbiw	r24, 0x00	; 0
     978:	e9 f4       	brne	.+58     	; 0x9b4 <TIMER_u8GetTimerVal+0x76>
	case TIMER0 : *Copy_pu16Value = TCNT0 ; break;
     97a:	e2 e5       	ldi	r30, 0x52	; 82
     97c:	f0 e0       	ldi	r31, 0x00	; 0
     97e:	80 81       	ld	r24, Z
     980:	88 2f       	mov	r24, r24
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	eb 81       	ldd	r30, Y+3	; 0x03
     986:	fc 81       	ldd	r31, Y+4	; 0x04
     988:	91 83       	std	Z+1, r25	; 0x01
     98a:	80 83       	st	Z, r24
     98c:	15 c0       	rjmp	.+42     	; 0x9b8 <TIMER_u8GetTimerVal+0x7a>
	case TIMER1 : *Copy_pu16Value = TCNT1 ; break;
     98e:	ec e4       	ldi	r30, 0x4C	; 76
     990:	f0 e0       	ldi	r31, 0x00	; 0
     992:	80 81       	ld	r24, Z
     994:	91 81       	ldd	r25, Z+1	; 0x01
     996:	eb 81       	ldd	r30, Y+3	; 0x03
     998:	fc 81       	ldd	r31, Y+4	; 0x04
     99a:	91 83       	std	Z+1, r25	; 0x01
     99c:	80 83       	st	Z, r24
     99e:	0c c0       	rjmp	.+24     	; 0x9b8 <TIMER_u8GetTimerVal+0x7a>
	case TIMER2 : *Copy_pu16Value = TCNT2 ; break;
     9a0:	e4 e4       	ldi	r30, 0x44	; 68
     9a2:	f0 e0       	ldi	r31, 0x00	; 0
     9a4:	80 81       	ld	r24, Z
     9a6:	88 2f       	mov	r24, r24
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	eb 81       	ldd	r30, Y+3	; 0x03
     9ac:	fc 81       	ldd	r31, Y+4	; 0x04
     9ae:	91 83       	std	Z+1, r25	; 0x01
     9b0:	80 83       	st	Z, r24
     9b2:	02 c0       	rjmp	.+4      	; 0x9b8 <TIMER_u8GetTimerVal+0x7a>
	default: Local_u8ErrorState=NOK;
     9b4:	81 e0       	ldi	r24, 0x01	; 1
     9b6:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
     9b8:	89 81       	ldd	r24, Y+1	; 0x01
}
     9ba:	26 96       	adiw	r28, 0x06	; 6
     9bc:	0f b6       	in	r0, 0x3f	; 63
     9be:	f8 94       	cli
     9c0:	de bf       	out	0x3e, r29	; 62
     9c2:	0f be       	out	0x3f, r0	; 63
     9c4:	cd bf       	out	0x3d, r28	; 61
     9c6:	cf 91       	pop	r28
     9c8:	df 91       	pop	r29
     9ca:	08 95       	ret

000009cc <TIMER_u8SetCompMatch>:


u8 TIMER_u8SetCompMatch(u8 Copy_u8TimerID,u16 Copy_u16Value){
     9cc:	df 93       	push	r29
     9ce:	cf 93       	push	r28
     9d0:	00 d0       	rcall	.+0      	; 0x9d2 <TIMER_u8SetCompMatch+0x6>
     9d2:	00 d0       	rcall	.+0      	; 0x9d4 <TIMER_u8SetCompMatch+0x8>
     9d4:	00 d0       	rcall	.+0      	; 0x9d6 <TIMER_u8SetCompMatch+0xa>
     9d6:	cd b7       	in	r28, 0x3d	; 61
     9d8:	de b7       	in	r29, 0x3e	; 62
     9da:	8a 83       	std	Y+2, r24	; 0x02
     9dc:	7c 83       	std	Y+4, r23	; 0x04
     9de:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=OK;
     9e0:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8TimerID){
     9e2:	8a 81       	ldd	r24, Y+2	; 0x02
     9e4:	28 2f       	mov	r18, r24
     9e6:	30 e0       	ldi	r19, 0x00	; 0
     9e8:	3e 83       	std	Y+6, r19	; 0x06
     9ea:	2d 83       	std	Y+5, r18	; 0x05
     9ec:	8d 81       	ldd	r24, Y+5	; 0x05
     9ee:	9e 81       	ldd	r25, Y+6	; 0x06
     9f0:	81 30       	cpi	r24, 0x01	; 1
     9f2:	91 05       	cpc	r25, r1
     9f4:	19 f1       	breq	.+70     	; 0xa3c <TIMER_u8SetCompMatch+0x70>
     9f6:	2d 81       	ldd	r18, Y+5	; 0x05
     9f8:	3e 81       	ldd	r19, Y+6	; 0x06
     9fa:	22 30       	cpi	r18, 0x02	; 2
     9fc:	31 05       	cpc	r19, r1
     9fe:	2c f4       	brge	.+10     	; 0xa0a <TIMER_u8SetCompMatch+0x3e>
     a00:	8d 81       	ldd	r24, Y+5	; 0x05
     a02:	9e 81       	ldd	r25, Y+6	; 0x06
     a04:	00 97       	sbiw	r24, 0x00	; 0
     a06:	61 f0       	breq	.+24     	; 0xa20 <TIMER_u8SetCompMatch+0x54>
     a08:	35 c0       	rjmp	.+106    	; 0xa74 <TIMER_u8SetCompMatch+0xa8>
     a0a:	2d 81       	ldd	r18, Y+5	; 0x05
     a0c:	3e 81       	ldd	r19, Y+6	; 0x06
     a0e:	22 30       	cpi	r18, 0x02	; 2
     a10:	31 05       	cpc	r19, r1
     a12:	d9 f0       	breq	.+54     	; 0xa4a <TIMER_u8SetCompMatch+0x7e>
     a14:	8d 81       	ldd	r24, Y+5	; 0x05
     a16:	9e 81       	ldd	r25, Y+6	; 0x06
     a18:	84 30       	cpi	r24, 0x04	; 4
     a1a:	91 05       	cpc	r25, r1
     a1c:	e9 f0       	breq	.+58     	; 0xa58 <TIMER_u8SetCompMatch+0x8c>
     a1e:	2a c0       	rjmp	.+84     	; 0xa74 <TIMER_u8SetCompMatch+0xa8>
	case TIMER0  : if(Copy_u16Value<256){OCR0  = Copy_u16Value;} else{Local_u8ErrorState=NOK;} break;
     a20:	8b 81       	ldd	r24, Y+3	; 0x03
     a22:	9c 81       	ldd	r25, Y+4	; 0x04
     a24:	8f 3f       	cpi	r24, 0xFF	; 255
     a26:	91 05       	cpc	r25, r1
     a28:	09 f0       	breq	.+2      	; 0xa2c <TIMER_u8SetCompMatch+0x60>
     a2a:	28 f4       	brcc	.+10     	; 0xa36 <TIMER_u8SetCompMatch+0x6a>
     a2c:	ec e5       	ldi	r30, 0x5C	; 92
     a2e:	f0 e0       	ldi	r31, 0x00	; 0
     a30:	8b 81       	ldd	r24, Y+3	; 0x03
     a32:	80 83       	st	Z, r24
     a34:	21 c0       	rjmp	.+66     	; 0xa78 <TIMER_u8SetCompMatch+0xac>
     a36:	81 e0       	ldi	r24, 0x01	; 1
     a38:	89 83       	std	Y+1, r24	; 0x01
     a3a:	1e c0       	rjmp	.+60     	; 0xa78 <TIMER_u8SetCompMatch+0xac>
	case TIMER1A : OCR1A = Copy_u16Value; break;
     a3c:	ea e4       	ldi	r30, 0x4A	; 74
     a3e:	f0 e0       	ldi	r31, 0x00	; 0
     a40:	8b 81       	ldd	r24, Y+3	; 0x03
     a42:	9c 81       	ldd	r25, Y+4	; 0x04
     a44:	91 83       	std	Z+1, r25	; 0x01
     a46:	80 83       	st	Z, r24
     a48:	17 c0       	rjmp	.+46     	; 0xa78 <TIMER_u8SetCompMatch+0xac>
	case TIMER1B : OCR1B = Copy_u16Value; break;
     a4a:	e8 e4       	ldi	r30, 0x48	; 72
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	8b 81       	ldd	r24, Y+3	; 0x03
     a50:	9c 81       	ldd	r25, Y+4	; 0x04
     a52:	91 83       	std	Z+1, r25	; 0x01
     a54:	80 83       	st	Z, r24
     a56:	10 c0       	rjmp	.+32     	; 0xa78 <TIMER_u8SetCompMatch+0xac>
	case TIMER2  : if(Copy_u16Value<256){OCR2  = Copy_u16Value;} else{Local_u8ErrorState=NOK;} break;
     a58:	8b 81       	ldd	r24, Y+3	; 0x03
     a5a:	9c 81       	ldd	r25, Y+4	; 0x04
     a5c:	8f 3f       	cpi	r24, 0xFF	; 255
     a5e:	91 05       	cpc	r25, r1
     a60:	09 f0       	breq	.+2      	; 0xa64 <TIMER_u8SetCompMatch+0x98>
     a62:	28 f4       	brcc	.+10     	; 0xa6e <TIMER_u8SetCompMatch+0xa2>
     a64:	e3 e4       	ldi	r30, 0x43	; 67
     a66:	f0 e0       	ldi	r31, 0x00	; 0
     a68:	8b 81       	ldd	r24, Y+3	; 0x03
     a6a:	80 83       	st	Z, r24
     a6c:	05 c0       	rjmp	.+10     	; 0xa78 <TIMER_u8SetCompMatch+0xac>
     a6e:	81 e0       	ldi	r24, 0x01	; 1
     a70:	89 83       	std	Y+1, r24	; 0x01
     a72:	02 c0       	rjmp	.+4      	; 0xa78 <TIMER_u8SetCompMatch+0xac>
	default: Local_u8ErrorState=NOK;
     a74:	81 e0       	ldi	r24, 0x01	; 1
     a76:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
     a78:	89 81       	ldd	r24, Y+1	; 0x01
}
     a7a:	26 96       	adiw	r28, 0x06	; 6
     a7c:	0f b6       	in	r0, 0x3f	; 63
     a7e:	f8 94       	cli
     a80:	de bf       	out	0x3e, r29	; 62
     a82:	0f be       	out	0x3f, r0	; 63
     a84:	cd bf       	out	0x3d, r28	; 61
     a86:	cf 91       	pop	r28
     a88:	df 91       	pop	r29
     a8a:	08 95       	ret

00000a8c <TIMER_u8SetIntStatus>:


u8 TIMER_u8SetIntStatus(u8 Copy_u8InterruptID, u8 Copy_u8Status){
     a8c:	df 93       	push	r29
     a8e:	cf 93       	push	r28
     a90:	cd b7       	in	r28, 0x3d	; 61
     a92:	de b7       	in	r29, 0x3e	; 62
     a94:	27 97       	sbiw	r28, 0x07	; 7
     a96:	0f b6       	in	r0, 0x3f	; 63
     a98:	f8 94       	cli
     a9a:	de bf       	out	0x3e, r29	; 62
     a9c:	0f be       	out	0x3f, r0	; 63
     a9e:	cd bf       	out	0x3d, r28	; 61
     aa0:	8a 83       	std	Y+2, r24	; 0x02
     aa2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=OK;
     aa4:	19 82       	std	Y+1, r1	; 0x01


	if(Copy_u8Status==INT_ENABLE){
     aa6:	8b 81       	ldd	r24, Y+3	; 0x03
     aa8:	81 30       	cpi	r24, 0x01	; 1
     aaa:	09 f0       	breq	.+2      	; 0xaae <TIMER_u8SetIntStatus+0x22>
     aac:	77 c0       	rjmp	.+238    	; 0xb9c <TIMER_u8SetIntStatus+0x110>
		switch(Copy_u8InterruptID){
     aae:	8a 81       	ldd	r24, Y+2	; 0x02
     ab0:	28 2f       	mov	r18, r24
     ab2:	30 e0       	ldi	r19, 0x00	; 0
     ab4:	3f 83       	std	Y+7, r19	; 0x07
     ab6:	2e 83       	std	Y+6, r18	; 0x06
     ab8:	8e 81       	ldd	r24, Y+6	; 0x06
     aba:	9f 81       	ldd	r25, Y+7	; 0x07
     abc:	83 30       	cpi	r24, 0x03	; 3
     abe:	91 05       	cpc	r25, r1
     ac0:	09 f4       	brne	.+2      	; 0xac4 <TIMER_u8SetIntStatus+0x38>
     ac2:	41 c0       	rjmp	.+130    	; 0xb46 <TIMER_u8SetIntStatus+0xba>
     ac4:	2e 81       	ldd	r18, Y+6	; 0x06
     ac6:	3f 81       	ldd	r19, Y+7	; 0x07
     ac8:	24 30       	cpi	r18, 0x04	; 4
     aca:	31 05       	cpc	r19, r1
     acc:	7c f4       	brge	.+30     	; 0xaec <TIMER_u8SetIntStatus+0x60>
     ace:	8e 81       	ldd	r24, Y+6	; 0x06
     ad0:	9f 81       	ldd	r25, Y+7	; 0x07
     ad2:	81 30       	cpi	r24, 0x01	; 1
     ad4:	91 05       	cpc	r25, r1
     ad6:	39 f1       	breq	.+78     	; 0xb26 <TIMER_u8SetIntStatus+0x9a>
     ad8:	2e 81       	ldd	r18, Y+6	; 0x06
     ada:	3f 81       	ldd	r19, Y+7	; 0x07
     adc:	22 30       	cpi	r18, 0x02	; 2
     ade:	31 05       	cpc	r19, r1
     ae0:	d4 f5       	brge	.+116    	; 0xb56 <TIMER_u8SetIntStatus+0xca>
     ae2:	8e 81       	ldd	r24, Y+6	; 0x06
     ae4:	9f 81       	ldd	r25, Y+7	; 0x07
     ae6:	00 97       	sbiw	r24, 0x00	; 0
     ae8:	b1 f0       	breq	.+44     	; 0xb16 <TIMER_u8SetIntStatus+0x8a>
     aea:	55 c0       	rjmp	.+170    	; 0xb96 <TIMER_u8SetIntStatus+0x10a>
     aec:	2e 81       	ldd	r18, Y+6	; 0x06
     aee:	3f 81       	ldd	r19, Y+7	; 0x07
     af0:	25 30       	cpi	r18, 0x05	; 5
     af2:	31 05       	cpc	r19, r1
     af4:	c1 f1       	breq	.+112    	; 0xb66 <TIMER_u8SetIntStatus+0xda>
     af6:	8e 81       	ldd	r24, Y+6	; 0x06
     af8:	9f 81       	ldd	r25, Y+7	; 0x07
     afa:	85 30       	cpi	r24, 0x05	; 5
     afc:	91 05       	cpc	r25, r1
     afe:	dc f0       	brlt	.+54     	; 0xb36 <TIMER_u8SetIntStatus+0xaa>
     b00:	2e 81       	ldd	r18, Y+6	; 0x06
     b02:	3f 81       	ldd	r19, Y+7	; 0x07
     b04:	26 30       	cpi	r18, 0x06	; 6
     b06:	31 05       	cpc	r19, r1
     b08:	b1 f1       	breq	.+108    	; 0xb76 <TIMER_u8SetIntStatus+0xea>
     b0a:	8e 81       	ldd	r24, Y+6	; 0x06
     b0c:	9f 81       	ldd	r25, Y+7	; 0x07
     b0e:	87 30       	cpi	r24, 0x07	; 7
     b10:	91 05       	cpc	r25, r1
     b12:	c9 f1       	breq	.+114    	; 0xb86 <TIMER_u8SetIntStatus+0xfa>
     b14:	40 c0       	rjmp	.+128    	; 0xb96 <TIMER_u8SetIntStatus+0x10a>
		case  INT_TIMER2_COMP	: SET_BIT(TIMSK,TIMSK_OCIE2 );break;
     b16:	a9 e5       	ldi	r26, 0x59	; 89
     b18:	b0 e0       	ldi	r27, 0x00	; 0
     b1a:	e9 e5       	ldi	r30, 0x59	; 89
     b1c:	f0 e0       	ldi	r31, 0x00	; 0
     b1e:	80 81       	ld	r24, Z
     b20:	80 68       	ori	r24, 0x80	; 128
     b22:	8c 93       	st	X, r24
     b24:	b8 c0       	rjmp	.+368    	; 0xc96 <TIMER_u8SetIntStatus+0x20a>
		case  INT_TIMER2_OVF	: SET_BIT(TIMSK,TIMSK_TOIE2 );break;
     b26:	a9 e5       	ldi	r26, 0x59	; 89
     b28:	b0 e0       	ldi	r27, 0x00	; 0
     b2a:	e9 e5       	ldi	r30, 0x59	; 89
     b2c:	f0 e0       	ldi	r31, 0x00	; 0
     b2e:	80 81       	ld	r24, Z
     b30:	80 64       	ori	r24, 0x40	; 64
     b32:	8c 93       	st	X, r24
     b34:	b0 c0       	rjmp	.+352    	; 0xc96 <TIMER_u8SetIntStatus+0x20a>
		case  INT_TIMER1_CAPT	: SET_BIT(TIMSK,TIMSK_TICIE1);break;
     b36:	a9 e5       	ldi	r26, 0x59	; 89
     b38:	b0 e0       	ldi	r27, 0x00	; 0
     b3a:	e9 e5       	ldi	r30, 0x59	; 89
     b3c:	f0 e0       	ldi	r31, 0x00	; 0
     b3e:	80 81       	ld	r24, Z
     b40:	80 62       	ori	r24, 0x20	; 32
     b42:	8c 93       	st	X, r24
     b44:	a8 c0       	rjmp	.+336    	; 0xc96 <TIMER_u8SetIntStatus+0x20a>
		case  INT_TIMER1A_COMP	: SET_BIT(TIMSK,TIMSK_OCIE1A);break;
     b46:	a9 e5       	ldi	r26, 0x59	; 89
     b48:	b0 e0       	ldi	r27, 0x00	; 0
     b4a:	e9 e5       	ldi	r30, 0x59	; 89
     b4c:	f0 e0       	ldi	r31, 0x00	; 0
     b4e:	80 81       	ld	r24, Z
     b50:	80 61       	ori	r24, 0x10	; 16
     b52:	8c 93       	st	X, r24
     b54:	a0 c0       	rjmp	.+320    	; 0xc96 <TIMER_u8SetIntStatus+0x20a>
		case  INT_TIMER1B_COMP  : SET_BIT(TIMSK,TIMSK_OCIE1B);break;
     b56:	a9 e5       	ldi	r26, 0x59	; 89
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	e9 e5       	ldi	r30, 0x59	; 89
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	80 81       	ld	r24, Z
     b60:	88 60       	ori	r24, 0x08	; 8
     b62:	8c 93       	st	X, r24
     b64:	98 c0       	rjmp	.+304    	; 0xc96 <TIMER_u8SetIntStatus+0x20a>
		case  INT_TIMER1_OVF 	: SET_BIT(TIMSK,TIMSK_TOIE1 );break;
     b66:	a9 e5       	ldi	r26, 0x59	; 89
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	e9 e5       	ldi	r30, 0x59	; 89
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	80 81       	ld	r24, Z
     b70:	84 60       	ori	r24, 0x04	; 4
     b72:	8c 93       	st	X, r24
     b74:	90 c0       	rjmp	.+288    	; 0xc96 <TIMER_u8SetIntStatus+0x20a>
		case  INT_TIMER0_COMP	: SET_BIT(TIMSK,TIMSK_OCIE0 );break;
     b76:	a9 e5       	ldi	r26, 0x59	; 89
     b78:	b0 e0       	ldi	r27, 0x00	; 0
     b7a:	e9 e5       	ldi	r30, 0x59	; 89
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	80 81       	ld	r24, Z
     b80:	82 60       	ori	r24, 0x02	; 2
     b82:	8c 93       	st	X, r24
     b84:	88 c0       	rjmp	.+272    	; 0xc96 <TIMER_u8SetIntStatus+0x20a>
		case  INT_TIMER0_OVF	: SET_BIT(TIMSK,TIMSK_TOIE0 );break;
     b86:	a9 e5       	ldi	r26, 0x59	; 89
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e9 e5       	ldi	r30, 0x59	; 89
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	81 60       	ori	r24, 0x01	; 1
     b92:	8c 93       	st	X, r24
     b94:	80 c0       	rjmp	.+256    	; 0xc96 <TIMER_u8SetIntStatus+0x20a>
		default : Local_u8ErrorState=NOK;
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	89 83       	std	Y+1, r24	; 0x01
     b9a:	7d c0       	rjmp	.+250    	; 0xc96 <TIMER_u8SetIntStatus+0x20a>
		}
	}
	else if(Copy_u8Status==INT_DISABLE){
     b9c:	8b 81       	ldd	r24, Y+3	; 0x03
     b9e:	82 30       	cpi	r24, 0x02	; 2
     ba0:	09 f0       	breq	.+2      	; 0xba4 <TIMER_u8SetIntStatus+0x118>
     ba2:	77 c0       	rjmp	.+238    	; 0xc92 <TIMER_u8SetIntStatus+0x206>
		switch(Copy_u8InterruptID){
     ba4:	8a 81       	ldd	r24, Y+2	; 0x02
     ba6:	28 2f       	mov	r18, r24
     ba8:	30 e0       	ldi	r19, 0x00	; 0
     baa:	3d 83       	std	Y+5, r19	; 0x05
     bac:	2c 83       	std	Y+4, r18	; 0x04
     bae:	8c 81       	ldd	r24, Y+4	; 0x04
     bb0:	9d 81       	ldd	r25, Y+5	; 0x05
     bb2:	83 30       	cpi	r24, 0x03	; 3
     bb4:	91 05       	cpc	r25, r1
     bb6:	09 f4       	brne	.+2      	; 0xbba <TIMER_u8SetIntStatus+0x12e>
     bb8:	41 c0       	rjmp	.+130    	; 0xc3c <TIMER_u8SetIntStatus+0x1b0>
     bba:	2c 81       	ldd	r18, Y+4	; 0x04
     bbc:	3d 81       	ldd	r19, Y+5	; 0x05
     bbe:	24 30       	cpi	r18, 0x04	; 4
     bc0:	31 05       	cpc	r19, r1
     bc2:	7c f4       	brge	.+30     	; 0xbe2 <TIMER_u8SetIntStatus+0x156>
     bc4:	8c 81       	ldd	r24, Y+4	; 0x04
     bc6:	9d 81       	ldd	r25, Y+5	; 0x05
     bc8:	81 30       	cpi	r24, 0x01	; 1
     bca:	91 05       	cpc	r25, r1
     bcc:	39 f1       	breq	.+78     	; 0xc1c <TIMER_u8SetIntStatus+0x190>
     bce:	2c 81       	ldd	r18, Y+4	; 0x04
     bd0:	3d 81       	ldd	r19, Y+5	; 0x05
     bd2:	22 30       	cpi	r18, 0x02	; 2
     bd4:	31 05       	cpc	r19, r1
     bd6:	d4 f5       	brge	.+116    	; 0xc4c <TIMER_u8SetIntStatus+0x1c0>
     bd8:	8c 81       	ldd	r24, Y+4	; 0x04
     bda:	9d 81       	ldd	r25, Y+5	; 0x05
     bdc:	00 97       	sbiw	r24, 0x00	; 0
     bde:	b1 f0       	breq	.+44     	; 0xc0c <TIMER_u8SetIntStatus+0x180>
     be0:	55 c0       	rjmp	.+170    	; 0xc8c <TIMER_u8SetIntStatus+0x200>
     be2:	2c 81       	ldd	r18, Y+4	; 0x04
     be4:	3d 81       	ldd	r19, Y+5	; 0x05
     be6:	25 30       	cpi	r18, 0x05	; 5
     be8:	31 05       	cpc	r19, r1
     bea:	c1 f1       	breq	.+112    	; 0xc5c <TIMER_u8SetIntStatus+0x1d0>
     bec:	8c 81       	ldd	r24, Y+4	; 0x04
     bee:	9d 81       	ldd	r25, Y+5	; 0x05
     bf0:	85 30       	cpi	r24, 0x05	; 5
     bf2:	91 05       	cpc	r25, r1
     bf4:	dc f0       	brlt	.+54     	; 0xc2c <TIMER_u8SetIntStatus+0x1a0>
     bf6:	2c 81       	ldd	r18, Y+4	; 0x04
     bf8:	3d 81       	ldd	r19, Y+5	; 0x05
     bfa:	26 30       	cpi	r18, 0x06	; 6
     bfc:	31 05       	cpc	r19, r1
     bfe:	b1 f1       	breq	.+108    	; 0xc6c <TIMER_u8SetIntStatus+0x1e0>
     c00:	8c 81       	ldd	r24, Y+4	; 0x04
     c02:	9d 81       	ldd	r25, Y+5	; 0x05
     c04:	87 30       	cpi	r24, 0x07	; 7
     c06:	91 05       	cpc	r25, r1
     c08:	c9 f1       	breq	.+114    	; 0xc7c <TIMER_u8SetIntStatus+0x1f0>
     c0a:	40 c0       	rjmp	.+128    	; 0xc8c <TIMER_u8SetIntStatus+0x200>
		case  INT_TIMER2_COMP	: CLR_BIT(TIMSK,TIMSK_OCIE2 );break;
     c0c:	a9 e5       	ldi	r26, 0x59	; 89
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e9 e5       	ldi	r30, 0x59	; 89
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	8f 77       	andi	r24, 0x7F	; 127
     c18:	8c 93       	st	X, r24
     c1a:	3d c0       	rjmp	.+122    	; 0xc96 <TIMER_u8SetIntStatus+0x20a>
		case  INT_TIMER2_OVF	: CLR_BIT(TIMSK,TIMSK_TOIE2 );break;
     c1c:	a9 e5       	ldi	r26, 0x59	; 89
     c1e:	b0 e0       	ldi	r27, 0x00	; 0
     c20:	e9 e5       	ldi	r30, 0x59	; 89
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	80 81       	ld	r24, Z
     c26:	8f 7b       	andi	r24, 0xBF	; 191
     c28:	8c 93       	st	X, r24
     c2a:	35 c0       	rjmp	.+106    	; 0xc96 <TIMER_u8SetIntStatus+0x20a>
		case  INT_TIMER1_CAPT	: CLR_BIT(TIMSK,TIMSK_TICIE1);break;
     c2c:	a9 e5       	ldi	r26, 0x59	; 89
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	e9 e5       	ldi	r30, 0x59	; 89
     c32:	f0 e0       	ldi	r31, 0x00	; 0
     c34:	80 81       	ld	r24, Z
     c36:	8f 7d       	andi	r24, 0xDF	; 223
     c38:	8c 93       	st	X, r24
     c3a:	2d c0       	rjmp	.+90     	; 0xc96 <TIMER_u8SetIntStatus+0x20a>
		case  INT_TIMER1A_COMP	: CLR_BIT(TIMSK,TIMSK_OCIE1A);break;
     c3c:	a9 e5       	ldi	r26, 0x59	; 89
     c3e:	b0 e0       	ldi	r27, 0x00	; 0
     c40:	e9 e5       	ldi	r30, 0x59	; 89
     c42:	f0 e0       	ldi	r31, 0x00	; 0
     c44:	80 81       	ld	r24, Z
     c46:	8f 7e       	andi	r24, 0xEF	; 239
     c48:	8c 93       	st	X, r24
     c4a:	25 c0       	rjmp	.+74     	; 0xc96 <TIMER_u8SetIntStatus+0x20a>
		case  INT_TIMER1B_COMP  : CLR_BIT(TIMSK,TIMSK_OCIE1B);break;
     c4c:	a9 e5       	ldi	r26, 0x59	; 89
     c4e:	b0 e0       	ldi	r27, 0x00	; 0
     c50:	e9 e5       	ldi	r30, 0x59	; 89
     c52:	f0 e0       	ldi	r31, 0x00	; 0
     c54:	80 81       	ld	r24, Z
     c56:	87 7f       	andi	r24, 0xF7	; 247
     c58:	8c 93       	st	X, r24
     c5a:	1d c0       	rjmp	.+58     	; 0xc96 <TIMER_u8SetIntStatus+0x20a>
		case  INT_TIMER1_OVF 	: CLR_BIT(TIMSK,TIMSK_TOIE1 );break;
     c5c:	a9 e5       	ldi	r26, 0x59	; 89
     c5e:	b0 e0       	ldi	r27, 0x00	; 0
     c60:	e9 e5       	ldi	r30, 0x59	; 89
     c62:	f0 e0       	ldi	r31, 0x00	; 0
     c64:	80 81       	ld	r24, Z
     c66:	8b 7f       	andi	r24, 0xFB	; 251
     c68:	8c 93       	st	X, r24
     c6a:	15 c0       	rjmp	.+42     	; 0xc96 <TIMER_u8SetIntStatus+0x20a>
		case  INT_TIMER0_COMP	: CLR_BIT(TIMSK,TIMSK_OCIE0 );break;
     c6c:	a9 e5       	ldi	r26, 0x59	; 89
     c6e:	b0 e0       	ldi	r27, 0x00	; 0
     c70:	e9 e5       	ldi	r30, 0x59	; 89
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	80 81       	ld	r24, Z
     c76:	8d 7f       	andi	r24, 0xFD	; 253
     c78:	8c 93       	st	X, r24
     c7a:	0d c0       	rjmp	.+26     	; 0xc96 <TIMER_u8SetIntStatus+0x20a>
		case  INT_TIMER0_OVF	: CLR_BIT(TIMSK,TIMSK_TOIE0 );break;
     c7c:	a9 e5       	ldi	r26, 0x59	; 89
     c7e:	b0 e0       	ldi	r27, 0x00	; 0
     c80:	e9 e5       	ldi	r30, 0x59	; 89
     c82:	f0 e0       	ldi	r31, 0x00	; 0
     c84:	80 81       	ld	r24, Z
     c86:	8e 7f       	andi	r24, 0xFE	; 254
     c88:	8c 93       	st	X, r24
     c8a:	05 c0       	rjmp	.+10     	; 0xc96 <TIMER_u8SetIntStatus+0x20a>
		default : Local_u8ErrorState=NOK;
     c8c:	81 e0       	ldi	r24, 0x01	; 1
     c8e:	89 83       	std	Y+1, r24	; 0x01
     c90:	02 c0       	rjmp	.+4      	; 0xc96 <TIMER_u8SetIntStatus+0x20a>
		}
	}
	else{
		Local_u8ErrorState=NOK;
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
     c96:	89 81       	ldd	r24, Y+1	; 0x01
}
     c98:	27 96       	adiw	r28, 0x07	; 7
     c9a:	0f b6       	in	r0, 0x3f	; 63
     c9c:	f8 94       	cli
     c9e:	de bf       	out	0x3e, r29	; 62
     ca0:	0f be       	out	0x3f, r0	; 63
     ca2:	cd bf       	out	0x3d, r28	; 61
     ca4:	cf 91       	pop	r28
     ca6:	df 91       	pop	r29
     ca8:	08 95       	ret

00000caa <TIMER0_u8Init>:

/********************************************************TIMER0**********************************************************
 ************************************************************************************************************************/


u8 TIMER0_u8Init(Timer_t* Copy_psTimer){
     caa:	df 93       	push	r29
     cac:	cf 93       	push	r28
     cae:	00 d0       	rcall	.+0      	; 0xcb0 <TIMER0_u8Init+0x6>
     cb0:	0f 92       	push	r0
     cb2:	cd b7       	in	r28, 0x3d	; 61
     cb4:	de b7       	in	r29, 0x3e	; 62
     cb6:	9b 83       	std	Y+3, r25	; 0x03
     cb8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
     cba:	19 82       	std	Y+1, r1	; 0x01
	//Initialize Wave Generation Mode
	if(Copy_psTimer!=NULL){
     cbc:	8a 81       	ldd	r24, Y+2	; 0x02
     cbe:	9b 81       	ldd	r25, Y+3	; 0x03
     cc0:	00 97       	sbiw	r24, 0x00	; 0
     cc2:	09 f4       	brne	.+2      	; 0xcc6 <TIMER0_u8Init+0x1c>
     cc4:	b6 c0       	rjmp	.+364    	; 0xe32 <TIMER0_u8Init+0x188>
		if(Copy_psTimer->WaveGenMode==TIMER_NORMAL){
     cc6:	ea 81       	ldd	r30, Y+2	; 0x02
     cc8:	fb 81       	ldd	r31, Y+3	; 0x03
     cca:	80 81       	ld	r24, Z
     ccc:	81 30       	cpi	r24, 0x01	; 1
     cce:	79 f4       	brne	.+30     	; 0xcee <TIMER0_u8Init+0x44>
			CLR_BIT(TCCR0,TCCR0_WGM01);
     cd0:	a3 e5       	ldi	r26, 0x53	; 83
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	e3 e5       	ldi	r30, 0x53	; 83
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	87 7f       	andi	r24, 0xF7	; 247
     cdc:	8c 93       	st	X, r24
			CLR_BIT(TCCR0,TCCR0_WGM00);
     cde:	a3 e5       	ldi	r26, 0x53	; 83
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e3 e5       	ldi	r30, 0x53	; 83
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	8f 7b       	andi	r24, 0xBF	; 191
     cea:	8c 93       	st	X, r24
     cec:	3e c0       	rjmp	.+124    	; 0xd6a <TIMER0_u8Init+0xc0>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER_PHC_PWM){
     cee:	ea 81       	ldd	r30, Y+2	; 0x02
     cf0:	fb 81       	ldd	r31, Y+3	; 0x03
     cf2:	80 81       	ld	r24, Z
     cf4:	82 30       	cpi	r24, 0x02	; 2
     cf6:	79 f4       	brne	.+30     	; 0xd16 <TIMER0_u8Init+0x6c>
			CLR_BIT(TCCR0,TCCR0_WGM01);
     cf8:	a3 e5       	ldi	r26, 0x53	; 83
     cfa:	b0 e0       	ldi	r27, 0x00	; 0
     cfc:	e3 e5       	ldi	r30, 0x53	; 83
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	80 81       	ld	r24, Z
     d02:	87 7f       	andi	r24, 0xF7	; 247
     d04:	8c 93       	st	X, r24
			SET_BIT(TCCR0,TCCR0_WGM00);
     d06:	a3 e5       	ldi	r26, 0x53	; 83
     d08:	b0 e0       	ldi	r27, 0x00	; 0
     d0a:	e3 e5       	ldi	r30, 0x53	; 83
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	80 81       	ld	r24, Z
     d10:	80 64       	ori	r24, 0x40	; 64
     d12:	8c 93       	st	X, r24
     d14:	2a c0       	rjmp	.+84     	; 0xd6a <TIMER0_u8Init+0xc0>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER_CTC){
     d16:	ea 81       	ldd	r30, Y+2	; 0x02
     d18:	fb 81       	ldd	r31, Y+3	; 0x03
     d1a:	80 81       	ld	r24, Z
     d1c:	83 30       	cpi	r24, 0x03	; 3
     d1e:	79 f4       	brne	.+30     	; 0xd3e <TIMER0_u8Init+0x94>
			SET_BIT(TCCR0,TCCR0_WGM01);
     d20:	a3 e5       	ldi	r26, 0x53	; 83
     d22:	b0 e0       	ldi	r27, 0x00	; 0
     d24:	e3 e5       	ldi	r30, 0x53	; 83
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	80 81       	ld	r24, Z
     d2a:	88 60       	ori	r24, 0x08	; 8
     d2c:	8c 93       	st	X, r24
			CLR_BIT(TCCR0,TCCR0_WGM00);
     d2e:	a3 e5       	ldi	r26, 0x53	; 83
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	e3 e5       	ldi	r30, 0x53	; 83
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	80 81       	ld	r24, Z
     d38:	8f 7b       	andi	r24, 0xBF	; 191
     d3a:	8c 93       	st	X, r24
     d3c:	16 c0       	rjmp	.+44     	; 0xd6a <TIMER0_u8Init+0xc0>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER_FAST_PWM){
     d3e:	ea 81       	ldd	r30, Y+2	; 0x02
     d40:	fb 81       	ldd	r31, Y+3	; 0x03
     d42:	80 81       	ld	r24, Z
     d44:	84 30       	cpi	r24, 0x04	; 4
     d46:	79 f4       	brne	.+30     	; 0xd66 <TIMER0_u8Init+0xbc>
			SET_BIT(TCCR0,TCCR0_WGM01);
     d48:	a3 e5       	ldi	r26, 0x53	; 83
     d4a:	b0 e0       	ldi	r27, 0x00	; 0
     d4c:	e3 e5       	ldi	r30, 0x53	; 83
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	80 81       	ld	r24, Z
     d52:	88 60       	ori	r24, 0x08	; 8
     d54:	8c 93       	st	X, r24
			SET_BIT(TCCR0,TCCR0_WGM00);
     d56:	a3 e5       	ldi	r26, 0x53	; 83
     d58:	b0 e0       	ldi	r27, 0x00	; 0
     d5a:	e3 e5       	ldi	r30, 0x53	; 83
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	80 81       	ld	r24, Z
     d60:	80 64       	ori	r24, 0x40	; 64
     d62:	8c 93       	st	X, r24
     d64:	02 c0       	rjmp	.+4      	; 0xd6a <TIMER0_u8Init+0xc0>
		}
		else{
			Local_u8ErrorState=NOK;
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	89 83       	std	Y+1, r24	; 0x01
		}
		//Initialize Compare Match Output Mode
		TCCR0&=COMP_MATCH_OUT_MASK;
     d6a:	a3 e5       	ldi	r26, 0x53	; 83
     d6c:	b0 e0       	ldi	r27, 0x00	; 0
     d6e:	e3 e5       	ldi	r30, 0x53	; 83
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	80 81       	ld	r24, Z
     d74:	8f 7c       	andi	r24, 0xCF	; 207
     d76:	8c 93       	st	X, r24
		TCCR0|=((Copy_psTimer->CompareMatchOutputMode)<<4);
     d78:	a3 e5       	ldi	r26, 0x53	; 83
     d7a:	b0 e0       	ldi	r27, 0x00	; 0
     d7c:	e3 e5       	ldi	r30, 0x53	; 83
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	80 81       	ld	r24, Z
     d82:	28 2f       	mov	r18, r24
     d84:	ea 81       	ldd	r30, Y+2	; 0x02
     d86:	fb 81       	ldd	r31, Y+3	; 0x03
     d88:	82 81       	ldd	r24, Z+2	; 0x02
     d8a:	88 2f       	mov	r24, r24
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	82 95       	swap	r24
     d90:	92 95       	swap	r25
     d92:	90 7f       	andi	r25, 0xF0	; 240
     d94:	98 27       	eor	r25, r24
     d96:	80 7f       	andi	r24, 0xF0	; 240
     d98:	98 27       	eor	r25, r24
     d9a:	82 2b       	or	r24, r18
     d9c:	8c 93       	st	X, r24
		//Initialize Interrupt Enable pins
		if(Copy_psTimer->CompareMatchInterrupt==INT_ENABLE){
     d9e:	ea 81       	ldd	r30, Y+2	; 0x02
     da0:	fb 81       	ldd	r31, Y+3	; 0x03
     da2:	83 81       	ldd	r24, Z+3	; 0x03
     da4:	81 30       	cpi	r24, 0x01	; 1
     da6:	41 f4       	brne	.+16     	; 0xdb8 <TIMER0_u8Init+0x10e>
			SET_BIT(TIMSK,TIMSK_OCIE0);
     da8:	a9 e5       	ldi	r26, 0x59	; 89
     daa:	b0 e0       	ldi	r27, 0x00	; 0
     dac:	e9 e5       	ldi	r30, 0x59	; 89
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	80 81       	ld	r24, Z
     db2:	82 60       	ori	r24, 0x02	; 2
     db4:	8c 93       	st	X, r24
     db6:	0f c0       	rjmp	.+30     	; 0xdd6 <TIMER0_u8Init+0x12c>
		}
		else if(Copy_psTimer->CompareMatchInterrupt==INT_DISABLE){
     db8:	ea 81       	ldd	r30, Y+2	; 0x02
     dba:	fb 81       	ldd	r31, Y+3	; 0x03
     dbc:	83 81       	ldd	r24, Z+3	; 0x03
     dbe:	82 30       	cpi	r24, 0x02	; 2
     dc0:	41 f4       	brne	.+16     	; 0xdd2 <TIMER0_u8Init+0x128>
			CLR_BIT(TIMSK,TIMSK_OCIE0);
     dc2:	a9 e5       	ldi	r26, 0x59	; 89
     dc4:	b0 e0       	ldi	r27, 0x00	; 0
     dc6:	e9 e5       	ldi	r30, 0x59	; 89
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	80 81       	ld	r24, Z
     dcc:	8d 7f       	andi	r24, 0xFD	; 253
     dce:	8c 93       	st	X, r24
     dd0:	02 c0       	rjmp	.+4      	; 0xdd6 <TIMER0_u8Init+0x12c>
		}
		else{
			Local_u8ErrorState=NOK;
     dd2:	81 e0       	ldi	r24, 0x01	; 1
     dd4:	89 83       	std	Y+1, r24	; 0x01
		}

		if(Copy_psTimer->OverFlowInterrupt==INT_ENABLE){
     dd6:	ea 81       	ldd	r30, Y+2	; 0x02
     dd8:	fb 81       	ldd	r31, Y+3	; 0x03
     dda:	84 81       	ldd	r24, Z+4	; 0x04
     ddc:	81 30       	cpi	r24, 0x01	; 1
     dde:	41 f4       	brne	.+16     	; 0xdf0 <TIMER0_u8Init+0x146>
			SET_BIT(TIMSK,TIMSK_TOIE0);
     de0:	a9 e5       	ldi	r26, 0x59	; 89
     de2:	b0 e0       	ldi	r27, 0x00	; 0
     de4:	e9 e5       	ldi	r30, 0x59	; 89
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 81       	ld	r24, Z
     dea:	81 60       	ori	r24, 0x01	; 1
     dec:	8c 93       	st	X, r24
     dee:	0f c0       	rjmp	.+30     	; 0xe0e <TIMER0_u8Init+0x164>
		}
		else if(Copy_psTimer->OverFlowInterrupt==INT_DISABLE){
     df0:	ea 81       	ldd	r30, Y+2	; 0x02
     df2:	fb 81       	ldd	r31, Y+3	; 0x03
     df4:	84 81       	ldd	r24, Z+4	; 0x04
     df6:	82 30       	cpi	r24, 0x02	; 2
     df8:	41 f4       	brne	.+16     	; 0xe0a <TIMER0_u8Init+0x160>
			CLR_BIT(TIMSK,TIMSK_TOIE0);
     dfa:	a9 e5       	ldi	r26, 0x59	; 89
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	e9 e5       	ldi	r30, 0x59	; 89
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	8e 7f       	andi	r24, 0xFE	; 254
     e06:	8c 93       	st	X, r24
     e08:	02 c0       	rjmp	.+4      	; 0xe0e <TIMER0_u8Init+0x164>
		}
		else{
			Local_u8ErrorState=NOK;
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	89 83       	std	Y+1, r24	; 0x01
		}

		//Initialize Prescaler
		TCCR0&=PRESCALER_MASK;
     e0e:	a3 e5       	ldi	r26, 0x53	; 83
     e10:	b0 e0       	ldi	r27, 0x00	; 0
     e12:	e3 e5       	ldi	r30, 0x53	; 83
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	80 81       	ld	r24, Z
     e18:	88 7f       	andi	r24, 0xF8	; 248
     e1a:	8c 93       	st	X, r24
		TCCR0|=Copy_psTimer->Prescaler;
     e1c:	a3 e5       	ldi	r26, 0x53	; 83
     e1e:	b0 e0       	ldi	r27, 0x00	; 0
     e20:	e3 e5       	ldi	r30, 0x53	; 83
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	90 81       	ld	r25, Z
     e26:	ea 81       	ldd	r30, Y+2	; 0x02
     e28:	fb 81       	ldd	r31, Y+3	; 0x03
     e2a:	81 81       	ldd	r24, Z+1	; 0x01
     e2c:	89 2b       	or	r24, r25
     e2e:	8c 93       	st	X, r24
     e30:	02 c0       	rjmp	.+4      	; 0xe36 <TIMER0_u8Init+0x18c>
	}
	else{
		Local_u8ErrorState=NULL_POINTER;
     e32:	82 e0       	ldi	r24, 0x02	; 2
     e34:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
     e36:	89 81       	ldd	r24, Y+1	; 0x01
}
     e38:	0f 90       	pop	r0
     e3a:	0f 90       	pop	r0
     e3c:	0f 90       	pop	r0
     e3e:	cf 91       	pop	r28
     e40:	df 91       	pop	r29
     e42:	08 95       	ret

00000e44 <TIMER0_delay_ms>:


u8 TIMER0_delay_ms(Timer_t* Copy_psTimer,u16 Copy_u16Time){
     e44:	df 93       	push	r29
     e46:	cf 93       	push	r28
     e48:	cd b7       	in	r28, 0x3d	; 61
     e4a:	de b7       	in	r29, 0x3e	; 62
     e4c:	6a 97       	sbiw	r28, 0x1a	; 26
     e4e:	0f b6       	in	r0, 0x3f	; 63
     e50:	f8 94       	cli
     e52:	de bf       	out	0x3e, r29	; 62
     e54:	0f be       	out	0x3f, r0	; 63
     e56:	cd bf       	out	0x3d, r28	; 61
     e58:	9b 8b       	std	Y+19, r25	; 0x13
     e5a:	8a 8b       	std	Y+18, r24	; 0x12
     e5c:	7d 8b       	std	Y+21, r23	; 0x15
     e5e:	6c 8b       	std	Y+20, r22	; 0x14
	u8 Local_u8ErrorState=OK,Local_u8Break=1; u16 Local_u16Counter=0;u32 Local_u32usTime,Local_u32CompMatchCount;
     e60:	1c 86       	std	Y+12, r1	; 0x0c
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	8b 87       	std	Y+11, r24	; 0x0b
     e66:	1a 86       	std	Y+10, r1	; 0x0a
     e68:	19 86       	std	Y+9, r1	; 0x09
	if(Copy_psTimer!=NULL){
     e6a:	8a 89       	ldd	r24, Y+18	; 0x12
     e6c:	9b 89       	ldd	r25, Y+19	; 0x13
     e6e:	00 97       	sbiw	r24, 0x00	; 0
     e70:	09 f4       	brne	.+2      	; 0xe74 <TIMER0_delay_ms+0x30>
     e72:	84 c0       	rjmp	.+264    	; 0xf7c <TIMER0_delay_ms+0x138>
		Timer_t Timer ={TIMER_CTC,PRSCLR_DIV_BY_8,OCM_DISCONNECT,INT_DISABLE,INT_DISABLE};
     e74:	ce 01       	movw	r24, r28
     e76:	0d 96       	adiw	r24, 0x0d	; 13
     e78:	9f 8b       	std	Y+23, r25	; 0x17
     e7a:	8e 8b       	std	Y+22, r24	; 0x16
     e7c:	e0 e6       	ldi	r30, 0x60	; 96
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	f9 8f       	std	Y+25, r31	; 0x19
     e82:	e8 8f       	std	Y+24, r30	; 0x18
     e84:	f5 e0       	ldi	r31, 0x05	; 5
     e86:	fa 8f       	std	Y+26, r31	; 0x1a
     e88:	e8 8d       	ldd	r30, Y+24	; 0x18
     e8a:	f9 8d       	ldd	r31, Y+25	; 0x19
     e8c:	00 80       	ld	r0, Z
     e8e:	88 8d       	ldd	r24, Y+24	; 0x18
     e90:	99 8d       	ldd	r25, Y+25	; 0x19
     e92:	01 96       	adiw	r24, 0x01	; 1
     e94:	99 8f       	std	Y+25, r25	; 0x19
     e96:	88 8f       	std	Y+24, r24	; 0x18
     e98:	ee 89       	ldd	r30, Y+22	; 0x16
     e9a:	ff 89       	ldd	r31, Y+23	; 0x17
     e9c:	00 82       	st	Z, r0
     e9e:	8e 89       	ldd	r24, Y+22	; 0x16
     ea0:	9f 89       	ldd	r25, Y+23	; 0x17
     ea2:	01 96       	adiw	r24, 0x01	; 1
     ea4:	9f 8b       	std	Y+23, r25	; 0x17
     ea6:	8e 8b       	std	Y+22, r24	; 0x16
     ea8:	9a 8d       	ldd	r25, Y+26	; 0x1a
     eaa:	91 50       	subi	r25, 0x01	; 1
     eac:	9a 8f       	std	Y+26, r25	; 0x1a
     eae:	ea 8d       	ldd	r30, Y+26	; 0x1a
     eb0:	ee 23       	and	r30, r30
     eb2:	51 f7       	brne	.-44     	; 0xe88 <TIMER0_delay_ms+0x44>
		TIMER_u8SetCompMatch(TIMER0,250);
     eb4:	80 e0       	ldi	r24, 0x00	; 0
     eb6:	6a ef       	ldi	r22, 0xFA	; 250
     eb8:	70 e0       	ldi	r23, 0x00	; 0
     eba:	0e 94 e6 04 	call	0x9cc	; 0x9cc <TIMER_u8SetCompMatch>
		Local_u32usTime=(u32)Copy_u16Time*1000UL;
     ebe:	8c 89       	ldd	r24, Y+20	; 0x14
     ec0:	9d 89       	ldd	r25, Y+21	; 0x15
     ec2:	cc 01       	movw	r24, r24
     ec4:	a0 e0       	ldi	r26, 0x00	; 0
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	28 ee       	ldi	r18, 0xE8	; 232
     eca:	33 e0       	ldi	r19, 0x03	; 3
     ecc:	40 e0       	ldi	r20, 0x00	; 0
     ece:	50 e0       	ldi	r21, 0x00	; 0
     ed0:	bc 01       	movw	r22, r24
     ed2:	cd 01       	movw	r24, r26
     ed4:	0e 94 28 11 	call	0x2250	; 0x2250 <__mulsi3>
     ed8:	dc 01       	movw	r26, r24
     eda:	cb 01       	movw	r24, r22
     edc:	8d 83       	std	Y+5, r24	; 0x05
     ede:	9e 83       	std	Y+6, r25	; 0x06
     ee0:	af 83       	std	Y+7, r26	; 0x07
     ee2:	b8 87       	std	Y+8, r27	; 0x08
		Local_u32CompMatchCount=Local_u32usTime/250;
     ee4:	8d 81       	ldd	r24, Y+5	; 0x05
     ee6:	9e 81       	ldd	r25, Y+6	; 0x06
     ee8:	af 81       	ldd	r26, Y+7	; 0x07
     eea:	b8 85       	ldd	r27, Y+8	; 0x08
     eec:	2a ef       	ldi	r18, 0xFA	; 250
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	40 e0       	ldi	r20, 0x00	; 0
     ef2:	50 e0       	ldi	r21, 0x00	; 0
     ef4:	bc 01       	movw	r22, r24
     ef6:	cd 01       	movw	r24, r26
     ef8:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <__udivmodsi4>
     efc:	da 01       	movw	r26, r20
     efe:	c9 01       	movw	r24, r18
     f00:	89 83       	std	Y+1, r24	; 0x01
     f02:	9a 83       	std	Y+2, r25	; 0x02
     f04:	ab 83       	std	Y+3, r26	; 0x03
     f06:	bc 83       	std	Y+4, r27	; 0x04
		TIMER0_u8Init(&Timer);
     f08:	ce 01       	movw	r24, r28
     f0a:	0d 96       	adiw	r24, 0x0d	; 13
     f0c:	0e 94 55 06 	call	0xcaa	; 0xcaa <TIMER0_u8Init>
     f10:	2d c0       	rjmp	.+90     	; 0xf6c <TIMER0_delay_ms+0x128>
		while(Local_u8Break==1){
			if(GET_BIT(TIFR,TIFR_OCF0)==1){
     f12:	e8 e5       	ldi	r30, 0x58	; 88
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	86 95       	lsr	r24
     f1a:	88 2f       	mov	r24, r24
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	81 70       	andi	r24, 0x01	; 1
     f20:	90 70       	andi	r25, 0x00	; 0
     f22:	88 23       	and	r24, r24
     f24:	19 f1       	breq	.+70     	; 0xf6c <TIMER0_delay_ms+0x128>
				if(Local_u16Counter==Local_u32CompMatchCount){
     f26:	89 85       	ldd	r24, Y+9	; 0x09
     f28:	9a 85       	ldd	r25, Y+10	; 0x0a
     f2a:	9c 01       	movw	r18, r24
     f2c:	40 e0       	ldi	r20, 0x00	; 0
     f2e:	50 e0       	ldi	r21, 0x00	; 0
     f30:	89 81       	ldd	r24, Y+1	; 0x01
     f32:	9a 81       	ldd	r25, Y+2	; 0x02
     f34:	ab 81       	ldd	r26, Y+3	; 0x03
     f36:	bc 81       	ldd	r27, Y+4	; 0x04
     f38:	28 17       	cp	r18, r24
     f3a:	39 07       	cpc	r19, r25
     f3c:	4a 07       	cpc	r20, r26
     f3e:	5b 07       	cpc	r21, r27
     f40:	49 f4       	brne	.+18     	; 0xf54 <TIMER0_delay_ms+0x110>
					Local_u8Break=0;
     f42:	1b 86       	std	Y+11, r1	; 0x0b
					SET_BIT(TIFR,TIFR_OCF0);
     f44:	a8 e5       	ldi	r26, 0x58	; 88
     f46:	b0 e0       	ldi	r27, 0x00	; 0
     f48:	e8 e5       	ldi	r30, 0x58	; 88
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	82 60       	ori	r24, 0x02	; 2
     f50:	8c 93       	st	X, r24
     f52:	0c c0       	rjmp	.+24     	; 0xf6c <TIMER0_delay_ms+0x128>
				}
				else{
					Local_u16Counter++;
     f54:	89 85       	ldd	r24, Y+9	; 0x09
     f56:	9a 85       	ldd	r25, Y+10	; 0x0a
     f58:	01 96       	adiw	r24, 0x01	; 1
     f5a:	9a 87       	std	Y+10, r25	; 0x0a
     f5c:	89 87       	std	Y+9, r24	; 0x09
					SET_BIT(TIFR,TIFR_OCF0);
     f5e:	a8 e5       	ldi	r26, 0x58	; 88
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	e8 e5       	ldi	r30, 0x58	; 88
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	82 60       	ori	r24, 0x02	; 2
     f6a:	8c 93       	st	X, r24
		Timer_t Timer ={TIMER_CTC,PRSCLR_DIV_BY_8,OCM_DISCONNECT,INT_DISABLE,INT_DISABLE};
		TIMER_u8SetCompMatch(TIMER0,250);
		Local_u32usTime=(u32)Copy_u16Time*1000UL;
		Local_u32CompMatchCount=Local_u32usTime/250;
		TIMER0_u8Init(&Timer);
		while(Local_u8Break==1){
     f6c:	8b 85       	ldd	r24, Y+11	; 0x0b
     f6e:	81 30       	cpi	r24, 0x01	; 1
     f70:	81 f2       	breq	.-96     	; 0xf12 <TIMER0_delay_ms+0xce>
					Local_u16Counter++;
					SET_BIT(TIFR,TIFR_OCF0);
				}
			}
		}
		TIMER0_u8Init(Copy_psTimer);
     f72:	8a 89       	ldd	r24, Y+18	; 0x12
     f74:	9b 89       	ldd	r25, Y+19	; 0x13
     f76:	0e 94 55 06 	call	0xcaa	; 0xcaa <TIMER0_u8Init>
     f7a:	02 c0       	rjmp	.+4      	; 0xf80 <TIMER0_delay_ms+0x13c>

	}
	else{
		Local_u8ErrorState=NULL_POINTER;
     f7c:	82 e0       	ldi	r24, 0x02	; 2
     f7e:	8c 87       	std	Y+12, r24	; 0x0c
	}
	return Local_u8ErrorState;
     f80:	8c 85       	ldd	r24, Y+12	; 0x0c
}
     f82:	6a 96       	adiw	r28, 0x1a	; 26
     f84:	0f b6       	in	r0, 0x3f	; 63
     f86:	f8 94       	cli
     f88:	de bf       	out	0x3e, r29	; 62
     f8a:	0f be       	out	0x3f, r0	; 63
     f8c:	cd bf       	out	0x3d, r28	; 61
     f8e:	cf 91       	pop	r28
     f90:	df 91       	pop	r29
     f92:	08 95       	ret

00000f94 <TIMER1_u8Init>:

/********************************************************TIMER1**********************************************************
 ************************************************************************************************************************/


u8 TIMER1_u8Init(Timer1_t* Copy_psTimer){
     f94:	df 93       	push	r29
     f96:	cf 93       	push	r28
     f98:	00 d0       	rcall	.+0      	; 0xf9a <TIMER1_u8Init+0x6>
     f9a:	0f 92       	push	r0
     f9c:	cd b7       	in	r28, 0x3d	; 61
     f9e:	de b7       	in	r29, 0x3e	; 62
     fa0:	9b 83       	std	Y+3, r25	; 0x03
     fa2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
     fa4:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_psTimer!=NULL){
     fa6:	8a 81       	ldd	r24, Y+2	; 0x02
     fa8:	9b 81       	ldd	r25, Y+3	; 0x03
     faa:	00 97       	sbiw	r24, 0x00	; 0
     fac:	09 f4       	brne	.+2      	; 0xfb0 <TIMER1_u8Init+0x1c>
     fae:	96 c2       	rjmp	.+1324   	; 0x14dc <TIMER1_u8Init+0x548>
		//initialize wave generation mode
		if(Copy_psTimer->WaveGenMode==TIMER1_NORMAL){
     fb0:	ea 81       	ldd	r30, Y+2	; 0x02
     fb2:	fb 81       	ldd	r31, Y+3	; 0x03
     fb4:	80 81       	ld	r24, Z
     fb6:	81 30       	cpi	r24, 0x01	; 1
     fb8:	e9 f4       	brne	.+58     	; 0xff4 <TIMER1_u8Init+0x60>
			CLR_BIT(TCCR1B,TCCR1B_WGM13);
     fba:	ae e4       	ldi	r26, 0x4E	; 78
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	ee e4       	ldi	r30, 0x4E	; 78
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	8f 7e       	andi	r24, 0xEF	; 239
     fc6:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B,TCCR1B_WGM12);
     fc8:	ae e4       	ldi	r26, 0x4E	; 78
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	ee e4       	ldi	r30, 0x4E	; 78
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	87 7f       	andi	r24, 0xF7	; 247
     fd4:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM11);
     fd6:	af e4       	ldi	r26, 0x4F	; 79
     fd8:	b0 e0       	ldi	r27, 0x00	; 0
     fda:	ef e4       	ldi	r30, 0x4F	; 79
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	8d 7f       	andi	r24, 0xFD	; 253
     fe2:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM10);
     fe4:	af e4       	ldi	r26, 0x4F	; 79
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	ef e4       	ldi	r30, 0x4F	; 79
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	8e 7f       	andi	r24, 0xFE	; 254
     ff0:	8c 93       	st	X, r24
     ff2:	de c1       	rjmp	.+956    	; 0x13b0 <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_PHC_PWM_8_BIT){
     ff4:	ea 81       	ldd	r30, Y+2	; 0x02
     ff6:	fb 81       	ldd	r31, Y+3	; 0x03
     ff8:	80 81       	ld	r24, Z
     ffa:	82 30       	cpi	r24, 0x02	; 2
     ffc:	e9 f4       	brne	.+58     	; 0x1038 <TIMER1_u8Init+0xa4>
			CLR_BIT(TCCR1B,TCCR1B_WGM13);
     ffe:	ae e4       	ldi	r26, 0x4E	; 78
    1000:	b0 e0       	ldi	r27, 0x00	; 0
    1002:	ee e4       	ldi	r30, 0x4E	; 78
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	80 81       	ld	r24, Z
    1008:	8f 7e       	andi	r24, 0xEF	; 239
    100a:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B,TCCR1B_WGM12);
    100c:	ae e4       	ldi	r26, 0x4E	; 78
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	ee e4       	ldi	r30, 0x4E	; 78
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	87 7f       	andi	r24, 0xF7	; 247
    1018:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM11);
    101a:	af e4       	ldi	r26, 0x4F	; 79
    101c:	b0 e0       	ldi	r27, 0x00	; 0
    101e:	ef e4       	ldi	r30, 0x4F	; 79
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	8d 7f       	andi	r24, 0xFD	; 253
    1026:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM10);
    1028:	af e4       	ldi	r26, 0x4F	; 79
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	ef e4       	ldi	r30, 0x4F	; 79
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	81 60       	ori	r24, 0x01	; 1
    1034:	8c 93       	st	X, r24
    1036:	bc c1       	rjmp	.+888    	; 0x13b0 <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_PHC_PWM_9_BIT){
    1038:	ea 81       	ldd	r30, Y+2	; 0x02
    103a:	fb 81       	ldd	r31, Y+3	; 0x03
    103c:	80 81       	ld	r24, Z
    103e:	83 30       	cpi	r24, 0x03	; 3
    1040:	e9 f4       	brne	.+58     	; 0x107c <TIMER1_u8Init+0xe8>
			CLR_BIT(TCCR1B,TCCR1B_WGM13);
    1042:	ae e4       	ldi	r26, 0x4E	; 78
    1044:	b0 e0       	ldi	r27, 0x00	; 0
    1046:	ee e4       	ldi	r30, 0x4E	; 78
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	80 81       	ld	r24, Z
    104c:	8f 7e       	andi	r24, 0xEF	; 239
    104e:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B,TCCR1B_WGM12);
    1050:	ae e4       	ldi	r26, 0x4E	; 78
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	ee e4       	ldi	r30, 0x4E	; 78
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	87 7f       	andi	r24, 0xF7	; 247
    105c:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM11);
    105e:	af e4       	ldi	r26, 0x4F	; 79
    1060:	b0 e0       	ldi	r27, 0x00	; 0
    1062:	ef e4       	ldi	r30, 0x4F	; 79
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	80 81       	ld	r24, Z
    1068:	82 60       	ori	r24, 0x02	; 2
    106a:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM10);
    106c:	af e4       	ldi	r26, 0x4F	; 79
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	ef e4       	ldi	r30, 0x4F	; 79
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	8e 7f       	andi	r24, 0xFE	; 254
    1078:	8c 93       	st	X, r24
    107a:	9a c1       	rjmp	.+820    	; 0x13b0 <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_PHC_PWM_10_BIT){
    107c:	ea 81       	ldd	r30, Y+2	; 0x02
    107e:	fb 81       	ldd	r31, Y+3	; 0x03
    1080:	80 81       	ld	r24, Z
    1082:	84 30       	cpi	r24, 0x04	; 4
    1084:	e9 f4       	brne	.+58     	; 0x10c0 <TIMER1_u8Init+0x12c>
			CLR_BIT(TCCR1B,TCCR1B_WGM13);
    1086:	ae e4       	ldi	r26, 0x4E	; 78
    1088:	b0 e0       	ldi	r27, 0x00	; 0
    108a:	ee e4       	ldi	r30, 0x4E	; 78
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	80 81       	ld	r24, Z
    1090:	8f 7e       	andi	r24, 0xEF	; 239
    1092:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B,TCCR1B_WGM12);
    1094:	ae e4       	ldi	r26, 0x4E	; 78
    1096:	b0 e0       	ldi	r27, 0x00	; 0
    1098:	ee e4       	ldi	r30, 0x4E	; 78
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	80 81       	ld	r24, Z
    109e:	87 7f       	andi	r24, 0xF7	; 247
    10a0:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM11);
    10a2:	af e4       	ldi	r26, 0x4F	; 79
    10a4:	b0 e0       	ldi	r27, 0x00	; 0
    10a6:	ef e4       	ldi	r30, 0x4F	; 79
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
    10ac:	82 60       	ori	r24, 0x02	; 2
    10ae:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM10);
    10b0:	af e4       	ldi	r26, 0x4F	; 79
    10b2:	b0 e0       	ldi	r27, 0x00	; 0
    10b4:	ef e4       	ldi	r30, 0x4F	; 79
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	80 81       	ld	r24, Z
    10ba:	81 60       	ori	r24, 0x01	; 1
    10bc:	8c 93       	st	X, r24
    10be:	78 c1       	rjmp	.+752    	; 0x13b0 <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_CTC){
    10c0:	ea 81       	ldd	r30, Y+2	; 0x02
    10c2:	fb 81       	ldd	r31, Y+3	; 0x03
    10c4:	80 81       	ld	r24, Z
    10c6:	85 30       	cpi	r24, 0x05	; 5
    10c8:	e9 f4       	brne	.+58     	; 0x1104 <TIMER1_u8Init+0x170>
			CLR_BIT(TCCR1B,TCCR1B_WGM13);
    10ca:	ae e4       	ldi	r26, 0x4E	; 78
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	ee e4       	ldi	r30, 0x4E	; 78
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	8f 7e       	andi	r24, 0xEF	; 239
    10d6:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,TCCR1B_WGM12);
    10d8:	ae e4       	ldi	r26, 0x4E	; 78
    10da:	b0 e0       	ldi	r27, 0x00	; 0
    10dc:	ee e4       	ldi	r30, 0x4E	; 78
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	88 60       	ori	r24, 0x08	; 8
    10e4:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM11);
    10e6:	af e4       	ldi	r26, 0x4F	; 79
    10e8:	b0 e0       	ldi	r27, 0x00	; 0
    10ea:	ef e4       	ldi	r30, 0x4F	; 79
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	80 81       	ld	r24, Z
    10f0:	8d 7f       	andi	r24, 0xFD	; 253
    10f2:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM10);
    10f4:	af e4       	ldi	r26, 0x4F	; 79
    10f6:	b0 e0       	ldi	r27, 0x00	; 0
    10f8:	ef e4       	ldi	r30, 0x4F	; 79
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	8e 7f       	andi	r24, 0xFE	; 254
    1100:	8c 93       	st	X, r24
    1102:	56 c1       	rjmp	.+684    	; 0x13b0 <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_FAST_PWM_8_BIT){
    1104:	ea 81       	ldd	r30, Y+2	; 0x02
    1106:	fb 81       	ldd	r31, Y+3	; 0x03
    1108:	80 81       	ld	r24, Z
    110a:	86 30       	cpi	r24, 0x06	; 6
    110c:	e9 f4       	brne	.+58     	; 0x1148 <TIMER1_u8Init+0x1b4>
			CLR_BIT(TCCR1B,TCCR1B_WGM13);
    110e:	ae e4       	ldi	r26, 0x4E	; 78
    1110:	b0 e0       	ldi	r27, 0x00	; 0
    1112:	ee e4       	ldi	r30, 0x4E	; 78
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	80 81       	ld	r24, Z
    1118:	8f 7e       	andi	r24, 0xEF	; 239
    111a:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,TCCR1B_WGM12);
    111c:	ae e4       	ldi	r26, 0x4E	; 78
    111e:	b0 e0       	ldi	r27, 0x00	; 0
    1120:	ee e4       	ldi	r30, 0x4E	; 78
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	88 60       	ori	r24, 0x08	; 8
    1128:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM11);
    112a:	af e4       	ldi	r26, 0x4F	; 79
    112c:	b0 e0       	ldi	r27, 0x00	; 0
    112e:	ef e4       	ldi	r30, 0x4F	; 79
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	80 81       	ld	r24, Z
    1134:	8d 7f       	andi	r24, 0xFD	; 253
    1136:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM10);
    1138:	af e4       	ldi	r26, 0x4F	; 79
    113a:	b0 e0       	ldi	r27, 0x00	; 0
    113c:	ef e4       	ldi	r30, 0x4F	; 79
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	81 60       	ori	r24, 0x01	; 1
    1144:	8c 93       	st	X, r24
    1146:	34 c1       	rjmp	.+616    	; 0x13b0 <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_FAST_PWM_9_BIT){
    1148:	ea 81       	ldd	r30, Y+2	; 0x02
    114a:	fb 81       	ldd	r31, Y+3	; 0x03
    114c:	80 81       	ld	r24, Z
    114e:	87 30       	cpi	r24, 0x07	; 7
    1150:	e9 f4       	brne	.+58     	; 0x118c <TIMER1_u8Init+0x1f8>
			CLR_BIT(TCCR1B,TCCR1B_WGM13);
    1152:	ae e4       	ldi	r26, 0x4E	; 78
    1154:	b0 e0       	ldi	r27, 0x00	; 0
    1156:	ee e4       	ldi	r30, 0x4E	; 78
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	80 81       	ld	r24, Z
    115c:	8f 7e       	andi	r24, 0xEF	; 239
    115e:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,TCCR1B_WGM12);
    1160:	ae e4       	ldi	r26, 0x4E	; 78
    1162:	b0 e0       	ldi	r27, 0x00	; 0
    1164:	ee e4       	ldi	r30, 0x4E	; 78
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	80 81       	ld	r24, Z
    116a:	88 60       	ori	r24, 0x08	; 8
    116c:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM11);
    116e:	af e4       	ldi	r26, 0x4F	; 79
    1170:	b0 e0       	ldi	r27, 0x00	; 0
    1172:	ef e4       	ldi	r30, 0x4F	; 79
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	80 81       	ld	r24, Z
    1178:	82 60       	ori	r24, 0x02	; 2
    117a:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM10);
    117c:	af e4       	ldi	r26, 0x4F	; 79
    117e:	b0 e0       	ldi	r27, 0x00	; 0
    1180:	ef e4       	ldi	r30, 0x4F	; 79
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	80 81       	ld	r24, Z
    1186:	8e 7f       	andi	r24, 0xFE	; 254
    1188:	8c 93       	st	X, r24
    118a:	12 c1       	rjmp	.+548    	; 0x13b0 <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_FAST_PWM_10_BIT){
    118c:	ea 81       	ldd	r30, Y+2	; 0x02
    118e:	fb 81       	ldd	r31, Y+3	; 0x03
    1190:	80 81       	ld	r24, Z
    1192:	88 30       	cpi	r24, 0x08	; 8
    1194:	e9 f4       	brne	.+58     	; 0x11d0 <TIMER1_u8Init+0x23c>
			CLR_BIT(TCCR1B,TCCR1B_WGM13);
    1196:	ae e4       	ldi	r26, 0x4E	; 78
    1198:	b0 e0       	ldi	r27, 0x00	; 0
    119a:	ee e4       	ldi	r30, 0x4E	; 78
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	80 81       	ld	r24, Z
    11a0:	8f 7e       	andi	r24, 0xEF	; 239
    11a2:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,TCCR1B_WGM12);
    11a4:	ae e4       	ldi	r26, 0x4E	; 78
    11a6:	b0 e0       	ldi	r27, 0x00	; 0
    11a8:	ee e4       	ldi	r30, 0x4E	; 78
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	80 81       	ld	r24, Z
    11ae:	88 60       	ori	r24, 0x08	; 8
    11b0:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM11);
    11b2:	af e4       	ldi	r26, 0x4F	; 79
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	ef e4       	ldi	r30, 0x4F	; 79
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	82 60       	ori	r24, 0x02	; 2
    11be:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM10);
    11c0:	af e4       	ldi	r26, 0x4F	; 79
    11c2:	b0 e0       	ldi	r27, 0x00	; 0
    11c4:	ef e4       	ldi	r30, 0x4F	; 79
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	80 81       	ld	r24, Z
    11ca:	81 60       	ori	r24, 0x01	; 1
    11cc:	8c 93       	st	X, r24
    11ce:	f0 c0       	rjmp	.+480    	; 0x13b0 <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_PHFC_PWM_CUSTOM_TOP){
    11d0:	ea 81       	ldd	r30, Y+2	; 0x02
    11d2:	fb 81       	ldd	r31, Y+3	; 0x03
    11d4:	80 81       	ld	r24, Z
    11d6:	89 30       	cpi	r24, 0x09	; 9
    11d8:	e9 f4       	brne	.+58     	; 0x1214 <TIMER1_u8Init+0x280>
			SET_BIT(TCCR1B,TCCR1B_WGM13);
    11da:	ae e4       	ldi	r26, 0x4E	; 78
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	ee e4       	ldi	r30, 0x4E	; 78
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	80 61       	ori	r24, 0x10	; 16
    11e6:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B,TCCR1B_WGM12);
    11e8:	ae e4       	ldi	r26, 0x4E	; 78
    11ea:	b0 e0       	ldi	r27, 0x00	; 0
    11ec:	ee e4       	ldi	r30, 0x4E	; 78
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	87 7f       	andi	r24, 0xF7	; 247
    11f4:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM11);
    11f6:	af e4       	ldi	r26, 0x4F	; 79
    11f8:	b0 e0       	ldi	r27, 0x00	; 0
    11fa:	ef e4       	ldi	r30, 0x4F	; 79
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	80 81       	ld	r24, Z
    1200:	8d 7f       	andi	r24, 0xFD	; 253
    1202:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM10);
    1204:	af e4       	ldi	r26, 0x4F	; 79
    1206:	b0 e0       	ldi	r27, 0x00	; 0
    1208:	ef e4       	ldi	r30, 0x4F	; 79
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	80 81       	ld	r24, Z
    120e:	8e 7f       	andi	r24, 0xFE	; 254
    1210:	8c 93       	st	X, r24
    1212:	ce c0       	rjmp	.+412    	; 0x13b0 <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_PHFC_PWM){
    1214:	ea 81       	ldd	r30, Y+2	; 0x02
    1216:	fb 81       	ldd	r31, Y+3	; 0x03
    1218:	80 81       	ld	r24, Z
    121a:	8a 30       	cpi	r24, 0x0A	; 10
    121c:	e9 f4       	brne	.+58     	; 0x1258 <TIMER1_u8Init+0x2c4>
			SET_BIT(TCCR1B,TCCR1B_WGM13);
    121e:	ae e4       	ldi	r26, 0x4E	; 78
    1220:	b0 e0       	ldi	r27, 0x00	; 0
    1222:	ee e4       	ldi	r30, 0x4E	; 78
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	80 81       	ld	r24, Z
    1228:	80 61       	ori	r24, 0x10	; 16
    122a:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B,TCCR1B_WGM12);
    122c:	ae e4       	ldi	r26, 0x4E	; 78
    122e:	b0 e0       	ldi	r27, 0x00	; 0
    1230:	ee e4       	ldi	r30, 0x4E	; 78
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	87 7f       	andi	r24, 0xF7	; 247
    1238:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM11);
    123a:	af e4       	ldi	r26, 0x4F	; 79
    123c:	b0 e0       	ldi	r27, 0x00	; 0
    123e:	ef e4       	ldi	r30, 0x4F	; 79
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	80 81       	ld	r24, Z
    1244:	8d 7f       	andi	r24, 0xFD	; 253
    1246:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM10);
    1248:	af e4       	ldi	r26, 0x4F	; 79
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	ef e4       	ldi	r30, 0x4F	; 79
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	81 60       	ori	r24, 0x01	; 1
    1254:	8c 93       	st	X, r24
    1256:	ac c0       	rjmp	.+344    	; 0x13b0 <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_PHC_PWM_CUSTOM_TOP){
    1258:	ea 81       	ldd	r30, Y+2	; 0x02
    125a:	fb 81       	ldd	r31, Y+3	; 0x03
    125c:	80 81       	ld	r24, Z
    125e:	8b 30       	cpi	r24, 0x0B	; 11
    1260:	e9 f4       	brne	.+58     	; 0x129c <TIMER1_u8Init+0x308>
			SET_BIT(TCCR1B,TCCR1B_WGM13);
    1262:	ae e4       	ldi	r26, 0x4E	; 78
    1264:	b0 e0       	ldi	r27, 0x00	; 0
    1266:	ee e4       	ldi	r30, 0x4E	; 78
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	80 81       	ld	r24, Z
    126c:	80 61       	ori	r24, 0x10	; 16
    126e:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B,TCCR1B_WGM12);
    1270:	ae e4       	ldi	r26, 0x4E	; 78
    1272:	b0 e0       	ldi	r27, 0x00	; 0
    1274:	ee e4       	ldi	r30, 0x4E	; 78
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	80 81       	ld	r24, Z
    127a:	87 7f       	andi	r24, 0xF7	; 247
    127c:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM11);
    127e:	af e4       	ldi	r26, 0x4F	; 79
    1280:	b0 e0       	ldi	r27, 0x00	; 0
    1282:	ef e4       	ldi	r30, 0x4F	; 79
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	80 81       	ld	r24, Z
    1288:	82 60       	ori	r24, 0x02	; 2
    128a:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM10);
    128c:	af e4       	ldi	r26, 0x4F	; 79
    128e:	b0 e0       	ldi	r27, 0x00	; 0
    1290:	ef e4       	ldi	r30, 0x4F	; 79
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	80 81       	ld	r24, Z
    1296:	8e 7f       	andi	r24, 0xFE	; 254
    1298:	8c 93       	st	X, r24
    129a:	8a c0       	rjmp	.+276    	; 0x13b0 <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_PHC_PWM){
    129c:	ea 81       	ldd	r30, Y+2	; 0x02
    129e:	fb 81       	ldd	r31, Y+3	; 0x03
    12a0:	80 81       	ld	r24, Z
    12a2:	8c 30       	cpi	r24, 0x0C	; 12
    12a4:	e9 f4       	brne	.+58     	; 0x12e0 <TIMER1_u8Init+0x34c>
			SET_BIT(TCCR1B,TCCR1B_WGM13);
    12a6:	ae e4       	ldi	r26, 0x4E	; 78
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	ee e4       	ldi	r30, 0x4E	; 78
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	80 61       	ori	r24, 0x10	; 16
    12b2:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B,TCCR1B_WGM12);
    12b4:	ae e4       	ldi	r26, 0x4E	; 78
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	ee e4       	ldi	r30, 0x4E	; 78
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	87 7f       	andi	r24, 0xF7	; 247
    12c0:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM11);
    12c2:	af e4       	ldi	r26, 0x4F	; 79
    12c4:	b0 e0       	ldi	r27, 0x00	; 0
    12c6:	ef e4       	ldi	r30, 0x4F	; 79
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	82 60       	ori	r24, 0x02	; 2
    12ce:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM10);
    12d0:	af e4       	ldi	r26, 0x4F	; 79
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	ef e4       	ldi	r30, 0x4F	; 79
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	81 60       	ori	r24, 0x01	; 1
    12dc:	8c 93       	st	X, r24
    12de:	68 c0       	rjmp	.+208    	; 0x13b0 <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_CTC_CUSTOM_TOP){
    12e0:	ea 81       	ldd	r30, Y+2	; 0x02
    12e2:	fb 81       	ldd	r31, Y+3	; 0x03
    12e4:	80 81       	ld	r24, Z
    12e6:	8d 30       	cpi	r24, 0x0D	; 13
    12e8:	e9 f4       	brne	.+58     	; 0x1324 <TIMER1_u8Init+0x390>
			SET_BIT(TCCR1B,TCCR1B_WGM13);
    12ea:	ae e4       	ldi	r26, 0x4E	; 78
    12ec:	b0 e0       	ldi	r27, 0x00	; 0
    12ee:	ee e4       	ldi	r30, 0x4E	; 78
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	80 61       	ori	r24, 0x10	; 16
    12f6:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,TCCR1B_WGM12);
    12f8:	ae e4       	ldi	r26, 0x4E	; 78
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	ee e4       	ldi	r30, 0x4E	; 78
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	80 81       	ld	r24, Z
    1302:	88 60       	ori	r24, 0x08	; 8
    1304:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM11);
    1306:	af e4       	ldi	r26, 0x4F	; 79
    1308:	b0 e0       	ldi	r27, 0x00	; 0
    130a:	ef e4       	ldi	r30, 0x4F	; 79
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	80 81       	ld	r24, Z
    1310:	8d 7f       	andi	r24, 0xFD	; 253
    1312:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM10);
    1314:	af e4       	ldi	r26, 0x4F	; 79
    1316:	b0 e0       	ldi	r27, 0x00	; 0
    1318:	ef e4       	ldi	r30, 0x4F	; 79
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	80 81       	ld	r24, Z
    131e:	8e 7f       	andi	r24, 0xFE	; 254
    1320:	8c 93       	st	X, r24
    1322:	46 c0       	rjmp	.+140    	; 0x13b0 <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_FAST_PWM_CUSTOM_TOP){
    1324:	ea 81       	ldd	r30, Y+2	; 0x02
    1326:	fb 81       	ldd	r31, Y+3	; 0x03
    1328:	80 81       	ld	r24, Z
    132a:	8e 30       	cpi	r24, 0x0E	; 14
    132c:	e9 f4       	brne	.+58     	; 0x1368 <TIMER1_u8Init+0x3d4>
			SET_BIT(TCCR1B,TCCR1B_WGM13);
    132e:	ae e4       	ldi	r26, 0x4E	; 78
    1330:	b0 e0       	ldi	r27, 0x00	; 0
    1332:	ee e4       	ldi	r30, 0x4E	; 78
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	80 81       	ld	r24, Z
    1338:	80 61       	ori	r24, 0x10	; 16
    133a:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,TCCR1B_WGM12);
    133c:	ae e4       	ldi	r26, 0x4E	; 78
    133e:	b0 e0       	ldi	r27, 0x00	; 0
    1340:	ee e4       	ldi	r30, 0x4E	; 78
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	80 81       	ld	r24, Z
    1346:	88 60       	ori	r24, 0x08	; 8
    1348:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM11);
    134a:	af e4       	ldi	r26, 0x4F	; 79
    134c:	b0 e0       	ldi	r27, 0x00	; 0
    134e:	ef e4       	ldi	r30, 0x4F	; 79
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	80 81       	ld	r24, Z
    1354:	82 60       	ori	r24, 0x02	; 2
    1356:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_WGM10);
    1358:	af e4       	ldi	r26, 0x4F	; 79
    135a:	b0 e0       	ldi	r27, 0x00	; 0
    135c:	ef e4       	ldi	r30, 0x4F	; 79
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	80 81       	ld	r24, Z
    1362:	8e 7f       	andi	r24, 0xFE	; 254
    1364:	8c 93       	st	X, r24
    1366:	24 c0       	rjmp	.+72     	; 0x13b0 <TIMER1_u8Init+0x41c>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER1_FAST_PWM){
    1368:	ea 81       	ldd	r30, Y+2	; 0x02
    136a:	fb 81       	ldd	r31, Y+3	; 0x03
    136c:	80 81       	ld	r24, Z
    136e:	8f 30       	cpi	r24, 0x0F	; 15
    1370:	e9 f4       	brne	.+58     	; 0x13ac <TIMER1_u8Init+0x418>
			SET_BIT(TCCR1B,TCCR1B_WGM13);
    1372:	ae e4       	ldi	r26, 0x4E	; 78
    1374:	b0 e0       	ldi	r27, 0x00	; 0
    1376:	ee e4       	ldi	r30, 0x4E	; 78
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	80 81       	ld	r24, Z
    137c:	80 61       	ori	r24, 0x10	; 16
    137e:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,TCCR1B_WGM12);
    1380:	ae e4       	ldi	r26, 0x4E	; 78
    1382:	b0 e0       	ldi	r27, 0x00	; 0
    1384:	ee e4       	ldi	r30, 0x4E	; 78
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	80 81       	ld	r24, Z
    138a:	88 60       	ori	r24, 0x08	; 8
    138c:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM11);
    138e:	af e4       	ldi	r26, 0x4F	; 79
    1390:	b0 e0       	ldi	r27, 0x00	; 0
    1392:	ef e4       	ldi	r30, 0x4F	; 79
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	80 81       	ld	r24, Z
    1398:	82 60       	ori	r24, 0x02	; 2
    139a:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_WGM10);
    139c:	af e4       	ldi	r26, 0x4F	; 79
    139e:	b0 e0       	ldi	r27, 0x00	; 0
    13a0:	ef e4       	ldi	r30, 0x4F	; 79
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	80 81       	ld	r24, Z
    13a6:	81 60       	ori	r24, 0x01	; 1
    13a8:	8c 93       	st	X, r24
    13aa:	02 c0       	rjmp	.+4      	; 0x13b0 <TIMER1_u8Init+0x41c>
		}
		else{
			Local_u8ErrorState=NOK;
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	89 83       	std	Y+1, r24	; 0x01
		}
		//Set Match Compare Output Mode for both channel A and B
		TCCR1A&=T1_COMP_MATCH_OUT_MASK;
    13b0:	af e4       	ldi	r26, 0x4F	; 79
    13b2:	b0 e0       	ldi	r27, 0x00	; 0
    13b4:	ef e4       	ldi	r30, 0x4F	; 79
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	80 81       	ld	r24, Z
    13ba:	8f 70       	andi	r24, 0x0F	; 15
    13bc:	8c 93       	st	X, r24
		TCCR1A|=((Copy_psTimer->CompareMatchOutputMode_B)<<4);
    13be:	af e4       	ldi	r26, 0x4F	; 79
    13c0:	b0 e0       	ldi	r27, 0x00	; 0
    13c2:	ef e4       	ldi	r30, 0x4F	; 79
    13c4:	f0 e0       	ldi	r31, 0x00	; 0
    13c6:	80 81       	ld	r24, Z
    13c8:	28 2f       	mov	r18, r24
    13ca:	ea 81       	ldd	r30, Y+2	; 0x02
    13cc:	fb 81       	ldd	r31, Y+3	; 0x03
    13ce:	83 81       	ldd	r24, Z+3	; 0x03
    13d0:	88 2f       	mov	r24, r24
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	82 95       	swap	r24
    13d6:	92 95       	swap	r25
    13d8:	90 7f       	andi	r25, 0xF0	; 240
    13da:	98 27       	eor	r25, r24
    13dc:	80 7f       	andi	r24, 0xF0	; 240
    13de:	98 27       	eor	r25, r24
    13e0:	82 2b       	or	r24, r18
    13e2:	8c 93       	st	X, r24
		TCCR1A|=((Copy_psTimer->CompareMatchOutputMode_A)<<6);
    13e4:	af e4       	ldi	r26, 0x4F	; 79
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	ef e4       	ldi	r30, 0x4F	; 79
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	28 2f       	mov	r18, r24
    13f0:	ea 81       	ldd	r30, Y+2	; 0x02
    13f2:	fb 81       	ldd	r31, Y+3	; 0x03
    13f4:	82 81       	ldd	r24, Z+2	; 0x02
    13f6:	88 2f       	mov	r24, r24
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	00 24       	eor	r0, r0
    13fc:	96 95       	lsr	r25
    13fe:	87 95       	ror	r24
    1400:	07 94       	ror	r0
    1402:	96 95       	lsr	r25
    1404:	87 95       	ror	r24
    1406:	07 94       	ror	r0
    1408:	98 2f       	mov	r25, r24
    140a:	80 2d       	mov	r24, r0
    140c:	82 2b       	or	r24, r18
    140e:	8c 93       	st	X, r24


		//Initialize Interrupt Enable pins
		if(Copy_psTimer->CompareMatchInterrupt_A==INT_ENABLE){
    1410:	ea 81       	ldd	r30, Y+2	; 0x02
    1412:	fb 81       	ldd	r31, Y+3	; 0x03
    1414:	84 81       	ldd	r24, Z+4	; 0x04
    1416:	81 30       	cpi	r24, 0x01	; 1
    1418:	41 f4       	brne	.+16     	; 0x142a <TIMER1_u8Init+0x496>
			SET_BIT(TIMSK,TIMSK_OCIE1A);
    141a:	a9 e5       	ldi	r26, 0x59	; 89
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	e9 e5       	ldi	r30, 0x59	; 89
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	80 61       	ori	r24, 0x10	; 16
    1426:	8c 93       	st	X, r24
    1428:	0f c0       	rjmp	.+30     	; 0x1448 <TIMER1_u8Init+0x4b4>
		}
		else if(Copy_psTimer->CompareMatchInterrupt_A==INT_DISABLE){
    142a:	ea 81       	ldd	r30, Y+2	; 0x02
    142c:	fb 81       	ldd	r31, Y+3	; 0x03
    142e:	84 81       	ldd	r24, Z+4	; 0x04
    1430:	82 30       	cpi	r24, 0x02	; 2
    1432:	41 f4       	brne	.+16     	; 0x1444 <TIMER1_u8Init+0x4b0>
			CLR_BIT(TIMSK,TIMSK_OCIE1A);
    1434:	a9 e5       	ldi	r26, 0x59	; 89
    1436:	b0 e0       	ldi	r27, 0x00	; 0
    1438:	e9 e5       	ldi	r30, 0x59	; 89
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	8f 7e       	andi	r24, 0xEF	; 239
    1440:	8c 93       	st	X, r24
    1442:	02 c0       	rjmp	.+4      	; 0x1448 <TIMER1_u8Init+0x4b4>
		}
		else{
			Local_u8ErrorState=NOK;
    1444:	81 e0       	ldi	r24, 0x01	; 1
    1446:	89 83       	std	Y+1, r24	; 0x01
		}

		//Compare Match Interrupt
		if(Copy_psTimer->CompareMatchInterrupt_B==INT_ENABLE){
    1448:	ea 81       	ldd	r30, Y+2	; 0x02
    144a:	fb 81       	ldd	r31, Y+3	; 0x03
    144c:	85 81       	ldd	r24, Z+5	; 0x05
    144e:	81 30       	cpi	r24, 0x01	; 1
    1450:	41 f4       	brne	.+16     	; 0x1462 <TIMER1_u8Init+0x4ce>
			SET_BIT(TIMSK,TIMSK_OCIE1B);
    1452:	a9 e5       	ldi	r26, 0x59	; 89
    1454:	b0 e0       	ldi	r27, 0x00	; 0
    1456:	e9 e5       	ldi	r30, 0x59	; 89
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	88 60       	ori	r24, 0x08	; 8
    145e:	8c 93       	st	X, r24
    1460:	0f c0       	rjmp	.+30     	; 0x1480 <TIMER1_u8Init+0x4ec>
		}
		else if(Copy_psTimer->CompareMatchInterrupt_B==INT_DISABLE){
    1462:	ea 81       	ldd	r30, Y+2	; 0x02
    1464:	fb 81       	ldd	r31, Y+3	; 0x03
    1466:	85 81       	ldd	r24, Z+5	; 0x05
    1468:	82 30       	cpi	r24, 0x02	; 2
    146a:	41 f4       	brne	.+16     	; 0x147c <TIMER1_u8Init+0x4e8>
			CLR_BIT(TIMSK,TIMSK_OCIE1B);
    146c:	a9 e5       	ldi	r26, 0x59	; 89
    146e:	b0 e0       	ldi	r27, 0x00	; 0
    1470:	e9 e5       	ldi	r30, 0x59	; 89
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	80 81       	ld	r24, Z
    1476:	87 7f       	andi	r24, 0xF7	; 247
    1478:	8c 93       	st	X, r24
    147a:	02 c0       	rjmp	.+4      	; 0x1480 <TIMER1_u8Init+0x4ec>
		}
		else{
			Local_u8ErrorState=NOK;
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	89 83       	std	Y+1, r24	; 0x01
		}


		//OverFlow Interrupt
		if(Copy_psTimer->OverFlowInterrupt==INT_ENABLE){
    1480:	ea 81       	ldd	r30, Y+2	; 0x02
    1482:	fb 81       	ldd	r31, Y+3	; 0x03
    1484:	86 81       	ldd	r24, Z+6	; 0x06
    1486:	81 30       	cpi	r24, 0x01	; 1
    1488:	41 f4       	brne	.+16     	; 0x149a <TIMER1_u8Init+0x506>
			SET_BIT(TIMSK,TIMSK_TOIE1);
    148a:	a9 e5       	ldi	r26, 0x59	; 89
    148c:	b0 e0       	ldi	r27, 0x00	; 0
    148e:	e9 e5       	ldi	r30, 0x59	; 89
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	80 81       	ld	r24, Z
    1494:	84 60       	ori	r24, 0x04	; 4
    1496:	8c 93       	st	X, r24
    1498:	0f c0       	rjmp	.+30     	; 0x14b8 <TIMER1_u8Init+0x524>
		}
		else if(Copy_psTimer->OverFlowInterrupt==INT_DISABLE){
    149a:	ea 81       	ldd	r30, Y+2	; 0x02
    149c:	fb 81       	ldd	r31, Y+3	; 0x03
    149e:	86 81       	ldd	r24, Z+6	; 0x06
    14a0:	82 30       	cpi	r24, 0x02	; 2
    14a2:	41 f4       	brne	.+16     	; 0x14b4 <TIMER1_u8Init+0x520>
			CLR_BIT(TIMSK,TIMSK_TOIE1);
    14a4:	a9 e5       	ldi	r26, 0x59	; 89
    14a6:	b0 e0       	ldi	r27, 0x00	; 0
    14a8:	e9 e5       	ldi	r30, 0x59	; 89
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	80 81       	ld	r24, Z
    14ae:	8b 7f       	andi	r24, 0xFB	; 251
    14b0:	8c 93       	st	X, r24
    14b2:	02 c0       	rjmp	.+4      	; 0x14b8 <TIMER1_u8Init+0x524>
		}
		else{
			Local_u8ErrorState=NOK;
    14b4:	81 e0       	ldi	r24, 0x01	; 1
    14b6:	89 83       	std	Y+1, r24	; 0x01
		}


		//Initialize Prescaler
		TCCR1B&=PRESCALER_MASK;
    14b8:	ae e4       	ldi	r26, 0x4E	; 78
    14ba:	b0 e0       	ldi	r27, 0x00	; 0
    14bc:	ee e4       	ldi	r30, 0x4E	; 78
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	88 7f       	andi	r24, 0xF8	; 248
    14c4:	8c 93       	st	X, r24
		TCCR1B|=Copy_psTimer->Prescaler;
    14c6:	ae e4       	ldi	r26, 0x4E	; 78
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	ee e4       	ldi	r30, 0x4E	; 78
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	90 81       	ld	r25, Z
    14d0:	ea 81       	ldd	r30, Y+2	; 0x02
    14d2:	fb 81       	ldd	r31, Y+3	; 0x03
    14d4:	81 81       	ldd	r24, Z+1	; 0x01
    14d6:	89 2b       	or	r24, r25
    14d8:	8c 93       	st	X, r24
    14da:	02 c0       	rjmp	.+4      	; 0x14e0 <TIMER1_u8Init+0x54c>
	}
	else{
		Local_u8ErrorState=NULL_POINTER;
    14dc:	82 e0       	ldi	r24, 0x02	; 2
    14de:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    14e0:	89 81       	ldd	r24, Y+1	; 0x01

}
    14e2:	0f 90       	pop	r0
    14e4:	0f 90       	pop	r0
    14e6:	0f 90       	pop	r0
    14e8:	cf 91       	pop	r28
    14ea:	df 91       	pop	r29
    14ec:	08 95       	ret

000014ee <TIMER1_voidSetTopValue>:

void TIMER1_voidSetTopValue(u16 Copy_u16Value){
    14ee:	df 93       	push	r29
    14f0:	cf 93       	push	r28
    14f2:	00 d0       	rcall	.+0      	; 0x14f4 <TIMER1_voidSetTopValue+0x6>
    14f4:	cd b7       	in	r28, 0x3d	; 61
    14f6:	de b7       	in	r29, 0x3e	; 62
    14f8:	9a 83       	std	Y+2, r25	; 0x02
    14fa:	89 83       	std	Y+1, r24	; 0x01
	ICR1=Copy_u16Value;
    14fc:	e6 e4       	ldi	r30, 0x46	; 70
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	89 81       	ldd	r24, Y+1	; 0x01
    1502:	9a 81       	ldd	r25, Y+2	; 0x02
    1504:	91 83       	std	Z+1, r25	; 0x01
    1506:	80 83       	st	Z, r24
}
    1508:	0f 90       	pop	r0
    150a:	0f 90       	pop	r0
    150c:	cf 91       	pop	r28
    150e:	df 91       	pop	r29
    1510:	08 95       	ret

00001512 <TIMER1_u8PWMGenerate>:

u8 TIMER1_u8PWMGenerate(Timer1_t* Copy_psTimer,u16 Copy_u16PeriodTime,u16 Copy_u16OnTime){
    1512:	df 93       	push	r29
    1514:	cf 93       	push	r28
    1516:	cd b7       	in	r28, 0x3d	; 61
    1518:	de b7       	in	r29, 0x3e	; 62
    151a:	29 97       	sbiw	r28, 0x09	; 9
    151c:	0f b6       	in	r0, 0x3f	; 63
    151e:	f8 94       	cli
    1520:	de bf       	out	0x3e, r29	; 62
    1522:	0f be       	out	0x3f, r0	; 63
    1524:	cd bf       	out	0x3d, r28	; 61
    1526:	9b 83       	std	Y+3, r25	; 0x03
    1528:	8a 83       	std	Y+2, r24	; 0x02
    152a:	7d 83       	std	Y+5, r23	; 0x05
    152c:	6c 83       	std	Y+4, r22	; 0x04
    152e:	5f 83       	std	Y+7, r21	; 0x07
    1530:	4e 83       	std	Y+6, r20	; 0x06
	u8 Local_u8ErrorState=OK;
    1532:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_psTimer!=NULL){
    1534:	8a 81       	ldd	r24, Y+2	; 0x02
    1536:	9b 81       	ldd	r25, Y+3	; 0x03
    1538:	00 97       	sbiw	r24, 0x00	; 0
    153a:	09 f4       	brne	.+2      	; 0x153e <TIMER1_u8PWMGenerate+0x2c>
    153c:	9c c0       	rjmp	.+312    	; 0x1676 <TIMER1_u8PWMGenerate+0x164>
		if((Copy_psTimer->WaveGenMode)==TIMER1_FAST_PWM_CUSTOM_TOP){
    153e:	ea 81       	ldd	r30, Y+2	; 0x02
    1540:	fb 81       	ldd	r31, Y+3	; 0x03
    1542:	80 81       	ld	r24, Z
    1544:	8e 30       	cpi	r24, 0x0E	; 14
    1546:	09 f0       	breq	.+2      	; 0x154a <TIMER1_u8PWMGenerate+0x38>
    1548:	93 c0       	rjmp	.+294    	; 0x1670 <TIMER1_u8PWMGenerate+0x15e>
			switch(Copy_psTimer->Prescaler){
    154a:	ea 81       	ldd	r30, Y+2	; 0x02
    154c:	fb 81       	ldd	r31, Y+3	; 0x03
    154e:	81 81       	ldd	r24, Z+1	; 0x01
    1550:	28 2f       	mov	r18, r24
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	39 87       	std	Y+9, r19	; 0x09
    1556:	28 87       	std	Y+8, r18	; 0x08
    1558:	88 85       	ldd	r24, Y+8	; 0x08
    155a:	99 85       	ldd	r25, Y+9	; 0x09
    155c:	83 30       	cpi	r24, 0x03	; 3
    155e:	91 05       	cpc	r25, r1
    1560:	79 f1       	breq	.+94     	; 0x15c0 <TIMER1_u8PWMGenerate+0xae>
    1562:	28 85       	ldd	r18, Y+8	; 0x08
    1564:	39 85       	ldd	r19, Y+9	; 0x09
    1566:	24 30       	cpi	r18, 0x04	; 4
    1568:	31 05       	cpc	r19, r1
    156a:	5c f4       	brge	.+22     	; 0x1582 <TIMER1_u8PWMGenerate+0x70>
    156c:	88 85       	ldd	r24, Y+8	; 0x08
    156e:	99 85       	ldd	r25, Y+9	; 0x09
    1570:	81 30       	cpi	r24, 0x01	; 1
    1572:	91 05       	cpc	r25, r1
    1574:	89 f0       	breq	.+34     	; 0x1598 <TIMER1_u8PWMGenerate+0x86>
    1576:	28 85       	ldd	r18, Y+8	; 0x08
    1578:	39 85       	ldd	r19, Y+9	; 0x09
    157a:	22 30       	cpi	r18, 0x02	; 2
    157c:	31 05       	cpc	r19, r1
    157e:	c9 f0       	breq	.+50     	; 0x15b2 <TIMER1_u8PWMGenerate+0xa0>
    1580:	47 c0       	rjmp	.+142    	; 0x1610 <TIMER1_u8PWMGenerate+0xfe>
    1582:	88 85       	ldd	r24, Y+8	; 0x08
    1584:	99 85       	ldd	r25, Y+9	; 0x09
    1586:	84 30       	cpi	r24, 0x04	; 4
    1588:	91 05       	cpc	r25, r1
    158a:	39 f1       	breq	.+78     	; 0x15da <TIMER1_u8PWMGenerate+0xc8>
    158c:	28 85       	ldd	r18, Y+8	; 0x08
    158e:	39 85       	ldd	r19, Y+9	; 0x09
    1590:	25 30       	cpi	r18, 0x05	; 5
    1592:	31 05       	cpc	r19, r1
    1594:	89 f1       	breq	.+98     	; 0x15f8 <TIMER1_u8PWMGenerate+0xe6>
    1596:	3c c0       	rjmp	.+120    	; 0x1610 <TIMER1_u8PWMGenerate+0xfe>
			case PRSCLR_DIV_BY_1    : ICR1 = Copy_u16PeriodTime*8   ; break;
    1598:	e6 e4       	ldi	r30, 0x46	; 70
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	8c 81       	ldd	r24, Y+4	; 0x04
    159e:	9d 81       	ldd	r25, Y+5	; 0x05
    15a0:	88 0f       	add	r24, r24
    15a2:	99 1f       	adc	r25, r25
    15a4:	88 0f       	add	r24, r24
    15a6:	99 1f       	adc	r25, r25
    15a8:	88 0f       	add	r24, r24
    15aa:	99 1f       	adc	r25, r25
    15ac:	91 83       	std	Z+1, r25	; 0x01
    15ae:	80 83       	st	Z, r24
    15b0:	31 c0       	rjmp	.+98     	; 0x1614 <TIMER1_u8PWMGenerate+0x102>
			case PRSCLR_DIV_BY_8    : ICR1 = Copy_u16PeriodTime     ; break;
    15b2:	e6 e4       	ldi	r30, 0x46	; 70
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	8c 81       	ldd	r24, Y+4	; 0x04
    15b8:	9d 81       	ldd	r25, Y+5	; 0x05
    15ba:	91 83       	std	Z+1, r25	; 0x01
    15bc:	80 83       	st	Z, r24
    15be:	2a c0       	rjmp	.+84     	; 0x1614 <TIMER1_u8PWMGenerate+0x102>
			case PRSCLR_DIV_BY_64   : ICR1 = Copy_u16PeriodTime/8   ; break;
    15c0:	e6 e4       	ldi	r30, 0x46	; 70
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	8c 81       	ldd	r24, Y+4	; 0x04
    15c6:	9d 81       	ldd	r25, Y+5	; 0x05
    15c8:	96 95       	lsr	r25
    15ca:	87 95       	ror	r24
    15cc:	96 95       	lsr	r25
    15ce:	87 95       	ror	r24
    15d0:	96 95       	lsr	r25
    15d2:	87 95       	ror	r24
    15d4:	91 83       	std	Z+1, r25	; 0x01
    15d6:	80 83       	st	Z, r24
    15d8:	1d c0       	rjmp	.+58     	; 0x1614 <TIMER1_u8PWMGenerate+0x102>
			case PRSCLR_DIV_BY_256  : ICR1 = Copy_u16PeriodTime/32  ; break;
    15da:	e6 e4       	ldi	r30, 0x46	; 70
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	8c 81       	ldd	r24, Y+4	; 0x04
    15e0:	9d 81       	ldd	r25, Y+5	; 0x05
    15e2:	96 95       	lsr	r25
    15e4:	87 95       	ror	r24
    15e6:	92 95       	swap	r25
    15e8:	82 95       	swap	r24
    15ea:	8f 70       	andi	r24, 0x0F	; 15
    15ec:	89 27       	eor	r24, r25
    15ee:	9f 70       	andi	r25, 0x0F	; 15
    15f0:	89 27       	eor	r24, r25
    15f2:	91 83       	std	Z+1, r25	; 0x01
    15f4:	80 83       	st	Z, r24
    15f6:	0e c0       	rjmp	.+28     	; 0x1614 <TIMER1_u8PWMGenerate+0x102>
			case PRSCLR_DIV_BY_1024 : ICR1 = Copy_u16PeriodTime/128 ; break;
    15f8:	e6 e4       	ldi	r30, 0x46	; 70
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	8c 81       	ldd	r24, Y+4	; 0x04
    15fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1600:	88 0f       	add	r24, r24
    1602:	89 2f       	mov	r24, r25
    1604:	88 1f       	adc	r24, r24
    1606:	99 0b       	sbc	r25, r25
    1608:	91 95       	neg	r25
    160a:	91 83       	std	Z+1, r25	; 0x01
    160c:	80 83       	st	Z, r24
    160e:	02 c0       	rjmp	.+4      	; 0x1614 <TIMER1_u8PWMGenerate+0x102>
			default: Local_u8ErrorState=NOK;
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	89 83       	std	Y+1, r24	; 0x01
			}

			if(Copy_u16OnTime<=Copy_u16PeriodTime){
    1614:	2e 81       	ldd	r18, Y+6	; 0x06
    1616:	3f 81       	ldd	r19, Y+7	; 0x07
    1618:	8c 81       	ldd	r24, Y+4	; 0x04
    161a:	9d 81       	ldd	r25, Y+5	; 0x05
    161c:	82 17       	cp	r24, r18
    161e:	93 07       	cpc	r25, r19
    1620:	20 f1       	brcs	.+72     	; 0x166a <TIMER1_u8PWMGenerate+0x158>
				if((Copy_psTimer->CompareMatchOutputMode_A)== OCM_FAST_PWM_NON_INVERTED && (Copy_psTimer->CompareMatchOutputMode_B) == OCM_DISCONNECT ){
    1622:	ea 81       	ldd	r30, Y+2	; 0x02
    1624:	fb 81       	ldd	r31, Y+3	; 0x03
    1626:	82 81       	ldd	r24, Z+2	; 0x02
    1628:	82 30       	cpi	r24, 0x02	; 2
    162a:	59 f4       	brne	.+22     	; 0x1642 <TIMER1_u8PWMGenerate+0x130>
    162c:	ea 81       	ldd	r30, Y+2	; 0x02
    162e:	fb 81       	ldd	r31, Y+3	; 0x03
    1630:	83 81       	ldd	r24, Z+3	; 0x03
    1632:	88 23       	and	r24, r24
    1634:	31 f4       	brne	.+12     	; 0x1642 <TIMER1_u8PWMGenerate+0x130>
					OCR1A=Copy_u16OnTime;
    1636:	ea e4       	ldi	r30, 0x4A	; 74
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	8e 81       	ldd	r24, Y+6	; 0x06
    163c:	9f 81       	ldd	r25, Y+7	; 0x07
    163e:	91 83       	std	Z+1, r25	; 0x01
    1640:	80 83       	st	Z, r24
				}
				if( (Copy_psTimer->CompareMatchOutputMode_B) == OCM_FAST_PWM_NON_INVERTED && (Copy_psTimer->CompareMatchOutputMode_A) == OCM_DISCONNECT ){
    1642:	ea 81       	ldd	r30, Y+2	; 0x02
    1644:	fb 81       	ldd	r31, Y+3	; 0x03
    1646:	83 81       	ldd	r24, Z+3	; 0x03
    1648:	82 30       	cpi	r24, 0x02	; 2
    164a:	61 f4       	brne	.+24     	; 0x1664 <TIMER1_u8PWMGenerate+0x152>
    164c:	ea 81       	ldd	r30, Y+2	; 0x02
    164e:	fb 81       	ldd	r31, Y+3	; 0x03
    1650:	82 81       	ldd	r24, Z+2	; 0x02
    1652:	88 23       	and	r24, r24
    1654:	39 f4       	brne	.+14     	; 0x1664 <TIMER1_u8PWMGenerate+0x152>
					OCR1B=Copy_u16OnTime;
    1656:	e8 e4       	ldi	r30, 0x48	; 72
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	8e 81       	ldd	r24, Y+6	; 0x06
    165c:	9f 81       	ldd	r25, Y+7	; 0x07
    165e:	91 83       	std	Z+1, r25	; 0x01
    1660:	80 83       	st	Z, r24
    1662:	0b c0       	rjmp	.+22     	; 0x167a <TIMER1_u8PWMGenerate+0x168>
				}
				else{
					Local_u8ErrorState=NOK;
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	89 83       	std	Y+1, r24	; 0x01
    1668:	08 c0       	rjmp	.+16     	; 0x167a <TIMER1_u8PWMGenerate+0x168>
				}
			}
			else{
				Local_u8ErrorState=NOK;
    166a:	81 e0       	ldi	r24, 0x01	; 1
    166c:	89 83       	std	Y+1, r24	; 0x01
    166e:	05 c0       	rjmp	.+10     	; 0x167a <TIMER1_u8PWMGenerate+0x168>

			}
		}
		else{
			Local_u8ErrorState=NOK;
    1670:	81 e0       	ldi	r24, 0x01	; 1
    1672:	89 83       	std	Y+1, r24	; 0x01
    1674:	02 c0       	rjmp	.+4      	; 0x167a <TIMER1_u8PWMGenerate+0x168>
		}
	}
	else{
		Local_u8ErrorState=NULL_POINTER;
    1676:	82 e0       	ldi	r24, 0x02	; 2
    1678:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErrorState;
    167a:	89 81       	ldd	r24, Y+1	; 0x01

}
    167c:	29 96       	adiw	r28, 0x09	; 9
    167e:	0f b6       	in	r0, 0x3f	; 63
    1680:	f8 94       	cli
    1682:	de bf       	out	0x3e, r29	; 62
    1684:	0f be       	out	0x3f, r0	; 63
    1686:	cd bf       	out	0x3d, r28	; 61
    1688:	cf 91       	pop	r28
    168a:	df 91       	pop	r29
    168c:	08 95       	ret

0000168e <TIMER2_u8Init>:

/********************************************************TIMER2**********************************************************
 ************************************************************************************************************************/


u8 TIMER2_u8Init(Timer_t* Copy_psTimer){
    168e:	df 93       	push	r29
    1690:	cf 93       	push	r28
    1692:	00 d0       	rcall	.+0      	; 0x1694 <TIMER2_u8Init+0x6>
    1694:	0f 92       	push	r0
    1696:	cd b7       	in	r28, 0x3d	; 61
    1698:	de b7       	in	r29, 0x3e	; 62
    169a:	9b 83       	std	Y+3, r25	; 0x03
    169c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
    169e:	19 82       	std	Y+1, r1	; 0x01
	//Initialize Wave Generation Mode
	if(Copy_psTimer!=NULL){
    16a0:	8a 81       	ldd	r24, Y+2	; 0x02
    16a2:	9b 81       	ldd	r25, Y+3	; 0x03
    16a4:	00 97       	sbiw	r24, 0x00	; 0
    16a6:	09 f4       	brne	.+2      	; 0x16aa <TIMER2_u8Init+0x1c>
    16a8:	b6 c0       	rjmp	.+364    	; 0x1816 <TIMER2_u8Init+0x188>
		if(Copy_psTimer->WaveGenMode==TIMER_NORMAL){
    16aa:	ea 81       	ldd	r30, Y+2	; 0x02
    16ac:	fb 81       	ldd	r31, Y+3	; 0x03
    16ae:	80 81       	ld	r24, Z
    16b0:	81 30       	cpi	r24, 0x01	; 1
    16b2:	79 f4       	brne	.+30     	; 0x16d2 <TIMER2_u8Init+0x44>
			CLR_BIT(TCCR2,TCCR2_WGM21);
    16b4:	a5 e4       	ldi	r26, 0x45	; 69
    16b6:	b0 e0       	ldi	r27, 0x00	; 0
    16b8:	e5 e4       	ldi	r30, 0x45	; 69
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	80 81       	ld	r24, Z
    16be:	87 7f       	andi	r24, 0xF7	; 247
    16c0:	8c 93       	st	X, r24
			CLR_BIT(TCCR2,TCCR2_WGM20);
    16c2:	a5 e4       	ldi	r26, 0x45	; 69
    16c4:	b0 e0       	ldi	r27, 0x00	; 0
    16c6:	e5 e4       	ldi	r30, 0x45	; 69
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
    16ca:	80 81       	ld	r24, Z
    16cc:	8f 7b       	andi	r24, 0xBF	; 191
    16ce:	8c 93       	st	X, r24
    16d0:	3e c0       	rjmp	.+124    	; 0x174e <TIMER2_u8Init+0xc0>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER_PHC_PWM){
    16d2:	ea 81       	ldd	r30, Y+2	; 0x02
    16d4:	fb 81       	ldd	r31, Y+3	; 0x03
    16d6:	80 81       	ld	r24, Z
    16d8:	82 30       	cpi	r24, 0x02	; 2
    16da:	79 f4       	brne	.+30     	; 0x16fa <TIMER2_u8Init+0x6c>
			CLR_BIT(TCCR2,TCCR2_WGM21);
    16dc:	a5 e4       	ldi	r26, 0x45	; 69
    16de:	b0 e0       	ldi	r27, 0x00	; 0
    16e0:	e5 e4       	ldi	r30, 0x45	; 69
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	80 81       	ld	r24, Z
    16e6:	87 7f       	andi	r24, 0xF7	; 247
    16e8:	8c 93       	st	X, r24
			SET_BIT(TCCR2,TCCR2_WGM20);
    16ea:	a5 e4       	ldi	r26, 0x45	; 69
    16ec:	b0 e0       	ldi	r27, 0x00	; 0
    16ee:	e5 e4       	ldi	r30, 0x45	; 69
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	80 81       	ld	r24, Z
    16f4:	80 64       	ori	r24, 0x40	; 64
    16f6:	8c 93       	st	X, r24
    16f8:	2a c0       	rjmp	.+84     	; 0x174e <TIMER2_u8Init+0xc0>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER_CTC){
    16fa:	ea 81       	ldd	r30, Y+2	; 0x02
    16fc:	fb 81       	ldd	r31, Y+3	; 0x03
    16fe:	80 81       	ld	r24, Z
    1700:	83 30       	cpi	r24, 0x03	; 3
    1702:	79 f4       	brne	.+30     	; 0x1722 <TIMER2_u8Init+0x94>
			SET_BIT(TCCR2,TCCR2_WGM21);
    1704:	a5 e4       	ldi	r26, 0x45	; 69
    1706:	b0 e0       	ldi	r27, 0x00	; 0
    1708:	e5 e4       	ldi	r30, 0x45	; 69
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	80 81       	ld	r24, Z
    170e:	88 60       	ori	r24, 0x08	; 8
    1710:	8c 93       	st	X, r24
			CLR_BIT(TCCR2,TCCR2_WGM20);
    1712:	a5 e4       	ldi	r26, 0x45	; 69
    1714:	b0 e0       	ldi	r27, 0x00	; 0
    1716:	e5 e4       	ldi	r30, 0x45	; 69
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	80 81       	ld	r24, Z
    171c:	8f 7b       	andi	r24, 0xBF	; 191
    171e:	8c 93       	st	X, r24
    1720:	16 c0       	rjmp	.+44     	; 0x174e <TIMER2_u8Init+0xc0>
		}
		else if(Copy_psTimer->WaveGenMode==TIMER_FAST_PWM){
    1722:	ea 81       	ldd	r30, Y+2	; 0x02
    1724:	fb 81       	ldd	r31, Y+3	; 0x03
    1726:	80 81       	ld	r24, Z
    1728:	84 30       	cpi	r24, 0x04	; 4
    172a:	79 f4       	brne	.+30     	; 0x174a <TIMER2_u8Init+0xbc>
			SET_BIT(TCCR2,TCCR2_WGM21);
    172c:	a5 e4       	ldi	r26, 0x45	; 69
    172e:	b0 e0       	ldi	r27, 0x00	; 0
    1730:	e5 e4       	ldi	r30, 0x45	; 69
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	80 81       	ld	r24, Z
    1736:	88 60       	ori	r24, 0x08	; 8
    1738:	8c 93       	st	X, r24
			SET_BIT(TCCR2,TCCR2_WGM20);
    173a:	a5 e4       	ldi	r26, 0x45	; 69
    173c:	b0 e0       	ldi	r27, 0x00	; 0
    173e:	e5 e4       	ldi	r30, 0x45	; 69
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	80 81       	ld	r24, Z
    1744:	80 64       	ori	r24, 0x40	; 64
    1746:	8c 93       	st	X, r24
    1748:	02 c0       	rjmp	.+4      	; 0x174e <TIMER2_u8Init+0xc0>
		}
		else{
			Local_u8ErrorState=NOK;
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	89 83       	std	Y+1, r24	; 0x01
		}
		//Initialize Compare Match Output Mode
		TCCR2&=COMP_MATCH_OUT_MASK;
    174e:	a5 e4       	ldi	r26, 0x45	; 69
    1750:	b0 e0       	ldi	r27, 0x00	; 0
    1752:	e5 e4       	ldi	r30, 0x45	; 69
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	80 81       	ld	r24, Z
    1758:	8f 7c       	andi	r24, 0xCF	; 207
    175a:	8c 93       	st	X, r24
		TCCR2|=((Copy_psTimer->CompareMatchOutputMode)<<4);
    175c:	a5 e4       	ldi	r26, 0x45	; 69
    175e:	b0 e0       	ldi	r27, 0x00	; 0
    1760:	e5 e4       	ldi	r30, 0x45	; 69
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	80 81       	ld	r24, Z
    1766:	28 2f       	mov	r18, r24
    1768:	ea 81       	ldd	r30, Y+2	; 0x02
    176a:	fb 81       	ldd	r31, Y+3	; 0x03
    176c:	82 81       	ldd	r24, Z+2	; 0x02
    176e:	88 2f       	mov	r24, r24
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	82 95       	swap	r24
    1774:	92 95       	swap	r25
    1776:	90 7f       	andi	r25, 0xF0	; 240
    1778:	98 27       	eor	r25, r24
    177a:	80 7f       	andi	r24, 0xF0	; 240
    177c:	98 27       	eor	r25, r24
    177e:	82 2b       	or	r24, r18
    1780:	8c 93       	st	X, r24
		//Initialize Interrupt Enable pins
		if(Copy_psTimer->CompareMatchInterrupt==INT_ENABLE){
    1782:	ea 81       	ldd	r30, Y+2	; 0x02
    1784:	fb 81       	ldd	r31, Y+3	; 0x03
    1786:	83 81       	ldd	r24, Z+3	; 0x03
    1788:	81 30       	cpi	r24, 0x01	; 1
    178a:	41 f4       	brne	.+16     	; 0x179c <TIMER2_u8Init+0x10e>
			SET_BIT(TIMSK,TIMSK_OCIE2);
    178c:	a9 e5       	ldi	r26, 0x59	; 89
    178e:	b0 e0       	ldi	r27, 0x00	; 0
    1790:	e9 e5       	ldi	r30, 0x59	; 89
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	80 81       	ld	r24, Z
    1796:	80 68       	ori	r24, 0x80	; 128
    1798:	8c 93       	st	X, r24
    179a:	0f c0       	rjmp	.+30     	; 0x17ba <TIMER2_u8Init+0x12c>
		}
		else if(Copy_psTimer->CompareMatchInterrupt==INT_DISABLE){
    179c:	ea 81       	ldd	r30, Y+2	; 0x02
    179e:	fb 81       	ldd	r31, Y+3	; 0x03
    17a0:	83 81       	ldd	r24, Z+3	; 0x03
    17a2:	82 30       	cpi	r24, 0x02	; 2
    17a4:	41 f4       	brne	.+16     	; 0x17b6 <TIMER2_u8Init+0x128>
			CLR_BIT(TIMSK,TIMSK_OCIE2);
    17a6:	a9 e5       	ldi	r26, 0x59	; 89
    17a8:	b0 e0       	ldi	r27, 0x00	; 0
    17aa:	e9 e5       	ldi	r30, 0x59	; 89
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	80 81       	ld	r24, Z
    17b0:	8f 77       	andi	r24, 0x7F	; 127
    17b2:	8c 93       	st	X, r24
    17b4:	02 c0       	rjmp	.+4      	; 0x17ba <TIMER2_u8Init+0x12c>
		}
		else{
			Local_u8ErrorState=NOK;
    17b6:	81 e0       	ldi	r24, 0x01	; 1
    17b8:	89 83       	std	Y+1, r24	; 0x01
		}

		if(Copy_psTimer->OverFlowInterrupt==INT_ENABLE){
    17ba:	ea 81       	ldd	r30, Y+2	; 0x02
    17bc:	fb 81       	ldd	r31, Y+3	; 0x03
    17be:	84 81       	ldd	r24, Z+4	; 0x04
    17c0:	81 30       	cpi	r24, 0x01	; 1
    17c2:	41 f4       	brne	.+16     	; 0x17d4 <TIMER2_u8Init+0x146>
			SET_BIT(TIMSK,TIMSK_TOIE2);
    17c4:	a9 e5       	ldi	r26, 0x59	; 89
    17c6:	b0 e0       	ldi	r27, 0x00	; 0
    17c8:	e9 e5       	ldi	r30, 0x59	; 89
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	80 81       	ld	r24, Z
    17ce:	80 64       	ori	r24, 0x40	; 64
    17d0:	8c 93       	st	X, r24
    17d2:	0f c0       	rjmp	.+30     	; 0x17f2 <TIMER2_u8Init+0x164>
		}
		else if(Copy_psTimer->OverFlowInterrupt==INT_DISABLE){
    17d4:	ea 81       	ldd	r30, Y+2	; 0x02
    17d6:	fb 81       	ldd	r31, Y+3	; 0x03
    17d8:	84 81       	ldd	r24, Z+4	; 0x04
    17da:	82 30       	cpi	r24, 0x02	; 2
    17dc:	41 f4       	brne	.+16     	; 0x17ee <TIMER2_u8Init+0x160>
			CLR_BIT(TIMSK,TIMSK_TOIE2);
    17de:	a9 e5       	ldi	r26, 0x59	; 89
    17e0:	b0 e0       	ldi	r27, 0x00	; 0
    17e2:	e9 e5       	ldi	r30, 0x59	; 89
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	80 81       	ld	r24, Z
    17e8:	8f 7b       	andi	r24, 0xBF	; 191
    17ea:	8c 93       	st	X, r24
    17ec:	02 c0       	rjmp	.+4      	; 0x17f2 <TIMER2_u8Init+0x164>
		}
		else{
			Local_u8ErrorState=NOK;
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	89 83       	std	Y+1, r24	; 0x01
		}

		//Initialize Prescaler
		TCCR2&=PRESCALER_MASK;
    17f2:	a5 e4       	ldi	r26, 0x45	; 69
    17f4:	b0 e0       	ldi	r27, 0x00	; 0
    17f6:	e5 e4       	ldi	r30, 0x45	; 69
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	80 81       	ld	r24, Z
    17fc:	88 7f       	andi	r24, 0xF8	; 248
    17fe:	8c 93       	st	X, r24
		TCCR2|=(Copy_psTimer->Prescaler);
    1800:	a5 e4       	ldi	r26, 0x45	; 69
    1802:	b0 e0       	ldi	r27, 0x00	; 0
    1804:	e5 e4       	ldi	r30, 0x45	; 69
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	90 81       	ld	r25, Z
    180a:	ea 81       	ldd	r30, Y+2	; 0x02
    180c:	fb 81       	ldd	r31, Y+3	; 0x03
    180e:	81 81       	ldd	r24, Z+1	; 0x01
    1810:	89 2b       	or	r24, r25
    1812:	8c 93       	st	X, r24
    1814:	02 c0       	rjmp	.+4      	; 0x181a <TIMER2_u8Init+0x18c>
	}
	else{
		Local_u8ErrorState=NULL_POINTER;
    1816:	82 e0       	ldi	r24, 0x02	; 2
    1818:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    181a:	89 81       	ldd	r24, Y+1	; 0x01
}
    181c:	0f 90       	pop	r0
    181e:	0f 90       	pop	r0
    1820:	0f 90       	pop	r0
    1822:	cf 91       	pop	r28
    1824:	df 91       	pop	r29
    1826:	08 95       	ret

00001828 <TIMER2_delay_ms>:

u8 TIMER2_delay_ms(Timer_t* Copy_psTimer,u16 Copy_u16Time){
    1828:	df 93       	push	r29
    182a:	cf 93       	push	r28
    182c:	cd b7       	in	r28, 0x3d	; 61
    182e:	de b7       	in	r29, 0x3e	; 62
    1830:	6a 97       	sbiw	r28, 0x1a	; 26
    1832:	0f b6       	in	r0, 0x3f	; 63
    1834:	f8 94       	cli
    1836:	de bf       	out	0x3e, r29	; 62
    1838:	0f be       	out	0x3f, r0	; 63
    183a:	cd bf       	out	0x3d, r28	; 61
    183c:	9b 8b       	std	Y+19, r25	; 0x13
    183e:	8a 8b       	std	Y+18, r24	; 0x12
    1840:	7d 8b       	std	Y+21, r23	; 0x15
    1842:	6c 8b       	std	Y+20, r22	; 0x14
	u8 Local_u8ErrorState=OK,Local_u8Break=1; u16 Local_u16Counter=0;u32 Local_u32usTime,Local_u32CompMatchCount;
    1844:	1c 86       	std	Y+12, r1	; 0x0c
    1846:	81 e0       	ldi	r24, 0x01	; 1
    1848:	8b 87       	std	Y+11, r24	; 0x0b
    184a:	1a 86       	std	Y+10, r1	; 0x0a
    184c:	19 86       	std	Y+9, r1	; 0x09
	if(Copy_psTimer!=NULL){
    184e:	8a 89       	ldd	r24, Y+18	; 0x12
    1850:	9b 89       	ldd	r25, Y+19	; 0x13
    1852:	00 97       	sbiw	r24, 0x00	; 0
    1854:	09 f4       	brne	.+2      	; 0x1858 <TIMER2_delay_ms+0x30>
    1856:	82 c0       	rjmp	.+260    	; 0x195c <TIMER2_delay_ms+0x134>
		Timer_t Timer ={TIMER_CTC,PRSCLR_DIV_BY_8,OCM_DISCONNECT,INT_DISABLE,INT_DISABLE};
    1858:	ce 01       	movw	r24, r28
    185a:	0d 96       	adiw	r24, 0x0d	; 13
    185c:	9f 8b       	std	Y+23, r25	; 0x17
    185e:	8e 8b       	std	Y+22, r24	; 0x16
    1860:	e5 e6       	ldi	r30, 0x65	; 101
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	f9 8f       	std	Y+25, r31	; 0x19
    1866:	e8 8f       	std	Y+24, r30	; 0x18
    1868:	f5 e0       	ldi	r31, 0x05	; 5
    186a:	fa 8f       	std	Y+26, r31	; 0x1a
    186c:	e8 8d       	ldd	r30, Y+24	; 0x18
    186e:	f9 8d       	ldd	r31, Y+25	; 0x19
    1870:	00 80       	ld	r0, Z
    1872:	88 8d       	ldd	r24, Y+24	; 0x18
    1874:	99 8d       	ldd	r25, Y+25	; 0x19
    1876:	01 96       	adiw	r24, 0x01	; 1
    1878:	99 8f       	std	Y+25, r25	; 0x19
    187a:	88 8f       	std	Y+24, r24	; 0x18
    187c:	ee 89       	ldd	r30, Y+22	; 0x16
    187e:	ff 89       	ldd	r31, Y+23	; 0x17
    1880:	00 82       	st	Z, r0
    1882:	8e 89       	ldd	r24, Y+22	; 0x16
    1884:	9f 89       	ldd	r25, Y+23	; 0x17
    1886:	01 96       	adiw	r24, 0x01	; 1
    1888:	9f 8b       	std	Y+23, r25	; 0x17
    188a:	8e 8b       	std	Y+22, r24	; 0x16
    188c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    188e:	91 50       	subi	r25, 0x01	; 1
    1890:	9a 8f       	std	Y+26, r25	; 0x1a
    1892:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1894:	ee 23       	and	r30, r30
    1896:	51 f7       	brne	.-44     	; 0x186c <TIMER2_delay_ms+0x44>
		TIMER_u8SetCompMatch(TIMER2,250);
    1898:	84 e0       	ldi	r24, 0x04	; 4
    189a:	6a ef       	ldi	r22, 0xFA	; 250
    189c:	70 e0       	ldi	r23, 0x00	; 0
    189e:	0e 94 e6 04 	call	0x9cc	; 0x9cc <TIMER_u8SetCompMatch>
		Local_u32usTime=(u32)Copy_u16Time*1000UL;
    18a2:	8c 89       	ldd	r24, Y+20	; 0x14
    18a4:	9d 89       	ldd	r25, Y+21	; 0x15
    18a6:	cc 01       	movw	r24, r24
    18a8:	a0 e0       	ldi	r26, 0x00	; 0
    18aa:	b0 e0       	ldi	r27, 0x00	; 0
    18ac:	28 ee       	ldi	r18, 0xE8	; 232
    18ae:	33 e0       	ldi	r19, 0x03	; 3
    18b0:	40 e0       	ldi	r20, 0x00	; 0
    18b2:	50 e0       	ldi	r21, 0x00	; 0
    18b4:	bc 01       	movw	r22, r24
    18b6:	cd 01       	movw	r24, r26
    18b8:	0e 94 28 11 	call	0x2250	; 0x2250 <__mulsi3>
    18bc:	dc 01       	movw	r26, r24
    18be:	cb 01       	movw	r24, r22
    18c0:	8d 83       	std	Y+5, r24	; 0x05
    18c2:	9e 83       	std	Y+6, r25	; 0x06
    18c4:	af 83       	std	Y+7, r26	; 0x07
    18c6:	b8 87       	std	Y+8, r27	; 0x08
		Local_u32CompMatchCount=Local_u32usTime/250;
    18c8:	8d 81       	ldd	r24, Y+5	; 0x05
    18ca:	9e 81       	ldd	r25, Y+6	; 0x06
    18cc:	af 81       	ldd	r26, Y+7	; 0x07
    18ce:	b8 85       	ldd	r27, Y+8	; 0x08
    18d0:	2a ef       	ldi	r18, 0xFA	; 250
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	40 e0       	ldi	r20, 0x00	; 0
    18d6:	50 e0       	ldi	r21, 0x00	; 0
    18d8:	bc 01       	movw	r22, r24
    18da:	cd 01       	movw	r24, r26
    18dc:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <__udivmodsi4>
    18e0:	da 01       	movw	r26, r20
    18e2:	c9 01       	movw	r24, r18
    18e4:	89 83       	std	Y+1, r24	; 0x01
    18e6:	9a 83       	std	Y+2, r25	; 0x02
    18e8:	ab 83       	std	Y+3, r26	; 0x03
    18ea:	bc 83       	std	Y+4, r27	; 0x04
		TIMER2_u8Init(&Timer);
    18ec:	ce 01       	movw	r24, r28
    18ee:	0d 96       	adiw	r24, 0x0d	; 13
    18f0:	0e 94 47 0b 	call	0x168e	; 0x168e <TIMER2_u8Init>
    18f4:	2b c0       	rjmp	.+86     	; 0x194c <TIMER2_delay_ms+0x124>
		while(Local_u8Break==1){
			if(GET_BIT(TIFR,TIFR_OCF2)==1){
    18f6:	e8 e5       	ldi	r30, 0x58	; 88
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	80 81       	ld	r24, Z
    18fc:	88 1f       	adc	r24, r24
    18fe:	88 27       	eor	r24, r24
    1900:	88 1f       	adc	r24, r24
    1902:	81 30       	cpi	r24, 0x01	; 1
    1904:	19 f5       	brne	.+70     	; 0x194c <TIMER2_delay_ms+0x124>
				if(Local_u16Counter==Local_u32CompMatchCount){
    1906:	89 85       	ldd	r24, Y+9	; 0x09
    1908:	9a 85       	ldd	r25, Y+10	; 0x0a
    190a:	9c 01       	movw	r18, r24
    190c:	40 e0       	ldi	r20, 0x00	; 0
    190e:	50 e0       	ldi	r21, 0x00	; 0
    1910:	89 81       	ldd	r24, Y+1	; 0x01
    1912:	9a 81       	ldd	r25, Y+2	; 0x02
    1914:	ab 81       	ldd	r26, Y+3	; 0x03
    1916:	bc 81       	ldd	r27, Y+4	; 0x04
    1918:	28 17       	cp	r18, r24
    191a:	39 07       	cpc	r19, r25
    191c:	4a 07       	cpc	r20, r26
    191e:	5b 07       	cpc	r21, r27
    1920:	49 f4       	brne	.+18     	; 0x1934 <TIMER2_delay_ms+0x10c>
					Local_u8Break=0;
    1922:	1b 86       	std	Y+11, r1	; 0x0b
					SET_BIT(TIFR,TIFR_OCF2);
    1924:	a8 e5       	ldi	r26, 0x58	; 88
    1926:	b0 e0       	ldi	r27, 0x00	; 0
    1928:	e8 e5       	ldi	r30, 0x58	; 88
    192a:	f0 e0       	ldi	r31, 0x00	; 0
    192c:	80 81       	ld	r24, Z
    192e:	80 68       	ori	r24, 0x80	; 128
    1930:	8c 93       	st	X, r24
    1932:	0c c0       	rjmp	.+24     	; 0x194c <TIMER2_delay_ms+0x124>
				}
				else{
					Local_u16Counter++;
    1934:	89 85       	ldd	r24, Y+9	; 0x09
    1936:	9a 85       	ldd	r25, Y+10	; 0x0a
    1938:	01 96       	adiw	r24, 0x01	; 1
    193a:	9a 87       	std	Y+10, r25	; 0x0a
    193c:	89 87       	std	Y+9, r24	; 0x09
					SET_BIT(TIFR,TIFR_OCF2);
    193e:	a8 e5       	ldi	r26, 0x58	; 88
    1940:	b0 e0       	ldi	r27, 0x00	; 0
    1942:	e8 e5       	ldi	r30, 0x58	; 88
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	80 81       	ld	r24, Z
    1948:	80 68       	ori	r24, 0x80	; 128
    194a:	8c 93       	st	X, r24
		Timer_t Timer ={TIMER_CTC,PRSCLR_DIV_BY_8,OCM_DISCONNECT,INT_DISABLE,INT_DISABLE};
		TIMER_u8SetCompMatch(TIMER2,250);
		Local_u32usTime=(u32)Copy_u16Time*1000UL;
		Local_u32CompMatchCount=Local_u32usTime/250;
		TIMER2_u8Init(&Timer);
		while(Local_u8Break==1){
    194c:	8b 85       	ldd	r24, Y+11	; 0x0b
    194e:	81 30       	cpi	r24, 0x01	; 1
    1950:	91 f2       	breq	.-92     	; 0x18f6 <TIMER2_delay_ms+0xce>
					Local_u16Counter++;
					SET_BIT(TIFR,TIFR_OCF2);
				}
			}
		}
		TIMER2_u8Init(Copy_psTimer);
    1952:	8a 89       	ldd	r24, Y+18	; 0x12
    1954:	9b 89       	ldd	r25, Y+19	; 0x13
    1956:	0e 94 47 0b 	call	0x168e	; 0x168e <TIMER2_u8Init>
    195a:	02 c0       	rjmp	.+4      	; 0x1960 <TIMER2_delay_ms+0x138>

	}
	else{
		Local_u8ErrorState=NULL_POINTER;
    195c:	82 e0       	ldi	r24, 0x02	; 2
    195e:	8c 87       	std	Y+12, r24	; 0x0c
	}
	return Local_u8ErrorState;
    1960:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    1962:	6a 96       	adiw	r28, 0x1a	; 26
    1964:	0f b6       	in	r0, 0x3f	; 63
    1966:	f8 94       	cli
    1968:	de bf       	out	0x3e, r29	; 62
    196a:	0f be       	out	0x3f, r0	; 63
    196c:	cd bf       	out	0x3d, r28	; 61
    196e:	cf 91       	pop	r28
    1970:	df 91       	pop	r29
    1972:	08 95       	ret

00001974 <TIMER2_delay_us>:

u8 TIMER2_delay_us(Timer_t* Copy_psTimer,u16 Copy_u16Time){
    1974:	df 93       	push	r29
    1976:	cf 93       	push	r28
    1978:	cd b7       	in	r28, 0x3d	; 61
    197a:	de b7       	in	r29, 0x3e	; 62
    197c:	6b 97       	sbiw	r28, 0x1b	; 27
    197e:	0f b6       	in	r0, 0x3f	; 63
    1980:	f8 94       	cli
    1982:	de bf       	out	0x3e, r29	; 62
    1984:	0f be       	out	0x3f, r0	; 63
    1986:	cd bf       	out	0x3d, r28	; 61
    1988:	9c 8b       	std	Y+20, r25	; 0x14
    198a:	8b 8b       	std	Y+19, r24	; 0x13
    198c:	7e 8b       	std	Y+22, r23	; 0x16
    198e:	6d 8b       	std	Y+21, r22	; 0x15
	u8 Local_u8ErrorState=OK,Local_u8Break=1,Local_u8CompMatch; u16 Local_u16Counter=0;u32 Local_u32usTime,Local_u32CompMatchCount;
    1990:	1d 86       	std	Y+13, r1	; 0x0d
    1992:	81 e0       	ldi	r24, 0x01	; 1
    1994:	8c 87       	std	Y+12, r24	; 0x0c
    1996:	1a 86       	std	Y+10, r1	; 0x0a
    1998:	19 86       	std	Y+9, r1	; 0x09
	if(Copy_psTimer!=NULL){
    199a:	8b 89       	ldd	r24, Y+19	; 0x13
    199c:	9c 89       	ldd	r25, Y+20	; 0x14
    199e:	00 97       	sbiw	r24, 0x00	; 0
    19a0:	09 f4       	brne	.+2      	; 0x19a4 <TIMER2_delay_us+0x30>
    19a2:	85 c0       	rjmp	.+266    	; 0x1aae <TIMER2_delay_us+0x13a>
		Timer_t Timer ={TIMER_CTC,PRSCLR_DIV_BY_8,OCM_DISCONNECT,INT_DISABLE,INT_DISABLE};
    19a4:	ce 01       	movw	r24, r28
    19a6:	0e 96       	adiw	r24, 0x0e	; 14
    19a8:	98 8f       	std	Y+24, r25	; 0x18
    19aa:	8f 8b       	std	Y+23, r24	; 0x17
    19ac:	ea e6       	ldi	r30, 0x6A	; 106
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	fa 8f       	std	Y+26, r31	; 0x1a
    19b2:	e9 8f       	std	Y+25, r30	; 0x19
    19b4:	f5 e0       	ldi	r31, 0x05	; 5
    19b6:	fb 8f       	std	Y+27, r31	; 0x1b
    19b8:	e9 8d       	ldd	r30, Y+25	; 0x19
    19ba:	fa 8d       	ldd	r31, Y+26	; 0x1a
    19bc:	00 80       	ld	r0, Z
    19be:	89 8d       	ldd	r24, Y+25	; 0x19
    19c0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    19c2:	01 96       	adiw	r24, 0x01	; 1
    19c4:	9a 8f       	std	Y+26, r25	; 0x1a
    19c6:	89 8f       	std	Y+25, r24	; 0x19
    19c8:	ef 89       	ldd	r30, Y+23	; 0x17
    19ca:	f8 8d       	ldd	r31, Y+24	; 0x18
    19cc:	00 82       	st	Z, r0
    19ce:	8f 89       	ldd	r24, Y+23	; 0x17
    19d0:	98 8d       	ldd	r25, Y+24	; 0x18
    19d2:	01 96       	adiw	r24, 0x01	; 1
    19d4:	98 8f       	std	Y+24, r25	; 0x18
    19d6:	8f 8b       	std	Y+23, r24	; 0x17
    19d8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    19da:	91 50       	subi	r25, 0x01	; 1
    19dc:	9b 8f       	std	Y+27, r25	; 0x1b
    19de:	eb 8d       	ldd	r30, Y+27	; 0x1b
    19e0:	ee 23       	and	r30, r30
    19e2:	51 f7       	brne	.-44     	; 0x19b8 <TIMER2_delay_us+0x44>
		for(Local_u8CompMatch=255;Local_u8CompMatch>0;Local_u8CompMatch--){
    19e4:	8f ef       	ldi	r24, 0xFF	; 255
    19e6:	8b 87       	std	Y+11, r24	; 0x0b
    19e8:	0d c0       	rjmp	.+26     	; 0x1a04 <TIMER2_delay_us+0x90>
			if(Copy_u16Time%Local_u8CompMatch==0){
    19ea:	8b 85       	ldd	r24, Y+11	; 0x0b
    19ec:	28 2f       	mov	r18, r24
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	8d 89       	ldd	r24, Y+21	; 0x15
    19f2:	9e 89       	ldd	r25, Y+22	; 0x16
    19f4:	b9 01       	movw	r22, r18
    19f6:	0e 94 47 11 	call	0x228e	; 0x228e <__udivmodhi4>
    19fa:	00 97       	sbiw	r24, 0x00	; 0
    19fc:	31 f0       	breq	.+12     	; 0x1a0a <TIMER2_delay_us+0x96>

u8 TIMER2_delay_us(Timer_t* Copy_psTimer,u16 Copy_u16Time){
	u8 Local_u8ErrorState=OK,Local_u8Break=1,Local_u8CompMatch; u16 Local_u16Counter=0;u32 Local_u32usTime,Local_u32CompMatchCount;
	if(Copy_psTimer!=NULL){
		Timer_t Timer ={TIMER_CTC,PRSCLR_DIV_BY_8,OCM_DISCONNECT,INT_DISABLE,INT_DISABLE};
		for(Local_u8CompMatch=255;Local_u8CompMatch>0;Local_u8CompMatch--){
    19fe:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a00:	81 50       	subi	r24, 0x01	; 1
    1a02:	8b 87       	std	Y+11, r24	; 0x0b
    1a04:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a06:	88 23       	and	r24, r24
    1a08:	81 f7       	brne	.-32     	; 0x19ea <TIMER2_delay_us+0x76>
			if(Copy_u16Time%Local_u8CompMatch==0){
				break;
			}
		}
		TIMER_u8SetCompMatch(TIMER2,Local_u8CompMatch);
    1a0a:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a0c:	28 2f       	mov	r18, r24
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	84 e0       	ldi	r24, 0x04	; 4
    1a12:	b9 01       	movw	r22, r18
    1a14:	0e 94 e6 04 	call	0x9cc	; 0x9cc <TIMER_u8SetCompMatch>
		Local_u32CompMatchCount=Local_u32usTime/Local_u8CompMatch;
    1a18:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a1a:	28 2f       	mov	r18, r24
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	40 e0       	ldi	r20, 0x00	; 0
    1a20:	50 e0       	ldi	r21, 0x00	; 0
    1a22:	8d 81       	ldd	r24, Y+5	; 0x05
    1a24:	9e 81       	ldd	r25, Y+6	; 0x06
    1a26:	af 81       	ldd	r26, Y+7	; 0x07
    1a28:	b8 85       	ldd	r27, Y+8	; 0x08
    1a2a:	bc 01       	movw	r22, r24
    1a2c:	cd 01       	movw	r24, r26
    1a2e:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <__udivmodsi4>
    1a32:	da 01       	movw	r26, r20
    1a34:	c9 01       	movw	r24, r18
    1a36:	89 83       	std	Y+1, r24	; 0x01
    1a38:	9a 83       	std	Y+2, r25	; 0x02
    1a3a:	ab 83       	std	Y+3, r26	; 0x03
    1a3c:	bc 83       	std	Y+4, r27	; 0x04
		TIMER2_u8Init(&Timer);
    1a3e:	ce 01       	movw	r24, r28
    1a40:	0e 96       	adiw	r24, 0x0e	; 14
    1a42:	0e 94 47 0b 	call	0x168e	; 0x168e <TIMER2_u8Init>
    1a46:	2b c0       	rjmp	.+86     	; 0x1a9e <TIMER2_delay_us+0x12a>
		while(Local_u8Break==1){
			if(GET_BIT(TIFR,TIFR_OCF2)==1){
    1a48:	e8 e5       	ldi	r30, 0x58	; 88
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	80 81       	ld	r24, Z
    1a4e:	88 1f       	adc	r24, r24
    1a50:	88 27       	eor	r24, r24
    1a52:	88 1f       	adc	r24, r24
    1a54:	81 30       	cpi	r24, 0x01	; 1
    1a56:	19 f5       	brne	.+70     	; 0x1a9e <TIMER2_delay_us+0x12a>
				if(Local_u16Counter==Local_u32CompMatchCount){
    1a58:	89 85       	ldd	r24, Y+9	; 0x09
    1a5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a5c:	9c 01       	movw	r18, r24
    1a5e:	40 e0       	ldi	r20, 0x00	; 0
    1a60:	50 e0       	ldi	r21, 0x00	; 0
    1a62:	89 81       	ldd	r24, Y+1	; 0x01
    1a64:	9a 81       	ldd	r25, Y+2	; 0x02
    1a66:	ab 81       	ldd	r26, Y+3	; 0x03
    1a68:	bc 81       	ldd	r27, Y+4	; 0x04
    1a6a:	28 17       	cp	r18, r24
    1a6c:	39 07       	cpc	r19, r25
    1a6e:	4a 07       	cpc	r20, r26
    1a70:	5b 07       	cpc	r21, r27
    1a72:	49 f4       	brne	.+18     	; 0x1a86 <TIMER2_delay_us+0x112>
					Local_u8Break=0;
    1a74:	1c 86       	std	Y+12, r1	; 0x0c
					SET_BIT(TIFR,TIFR_OCF2);
    1a76:	a8 e5       	ldi	r26, 0x58	; 88
    1a78:	b0 e0       	ldi	r27, 0x00	; 0
    1a7a:	e8 e5       	ldi	r30, 0x58	; 88
    1a7c:	f0 e0       	ldi	r31, 0x00	; 0
    1a7e:	80 81       	ld	r24, Z
    1a80:	80 68       	ori	r24, 0x80	; 128
    1a82:	8c 93       	st	X, r24
    1a84:	0c c0       	rjmp	.+24     	; 0x1a9e <TIMER2_delay_us+0x12a>
				}
				else{
					Local_u16Counter++;
    1a86:	89 85       	ldd	r24, Y+9	; 0x09
    1a88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a8a:	01 96       	adiw	r24, 0x01	; 1
    1a8c:	9a 87       	std	Y+10, r25	; 0x0a
    1a8e:	89 87       	std	Y+9, r24	; 0x09
					SET_BIT(TIFR,TIFR_OCF2);
    1a90:	a8 e5       	ldi	r26, 0x58	; 88
    1a92:	b0 e0       	ldi	r27, 0x00	; 0
    1a94:	e8 e5       	ldi	r30, 0x58	; 88
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	80 81       	ld	r24, Z
    1a9a:	80 68       	ori	r24, 0x80	; 128
    1a9c:	8c 93       	st	X, r24
			}
		}
		TIMER_u8SetCompMatch(TIMER2,Local_u8CompMatch);
		Local_u32CompMatchCount=Local_u32usTime/Local_u8CompMatch;
		TIMER2_u8Init(&Timer);
		while(Local_u8Break==1){
    1a9e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1aa0:	81 30       	cpi	r24, 0x01	; 1
    1aa2:	91 f2       	breq	.-92     	; 0x1a48 <TIMER2_delay_us+0xd4>
					Local_u16Counter++;
					SET_BIT(TIFR,TIFR_OCF2);
				}
			}
		}
		TIMER2_u8Init(Copy_psTimer);
    1aa4:	8b 89       	ldd	r24, Y+19	; 0x13
    1aa6:	9c 89       	ldd	r25, Y+20	; 0x14
    1aa8:	0e 94 47 0b 	call	0x168e	; 0x168e <TIMER2_u8Init>
    1aac:	02 c0       	rjmp	.+4      	; 0x1ab2 <TIMER2_delay_us+0x13e>

	}
	else{
		Local_u8ErrorState=NULL_POINTER;
    1aae:	82 e0       	ldi	r24, 0x02	; 2
    1ab0:	8d 87       	std	Y+13, r24	; 0x0d
	}
	return Local_u8ErrorState;
    1ab2:	8d 85       	ldd	r24, Y+13	; 0x0d
}
    1ab4:	6b 96       	adiw	r28, 0x1b	; 27
    1ab6:	0f b6       	in	r0, 0x3f	; 63
    1ab8:	f8 94       	cli
    1aba:	de bf       	out	0x3e, r29	; 62
    1abc:	0f be       	out	0x3f, r0	; 63
    1abe:	cd bf       	out	0x3d, r28	; 61
    1ac0:	cf 91       	pop	r28
    1ac2:	df 91       	pop	r29
    1ac4:	08 95       	ret

00001ac6 <TIMER2_u8PWMGenerate>:

u8 TIMER2_u8PWMGenerate(Timer_t* Copy_psTimer,u8 Copy_u8DutyCycle){
    1ac6:	8f 92       	push	r8
    1ac8:	9f 92       	push	r9
    1aca:	af 92       	push	r10
    1acc:	bf 92       	push	r11
    1ace:	cf 92       	push	r12
    1ad0:	df 92       	push	r13
    1ad2:	ef 92       	push	r14
    1ad4:	ff 92       	push	r15
    1ad6:	0f 93       	push	r16
    1ad8:	1f 93       	push	r17
    1ada:	df 93       	push	r29
    1adc:	cf 93       	push	r28
    1ade:	00 d0       	rcall	.+0      	; 0x1ae0 <TIMER2_u8PWMGenerate+0x1a>
    1ae0:	00 d0       	rcall	.+0      	; 0x1ae2 <TIMER2_u8PWMGenerate+0x1c>
    1ae2:	cd b7       	in	r28, 0x3d	; 61
    1ae4:	de b7       	in	r29, 0x3e	; 62
    1ae6:	9b 83       	std	Y+3, r25	; 0x03
    1ae8:	8a 83       	std	Y+2, r24	; 0x02
    1aea:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState=OK;
    1aec:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_psTimer!=NULL){
    1aee:	8a 81       	ldd	r24, Y+2	; 0x02
    1af0:	9b 81       	ldd	r25, Y+3	; 0x03
    1af2:	00 97       	sbiw	r24, 0x00	; 0
    1af4:	09 f4       	brne	.+2      	; 0x1af8 <TIMER2_u8PWMGenerate+0x32>
    1af6:	44 c0       	rjmp	.+136    	; 0x1b80 <TIMER2_u8PWMGenerate+0xba>
		if((Copy_psTimer->WaveGenMode) == TIMER_FAST_PWM && (Copy_psTimer->CompareMatchOutputMode)== OCM_FAST_PWM_NON_INVERTED ){
    1af8:	ea 81       	ldd	r30, Y+2	; 0x02
    1afa:	fb 81       	ldd	r31, Y+3	; 0x03
    1afc:	80 81       	ld	r24, Z
    1afe:	84 30       	cpi	r24, 0x04	; 4
    1b00:	e1 f5       	brne	.+120    	; 0x1b7a <TIMER2_u8PWMGenerate+0xb4>
    1b02:	ea 81       	ldd	r30, Y+2	; 0x02
    1b04:	fb 81       	ldd	r31, Y+3	; 0x03
    1b06:	82 81       	ldd	r24, Z+2	; 0x02
    1b08:	82 30       	cpi	r24, 0x02	; 2
    1b0a:	b9 f5       	brne	.+110    	; 0x1b7a <TIMER2_u8PWMGenerate+0xb4>
			OCR2 = MATH_s32Map(0,100,0,255,Copy_u8DutyCycle);
    1b0c:	0f 2e       	mov	r0, r31
    1b0e:	f3 e4       	ldi	r31, 0x43	; 67
    1b10:	8f 2e       	mov	r8, r31
    1b12:	99 24       	eor	r9, r9
    1b14:	f0 2d       	mov	r31, r0
    1b16:	8c 81       	ldd	r24, Y+4	; 0x04
    1b18:	88 2f       	mov	r24, r24
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	a0 e0       	ldi	r26, 0x00	; 0
    1b1e:	b0 e0       	ldi	r27, 0x00	; 0
    1b20:	00 d0       	rcall	.+0      	; 0x1b22 <TIMER2_u8PWMGenerate+0x5c>
    1b22:	00 d0       	rcall	.+0      	; 0x1b24 <TIMER2_u8PWMGenerate+0x5e>
    1b24:	ed b7       	in	r30, 0x3d	; 61
    1b26:	fe b7       	in	r31, 0x3e	; 62
    1b28:	31 96       	adiw	r30, 0x01	; 1
    1b2a:	80 83       	st	Z, r24
    1b2c:	91 83       	std	Z+1, r25	; 0x01
    1b2e:	a2 83       	std	Z+2, r26	; 0x02
    1b30:	b3 83       	std	Z+3, r27	; 0x03
    1b32:	60 e0       	ldi	r22, 0x00	; 0
    1b34:	70 e0       	ldi	r23, 0x00	; 0
    1b36:	80 e0       	ldi	r24, 0x00	; 0
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	24 e6       	ldi	r18, 0x64	; 100
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	40 e0       	ldi	r20, 0x00	; 0
    1b40:	50 e0       	ldi	r21, 0x00	; 0
    1b42:	ee 24       	eor	r14, r14
    1b44:	ff 24       	eor	r15, r15
    1b46:	87 01       	movw	r16, r14
    1b48:	0f 2e       	mov	r0, r31
    1b4a:	ff ef       	ldi	r31, 0xFF	; 255
    1b4c:	af 2e       	mov	r10, r31
    1b4e:	f0 e0       	ldi	r31, 0x00	; 0
    1b50:	bf 2e       	mov	r11, r31
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	cf 2e       	mov	r12, r31
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	df 2e       	mov	r13, r31
    1b5a:	f0 2d       	mov	r31, r0
    1b5c:	0e 94 01 03 	call	0x602	; 0x602 <MATH_s32Map>
    1b60:	0f 90       	pop	r0
    1b62:	0f 90       	pop	r0
    1b64:	0f 90       	pop	r0
    1b66:	0f 90       	pop	r0
    1b68:	dc 01       	movw	r26, r24
    1b6a:	cb 01       	movw	r24, r22
    1b6c:	f4 01       	movw	r30, r8
    1b6e:	80 83       	st	Z, r24
			TIMER2_u8Init(Copy_psTimer);
    1b70:	8a 81       	ldd	r24, Y+2	; 0x02
    1b72:	9b 81       	ldd	r25, Y+3	; 0x03
    1b74:	0e 94 47 0b 	call	0x168e	; 0x168e <TIMER2_u8Init>
    1b78:	05 c0       	rjmp	.+10     	; 0x1b84 <TIMER2_u8PWMGenerate+0xbe>
		}
		else{
			Local_u8ErrorState=NOK;
    1b7a:	81 e0       	ldi	r24, 0x01	; 1
    1b7c:	89 83       	std	Y+1, r24	; 0x01
    1b7e:	02 c0       	rjmp	.+4      	; 0x1b84 <TIMER2_u8PWMGenerate+0xbe>
		}
	}
	else{
		Local_u8ErrorState=NULL_POINTER;
    1b80:	82 e0       	ldi	r24, 0x02	; 2
    1b82:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1b84:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b86:	0f 90       	pop	r0
    1b88:	0f 90       	pop	r0
    1b8a:	0f 90       	pop	r0
    1b8c:	0f 90       	pop	r0
    1b8e:	cf 91       	pop	r28
    1b90:	df 91       	pop	r29
    1b92:	1f 91       	pop	r17
    1b94:	0f 91       	pop	r16
    1b96:	ff 90       	pop	r15
    1b98:	ef 90       	pop	r14
    1b9a:	df 90       	pop	r13
    1b9c:	cf 90       	pop	r12
    1b9e:	bf 90       	pop	r11
    1ba0:	af 90       	pop	r10
    1ba2:	9f 90       	pop	r9
    1ba4:	8f 90       	pop	r8
    1ba6:	08 95       	ret

00001ba8 <TIMER2_u8Schedule>:


u8 TIMER2_u8Schedule(u16 Copy_u16msDelayTime,void(*Copy_pvFunc)(void),u8 Copy_u8Repeatability){
    1ba8:	df 93       	push	r29
    1baa:	cf 93       	push	r28
    1bac:	cd b7       	in	r28, 0x3d	; 61
    1bae:	de b7       	in	r29, 0x3e	; 62
    1bb0:	6a 97       	sbiw	r28, 0x1a	; 26
    1bb2:	0f b6       	in	r0, 0x3f	; 63
    1bb4:	f8 94       	cli
    1bb6:	de bf       	out	0x3e, r29	; 62
    1bb8:	0f be       	out	0x3f, r0	; 63
    1bba:	cd bf       	out	0x3d, r28	; 61
    1bbc:	9a 8b       	std	Y+18, r25	; 0x12
    1bbe:	89 8b       	std	Y+17, r24	; 0x11
    1bc0:	7c 8b       	std	Y+20, r23	; 0x14
    1bc2:	6b 8b       	std	Y+19, r22	; 0x13
    1bc4:	4d 8b       	std	Y+21, r20	; 0x15
	u8 Local_u8ErrorState=OK; u16 Local_u16Counter=0;u32 Local_u32usTime,Local_u32CompMatchCount;
    1bc6:	1b 86       	std	Y+11, r1	; 0x0b
    1bc8:	1a 86       	std	Y+10, r1	; 0x0a
    1bca:	19 86       	std	Y+9, r1	; 0x09
	if(Copy_pvFunc!=NULL){
    1bcc:	8b 89       	ldd	r24, Y+19	; 0x13
    1bce:	9c 89       	ldd	r25, Y+20	; 0x14
    1bd0:	00 97       	sbiw	r24, 0x00	; 0
    1bd2:	09 f4       	brne	.+2      	; 0x1bd6 <TIMER2_u8Schedule+0x2e>
    1bd4:	6a c0       	rjmp	.+212    	; 0x1caa <TIMER2_u8Schedule+0x102>
		TIMER2_pvScheduleFunc=Copy_pvFunc;
    1bd6:	8b 89       	ldd	r24, Y+19	; 0x13
    1bd8:	9c 89       	ldd	r25, Y+20	; 0x14
    1bda:	90 93 8b 00 	sts	0x008B, r25
    1bde:	80 93 8a 00 	sts	0x008A, r24
		TIMERS_pvCallBackFunc[INT_TIMER2_COMP]= (&TIMER2_voidScheduleFunc);
    1be2:	85 e0       	ldi	r24, 0x05	; 5
    1be4:	94 e0       	ldi	r25, 0x04	; 4
    1be6:	90 93 7b 00 	sts	0x007B, r25
    1bea:	80 93 7a 00 	sts	0x007A, r24
		Timer_t Timer ={TIMER_CTC,PRSCLR_DIV_BY_8,OCM_DISCONNECT,INT_ENABLE,INT_DISABLE};
    1bee:	ce 01       	movw	r24, r28
    1bf0:	0c 96       	adiw	r24, 0x0c	; 12
    1bf2:	9f 8b       	std	Y+23, r25	; 0x17
    1bf4:	8e 8b       	std	Y+22, r24	; 0x16
    1bf6:	ef e6       	ldi	r30, 0x6F	; 111
    1bf8:	f0 e0       	ldi	r31, 0x00	; 0
    1bfa:	f9 8f       	std	Y+25, r31	; 0x19
    1bfc:	e8 8f       	std	Y+24, r30	; 0x18
    1bfe:	f5 e0       	ldi	r31, 0x05	; 5
    1c00:	fa 8f       	std	Y+26, r31	; 0x1a
    1c02:	e8 8d       	ldd	r30, Y+24	; 0x18
    1c04:	f9 8d       	ldd	r31, Y+25	; 0x19
    1c06:	00 80       	ld	r0, Z
    1c08:	88 8d       	ldd	r24, Y+24	; 0x18
    1c0a:	99 8d       	ldd	r25, Y+25	; 0x19
    1c0c:	01 96       	adiw	r24, 0x01	; 1
    1c0e:	99 8f       	std	Y+25, r25	; 0x19
    1c10:	88 8f       	std	Y+24, r24	; 0x18
    1c12:	ee 89       	ldd	r30, Y+22	; 0x16
    1c14:	ff 89       	ldd	r31, Y+23	; 0x17
    1c16:	00 82       	st	Z, r0
    1c18:	8e 89       	ldd	r24, Y+22	; 0x16
    1c1a:	9f 89       	ldd	r25, Y+23	; 0x17
    1c1c:	01 96       	adiw	r24, 0x01	; 1
    1c1e:	9f 8b       	std	Y+23, r25	; 0x17
    1c20:	8e 8b       	std	Y+22, r24	; 0x16
    1c22:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1c24:	91 50       	subi	r25, 0x01	; 1
    1c26:	9a 8f       	std	Y+26, r25	; 0x1a
    1c28:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1c2a:	ee 23       	and	r30, r30
    1c2c:	51 f7       	brne	.-44     	; 0x1c02 <TIMER2_u8Schedule+0x5a>
		TIMER_u8SetCompMatch(TIMER2,250);
    1c2e:	84 e0       	ldi	r24, 0x04	; 4
    1c30:	6a ef       	ldi	r22, 0xFA	; 250
    1c32:	70 e0       	ldi	r23, 0x00	; 0
    1c34:	0e 94 e6 04 	call	0x9cc	; 0x9cc <TIMER_u8SetCompMatch>
		Local_u32usTime=(u32)Copy_u16msDelayTime*1000UL;
    1c38:	89 89       	ldd	r24, Y+17	; 0x11
    1c3a:	9a 89       	ldd	r25, Y+18	; 0x12
    1c3c:	cc 01       	movw	r24, r24
    1c3e:	a0 e0       	ldi	r26, 0x00	; 0
    1c40:	b0 e0       	ldi	r27, 0x00	; 0
    1c42:	28 ee       	ldi	r18, 0xE8	; 232
    1c44:	33 e0       	ldi	r19, 0x03	; 3
    1c46:	40 e0       	ldi	r20, 0x00	; 0
    1c48:	50 e0       	ldi	r21, 0x00	; 0
    1c4a:	bc 01       	movw	r22, r24
    1c4c:	cd 01       	movw	r24, r26
    1c4e:	0e 94 28 11 	call	0x2250	; 0x2250 <__mulsi3>
    1c52:	dc 01       	movw	r26, r24
    1c54:	cb 01       	movw	r24, r22
    1c56:	8d 83       	std	Y+5, r24	; 0x05
    1c58:	9e 83       	std	Y+6, r25	; 0x06
    1c5a:	af 83       	std	Y+7, r26	; 0x07
    1c5c:	b8 87       	std	Y+8, r27	; 0x08
		Local_u32CompMatchCount=Local_u32usTime/250;
    1c5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c60:	9e 81       	ldd	r25, Y+6	; 0x06
    1c62:	af 81       	ldd	r26, Y+7	; 0x07
    1c64:	b8 85       	ldd	r27, Y+8	; 0x08
    1c66:	2a ef       	ldi	r18, 0xFA	; 250
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	40 e0       	ldi	r20, 0x00	; 0
    1c6c:	50 e0       	ldi	r21, 0x00	; 0
    1c6e:	bc 01       	movw	r22, r24
    1c70:	cd 01       	movw	r24, r26
    1c72:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <__udivmodsi4>
    1c76:	da 01       	movw	r26, r20
    1c78:	c9 01       	movw	r24, r18
    1c7a:	89 83       	std	Y+1, r24	; 0x01
    1c7c:	9a 83       	std	Y+2, r25	; 0x02
    1c7e:	ab 83       	std	Y+3, r26	; 0x03
    1c80:	bc 83       	std	Y+4, r27	; 0x04
		TIMER_u8ScheduleRepeatability=Copy_u8Repeatability;
    1c82:	8d 89       	ldd	r24, Y+21	; 0x15
    1c84:	80 93 94 00 	sts	0x0094, r24
		TIMER_u32ScheduleCompMatchCount=Local_u32CompMatchCount;
    1c88:	89 81       	ldd	r24, Y+1	; 0x01
    1c8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c8c:	ab 81       	ldd	r26, Y+3	; 0x03
    1c8e:	bc 81       	ldd	r27, Y+4	; 0x04
    1c90:	80 93 90 00 	sts	0x0090, r24
    1c94:	90 93 91 00 	sts	0x0091, r25
    1c98:	a0 93 92 00 	sts	0x0092, r26
    1c9c:	b0 93 93 00 	sts	0x0093, r27
		TIMER2_u8Init(&Timer);
    1ca0:	ce 01       	movw	r24, r28
    1ca2:	0c 96       	adiw	r24, 0x0c	; 12
    1ca4:	0e 94 47 0b 	call	0x168e	; 0x168e <TIMER2_u8Init>
    1ca8:	02 c0       	rjmp	.+4      	; 0x1cae <TIMER2_u8Schedule+0x106>

	}
	else{
		Local_u8ErrorState=NULL_POINTER;
    1caa:	82 e0       	ldi	r24, 0x02	; 2
    1cac:	8b 87       	std	Y+11, r24	; 0x0b
	}
	return Local_u8ErrorState;
    1cae:	8b 85       	ldd	r24, Y+11	; 0x0b
}
    1cb0:	6a 96       	adiw	r28, 0x1a	; 26
    1cb2:	0f b6       	in	r0, 0x3f	; 63
    1cb4:	f8 94       	cli
    1cb6:	de bf       	out	0x3e, r29	; 62
    1cb8:	0f be       	out	0x3f, r0	; 63
    1cba:	cd bf       	out	0x3d, r28	; 61
    1cbc:	cf 91       	pop	r28
    1cbe:	df 91       	pop	r29
    1cc0:	08 95       	ret

00001cc2 <ICU_u8Init>:


/********************************************************ICU*************************************************************
 ************************************************************************************************************************/

u8 ICU_u8Init(u8 Copy_u8Edge,u8 Copy_u8InterruptStatus){
    1cc2:	df 93       	push	r29
    1cc4:	cf 93       	push	r28
    1cc6:	00 d0       	rcall	.+0      	; 0x1cc8 <ICU_u8Init+0x6>
    1cc8:	0f 92       	push	r0
    1cca:	cd b7       	in	r28, 0x3d	; 61
    1ccc:	de b7       	in	r29, 0x3e	; 62
    1cce:	8a 83       	std	Y+2, r24	; 0x02
    1cd0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=OK;
    1cd2:	19 82       	std	Y+1, r1	; 0x01

	//Input Capture Edge Select
	if(Copy_u8Edge==RISING_EDGE){
    1cd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd6:	81 30       	cpi	r24, 0x01	; 1
    1cd8:	41 f4       	brne	.+16     	; 0x1cea <ICU_u8Init+0x28>
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    1cda:	ae e4       	ldi	r26, 0x4E	; 78
    1cdc:	b0 e0       	ldi	r27, 0x00	; 0
    1cde:	ee e4       	ldi	r30, 0x4E	; 78
    1ce0:	f0 e0       	ldi	r31, 0x00	; 0
    1ce2:	80 81       	ld	r24, Z
    1ce4:	80 64       	ori	r24, 0x40	; 64
    1ce6:	8c 93       	st	X, r24
    1ce8:	0d c0       	rjmp	.+26     	; 0x1d04 <ICU_u8Init+0x42>
	}
	else if(Copy_u8Edge==FALLING_EDGE){
    1cea:	8a 81       	ldd	r24, Y+2	; 0x02
    1cec:	88 23       	and	r24, r24
    1cee:	41 f4       	brne	.+16     	; 0x1d00 <ICU_u8Init+0x3e>
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
    1cf0:	ae e4       	ldi	r26, 0x4E	; 78
    1cf2:	b0 e0       	ldi	r27, 0x00	; 0
    1cf4:	ee e4       	ldi	r30, 0x4E	; 78
    1cf6:	f0 e0       	ldi	r31, 0x00	; 0
    1cf8:	80 81       	ld	r24, Z
    1cfa:	8f 7b       	andi	r24, 0xBF	; 191
    1cfc:	8c 93       	st	X, r24
    1cfe:	02 c0       	rjmp	.+4      	; 0x1d04 <ICU_u8Init+0x42>
	}
	else{
		Local_u8ErrorState=NOK;
    1d00:	81 e0       	ldi	r24, 0x01	; 1
    1d02:	89 83       	std	Y+1, r24	; 0x01
	}


	//Input Capture Interrupt
	if(Copy_u8InterruptStatus==INT_ENABLE){
    1d04:	8b 81       	ldd	r24, Y+3	; 0x03
    1d06:	81 30       	cpi	r24, 0x01	; 1
    1d08:	41 f4       	brne	.+16     	; 0x1d1a <ICU_u8Init+0x58>
		SET_BIT(TIMSK,TIMSK_TICIE1);
    1d0a:	a9 e5       	ldi	r26, 0x59	; 89
    1d0c:	b0 e0       	ldi	r27, 0x00	; 0
    1d0e:	e9 e5       	ldi	r30, 0x59	; 89
    1d10:	f0 e0       	ldi	r31, 0x00	; 0
    1d12:	80 81       	ld	r24, Z
    1d14:	80 62       	ori	r24, 0x20	; 32
    1d16:	8c 93       	st	X, r24
    1d18:	0d c0       	rjmp	.+26     	; 0x1d34 <ICU_u8Init+0x72>
	}
	else if(Copy_u8InterruptStatus==INT_DISABLE){
    1d1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1c:	82 30       	cpi	r24, 0x02	; 2
    1d1e:	41 f4       	brne	.+16     	; 0x1d30 <ICU_u8Init+0x6e>
		CLR_BIT(TIMSK,TIMSK_TICIE1);
    1d20:	a9 e5       	ldi	r26, 0x59	; 89
    1d22:	b0 e0       	ldi	r27, 0x00	; 0
    1d24:	e9 e5       	ldi	r30, 0x59	; 89
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	80 81       	ld	r24, Z
    1d2a:	8f 7d       	andi	r24, 0xDF	; 223
    1d2c:	8c 93       	st	X, r24
    1d2e:	02 c0       	rjmp	.+4      	; 0x1d34 <ICU_u8Init+0x72>
	}
	else{
		Local_u8ErrorState=NOK;
    1d30:	81 e0       	ldi	r24, 0x01	; 1
    1d32:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1d34:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d36:	0f 90       	pop	r0
    1d38:	0f 90       	pop	r0
    1d3a:	0f 90       	pop	r0
    1d3c:	cf 91       	pop	r28
    1d3e:	df 91       	pop	r29
    1d40:	08 95       	ret

00001d42 <ICU_u8SetEdge>:

u8 ICU_u8SetEdge(u8 Copy_u8Edge){
    1d42:	df 93       	push	r29
    1d44:	cf 93       	push	r28
    1d46:	00 d0       	rcall	.+0      	; 0x1d48 <ICU_u8SetEdge+0x6>
    1d48:	cd b7       	in	r28, 0x3d	; 61
    1d4a:	de b7       	in	r29, 0x3e	; 62
    1d4c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
    1d4e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Edge==RISING_EDGE){
    1d50:	8a 81       	ldd	r24, Y+2	; 0x02
    1d52:	81 30       	cpi	r24, 0x01	; 1
    1d54:	41 f4       	brne	.+16     	; 0x1d66 <ICU_u8SetEdge+0x24>
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    1d56:	ae e4       	ldi	r26, 0x4E	; 78
    1d58:	b0 e0       	ldi	r27, 0x00	; 0
    1d5a:	ee e4       	ldi	r30, 0x4E	; 78
    1d5c:	f0 e0       	ldi	r31, 0x00	; 0
    1d5e:	80 81       	ld	r24, Z
    1d60:	80 64       	ori	r24, 0x40	; 64
    1d62:	8c 93       	st	X, r24
    1d64:	0d c0       	rjmp	.+26     	; 0x1d80 <ICU_u8SetEdge+0x3e>
	}
	else if(Copy_u8Edge==FALLING_EDGE){
    1d66:	8a 81       	ldd	r24, Y+2	; 0x02
    1d68:	88 23       	and	r24, r24
    1d6a:	41 f4       	brne	.+16     	; 0x1d7c <ICU_u8SetEdge+0x3a>
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
    1d6c:	ae e4       	ldi	r26, 0x4E	; 78
    1d6e:	b0 e0       	ldi	r27, 0x00	; 0
    1d70:	ee e4       	ldi	r30, 0x4E	; 78
    1d72:	f0 e0       	ldi	r31, 0x00	; 0
    1d74:	80 81       	ld	r24, Z
    1d76:	8f 7b       	andi	r24, 0xBF	; 191
    1d78:	8c 93       	st	X, r24
    1d7a:	02 c0       	rjmp	.+4      	; 0x1d80 <ICU_u8SetEdge+0x3e>
	}
	else{
		Local_u8ErrorState=NOK;
    1d7c:	81 e0       	ldi	r24, 0x01	; 1
    1d7e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1d80:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d82:	0f 90       	pop	r0
    1d84:	0f 90       	pop	r0
    1d86:	cf 91       	pop	r28
    1d88:	df 91       	pop	r29
    1d8a:	08 95       	ret

00001d8c <ICU_u16ReadInputCapture>:

u16 ICU_u16ReadInputCapture(void){
    1d8c:	df 93       	push	r29
    1d8e:	cf 93       	push	r28
    1d90:	cd b7       	in	r28, 0x3d	; 61
    1d92:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    1d94:	e6 e4       	ldi	r30, 0x46	; 70
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	80 81       	ld	r24, Z
    1d9a:	91 81       	ldd	r25, Z+1	; 0x01
}
    1d9c:	cf 91       	pop	r28
    1d9e:	df 91       	pop	r29
    1da0:	08 95       	ret

00001da2 <TIMER_u8SetCallBack>:

/********************************************************ISRs************************************************************
 ************************************************************************************************************************/


u8 TIMER_u8SetCallBack(u8 Copy_u8InterruptID,void(*Copy_pvCallBackFunc)(void)){
    1da2:	df 93       	push	r29
    1da4:	cf 93       	push	r28
    1da6:	00 d0       	rcall	.+0      	; 0x1da8 <TIMER_u8SetCallBack+0x6>
    1da8:	00 d0       	rcall	.+0      	; 0x1daa <TIMER_u8SetCallBack+0x8>
    1daa:	cd b7       	in	r28, 0x3d	; 61
    1dac:	de b7       	in	r29, 0x3e	; 62
    1dae:	8a 83       	std	Y+2, r24	; 0x02
    1db0:	7c 83       	std	Y+4, r23	; 0x04
    1db2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=OK;
    1db4:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvCallBackFunc!=NULL){
    1db6:	8b 81       	ldd	r24, Y+3	; 0x03
    1db8:	9c 81       	ldd	r25, Y+4	; 0x04
    1dba:	00 97       	sbiw	r24, 0x00	; 0
    1dbc:	69 f0       	breq	.+26     	; 0x1dd8 <TIMER_u8SetCallBack+0x36>
		TIMERS_pvCallBackFunc[Copy_u8InterruptID]=Copy_pvCallBackFunc;
    1dbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc0:	88 2f       	mov	r24, r24
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	88 0f       	add	r24, r24
    1dc6:	99 1f       	adc	r25, r25
    1dc8:	fc 01       	movw	r30, r24
    1dca:	e6 58       	subi	r30, 0x86	; 134
    1dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dce:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd0:	9c 81       	ldd	r25, Y+4	; 0x04
    1dd2:	91 83       	std	Z+1, r25	; 0x01
    1dd4:	80 83       	st	Z, r24
    1dd6:	02 c0       	rjmp	.+4      	; 0x1ddc <TIMER_u8SetCallBack+0x3a>
	}
	else{
		Local_u8ErrorState=NULL_POINTER;
    1dd8:	82 e0       	ldi	r24, 0x02	; 2
    1dda:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1ddc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dde:	0f 90       	pop	r0
    1de0:	0f 90       	pop	r0
    1de2:	0f 90       	pop	r0
    1de4:	0f 90       	pop	r0
    1de6:	cf 91       	pop	r28
    1de8:	df 91       	pop	r29
    1dea:	08 95       	ret

00001dec <__vector_4>:



//TIMER2 Compare Match ISR
void __vector_4(void)  __attribute__((signal));
void __vector_4(void){
    1dec:	1f 92       	push	r1
    1dee:	0f 92       	push	r0
    1df0:	0f b6       	in	r0, 0x3f	; 63
    1df2:	0f 92       	push	r0
    1df4:	11 24       	eor	r1, r1
    1df6:	2f 93       	push	r18
    1df8:	3f 93       	push	r19
    1dfa:	4f 93       	push	r20
    1dfc:	5f 93       	push	r21
    1dfe:	6f 93       	push	r22
    1e00:	7f 93       	push	r23
    1e02:	8f 93       	push	r24
    1e04:	9f 93       	push	r25
    1e06:	af 93       	push	r26
    1e08:	bf 93       	push	r27
    1e0a:	ef 93       	push	r30
    1e0c:	ff 93       	push	r31
    1e0e:	df 93       	push	r29
    1e10:	cf 93       	push	r28
    1e12:	cd b7       	in	r28, 0x3d	; 61
    1e14:	de b7       	in	r29, 0x3e	; 62
	if(TIMERS_pvCallBackFunc[INT_TIMER2_COMP]!=NULL){
    1e16:	80 91 7a 00 	lds	r24, 0x007A
    1e1a:	90 91 7b 00 	lds	r25, 0x007B
    1e1e:	00 97       	sbiw	r24, 0x00	; 0
    1e20:	29 f0       	breq	.+10     	; 0x1e2c <__vector_4+0x40>
		TIMERS_pvCallBackFunc[INT_TIMER2_COMP]();
    1e22:	e0 91 7a 00 	lds	r30, 0x007A
    1e26:	f0 91 7b 00 	lds	r31, 0x007B
    1e2a:	09 95       	icall
	}
}
    1e2c:	cf 91       	pop	r28
    1e2e:	df 91       	pop	r29
    1e30:	ff 91       	pop	r31
    1e32:	ef 91       	pop	r30
    1e34:	bf 91       	pop	r27
    1e36:	af 91       	pop	r26
    1e38:	9f 91       	pop	r25
    1e3a:	8f 91       	pop	r24
    1e3c:	7f 91       	pop	r23
    1e3e:	6f 91       	pop	r22
    1e40:	5f 91       	pop	r21
    1e42:	4f 91       	pop	r20
    1e44:	3f 91       	pop	r19
    1e46:	2f 91       	pop	r18
    1e48:	0f 90       	pop	r0
    1e4a:	0f be       	out	0x3f, r0	; 63
    1e4c:	0f 90       	pop	r0
    1e4e:	1f 90       	pop	r1
    1e50:	18 95       	reti

00001e52 <__vector_5>:

//TIMER2 Overflow ISR
void __vector_5(void)  __attribute__((signal));
void __vector_5(void){
    1e52:	1f 92       	push	r1
    1e54:	0f 92       	push	r0
    1e56:	0f b6       	in	r0, 0x3f	; 63
    1e58:	0f 92       	push	r0
    1e5a:	11 24       	eor	r1, r1
    1e5c:	2f 93       	push	r18
    1e5e:	3f 93       	push	r19
    1e60:	4f 93       	push	r20
    1e62:	5f 93       	push	r21
    1e64:	6f 93       	push	r22
    1e66:	7f 93       	push	r23
    1e68:	8f 93       	push	r24
    1e6a:	9f 93       	push	r25
    1e6c:	af 93       	push	r26
    1e6e:	bf 93       	push	r27
    1e70:	ef 93       	push	r30
    1e72:	ff 93       	push	r31
    1e74:	df 93       	push	r29
    1e76:	cf 93       	push	r28
    1e78:	cd b7       	in	r28, 0x3d	; 61
    1e7a:	de b7       	in	r29, 0x3e	; 62
	if(TIMERS_pvCallBackFunc[INT_TIMER2_OVF]!=NULL){
    1e7c:	80 91 7c 00 	lds	r24, 0x007C
    1e80:	90 91 7d 00 	lds	r25, 0x007D
    1e84:	00 97       	sbiw	r24, 0x00	; 0
    1e86:	29 f0       	breq	.+10     	; 0x1e92 <__vector_5+0x40>
		TIMERS_pvCallBackFunc[INT_TIMER2_OVF]();
    1e88:	e0 91 7c 00 	lds	r30, 0x007C
    1e8c:	f0 91 7d 00 	lds	r31, 0x007D
    1e90:	09 95       	icall
	}
}
    1e92:	cf 91       	pop	r28
    1e94:	df 91       	pop	r29
    1e96:	ff 91       	pop	r31
    1e98:	ef 91       	pop	r30
    1e9a:	bf 91       	pop	r27
    1e9c:	af 91       	pop	r26
    1e9e:	9f 91       	pop	r25
    1ea0:	8f 91       	pop	r24
    1ea2:	7f 91       	pop	r23
    1ea4:	6f 91       	pop	r22
    1ea6:	5f 91       	pop	r21
    1ea8:	4f 91       	pop	r20
    1eaa:	3f 91       	pop	r19
    1eac:	2f 91       	pop	r18
    1eae:	0f 90       	pop	r0
    1eb0:	0f be       	out	0x3f, r0	; 63
    1eb2:	0f 90       	pop	r0
    1eb4:	1f 90       	pop	r1
    1eb6:	18 95       	reti

00001eb8 <__vector_6>:

//TIMER1 Capture Event ISR
void __vector_6(void)  __attribute__((signal));
void __vector_6(void){
    1eb8:	1f 92       	push	r1
    1eba:	0f 92       	push	r0
    1ebc:	0f b6       	in	r0, 0x3f	; 63
    1ebe:	0f 92       	push	r0
    1ec0:	11 24       	eor	r1, r1
    1ec2:	2f 93       	push	r18
    1ec4:	3f 93       	push	r19
    1ec6:	4f 93       	push	r20
    1ec8:	5f 93       	push	r21
    1eca:	6f 93       	push	r22
    1ecc:	7f 93       	push	r23
    1ece:	8f 93       	push	r24
    1ed0:	9f 93       	push	r25
    1ed2:	af 93       	push	r26
    1ed4:	bf 93       	push	r27
    1ed6:	ef 93       	push	r30
    1ed8:	ff 93       	push	r31
    1eda:	df 93       	push	r29
    1edc:	cf 93       	push	r28
    1ede:	cd b7       	in	r28, 0x3d	; 61
    1ee0:	de b7       	in	r29, 0x3e	; 62
	if(TIMERS_pvCallBackFunc[INT_TIMER1_CAPT]!=NULL){
    1ee2:	80 91 82 00 	lds	r24, 0x0082
    1ee6:	90 91 83 00 	lds	r25, 0x0083
    1eea:	00 97       	sbiw	r24, 0x00	; 0
    1eec:	29 f0       	breq	.+10     	; 0x1ef8 <__vector_6+0x40>
		TIMERS_pvCallBackFunc[INT_TIMER1_CAPT]();
    1eee:	e0 91 82 00 	lds	r30, 0x0082
    1ef2:	f0 91 83 00 	lds	r31, 0x0083
    1ef6:	09 95       	icall
	}
}
    1ef8:	cf 91       	pop	r28
    1efa:	df 91       	pop	r29
    1efc:	ff 91       	pop	r31
    1efe:	ef 91       	pop	r30
    1f00:	bf 91       	pop	r27
    1f02:	af 91       	pop	r26
    1f04:	9f 91       	pop	r25
    1f06:	8f 91       	pop	r24
    1f08:	7f 91       	pop	r23
    1f0a:	6f 91       	pop	r22
    1f0c:	5f 91       	pop	r21
    1f0e:	4f 91       	pop	r20
    1f10:	3f 91       	pop	r19
    1f12:	2f 91       	pop	r18
    1f14:	0f 90       	pop	r0
    1f16:	0f be       	out	0x3f, r0	; 63
    1f18:	0f 90       	pop	r0
    1f1a:	1f 90       	pop	r1
    1f1c:	18 95       	reti

00001f1e <__vector_7>:


//TIMER1 Compare Match A ISR
void __vector_7(void)  __attribute__((signal));
void __vector_7(void){
    1f1e:	1f 92       	push	r1
    1f20:	0f 92       	push	r0
    1f22:	0f b6       	in	r0, 0x3f	; 63
    1f24:	0f 92       	push	r0
    1f26:	11 24       	eor	r1, r1
    1f28:	2f 93       	push	r18
    1f2a:	3f 93       	push	r19
    1f2c:	4f 93       	push	r20
    1f2e:	5f 93       	push	r21
    1f30:	6f 93       	push	r22
    1f32:	7f 93       	push	r23
    1f34:	8f 93       	push	r24
    1f36:	9f 93       	push	r25
    1f38:	af 93       	push	r26
    1f3a:	bf 93       	push	r27
    1f3c:	ef 93       	push	r30
    1f3e:	ff 93       	push	r31
    1f40:	df 93       	push	r29
    1f42:	cf 93       	push	r28
    1f44:	cd b7       	in	r28, 0x3d	; 61
    1f46:	de b7       	in	r29, 0x3e	; 62
	if(TIMERS_pvCallBackFunc[INT_TIMER1A_COMP]!=NULL){
    1f48:	80 91 80 00 	lds	r24, 0x0080
    1f4c:	90 91 81 00 	lds	r25, 0x0081
    1f50:	00 97       	sbiw	r24, 0x00	; 0
    1f52:	29 f0       	breq	.+10     	; 0x1f5e <__vector_7+0x40>
		TIMERS_pvCallBackFunc[INT_TIMER1A_COMP]();
    1f54:	e0 91 80 00 	lds	r30, 0x0080
    1f58:	f0 91 81 00 	lds	r31, 0x0081
    1f5c:	09 95       	icall
	}
}
    1f5e:	cf 91       	pop	r28
    1f60:	df 91       	pop	r29
    1f62:	ff 91       	pop	r31
    1f64:	ef 91       	pop	r30
    1f66:	bf 91       	pop	r27
    1f68:	af 91       	pop	r26
    1f6a:	9f 91       	pop	r25
    1f6c:	8f 91       	pop	r24
    1f6e:	7f 91       	pop	r23
    1f70:	6f 91       	pop	r22
    1f72:	5f 91       	pop	r21
    1f74:	4f 91       	pop	r20
    1f76:	3f 91       	pop	r19
    1f78:	2f 91       	pop	r18
    1f7a:	0f 90       	pop	r0
    1f7c:	0f be       	out	0x3f, r0	; 63
    1f7e:	0f 90       	pop	r0
    1f80:	1f 90       	pop	r1
    1f82:	18 95       	reti

00001f84 <__vector_8>:

//TIMER1 Compare Match B ISR
void __vector_8(void)  __attribute__((signal));
void __vector_8(void){
    1f84:	1f 92       	push	r1
    1f86:	0f 92       	push	r0
    1f88:	0f b6       	in	r0, 0x3f	; 63
    1f8a:	0f 92       	push	r0
    1f8c:	11 24       	eor	r1, r1
    1f8e:	2f 93       	push	r18
    1f90:	3f 93       	push	r19
    1f92:	4f 93       	push	r20
    1f94:	5f 93       	push	r21
    1f96:	6f 93       	push	r22
    1f98:	7f 93       	push	r23
    1f9a:	8f 93       	push	r24
    1f9c:	9f 93       	push	r25
    1f9e:	af 93       	push	r26
    1fa0:	bf 93       	push	r27
    1fa2:	ef 93       	push	r30
    1fa4:	ff 93       	push	r31
    1fa6:	df 93       	push	r29
    1fa8:	cf 93       	push	r28
    1faa:	cd b7       	in	r28, 0x3d	; 61
    1fac:	de b7       	in	r29, 0x3e	; 62
	if(TIMERS_pvCallBackFunc[INT_TIMER1B_COMP]!=NULL){
    1fae:	80 91 7e 00 	lds	r24, 0x007E
    1fb2:	90 91 7f 00 	lds	r25, 0x007F
    1fb6:	00 97       	sbiw	r24, 0x00	; 0
    1fb8:	29 f0       	breq	.+10     	; 0x1fc4 <__vector_8+0x40>
		TIMERS_pvCallBackFunc[INT_TIMER1B_COMP]();
    1fba:	e0 91 7e 00 	lds	r30, 0x007E
    1fbe:	f0 91 7f 00 	lds	r31, 0x007F
    1fc2:	09 95       	icall
	}
}
    1fc4:	cf 91       	pop	r28
    1fc6:	df 91       	pop	r29
    1fc8:	ff 91       	pop	r31
    1fca:	ef 91       	pop	r30
    1fcc:	bf 91       	pop	r27
    1fce:	af 91       	pop	r26
    1fd0:	9f 91       	pop	r25
    1fd2:	8f 91       	pop	r24
    1fd4:	7f 91       	pop	r23
    1fd6:	6f 91       	pop	r22
    1fd8:	5f 91       	pop	r21
    1fda:	4f 91       	pop	r20
    1fdc:	3f 91       	pop	r19
    1fde:	2f 91       	pop	r18
    1fe0:	0f 90       	pop	r0
    1fe2:	0f be       	out	0x3f, r0	; 63
    1fe4:	0f 90       	pop	r0
    1fe6:	1f 90       	pop	r1
    1fe8:	18 95       	reti

00001fea <__vector_9>:

//TIMER1 Overflow ISR
void __vector_9(void)  __attribute__((signal));
void __vector_9(void){
    1fea:	1f 92       	push	r1
    1fec:	0f 92       	push	r0
    1fee:	0f b6       	in	r0, 0x3f	; 63
    1ff0:	0f 92       	push	r0
    1ff2:	11 24       	eor	r1, r1
    1ff4:	2f 93       	push	r18
    1ff6:	3f 93       	push	r19
    1ff8:	4f 93       	push	r20
    1ffa:	5f 93       	push	r21
    1ffc:	6f 93       	push	r22
    1ffe:	7f 93       	push	r23
    2000:	8f 93       	push	r24
    2002:	9f 93       	push	r25
    2004:	af 93       	push	r26
    2006:	bf 93       	push	r27
    2008:	ef 93       	push	r30
    200a:	ff 93       	push	r31
    200c:	df 93       	push	r29
    200e:	cf 93       	push	r28
    2010:	cd b7       	in	r28, 0x3d	; 61
    2012:	de b7       	in	r29, 0x3e	; 62
	if(TIMERS_pvCallBackFunc[INT_TIMER1_OVF]!=NULL){
    2014:	80 91 84 00 	lds	r24, 0x0084
    2018:	90 91 85 00 	lds	r25, 0x0085
    201c:	00 97       	sbiw	r24, 0x00	; 0
    201e:	29 f0       	breq	.+10     	; 0x202a <__vector_9+0x40>
		TIMERS_pvCallBackFunc[INT_TIMER1_OVF]();
    2020:	e0 91 84 00 	lds	r30, 0x0084
    2024:	f0 91 85 00 	lds	r31, 0x0085
    2028:	09 95       	icall
	}
}
    202a:	cf 91       	pop	r28
    202c:	df 91       	pop	r29
    202e:	ff 91       	pop	r31
    2030:	ef 91       	pop	r30
    2032:	bf 91       	pop	r27
    2034:	af 91       	pop	r26
    2036:	9f 91       	pop	r25
    2038:	8f 91       	pop	r24
    203a:	7f 91       	pop	r23
    203c:	6f 91       	pop	r22
    203e:	5f 91       	pop	r21
    2040:	4f 91       	pop	r20
    2042:	3f 91       	pop	r19
    2044:	2f 91       	pop	r18
    2046:	0f 90       	pop	r0
    2048:	0f be       	out	0x3f, r0	; 63
    204a:	0f 90       	pop	r0
    204c:	1f 90       	pop	r1
    204e:	18 95       	reti

00002050 <__vector_10>:

//TIMER0 Compare Match ISR
void __vector_10(void)  __attribute__((signal));
void __vector_10(void){
    2050:	1f 92       	push	r1
    2052:	0f 92       	push	r0
    2054:	0f b6       	in	r0, 0x3f	; 63
    2056:	0f 92       	push	r0
    2058:	11 24       	eor	r1, r1
    205a:	2f 93       	push	r18
    205c:	3f 93       	push	r19
    205e:	4f 93       	push	r20
    2060:	5f 93       	push	r21
    2062:	6f 93       	push	r22
    2064:	7f 93       	push	r23
    2066:	8f 93       	push	r24
    2068:	9f 93       	push	r25
    206a:	af 93       	push	r26
    206c:	bf 93       	push	r27
    206e:	ef 93       	push	r30
    2070:	ff 93       	push	r31
    2072:	df 93       	push	r29
    2074:	cf 93       	push	r28
    2076:	cd b7       	in	r28, 0x3d	; 61
    2078:	de b7       	in	r29, 0x3e	; 62
	if(TIMERS_pvCallBackFunc[INT_TIMER0_COMP]!=NULL){
    207a:	80 91 86 00 	lds	r24, 0x0086
    207e:	90 91 87 00 	lds	r25, 0x0087
    2082:	00 97       	sbiw	r24, 0x00	; 0
    2084:	29 f0       	breq	.+10     	; 0x2090 <__vector_10+0x40>
		TIMERS_pvCallBackFunc[INT_TIMER0_COMP]();
    2086:	e0 91 86 00 	lds	r30, 0x0086
    208a:	f0 91 87 00 	lds	r31, 0x0087
    208e:	09 95       	icall
	}
}
    2090:	cf 91       	pop	r28
    2092:	df 91       	pop	r29
    2094:	ff 91       	pop	r31
    2096:	ef 91       	pop	r30
    2098:	bf 91       	pop	r27
    209a:	af 91       	pop	r26
    209c:	9f 91       	pop	r25
    209e:	8f 91       	pop	r24
    20a0:	7f 91       	pop	r23
    20a2:	6f 91       	pop	r22
    20a4:	5f 91       	pop	r21
    20a6:	4f 91       	pop	r20
    20a8:	3f 91       	pop	r19
    20aa:	2f 91       	pop	r18
    20ac:	0f 90       	pop	r0
    20ae:	0f be       	out	0x3f, r0	; 63
    20b0:	0f 90       	pop	r0
    20b2:	1f 90       	pop	r1
    20b4:	18 95       	reti

000020b6 <__vector_11>:

//TIMER0 Overflow ISR
void __vector_11(void)  __attribute__((signal));
void __vector_11(void){
    20b6:	1f 92       	push	r1
    20b8:	0f 92       	push	r0
    20ba:	0f b6       	in	r0, 0x3f	; 63
    20bc:	0f 92       	push	r0
    20be:	11 24       	eor	r1, r1
    20c0:	2f 93       	push	r18
    20c2:	3f 93       	push	r19
    20c4:	4f 93       	push	r20
    20c6:	5f 93       	push	r21
    20c8:	6f 93       	push	r22
    20ca:	7f 93       	push	r23
    20cc:	8f 93       	push	r24
    20ce:	9f 93       	push	r25
    20d0:	af 93       	push	r26
    20d2:	bf 93       	push	r27
    20d4:	ef 93       	push	r30
    20d6:	ff 93       	push	r31
    20d8:	df 93       	push	r29
    20da:	cf 93       	push	r28
    20dc:	cd b7       	in	r28, 0x3d	; 61
    20de:	de b7       	in	r29, 0x3e	; 62
	if(TIMERS_pvCallBackFunc[INT_TIMER0_OVF]!=NULL){
    20e0:	80 91 88 00 	lds	r24, 0x0088
    20e4:	90 91 89 00 	lds	r25, 0x0089
    20e8:	00 97       	sbiw	r24, 0x00	; 0
    20ea:	29 f0       	breq	.+10     	; 0x20f6 <__vector_11+0x40>
		TIMERS_pvCallBackFunc[INT_TIMER0_OVF]();
    20ec:	e0 91 88 00 	lds	r30, 0x0088
    20f0:	f0 91 89 00 	lds	r31, 0x0089
    20f4:	09 95       	icall
	}
}
    20f6:	cf 91       	pop	r28
    20f8:	df 91       	pop	r29
    20fa:	ff 91       	pop	r31
    20fc:	ef 91       	pop	r30
    20fe:	bf 91       	pop	r27
    2100:	af 91       	pop	r26
    2102:	9f 91       	pop	r25
    2104:	8f 91       	pop	r24
    2106:	7f 91       	pop	r23
    2108:	6f 91       	pop	r22
    210a:	5f 91       	pop	r21
    210c:	4f 91       	pop	r20
    210e:	3f 91       	pop	r19
    2110:	2f 91       	pop	r18
    2112:	0f 90       	pop	r0
    2114:	0f be       	out	0x3f, r0	; 63
    2116:	0f 90       	pop	r0
    2118:	1f 90       	pop	r1
    211a:	18 95       	reti

0000211c <main>:

#include "SERVO_interface.h"

void LedBlink();

void main(){
    211c:	df 93       	push	r29
    211e:	cf 93       	push	r28
    2120:	cd b7       	in	r28, 0x3d	; 61
    2122:	de b7       	in	r29, 0x3e	; 62
    2124:	63 97       	sbiw	r28, 0x13	; 19
    2126:	0f b6       	in	r0, 0x3f	; 63
    2128:	f8 94       	cli
    212a:	de bf       	out	0x3e, r29	; 62
    212c:	0f be       	out	0x3f, r0	; 63
    212e:	cd bf       	out	0x3d, r28	; 61
	Timer1_t Timer1={TIMER1_FAST_PWM_CUSTOM_TOP,PRSCLR_DIV_BY_8,OCM_FAST_PWM_NON_INVERTED,OCM_DISCONNECT,INT_DISABLE,INT_DISABLE};
    2130:	87 e0       	ldi	r24, 0x07	; 7
    2132:	fe 01       	movw	r30, r28
    2134:	33 96       	adiw	r30, 0x03	; 3
    2136:	df 01       	movw	r26, r30
    2138:	28 2f       	mov	r18, r24
    213a:	1d 92       	st	X+, r1
    213c:	2a 95       	dec	r18
    213e:	e9 f7       	brne	.-6      	; 0x213a <main+0x1e>
    2140:	8e e0       	ldi	r24, 0x0E	; 14
    2142:	8b 83       	std	Y+3, r24	; 0x03
    2144:	82 e0       	ldi	r24, 0x02	; 2
    2146:	8c 83       	std	Y+4, r24	; 0x04
    2148:	82 e0       	ldi	r24, 0x02	; 2
    214a:	8d 83       	std	Y+5, r24	; 0x05
    214c:	82 e0       	ldi	r24, 0x02	; 2
    214e:	8f 83       	std	Y+7, r24	; 0x07
    2150:	82 e0       	ldi	r24, 0x02	; 2
    2152:	88 87       	std	Y+8, r24	; 0x08
	Timer_t Timer0={TIMER_CTC,PRSCLR_DIV_BY_8,OCM_DISCONNECT,INT_DISABLE,INT_DISABLE};
    2154:	ce 01       	movw	r24, r28
    2156:	0a 96       	adiw	r24, 0x0a	; 10
    2158:	98 8b       	std	Y+16, r25	; 0x10
    215a:	8f 87       	std	Y+15, r24	; 0x0f
    215c:	a4 e7       	ldi	r26, 0x74	; 116
    215e:	b0 e0       	ldi	r27, 0x00	; 0
    2160:	ba 8b       	std	Y+18, r27	; 0x12
    2162:	a9 8b       	std	Y+17, r26	; 0x11
    2164:	b5 e0       	ldi	r27, 0x05	; 5
    2166:	bb 8b       	std	Y+19, r27	; 0x13
    2168:	e9 89       	ldd	r30, Y+17	; 0x11
    216a:	fa 89       	ldd	r31, Y+18	; 0x12
    216c:	00 80       	ld	r0, Z
    216e:	89 89       	ldd	r24, Y+17	; 0x11
    2170:	9a 89       	ldd	r25, Y+18	; 0x12
    2172:	01 96       	adiw	r24, 0x01	; 1
    2174:	9a 8b       	std	Y+18, r25	; 0x12
    2176:	89 8b       	std	Y+17, r24	; 0x11
    2178:	af 85       	ldd	r26, Y+15	; 0x0f
    217a:	b8 89       	ldd	r27, Y+16	; 0x10
    217c:	0c 92       	st	X, r0
    217e:	ef 85       	ldd	r30, Y+15	; 0x0f
    2180:	f8 89       	ldd	r31, Y+16	; 0x10
    2182:	31 96       	adiw	r30, 0x01	; 1
    2184:	f8 8b       	std	Y+16, r31	; 0x10
    2186:	ef 87       	std	Y+15, r30	; 0x0f
    2188:	fb 89       	ldd	r31, Y+19	; 0x13
    218a:	f1 50       	subi	r31, 0x01	; 1
    218c:	fb 8b       	std	Y+19, r31	; 0x13
    218e:	2b 89       	ldd	r18, Y+19	; 0x13
    2190:	22 23       	and	r18, r18
    2192:	51 f7       	brne	.-44     	; 0x2168 <main+0x4c>
	PORT_voidInit();
    2194:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <PORT_voidInit>
	TIMER1_u8Init(&Timer1);
    2198:	ce 01       	movw	r24, r28
    219a:	03 96       	adiw	r24, 0x03	; 3
    219c:	0e 94 ca 07 	call	0xf94	; 0xf94 <TIMER1_u8Init>
	TIMER2_u8Schedule(1000,&LedBlink,REPEAT_PERIODIC);
    21a0:	29 e0       	ldi	r18, 0x09	; 9
    21a2:	31 e1       	ldi	r19, 0x11	; 17
    21a4:	88 ee       	ldi	r24, 0xE8	; 232
    21a6:	93 e0       	ldi	r25, 0x03	; 3
    21a8:	b9 01       	movw	r22, r18
    21aa:	42 e0       	ldi	r20, 0x02	; 2
    21ac:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <TIMER2_u8Schedule>
	GIE_voidEnable();
    21b0:	0e 94 8d 02 	call	0x51a	; 0x51a <GIE_voidEnable>
	while(1){
		for(u8 i=0;i<=180;i++){
    21b4:	1a 82       	std	Y+2, r1	; 0x02
    21b6:	10 c0       	rjmp	.+32     	; 0x21d8 <main+0xbc>
			SERVO_u8Rotate(i,&Timer1);
    21b8:	9e 01       	movw	r18, r28
    21ba:	2d 5f       	subi	r18, 0xFD	; 253
    21bc:	3f 4f       	sbci	r19, 0xFF	; 255
    21be:	8a 81       	ldd	r24, Y+2	; 0x02
    21c0:	b9 01       	movw	r22, r18
    21c2:	0e 94 9d 03 	call	0x73a	; 0x73a <SERVO_u8Rotate>
			TIMER0_delay_ms(&Timer0,15);
    21c6:	ce 01       	movw	r24, r28
    21c8:	0a 96       	adiw	r24, 0x0a	; 10
    21ca:	6f e0       	ldi	r22, 0x0F	; 15
    21cc:	70 e0       	ldi	r23, 0x00	; 0
    21ce:	0e 94 22 07 	call	0xe44	; 0xe44 <TIMER0_delay_ms>
	PORT_voidInit();
	TIMER1_u8Init(&Timer1);
	TIMER2_u8Schedule(1000,&LedBlink,REPEAT_PERIODIC);
	GIE_voidEnable();
	while(1){
		for(u8 i=0;i<=180;i++){
    21d2:	8a 81       	ldd	r24, Y+2	; 0x02
    21d4:	8f 5f       	subi	r24, 0xFF	; 255
    21d6:	8a 83       	std	Y+2, r24	; 0x02
    21d8:	8a 81       	ldd	r24, Y+2	; 0x02
    21da:	85 3b       	cpi	r24, 0xB5	; 181
    21dc:	68 f3       	brcs	.-38     	; 0x21b8 <main+0x9c>
			SERVO_u8Rotate(i,&Timer1);
			TIMER0_delay_ms(&Timer0,15);
		}
		for(u8 i=0;i<=180;i++){
    21de:	19 82       	std	Y+1, r1	; 0x01
    21e0:	14 c0       	rjmp	.+40     	; 0x220a <main+0xee>
			SERVO_u8Rotate(180-i,&Timer1);
    21e2:	94 eb       	ldi	r25, 0xB4	; 180
    21e4:	89 81       	ldd	r24, Y+1	; 0x01
    21e6:	a9 2f       	mov	r26, r25
    21e8:	a8 1b       	sub	r26, r24
    21ea:	8a 2f       	mov	r24, r26
    21ec:	9e 01       	movw	r18, r28
    21ee:	2d 5f       	subi	r18, 0xFD	; 253
    21f0:	3f 4f       	sbci	r19, 0xFF	; 255
    21f2:	b9 01       	movw	r22, r18
    21f4:	0e 94 9d 03 	call	0x73a	; 0x73a <SERVO_u8Rotate>
			TIMER0_delay_ms(&Timer0,15);
    21f8:	ce 01       	movw	r24, r28
    21fa:	0a 96       	adiw	r24, 0x0a	; 10
    21fc:	6f e0       	ldi	r22, 0x0F	; 15
    21fe:	70 e0       	ldi	r23, 0x00	; 0
    2200:	0e 94 22 07 	call	0xe44	; 0xe44 <TIMER0_delay_ms>
	while(1){
		for(u8 i=0;i<=180;i++){
			SERVO_u8Rotate(i,&Timer1);
			TIMER0_delay_ms(&Timer0,15);
		}
		for(u8 i=0;i<=180;i++){
    2204:	89 81       	ldd	r24, Y+1	; 0x01
    2206:	8f 5f       	subi	r24, 0xFF	; 255
    2208:	89 83       	std	Y+1, r24	; 0x01
    220a:	89 81       	ldd	r24, Y+1	; 0x01
    220c:	85 3b       	cpi	r24, 0xB5	; 181
    220e:	48 f3       	brcs	.-46     	; 0x21e2 <main+0xc6>
    2210:	d1 cf       	rjmp	.-94     	; 0x21b4 <main+0x98>

00002212 <LedBlink>:
		}

	}
}

void LedBlink(){
    2212:	df 93       	push	r29
    2214:	cf 93       	push	r28
    2216:	cd b7       	in	r28, 0x3d	; 61
    2218:	de b7       	in	r29, 0x3e	; 62
	static u8 Local_u8State=0;
	if(Local_u8State==0){
    221a:	80 91 95 00 	lds	r24, 0x0095
    221e:	88 23       	and	r24, r24
    2220:	49 f4       	brne	.+18     	; 0x2234 <LedBlink+0x22>
		DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN0,DIO_u8PIN_HIGH);
    2222:	80 e0       	ldi	r24, 0x00	; 0
    2224:	60 e0       	ldi	r22, 0x00	; 0
    2226:	41 e0       	ldi	r20, 0x01	; 1
    2228:	0e 94 49 00 	call	0x92	; 0x92 <DIO_u8SetPinValue>
		Local_u8State=1;
    222c:	81 e0       	ldi	r24, 0x01	; 1
    222e:	80 93 95 00 	sts	0x0095, r24
    2232:	0b c0       	rjmp	.+22     	; 0x224a <LedBlink+0x38>
	}
	else if(Local_u8State==1){
    2234:	80 91 95 00 	lds	r24, 0x0095
    2238:	81 30       	cpi	r24, 0x01	; 1
    223a:	39 f4       	brne	.+14     	; 0x224a <LedBlink+0x38>
		DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN0,DIO_u8PIN_LOW);
    223c:	80 e0       	ldi	r24, 0x00	; 0
    223e:	60 e0       	ldi	r22, 0x00	; 0
    2240:	40 e0       	ldi	r20, 0x00	; 0
    2242:	0e 94 49 00 	call	0x92	; 0x92 <DIO_u8SetPinValue>
		Local_u8State=0;
    2246:	10 92 95 00 	sts	0x0095, r1
	}
}
    224a:	cf 91       	pop	r28
    224c:	df 91       	pop	r29
    224e:	08 95       	ret

00002250 <__mulsi3>:
    2250:	62 9f       	mul	r22, r18
    2252:	d0 01       	movw	r26, r0
    2254:	73 9f       	mul	r23, r19
    2256:	f0 01       	movw	r30, r0
    2258:	82 9f       	mul	r24, r18
    225a:	e0 0d       	add	r30, r0
    225c:	f1 1d       	adc	r31, r1
    225e:	64 9f       	mul	r22, r20
    2260:	e0 0d       	add	r30, r0
    2262:	f1 1d       	adc	r31, r1
    2264:	92 9f       	mul	r25, r18
    2266:	f0 0d       	add	r31, r0
    2268:	83 9f       	mul	r24, r19
    226a:	f0 0d       	add	r31, r0
    226c:	74 9f       	mul	r23, r20
    226e:	f0 0d       	add	r31, r0
    2270:	65 9f       	mul	r22, r21
    2272:	f0 0d       	add	r31, r0
    2274:	99 27       	eor	r25, r25
    2276:	72 9f       	mul	r23, r18
    2278:	b0 0d       	add	r27, r0
    227a:	e1 1d       	adc	r30, r1
    227c:	f9 1f       	adc	r31, r25
    227e:	63 9f       	mul	r22, r19
    2280:	b0 0d       	add	r27, r0
    2282:	e1 1d       	adc	r30, r1
    2284:	f9 1f       	adc	r31, r25
    2286:	bd 01       	movw	r22, r26
    2288:	cf 01       	movw	r24, r30
    228a:	11 24       	eor	r1, r1
    228c:	08 95       	ret

0000228e <__udivmodhi4>:
    228e:	aa 1b       	sub	r26, r26
    2290:	bb 1b       	sub	r27, r27
    2292:	51 e1       	ldi	r21, 0x11	; 17
    2294:	07 c0       	rjmp	.+14     	; 0x22a4 <__udivmodhi4_ep>

00002296 <__udivmodhi4_loop>:
    2296:	aa 1f       	adc	r26, r26
    2298:	bb 1f       	adc	r27, r27
    229a:	a6 17       	cp	r26, r22
    229c:	b7 07       	cpc	r27, r23
    229e:	10 f0       	brcs	.+4      	; 0x22a4 <__udivmodhi4_ep>
    22a0:	a6 1b       	sub	r26, r22
    22a2:	b7 0b       	sbc	r27, r23

000022a4 <__udivmodhi4_ep>:
    22a4:	88 1f       	adc	r24, r24
    22a6:	99 1f       	adc	r25, r25
    22a8:	5a 95       	dec	r21
    22aa:	a9 f7       	brne	.-22     	; 0x2296 <__udivmodhi4_loop>
    22ac:	80 95       	com	r24
    22ae:	90 95       	com	r25
    22b0:	bc 01       	movw	r22, r24
    22b2:	cd 01       	movw	r24, r26
    22b4:	08 95       	ret

000022b6 <__udivmodsi4>:
    22b6:	a1 e2       	ldi	r26, 0x21	; 33
    22b8:	1a 2e       	mov	r1, r26
    22ba:	aa 1b       	sub	r26, r26
    22bc:	bb 1b       	sub	r27, r27
    22be:	fd 01       	movw	r30, r26
    22c0:	0d c0       	rjmp	.+26     	; 0x22dc <__udivmodsi4_ep>

000022c2 <__udivmodsi4_loop>:
    22c2:	aa 1f       	adc	r26, r26
    22c4:	bb 1f       	adc	r27, r27
    22c6:	ee 1f       	adc	r30, r30
    22c8:	ff 1f       	adc	r31, r31
    22ca:	a2 17       	cp	r26, r18
    22cc:	b3 07       	cpc	r27, r19
    22ce:	e4 07       	cpc	r30, r20
    22d0:	f5 07       	cpc	r31, r21
    22d2:	20 f0       	brcs	.+8      	; 0x22dc <__udivmodsi4_ep>
    22d4:	a2 1b       	sub	r26, r18
    22d6:	b3 0b       	sbc	r27, r19
    22d8:	e4 0b       	sbc	r30, r20
    22da:	f5 0b       	sbc	r31, r21

000022dc <__udivmodsi4_ep>:
    22dc:	66 1f       	adc	r22, r22
    22de:	77 1f       	adc	r23, r23
    22e0:	88 1f       	adc	r24, r24
    22e2:	99 1f       	adc	r25, r25
    22e4:	1a 94       	dec	r1
    22e6:	69 f7       	brne	.-38     	; 0x22c2 <__udivmodsi4_loop>
    22e8:	60 95       	com	r22
    22ea:	70 95       	com	r23
    22ec:	80 95       	com	r24
    22ee:	90 95       	com	r25
    22f0:	9b 01       	movw	r18, r22
    22f2:	ac 01       	movw	r20, r24
    22f4:	bd 01       	movw	r22, r26
    22f6:	cf 01       	movw	r24, r30
    22f8:	08 95       	ret

000022fa <__divmodsi4>:
    22fa:	97 fb       	bst	r25, 7
    22fc:	09 2e       	mov	r0, r25
    22fe:	05 26       	eor	r0, r21
    2300:	0e d0       	rcall	.+28     	; 0x231e <__divmodsi4_neg1>
    2302:	57 fd       	sbrc	r21, 7
    2304:	04 d0       	rcall	.+8      	; 0x230e <__divmodsi4_neg2>
    2306:	d7 df       	rcall	.-82     	; 0x22b6 <__udivmodsi4>
    2308:	0a d0       	rcall	.+20     	; 0x231e <__divmodsi4_neg1>
    230a:	00 1c       	adc	r0, r0
    230c:	38 f4       	brcc	.+14     	; 0x231c <__divmodsi4_exit>

0000230e <__divmodsi4_neg2>:
    230e:	50 95       	com	r21
    2310:	40 95       	com	r20
    2312:	30 95       	com	r19
    2314:	21 95       	neg	r18
    2316:	3f 4f       	sbci	r19, 0xFF	; 255
    2318:	4f 4f       	sbci	r20, 0xFF	; 255
    231a:	5f 4f       	sbci	r21, 0xFF	; 255

0000231c <__divmodsi4_exit>:
    231c:	08 95       	ret

0000231e <__divmodsi4_neg1>:
    231e:	f6 f7       	brtc	.-4      	; 0x231c <__divmodsi4_exit>
    2320:	90 95       	com	r25
    2322:	80 95       	com	r24
    2324:	70 95       	com	r23
    2326:	61 95       	neg	r22
    2328:	7f 4f       	sbci	r23, 0xFF	; 255
    232a:	8f 4f       	sbci	r24, 0xFF	; 255
    232c:	9f 4f       	sbci	r25, 0xFF	; 255
    232e:	08 95       	ret

00002330 <_exit>:
    2330:	f8 94       	cli

00002332 <__stop_program>:
    2332:	ff cf       	rjmp	.-2      	; 0x2332 <__stop_program>
