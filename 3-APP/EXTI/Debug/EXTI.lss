
EXTI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000266e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005c  00800060  0000266e  00002702  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  008000bc  008000bc  0000275e  2**0
                  ALLOC
  3 .stab         0000246c  00000000  00000000  00002760  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fb6  00000000  00000000  00004bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005b82  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005cc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005e32  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007a7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008966  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009714  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009874  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009b01  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a2cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 24 0d 	jmp	0x1a48	; 0x1a48 <__vector_1>
       8:	0c 94 57 0d 	jmp	0x1aae	; 0x1aae <__vector_2>
       c:	0c 94 8a 0d 	jmp	0x1b14	; 0x1b14 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e6       	ldi	r30, 0x6E	; 110
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3b       	cpi	r26, 0xBC	; 188
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac eb       	ldi	r26, 0xBC	; 188
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 3c       	cpi	r26, 0xC4	; 196
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 75 0e 	call	0x1cea	; 0x1cea <main>
      8a:	0c 94 35 13 	jmp	0x266a	; 0x266a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 fe 12 	jmp	0x25fc	; 0x25fc <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e8       	ldi	r26, 0x8C	; 140
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 1a 13 	jmp	0x2634	; 0x2634 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 0a 13 	jmp	0x2614	; 0x2614 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 26 13 	jmp	0x264c	; 0x264c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 0a 13 	jmp	0x2614	; 0x2614 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 26 13 	jmp	0x264c	; 0x264c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 fe 12 	jmp	0x25fc	; 0x25fc <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c e8       	ldi	r24, 0x8C	; 140
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 1a 13 	jmp	0x2634	; 0x2634 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 0a 13 	jmp	0x2614	; 0x2614 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 26 13 	jmp	0x264c	; 0x264c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 0a 13 	jmp	0x2614	; 0x2614 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 26 13 	jmp	0x264c	; 0x264c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 0a 13 	jmp	0x2614	; 0x2614 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 26 13 	jmp	0x264c	; 0x264c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 0e 13 	jmp	0x261c	; 0x261c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 2a 13 	jmp	0x2654	; 0x2654 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <CLCD_voidSendCommand>:
#include "CLCD_private.h"
#include "CLCD_config.h"



void CLCD_voidSendCommand(u8 Copy_u8Command){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2f 97       	sbiw	r28, 0x0f	; 15
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	8f 87       	std	Y+15, r24	; 0x0f
	/*set RS pin to low for command*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	67 e0       	ldi	r22, 0x07	; 7
     b60:	40 e0       	ldi	r20, 0x00	; 0
     b62:	0e 94 db 08 	call	0x11b6	; 0x11b6 <DIO_u8SetPinValue>
	/*set RW pin to low for write*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
     b66:	83 e0       	ldi	r24, 0x03	; 3
     b68:	66 e0       	ldi	r22, 0x06	; 6
     b6a:	40 e0       	ldi	r20, 0x00	; 0
     b6c:	0e 94 db 08 	call	0x11b6	; 0x11b6 <DIO_u8SetPinValue>
	/*set data port to command*/
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Command);
     b70:	82 e0       	ldi	r24, 0x02	; 2
     b72:	6f 85       	ldd	r22, Y+15	; 0x0f
     b74:	0e 94 ed 09 	call	0x13da	; 0x13da <DIO_u8SetPortValue>
	/*send enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     b78:	83 e0       	ldi	r24, 0x03	; 3
     b7a:	65 e0       	ldi	r22, 0x05	; 5
     b7c:	41 e0       	ldi	r20, 0x01	; 1
     b7e:	0e 94 db 08 	call	0x11b6	; 0x11b6 <DIO_u8SetPinValue>
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	a0 e0       	ldi	r26, 0x00	; 0
     b88:	b0 e4       	ldi	r27, 0x40	; 64
     b8a:	8b 87       	std	Y+11, r24	; 0x0b
     b8c:	9c 87       	std	Y+12, r25	; 0x0c
     b8e:	ad 87       	std	Y+13, r26	; 0x0d
     b90:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b92:	6b 85       	ldd	r22, Y+11	; 0x0b
     b94:	7c 85       	ldd	r23, Y+12	; 0x0c
     b96:	8d 85       	ldd	r24, Y+13	; 0x0d
     b98:	9e 85       	ldd	r25, Y+14	; 0x0e
     b9a:	20 e0       	ldi	r18, 0x00	; 0
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	4a ef       	ldi	r20, 0xFA	; 250
     ba0:	54 e4       	ldi	r21, 0x44	; 68
     ba2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ba6:	dc 01       	movw	r26, r24
     ba8:	cb 01       	movw	r24, r22
     baa:	8f 83       	std	Y+7, r24	; 0x07
     bac:	98 87       	std	Y+8, r25	; 0x08
     bae:	a9 87       	std	Y+9, r26	; 0x09
     bb0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bb2:	6f 81       	ldd	r22, Y+7	; 0x07
     bb4:	78 85       	ldd	r23, Y+8	; 0x08
     bb6:	89 85       	ldd	r24, Y+9	; 0x09
     bb8:	9a 85       	ldd	r25, Y+10	; 0x0a
     bba:	20 e0       	ldi	r18, 0x00	; 0
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	40 e8       	ldi	r20, 0x80	; 128
     bc0:	5f e3       	ldi	r21, 0x3F	; 63
     bc2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bc6:	88 23       	and	r24, r24
     bc8:	2c f4       	brge	.+10     	; 0xbd4 <CLCD_voidSendCommand+0x8e>
		__ticks = 1;
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	9e 83       	std	Y+6, r25	; 0x06
     bd0:	8d 83       	std	Y+5, r24	; 0x05
     bd2:	3f c0       	rjmp	.+126    	; 0xc52 <CLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
     bd4:	6f 81       	ldd	r22, Y+7	; 0x07
     bd6:	78 85       	ldd	r23, Y+8	; 0x08
     bd8:	89 85       	ldd	r24, Y+9	; 0x09
     bda:	9a 85       	ldd	r25, Y+10	; 0x0a
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	3f ef       	ldi	r19, 0xFF	; 255
     be0:	4f e7       	ldi	r20, 0x7F	; 127
     be2:	57 e4       	ldi	r21, 0x47	; 71
     be4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     be8:	18 16       	cp	r1, r24
     bea:	4c f5       	brge	.+82     	; 0xc3e <CLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bec:	6b 85       	ldd	r22, Y+11	; 0x0b
     bee:	7c 85       	ldd	r23, Y+12	; 0x0c
     bf0:	8d 85       	ldd	r24, Y+13	; 0x0d
     bf2:	9e 85       	ldd	r25, Y+14	; 0x0e
     bf4:	20 e0       	ldi	r18, 0x00	; 0
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	40 e2       	ldi	r20, 0x20	; 32
     bfa:	51 e4       	ldi	r21, 0x41	; 65
     bfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c00:	dc 01       	movw	r26, r24
     c02:	cb 01       	movw	r24, r22
     c04:	bc 01       	movw	r22, r24
     c06:	cd 01       	movw	r24, r26
     c08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c0c:	dc 01       	movw	r26, r24
     c0e:	cb 01       	movw	r24, r22
     c10:	9e 83       	std	Y+6, r25	; 0x06
     c12:	8d 83       	std	Y+5, r24	; 0x05
     c14:	0f c0       	rjmp	.+30     	; 0xc34 <CLCD_voidSendCommand+0xee>
     c16:	88 ec       	ldi	r24, 0xC8	; 200
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	9c 83       	std	Y+4, r25	; 0x04
     c1c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c1e:	8b 81       	ldd	r24, Y+3	; 0x03
     c20:	9c 81       	ldd	r25, Y+4	; 0x04
     c22:	01 97       	sbiw	r24, 0x01	; 1
     c24:	f1 f7       	brne	.-4      	; 0xc22 <CLCD_voidSendCommand+0xdc>
     c26:	9c 83       	std	Y+4, r25	; 0x04
     c28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c2a:	8d 81       	ldd	r24, Y+5	; 0x05
     c2c:	9e 81       	ldd	r25, Y+6	; 0x06
     c2e:	01 97       	sbiw	r24, 0x01	; 1
     c30:	9e 83       	std	Y+6, r25	; 0x06
     c32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c34:	8d 81       	ldd	r24, Y+5	; 0x05
     c36:	9e 81       	ldd	r25, Y+6	; 0x06
     c38:	00 97       	sbiw	r24, 0x00	; 0
     c3a:	69 f7       	brne	.-38     	; 0xc16 <CLCD_voidSendCommand+0xd0>
     c3c:	14 c0       	rjmp	.+40     	; 0xc66 <CLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c3e:	6f 81       	ldd	r22, Y+7	; 0x07
     c40:	78 85       	ldd	r23, Y+8	; 0x08
     c42:	89 85       	ldd	r24, Y+9	; 0x09
     c44:	9a 85       	ldd	r25, Y+10	; 0x0a
     c46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c4a:	dc 01       	movw	r26, r24
     c4c:	cb 01       	movw	r24, r22
     c4e:	9e 83       	std	Y+6, r25	; 0x06
     c50:	8d 83       	std	Y+5, r24	; 0x05
     c52:	8d 81       	ldd	r24, Y+5	; 0x05
     c54:	9e 81       	ldd	r25, Y+6	; 0x06
     c56:	9a 83       	std	Y+2, r25	; 0x02
     c58:	89 83       	std	Y+1, r24	; 0x01
     c5a:	89 81       	ldd	r24, Y+1	; 0x01
     c5c:	9a 81       	ldd	r25, Y+2	; 0x02
     c5e:	01 97       	sbiw	r24, 0x01	; 1
     c60:	f1 f7       	brne	.-4      	; 0xc5e <CLCD_voidSendCommand+0x118>
     c62:	9a 83       	std	Y+2, r25	; 0x02
     c64:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
     c66:	83 e0       	ldi	r24, 0x03	; 3
     c68:	65 e0       	ldi	r22, 0x05	; 5
     c6a:	40 e0       	ldi	r20, 0x00	; 0
     c6c:	0e 94 db 08 	call	0x11b6	; 0x11b6 <DIO_u8SetPinValue>
}
     c70:	2f 96       	adiw	r28, 0x0f	; 15
     c72:	0f b6       	in	r0, 0x3f	; 63
     c74:	f8 94       	cli
     c76:	de bf       	out	0x3e, r29	; 62
     c78:	0f be       	out	0x3f, r0	; 63
     c7a:	cd bf       	out	0x3d, r28	; 61
     c7c:	cf 91       	pop	r28
     c7e:	df 91       	pop	r29
     c80:	08 95       	ret

00000c82 <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data){
     c82:	df 93       	push	r29
     c84:	cf 93       	push	r28
     c86:	cd b7       	in	r28, 0x3d	; 61
     c88:	de b7       	in	r29, 0x3e	; 62
     c8a:	2f 97       	sbiw	r28, 0x0f	; 15
     c8c:	0f b6       	in	r0, 0x3f	; 63
     c8e:	f8 94       	cli
     c90:	de bf       	out	0x3e, r29	; 62
     c92:	0f be       	out	0x3f, r0	; 63
     c94:	cd bf       	out	0x3d, r28	; 61
     c96:	8f 87       	std	Y+15, r24	; 0x0f
	/*set RS pin to high for data*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
     c98:	83 e0       	ldi	r24, 0x03	; 3
     c9a:	67 e0       	ldi	r22, 0x07	; 7
     c9c:	41 e0       	ldi	r20, 0x01	; 1
     c9e:	0e 94 db 08 	call	0x11b6	; 0x11b6 <DIO_u8SetPinValue>
	/*set RW pin to low for write*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
     ca2:	83 e0       	ldi	r24, 0x03	; 3
     ca4:	66 e0       	ldi	r22, 0x06	; 6
     ca6:	40 e0       	ldi	r20, 0x00	; 0
     ca8:	0e 94 db 08 	call	0x11b6	; 0x11b6 <DIO_u8SetPinValue>
	/*set data port to data*/
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Data);
     cac:	82 e0       	ldi	r24, 0x02	; 2
     cae:	6f 85       	ldd	r22, Y+15	; 0x0f
     cb0:	0e 94 ed 09 	call	0x13da	; 0x13da <DIO_u8SetPortValue>
	/*send enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     cb4:	83 e0       	ldi	r24, 0x03	; 3
     cb6:	65 e0       	ldi	r22, 0x05	; 5
     cb8:	41 e0       	ldi	r20, 0x01	; 1
     cba:	0e 94 db 08 	call	0x11b6	; 0x11b6 <DIO_u8SetPinValue>
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	a0 e0       	ldi	r26, 0x00	; 0
     cc4:	b0 e4       	ldi	r27, 0x40	; 64
     cc6:	8b 87       	std	Y+11, r24	; 0x0b
     cc8:	9c 87       	std	Y+12, r25	; 0x0c
     cca:	ad 87       	std	Y+13, r26	; 0x0d
     ccc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cce:	6b 85       	ldd	r22, Y+11	; 0x0b
     cd0:	7c 85       	ldd	r23, Y+12	; 0x0c
     cd2:	8d 85       	ldd	r24, Y+13	; 0x0d
     cd4:	9e 85       	ldd	r25, Y+14	; 0x0e
     cd6:	20 e0       	ldi	r18, 0x00	; 0
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	4a ef       	ldi	r20, 0xFA	; 250
     cdc:	54 e4       	ldi	r21, 0x44	; 68
     cde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ce2:	dc 01       	movw	r26, r24
     ce4:	cb 01       	movw	r24, r22
     ce6:	8f 83       	std	Y+7, r24	; 0x07
     ce8:	98 87       	std	Y+8, r25	; 0x08
     cea:	a9 87       	std	Y+9, r26	; 0x09
     cec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cee:	6f 81       	ldd	r22, Y+7	; 0x07
     cf0:	78 85       	ldd	r23, Y+8	; 0x08
     cf2:	89 85       	ldd	r24, Y+9	; 0x09
     cf4:	9a 85       	ldd	r25, Y+10	; 0x0a
     cf6:	20 e0       	ldi	r18, 0x00	; 0
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	40 e8       	ldi	r20, 0x80	; 128
     cfc:	5f e3       	ldi	r21, 0x3F	; 63
     cfe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d02:	88 23       	and	r24, r24
     d04:	2c f4       	brge	.+10     	; 0xd10 <CLCD_voidSendData+0x8e>
		__ticks = 1;
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	9e 83       	std	Y+6, r25	; 0x06
     d0c:	8d 83       	std	Y+5, r24	; 0x05
     d0e:	3f c0       	rjmp	.+126    	; 0xd8e <CLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
     d10:	6f 81       	ldd	r22, Y+7	; 0x07
     d12:	78 85       	ldd	r23, Y+8	; 0x08
     d14:	89 85       	ldd	r24, Y+9	; 0x09
     d16:	9a 85       	ldd	r25, Y+10	; 0x0a
     d18:	20 e0       	ldi	r18, 0x00	; 0
     d1a:	3f ef       	ldi	r19, 0xFF	; 255
     d1c:	4f e7       	ldi	r20, 0x7F	; 127
     d1e:	57 e4       	ldi	r21, 0x47	; 71
     d20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d24:	18 16       	cp	r1, r24
     d26:	4c f5       	brge	.+82     	; 0xd7a <CLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d28:	6b 85       	ldd	r22, Y+11	; 0x0b
     d2a:	7c 85       	ldd	r23, Y+12	; 0x0c
     d2c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d2e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d30:	20 e0       	ldi	r18, 0x00	; 0
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	40 e2       	ldi	r20, 0x20	; 32
     d36:	51 e4       	ldi	r21, 0x41	; 65
     d38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d3c:	dc 01       	movw	r26, r24
     d3e:	cb 01       	movw	r24, r22
     d40:	bc 01       	movw	r22, r24
     d42:	cd 01       	movw	r24, r26
     d44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d48:	dc 01       	movw	r26, r24
     d4a:	cb 01       	movw	r24, r22
     d4c:	9e 83       	std	Y+6, r25	; 0x06
     d4e:	8d 83       	std	Y+5, r24	; 0x05
     d50:	0f c0       	rjmp	.+30     	; 0xd70 <CLCD_voidSendData+0xee>
     d52:	88 ec       	ldi	r24, 0xC8	; 200
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	9c 83       	std	Y+4, r25	; 0x04
     d58:	8b 83       	std	Y+3, r24	; 0x03
     d5a:	8b 81       	ldd	r24, Y+3	; 0x03
     d5c:	9c 81       	ldd	r25, Y+4	; 0x04
     d5e:	01 97       	sbiw	r24, 0x01	; 1
     d60:	f1 f7       	brne	.-4      	; 0xd5e <CLCD_voidSendData+0xdc>
     d62:	9c 83       	std	Y+4, r25	; 0x04
     d64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d66:	8d 81       	ldd	r24, Y+5	; 0x05
     d68:	9e 81       	ldd	r25, Y+6	; 0x06
     d6a:	01 97       	sbiw	r24, 0x01	; 1
     d6c:	9e 83       	std	Y+6, r25	; 0x06
     d6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d70:	8d 81       	ldd	r24, Y+5	; 0x05
     d72:	9e 81       	ldd	r25, Y+6	; 0x06
     d74:	00 97       	sbiw	r24, 0x00	; 0
     d76:	69 f7       	brne	.-38     	; 0xd52 <CLCD_voidSendData+0xd0>
     d78:	14 c0       	rjmp	.+40     	; 0xda2 <CLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d7a:	6f 81       	ldd	r22, Y+7	; 0x07
     d7c:	78 85       	ldd	r23, Y+8	; 0x08
     d7e:	89 85       	ldd	r24, Y+9	; 0x09
     d80:	9a 85       	ldd	r25, Y+10	; 0x0a
     d82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d86:	dc 01       	movw	r26, r24
     d88:	cb 01       	movw	r24, r22
     d8a:	9e 83       	std	Y+6, r25	; 0x06
     d8c:	8d 83       	std	Y+5, r24	; 0x05
     d8e:	8d 81       	ldd	r24, Y+5	; 0x05
     d90:	9e 81       	ldd	r25, Y+6	; 0x06
     d92:	9a 83       	std	Y+2, r25	; 0x02
     d94:	89 83       	std	Y+1, r24	; 0x01
     d96:	89 81       	ldd	r24, Y+1	; 0x01
     d98:	9a 81       	ldd	r25, Y+2	; 0x02
     d9a:	01 97       	sbiw	r24, 0x01	; 1
     d9c:	f1 f7       	brne	.-4      	; 0xd9a <CLCD_voidSendData+0x118>
     d9e:	9a 83       	std	Y+2, r25	; 0x02
     da0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
     da2:	83 e0       	ldi	r24, 0x03	; 3
     da4:	65 e0       	ldi	r22, 0x05	; 5
     da6:	40 e0       	ldi	r20, 0x00	; 0
     da8:	0e 94 db 08 	call	0x11b6	; 0x11b6 <DIO_u8SetPinValue>
}
     dac:	2f 96       	adiw	r28, 0x0f	; 15
     dae:	0f b6       	in	r0, 0x3f	; 63
     db0:	f8 94       	cli
     db2:	de bf       	out	0x3e, r29	; 62
     db4:	0f be       	out	0x3f, r0	; 63
     db6:	cd bf       	out	0x3d, r28	; 61
     db8:	cf 91       	pop	r28
     dba:	df 91       	pop	r29
     dbc:	08 95       	ret

00000dbe <CLCD_voidSendString>:
void CLCD_voidSendString(const char* Copy_pcString){
     dbe:	df 93       	push	r29
     dc0:	cf 93       	push	r28
     dc2:	00 d0       	rcall	.+0      	; 0xdc4 <CLCD_voidSendString+0x6>
     dc4:	cd b7       	in	r28, 0x3d	; 61
     dc6:	de b7       	in	r29, 0x3e	; 62
     dc8:	9a 83       	std	Y+2, r25	; 0x02
     dca:	89 83       	std	Y+1, r24	; 0x01
     dcc:	0a c0       	rjmp	.+20     	; 0xde2 <CLCD_voidSendString+0x24>
	while(*Copy_pcString != '\0'){
		CLCD_voidSendData(*Copy_pcString);
     dce:	e9 81       	ldd	r30, Y+1	; 0x01
     dd0:	fa 81       	ldd	r31, Y+2	; 0x02
     dd2:	80 81       	ld	r24, Z
     dd4:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
		Copy_pcString++;
     dd8:	89 81       	ldd	r24, Y+1	; 0x01
     dda:	9a 81       	ldd	r25, Y+2	; 0x02
     ddc:	01 96       	adiw	r24, 0x01	; 1
     dde:	9a 83       	std	Y+2, r25	; 0x02
     de0:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
}
void CLCD_voidSendString(const char* Copy_pcString){
	while(*Copy_pcString != '\0'){
     de2:	e9 81       	ldd	r30, Y+1	; 0x01
     de4:	fa 81       	ldd	r31, Y+2	; 0x02
     de6:	80 81       	ld	r24, Z
     de8:	88 23       	and	r24, r24
     dea:	89 f7       	brne	.-30     	; 0xdce <CLCD_voidSendString+0x10>
		CLCD_voidSendData(*Copy_pcString);
		Copy_pcString++;
	}
}
     dec:	0f 90       	pop	r0
     dee:	0f 90       	pop	r0
     df0:	cf 91       	pop	r28
     df2:	df 91       	pop	r29
     df4:	08 95       	ret

00000df6 <CLCD_voidInit>:
void CLCD_voidInit(void){
     df6:	df 93       	push	r29
     df8:	cf 93       	push	r28
     dfa:	cd b7       	in	r28, 0x3d	; 61
     dfc:	de b7       	in	r29, 0x3e	; 62
     dfe:	2e 97       	sbiw	r28, 0x0e	; 14
     e00:	0f b6       	in	r0, 0x3f	; 63
     e02:	f8 94       	cli
     e04:	de bf       	out	0x3e, r29	; 62
     e06:	0f be       	out	0x3f, r0	; 63
     e08:	cd bf       	out	0x3d, r28	; 61
     e0a:	80 e0       	ldi	r24, 0x00	; 0
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	a0 e2       	ldi	r26, 0x20	; 32
     e10:	b2 e4       	ldi	r27, 0x42	; 66
     e12:	8b 87       	std	Y+11, r24	; 0x0b
     e14:	9c 87       	std	Y+12, r25	; 0x0c
     e16:	ad 87       	std	Y+13, r26	; 0x0d
     e18:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e1a:	6b 85       	ldd	r22, Y+11	; 0x0b
     e1c:	7c 85       	ldd	r23, Y+12	; 0x0c
     e1e:	8d 85       	ldd	r24, Y+13	; 0x0d
     e20:	9e 85       	ldd	r25, Y+14	; 0x0e
     e22:	20 e0       	ldi	r18, 0x00	; 0
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	4a ef       	ldi	r20, 0xFA	; 250
     e28:	54 e4       	ldi	r21, 0x44	; 68
     e2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e2e:	dc 01       	movw	r26, r24
     e30:	cb 01       	movw	r24, r22
     e32:	8f 83       	std	Y+7, r24	; 0x07
     e34:	98 87       	std	Y+8, r25	; 0x08
     e36:	a9 87       	std	Y+9, r26	; 0x09
     e38:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e3a:	6f 81       	ldd	r22, Y+7	; 0x07
     e3c:	78 85       	ldd	r23, Y+8	; 0x08
     e3e:	89 85       	ldd	r24, Y+9	; 0x09
     e40:	9a 85       	ldd	r25, Y+10	; 0x0a
     e42:	20 e0       	ldi	r18, 0x00	; 0
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	40 e8       	ldi	r20, 0x80	; 128
     e48:	5f e3       	ldi	r21, 0x3F	; 63
     e4a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e4e:	88 23       	and	r24, r24
     e50:	2c f4       	brge	.+10     	; 0xe5c <CLCD_voidInit+0x66>
		__ticks = 1;
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	9e 83       	std	Y+6, r25	; 0x06
     e58:	8d 83       	std	Y+5, r24	; 0x05
     e5a:	3f c0       	rjmp	.+126    	; 0xeda <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
     e5c:	6f 81       	ldd	r22, Y+7	; 0x07
     e5e:	78 85       	ldd	r23, Y+8	; 0x08
     e60:	89 85       	ldd	r24, Y+9	; 0x09
     e62:	9a 85       	ldd	r25, Y+10	; 0x0a
     e64:	20 e0       	ldi	r18, 0x00	; 0
     e66:	3f ef       	ldi	r19, 0xFF	; 255
     e68:	4f e7       	ldi	r20, 0x7F	; 127
     e6a:	57 e4       	ldi	r21, 0x47	; 71
     e6c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e70:	18 16       	cp	r1, r24
     e72:	4c f5       	brge	.+82     	; 0xec6 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e74:	6b 85       	ldd	r22, Y+11	; 0x0b
     e76:	7c 85       	ldd	r23, Y+12	; 0x0c
     e78:	8d 85       	ldd	r24, Y+13	; 0x0d
     e7a:	9e 85       	ldd	r25, Y+14	; 0x0e
     e7c:	20 e0       	ldi	r18, 0x00	; 0
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	40 e2       	ldi	r20, 0x20	; 32
     e82:	51 e4       	ldi	r21, 0x41	; 65
     e84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e88:	dc 01       	movw	r26, r24
     e8a:	cb 01       	movw	r24, r22
     e8c:	bc 01       	movw	r22, r24
     e8e:	cd 01       	movw	r24, r26
     e90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e94:	dc 01       	movw	r26, r24
     e96:	cb 01       	movw	r24, r22
     e98:	9e 83       	std	Y+6, r25	; 0x06
     e9a:	8d 83       	std	Y+5, r24	; 0x05
     e9c:	0f c0       	rjmp	.+30     	; 0xebc <CLCD_voidInit+0xc6>
     e9e:	88 ec       	ldi	r24, 0xC8	; 200
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	9c 83       	std	Y+4, r25	; 0x04
     ea4:	8b 83       	std	Y+3, r24	; 0x03
     ea6:	8b 81       	ldd	r24, Y+3	; 0x03
     ea8:	9c 81       	ldd	r25, Y+4	; 0x04
     eaa:	01 97       	sbiw	r24, 0x01	; 1
     eac:	f1 f7       	brne	.-4      	; 0xeaa <CLCD_voidInit+0xb4>
     eae:	9c 83       	std	Y+4, r25	; 0x04
     eb0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eb2:	8d 81       	ldd	r24, Y+5	; 0x05
     eb4:	9e 81       	ldd	r25, Y+6	; 0x06
     eb6:	01 97       	sbiw	r24, 0x01	; 1
     eb8:	9e 83       	std	Y+6, r25	; 0x06
     eba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ebc:	8d 81       	ldd	r24, Y+5	; 0x05
     ebe:	9e 81       	ldd	r25, Y+6	; 0x06
     ec0:	00 97       	sbiw	r24, 0x00	; 0
     ec2:	69 f7       	brne	.-38     	; 0xe9e <CLCD_voidInit+0xa8>
     ec4:	14 c0       	rjmp	.+40     	; 0xeee <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ec6:	6f 81       	ldd	r22, Y+7	; 0x07
     ec8:	78 85       	ldd	r23, Y+8	; 0x08
     eca:	89 85       	ldd	r24, Y+9	; 0x09
     ecc:	9a 85       	ldd	r25, Y+10	; 0x0a
     ece:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ed2:	dc 01       	movw	r26, r24
     ed4:	cb 01       	movw	r24, r22
     ed6:	9e 83       	std	Y+6, r25	; 0x06
     ed8:	8d 83       	std	Y+5, r24	; 0x05
     eda:	8d 81       	ldd	r24, Y+5	; 0x05
     edc:	9e 81       	ldd	r25, Y+6	; 0x06
     ede:	9a 83       	std	Y+2, r25	; 0x02
     ee0:	89 83       	std	Y+1, r24	; 0x01
     ee2:	89 81       	ldd	r24, Y+1	; 0x01
     ee4:	9a 81       	ldd	r25, Y+2	; 0x02
     ee6:	01 97       	sbiw	r24, 0x01	; 1
     ee8:	f1 f7       	brne	.-4      	; 0xee6 <CLCD_voidInit+0xf0>
     eea:	9a 83       	std	Y+2, r25	; 0x02
     eec:	89 83       	std	Y+1, r24	; 0x01
	/*wait for more than 30 ms*/
	_delay_ms(40);
	/*Function Set Command: 2 lines, 5*8 Font Size*/
	CLCD_voidSendCommand(0b00111000);
     eee:	88 e3       	ldi	r24, 0x38	; 56
     ef0:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
	/*Display control on off: enable display disable cursor no blinking cursor*/
	CLCD_voidSendCommand(0b00001100);
     ef4:	8c e0       	ldi	r24, 0x0C	; 12
     ef6:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
	/*clear display*/
	CLCD_voidSendCommand(1);
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>


}
     f00:	2e 96       	adiw	r28, 0x0e	; 14
     f02:	0f b6       	in	r0, 0x3f	; 63
     f04:	f8 94       	cli
     f06:	de bf       	out	0x3e, r29	; 62
     f08:	0f be       	out	0x3f, r0	; 63
     f0a:	cd bf       	out	0x3d, r28	; 61
     f0c:	cf 91       	pop	r28
     f0e:	df 91       	pop	r29
     f10:	08 95       	ret

00000f12 <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(u8 Copy_u8XPos,u8 Copy_u8YPos){
     f12:	df 93       	push	r29
     f14:	cf 93       	push	r28
     f16:	00 d0       	rcall	.+0      	; 0xf18 <CLCD_voidGoToXY+0x6>
     f18:	0f 92       	push	r0
     f1a:	cd b7       	in	r28, 0x3d	; 61
     f1c:	de b7       	in	r29, 0x3e	; 62
     f1e:	8a 83       	std	Y+2, r24	; 0x02
     f20:	6b 83       	std	Y+3, r22	; 0x03
	/*converting the position into an address*/
	u8 Local_u8Adress;
	if(Copy_u8XPos==0){
     f22:	8a 81       	ldd	r24, Y+2	; 0x02
     f24:	88 23       	and	r24, r24
     f26:	19 f4       	brne	.+6      	; 0xf2e <CLCD_voidGoToXY+0x1c>
		Local_u8Adress = Copy_u8YPos;
     f28:	8b 81       	ldd	r24, Y+3	; 0x03
     f2a:	89 83       	std	Y+1, r24	; 0x01
     f2c:	06 c0       	rjmp	.+12     	; 0xf3a <CLCD_voidGoToXY+0x28>
	}
	else if(Copy_u8XPos==1){
     f2e:	8a 81       	ldd	r24, Y+2	; 0x02
     f30:	81 30       	cpi	r24, 0x01	; 1
     f32:	19 f4       	brne	.+6      	; 0xf3a <CLCD_voidGoToXY+0x28>
		Local_u8Adress = Copy_u8YPos+0x40;
     f34:	8b 81       	ldd	r24, Y+3	; 0x03
     f36:	80 5c       	subi	r24, 0xC0	; 192
     f38:	89 83       	std	Y+1, r24	; 0x01
	}
	/*setting the 7th bit so we can send the set ddram address command*/
	SET_BIT(Local_u8Adress,7);
     f3a:	89 81       	ldd	r24, Y+1	; 0x01
     f3c:	80 68       	ori	r24, 0x80	; 128
     f3e:	89 83       	std	Y+1, r24	; 0x01
	CLCD_voidSendCommand(Local_u8Adress);
     f40:	89 81       	ldd	r24, Y+1	; 0x01
     f42:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
}
     f46:	0f 90       	pop	r0
     f48:	0f 90       	pop	r0
     f4a:	0f 90       	pop	r0
     f4c:	cf 91       	pop	r28
     f4e:	df 91       	pop	r29
     f50:	08 95       	ret

00000f52 <CLCD_voidWriteSpecialCharacter>:

void CLCD_voidWriteSpecialCharacter(u8* Copy_pu8Arr,u8 Copy_u8PatternNumber){
     f52:	df 93       	push	r29
     f54:	cf 93       	push	r28
     f56:	00 d0       	rcall	.+0      	; 0xf58 <CLCD_voidWriteSpecialCharacter+0x6>
     f58:	00 d0       	rcall	.+0      	; 0xf5a <CLCD_voidWriteSpecialCharacter+0x8>
     f5a:	0f 92       	push	r0
     f5c:	cd b7       	in	r28, 0x3d	; 61
     f5e:	de b7       	in	r29, 0x3e	; 62
     f60:	9c 83       	std	Y+4, r25	; 0x04
     f62:	8b 83       	std	Y+3, r24	; 0x03
     f64:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8Iterator;
	/*calculate CGRAM address of block 8 bytes*/
	u8 Local_u8CGRAMAdress = Copy_u8PatternNumber*8;
     f66:	8d 81       	ldd	r24, Y+5	; 0x05
     f68:	88 2f       	mov	r24, r24
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	88 0f       	add	r24, r24
     f6e:	99 1f       	adc	r25, r25
     f70:	88 0f       	add	r24, r24
     f72:	99 1f       	adc	r25, r25
     f74:	88 0f       	add	r24, r24
     f76:	99 1f       	adc	r25, r25
     f78:	89 83       	std	Y+1, r24	; 0x01
	/*set bit 6 for command and set the CGRAM address command*/
	SET_BIT(Local_u8CGRAMAdress,6);
     f7a:	89 81       	ldd	r24, Y+1	; 0x01
     f7c:	80 64       	ori	r24, 0x40	; 64
     f7e:	89 83       	std	Y+1, r24	; 0x01
	CLCD_voidSendCommand(Local_u8CGRAMAdress);
     f80:	89 81       	ldd	r24, Y+1	; 0x01
     f82:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
	/*write the pattern on CGRAM*/
	for(Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++){
     f86:	1a 82       	std	Y+2, r1	; 0x02
     f88:	0e c0       	rjmp	.+28     	; 0xfa6 <CLCD_voidWriteSpecialCharacter+0x54>
		CLCD_voidSendData(Copy_pu8Arr[Local_u8Iterator]);
     f8a:	8a 81       	ldd	r24, Y+2	; 0x02
     f8c:	28 2f       	mov	r18, r24
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	8b 81       	ldd	r24, Y+3	; 0x03
     f92:	9c 81       	ldd	r25, Y+4	; 0x04
     f94:	fc 01       	movw	r30, r24
     f96:	e2 0f       	add	r30, r18
     f98:	f3 1f       	adc	r31, r19
     f9a:	80 81       	ld	r24, Z
     f9c:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
	u8 Local_u8CGRAMAdress = Copy_u8PatternNumber*8;
	/*set bit 6 for command and set the CGRAM address command*/
	SET_BIT(Local_u8CGRAMAdress,6);
	CLCD_voidSendCommand(Local_u8CGRAMAdress);
	/*write the pattern on CGRAM*/
	for(Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++){
     fa0:	8a 81       	ldd	r24, Y+2	; 0x02
     fa2:	8f 5f       	subi	r24, 0xFF	; 255
     fa4:	8a 83       	std	Y+2, r24	; 0x02
     fa6:	8a 81       	ldd	r24, Y+2	; 0x02
     fa8:	88 30       	cpi	r24, 0x08	; 8
     faa:	78 f3       	brcs	.-34     	; 0xf8a <CLCD_voidWriteSpecialCharacter+0x38>
		CLCD_voidSendData(Copy_pu8Arr[Local_u8Iterator]);
	}
}
     fac:	0f 90       	pop	r0
     fae:	0f 90       	pop	r0
     fb0:	0f 90       	pop	r0
     fb2:	0f 90       	pop	r0
     fb4:	0f 90       	pop	r0
     fb6:	cf 91       	pop	r28
     fb8:	df 91       	pop	r29
     fba:	08 95       	ret

00000fbc <CLCD_voidSendSpecialCharacter>:
void CLCD_voidSendSpecialCharacter(u8 Copy_u8PatternNumber,u8 Copy_u8XPos,u8 Copy_u8YPos){
     fbc:	df 93       	push	r29
     fbe:	cf 93       	push	r28
     fc0:	00 d0       	rcall	.+0      	; 0xfc2 <CLCD_voidSendSpecialCharacter+0x6>
     fc2:	0f 92       	push	r0
     fc4:	cd b7       	in	r28, 0x3d	; 61
     fc6:	de b7       	in	r29, 0x3e	; 62
     fc8:	89 83       	std	Y+1, r24	; 0x01
     fca:	6a 83       	std	Y+2, r22	; 0x02
     fcc:	4b 83       	std	Y+3, r20	; 0x03
	/*go back to ddram to display pattern and send pattern by choosing battern blovk*/
	CLCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
     fce:	8a 81       	ldd	r24, Y+2	; 0x02
     fd0:	6b 81       	ldd	r22, Y+3	; 0x03
     fd2:	0e 94 89 07 	call	0xf12	; 0xf12 <CLCD_voidGoToXY>
	CLCD_voidSendData(Copy_u8PatternNumber);
     fd6:	89 81       	ldd	r24, Y+1	; 0x01
     fd8:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
}
     fdc:	0f 90       	pop	r0
     fde:	0f 90       	pop	r0
     fe0:	0f 90       	pop	r0
     fe2:	cf 91       	pop	r28
     fe4:	df 91       	pop	r29
     fe6:	08 95       	ret

00000fe8 <CLCD_voidSendNumber>:


void CLCD_voidSendNumber(u32 Copy_u32Number){
     fe8:	df 93       	push	r29
     fea:	cf 93       	push	r28
     fec:	cd b7       	in	r28, 0x3d	; 61
     fee:	de b7       	in	r29, 0x3e	; 62
     ff0:	2b 97       	sbiw	r28, 0x0b	; 11
     ff2:	0f b6       	in	r0, 0x3f	; 63
     ff4:	f8 94       	cli
     ff6:	de bf       	out	0x3e, r29	; 62
     ff8:	0f be       	out	0x3f, r0	; 63
     ffa:	cd bf       	out	0x3d, r28	; 61
     ffc:	68 87       	std	Y+8, r22	; 0x08
     ffe:	79 87       	std	Y+9, r23	; 0x09
    1000:	8a 87       	std	Y+10, r24	; 0x0a
    1002:	9b 87       	std	Y+11, r25	; 0x0b
	/*set local variables to know the number of digits and the digit to print*/
	u8 Local_u8Quotient=1;
    1004:	81 e0       	ldi	r24, 0x01	; 1
    1006:	8f 83       	std	Y+7, r24	; 0x07
	u8 Local_u8NumOfDigits=0;
    1008:	1e 82       	std	Y+6, r1	; 0x06
    100a:	1b c0       	rjmp	.+54     	; 0x1042 <CLCD_voidSendNumber+0x5a>
    u8 Local_u8Digit;
    /*calculating the number of digits in the number*/
	while(Local_u8Quotient!=0){
		Local_u8Quotient = Copy_u32Number/CLCD_u32Power(10,++Local_u8NumOfDigits);
    100c:	8e 81       	ldd	r24, Y+6	; 0x06
    100e:	8f 5f       	subi	r24, 0xFF	; 255
    1010:	8e 83       	std	Y+6, r24	; 0x06
    1012:	8e 81       	ldd	r24, Y+6	; 0x06
    1014:	28 2f       	mov	r18, r24
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	40 e0       	ldi	r20, 0x00	; 0
    101a:	50 e0       	ldi	r21, 0x00	; 0
    101c:	6a e0       	ldi	r22, 0x0A	; 10
    101e:	70 e0       	ldi	r23, 0x00	; 0
    1020:	80 e0       	ldi	r24, 0x00	; 0
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	0e 94 83 08 	call	0x1106	; 0x1106 <CLCD_u32Power>
    1028:	9b 01       	movw	r18, r22
    102a:	ac 01       	movw	r20, r24
    102c:	88 85       	ldd	r24, Y+8	; 0x08
    102e:	99 85       	ldd	r25, Y+9	; 0x09
    1030:	aa 85       	ldd	r26, Y+10	; 0x0a
    1032:	bb 85       	ldd	r27, Y+11	; 0x0b
    1034:	bc 01       	movw	r22, r24
    1036:	cd 01       	movw	r24, r26
    1038:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <__udivmodsi4>
    103c:	da 01       	movw	r26, r20
    103e:	c9 01       	movw	r24, r18
    1040:	8f 83       	std	Y+7, r24	; 0x07
	/*set local variables to know the number of digits and the digit to print*/
	u8 Local_u8Quotient=1;
	u8 Local_u8NumOfDigits=0;
    u8 Local_u8Digit;
    /*calculating the number of digits in the number*/
	while(Local_u8Quotient!=0){
    1042:	8f 81       	ldd	r24, Y+7	; 0x07
    1044:	88 23       	and	r24, r24
    1046:	11 f7       	brne	.-60     	; 0x100c <CLCD_voidSendNumber+0x24>
		Local_u8Quotient = Copy_u32Number/CLCD_u32Power(10,++Local_u8NumOfDigits);
	}
	/*separating each digit then sending then sending them separately to the CLCD*/
	for(s32 Local_u8Power =Local_u8NumOfDigits-1;Local_u8Power>=0;Local_u8Power--){
    1048:	8e 81       	ldd	r24, Y+6	; 0x06
    104a:	88 2f       	mov	r24, r24
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	01 97       	sbiw	r24, 0x01	; 1
    1050:	aa 27       	eor	r26, r26
    1052:	97 fd       	sbrc	r25, 7
    1054:	a0 95       	com	r26
    1056:	ba 2f       	mov	r27, r26
    1058:	89 83       	std	Y+1, r24	; 0x01
    105a:	9a 83       	std	Y+2, r25	; 0x02
    105c:	ab 83       	std	Y+3, r26	; 0x03
    105e:	bc 83       	std	Y+4, r27	; 0x04
    1060:	42 c0       	rjmp	.+132    	; 0x10e6 <CLCD_voidSendNumber+0xfe>
	        Local_u8Digit=Copy_u32Number/CLCD_u32Power(10,Local_u8Power);
    1062:	29 81       	ldd	r18, Y+1	; 0x01
    1064:	3a 81       	ldd	r19, Y+2	; 0x02
    1066:	4b 81       	ldd	r20, Y+3	; 0x03
    1068:	5c 81       	ldd	r21, Y+4	; 0x04
    106a:	6a e0       	ldi	r22, 0x0A	; 10
    106c:	70 e0       	ldi	r23, 0x00	; 0
    106e:	80 e0       	ldi	r24, 0x00	; 0
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	0e 94 83 08 	call	0x1106	; 0x1106 <CLCD_u32Power>
    1076:	9b 01       	movw	r18, r22
    1078:	ac 01       	movw	r20, r24
    107a:	88 85       	ldd	r24, Y+8	; 0x08
    107c:	99 85       	ldd	r25, Y+9	; 0x09
    107e:	aa 85       	ldd	r26, Y+10	; 0x0a
    1080:	bb 85       	ldd	r27, Y+11	; 0x0b
    1082:	bc 01       	movw	r22, r24
    1084:	cd 01       	movw	r24, r26
    1086:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <__udivmodsi4>
    108a:	da 01       	movw	r26, r20
    108c:	c9 01       	movw	r24, r18
    108e:	8d 83       	std	Y+5, r24	; 0x05
	        Copy_u32Number %= CLCD_u32Power(10,Local_u8Power);
    1090:	29 81       	ldd	r18, Y+1	; 0x01
    1092:	3a 81       	ldd	r19, Y+2	; 0x02
    1094:	4b 81       	ldd	r20, Y+3	; 0x03
    1096:	5c 81       	ldd	r21, Y+4	; 0x04
    1098:	6a e0       	ldi	r22, 0x0A	; 10
    109a:	70 e0       	ldi	r23, 0x00	; 0
    109c:	80 e0       	ldi	r24, 0x00	; 0
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	0e 94 83 08 	call	0x1106	; 0x1106 <CLCD_u32Power>
    10a4:	9b 01       	movw	r18, r22
    10a6:	ac 01       	movw	r20, r24
    10a8:	88 85       	ldd	r24, Y+8	; 0x08
    10aa:	99 85       	ldd	r25, Y+9	; 0x09
    10ac:	aa 85       	ldd	r26, Y+10	; 0x0a
    10ae:	bb 85       	ldd	r27, Y+11	; 0x0b
    10b0:	bc 01       	movw	r22, r24
    10b2:	cd 01       	movw	r24, r26
    10b4:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <__udivmodsi4>
    10b8:	dc 01       	movw	r26, r24
    10ba:	cb 01       	movw	r24, r22
    10bc:	88 87       	std	Y+8, r24	; 0x08
    10be:	99 87       	std	Y+9, r25	; 0x09
    10c0:	aa 87       	std	Y+10, r26	; 0x0a
    10c2:	bb 87       	std	Y+11, r27	; 0x0b
	        Local_u8Digit+=48;
    10c4:	8d 81       	ldd	r24, Y+5	; 0x05
    10c6:	80 5d       	subi	r24, 0xD0	; 208
    10c8:	8d 83       	std	Y+5, r24	; 0x05
	        CLCD_voidSendData(Local_u8Digit);
    10ca:	8d 81       	ldd	r24, Y+5	; 0x05
    10cc:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    /*calculating the number of digits in the number*/
	while(Local_u8Quotient!=0){
		Local_u8Quotient = Copy_u32Number/CLCD_u32Power(10,++Local_u8NumOfDigits);
	}
	/*separating each digit then sending then sending them separately to the CLCD*/
	for(s32 Local_u8Power =Local_u8NumOfDigits-1;Local_u8Power>=0;Local_u8Power--){
    10d0:	89 81       	ldd	r24, Y+1	; 0x01
    10d2:	9a 81       	ldd	r25, Y+2	; 0x02
    10d4:	ab 81       	ldd	r26, Y+3	; 0x03
    10d6:	bc 81       	ldd	r27, Y+4	; 0x04
    10d8:	01 97       	sbiw	r24, 0x01	; 1
    10da:	a1 09       	sbc	r26, r1
    10dc:	b1 09       	sbc	r27, r1
    10de:	89 83       	std	Y+1, r24	; 0x01
    10e0:	9a 83       	std	Y+2, r25	; 0x02
    10e2:	ab 83       	std	Y+3, r26	; 0x03
    10e4:	bc 83       	std	Y+4, r27	; 0x04
    10e6:	89 81       	ldd	r24, Y+1	; 0x01
    10e8:	9a 81       	ldd	r25, Y+2	; 0x02
    10ea:	ab 81       	ldd	r26, Y+3	; 0x03
    10ec:	bc 81       	ldd	r27, Y+4	; 0x04
    10ee:	bb 23       	and	r27, r27
    10f0:	0c f0       	brlt	.+2      	; 0x10f4 <CLCD_voidSendNumber+0x10c>
    10f2:	b7 cf       	rjmp	.-146    	; 0x1062 <CLCD_voidSendNumber+0x7a>
	        Local_u8Digit=Copy_u32Number/CLCD_u32Power(10,Local_u8Power);
	        Copy_u32Number %= CLCD_u32Power(10,Local_u8Power);
	        Local_u8Digit+=48;
	        CLCD_voidSendData(Local_u8Digit);
	    }
}
    10f4:	2b 96       	adiw	r28, 0x0b	; 11
    10f6:	0f b6       	in	r0, 0x3f	; 63
    10f8:	f8 94       	cli
    10fa:	de bf       	out	0x3e, r29	; 62
    10fc:	0f be       	out	0x3f, r0	; 63
    10fe:	cd bf       	out	0x3d, r28	; 61
    1100:	cf 91       	pop	r28
    1102:	df 91       	pop	r29
    1104:	08 95       	ret

00001106 <CLCD_u32Power>:

u32 CLCD_u32Power(u32 Copy_u32Base,s32 Copy_u32Exponent){
    1106:	df 93       	push	r29
    1108:	cf 93       	push	r28
    110a:	cd b7       	in	r28, 0x3d	; 61
    110c:	de b7       	in	r29, 0x3e	; 62
    110e:	60 97       	sbiw	r28, 0x10	; 16
    1110:	0f b6       	in	r0, 0x3f	; 63
    1112:	f8 94       	cli
    1114:	de bf       	out	0x3e, r29	; 62
    1116:	0f be       	out	0x3f, r0	; 63
    1118:	cd bf       	out	0x3d, r28	; 61
    111a:	69 87       	std	Y+9, r22	; 0x09
    111c:	7a 87       	std	Y+10, r23	; 0x0a
    111e:	8b 87       	std	Y+11, r24	; 0x0b
    1120:	9c 87       	std	Y+12, r25	; 0x0c
    1122:	2d 87       	std	Y+13, r18	; 0x0d
    1124:	3e 87       	std	Y+14, r19	; 0x0e
    1126:	4f 87       	std	Y+15, r20	; 0x0f
    1128:	58 8b       	std	Y+16, r21	; 0x10
	u32 Local_u32Result=1;
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	a0 e0       	ldi	r26, 0x00	; 0
    1130:	b0 e0       	ldi	r27, 0x00	; 0
    1132:	8d 83       	std	Y+5, r24	; 0x05
    1134:	9e 83       	std	Y+6, r25	; 0x06
    1136:	af 83       	std	Y+7, r26	; 0x07
    1138:	b8 87       	std	Y+8, r27	; 0x08
	for(u32 i=0;i<Copy_u32Exponent;i++){
    113a:	19 82       	std	Y+1, r1	; 0x01
    113c:	1a 82       	std	Y+2, r1	; 0x02
    113e:	1b 82       	std	Y+3, r1	; 0x03
    1140:	1c 82       	std	Y+4, r1	; 0x04
    1142:	1d c0       	rjmp	.+58     	; 0x117e <CLCD_u32Power+0x78>
		Local_u32Result*=Copy_u32Base;
    1144:	8d 81       	ldd	r24, Y+5	; 0x05
    1146:	9e 81       	ldd	r25, Y+6	; 0x06
    1148:	af 81       	ldd	r26, Y+7	; 0x07
    114a:	b8 85       	ldd	r27, Y+8	; 0x08
    114c:	29 85       	ldd	r18, Y+9	; 0x09
    114e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1150:	4b 85       	ldd	r20, Y+11	; 0x0b
    1152:	5c 85       	ldd	r21, Y+12	; 0x0c
    1154:	bc 01       	movw	r22, r24
    1156:	cd 01       	movw	r24, r26
    1158:	0e 94 bd 12 	call	0x257a	; 0x257a <__mulsi3>
    115c:	dc 01       	movw	r26, r24
    115e:	cb 01       	movw	r24, r22
    1160:	8d 83       	std	Y+5, r24	; 0x05
    1162:	9e 83       	std	Y+6, r25	; 0x06
    1164:	af 83       	std	Y+7, r26	; 0x07
    1166:	b8 87       	std	Y+8, r27	; 0x08
	    }
}

u32 CLCD_u32Power(u32 Copy_u32Base,s32 Copy_u32Exponent){
	u32 Local_u32Result=1;
	for(u32 i=0;i<Copy_u32Exponent;i++){
    1168:	89 81       	ldd	r24, Y+1	; 0x01
    116a:	9a 81       	ldd	r25, Y+2	; 0x02
    116c:	ab 81       	ldd	r26, Y+3	; 0x03
    116e:	bc 81       	ldd	r27, Y+4	; 0x04
    1170:	01 96       	adiw	r24, 0x01	; 1
    1172:	a1 1d       	adc	r26, r1
    1174:	b1 1d       	adc	r27, r1
    1176:	89 83       	std	Y+1, r24	; 0x01
    1178:	9a 83       	std	Y+2, r25	; 0x02
    117a:	ab 83       	std	Y+3, r26	; 0x03
    117c:	bc 83       	std	Y+4, r27	; 0x04
    117e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1180:	3e 85       	ldd	r19, Y+14	; 0x0e
    1182:	4f 85       	ldd	r20, Y+15	; 0x0f
    1184:	58 89       	ldd	r21, Y+16	; 0x10
    1186:	89 81       	ldd	r24, Y+1	; 0x01
    1188:	9a 81       	ldd	r25, Y+2	; 0x02
    118a:	ab 81       	ldd	r26, Y+3	; 0x03
    118c:	bc 81       	ldd	r27, Y+4	; 0x04
    118e:	82 17       	cp	r24, r18
    1190:	93 07       	cpc	r25, r19
    1192:	a4 07       	cpc	r26, r20
    1194:	b5 07       	cpc	r27, r21
    1196:	b0 f2       	brcs	.-84     	; 0x1144 <CLCD_u32Power+0x3e>
		Local_u32Result*=Copy_u32Base;
	}
	return Local_u32Result;
    1198:	8d 81       	ldd	r24, Y+5	; 0x05
    119a:	9e 81       	ldd	r25, Y+6	; 0x06
    119c:	af 81       	ldd	r26, Y+7	; 0x07
    119e:	b8 85       	ldd	r27, Y+8	; 0x08
}
    11a0:	bc 01       	movw	r22, r24
    11a2:	cd 01       	movw	r24, r26
    11a4:	60 96       	adiw	r28, 0x10	; 16
    11a6:	0f b6       	in	r0, 0x3f	; 63
    11a8:	f8 94       	cli
    11aa:	de bf       	out	0x3e, r29	; 62
    11ac:	0f be       	out	0x3f, r0	; 63
    11ae:	cd bf       	out	0x3d, r28	; 61
    11b0:	cf 91       	pop	r28
    11b2:	df 91       	pop	r29
    11b4:	08 95       	ret

000011b6 <DIO_u8SetPinValue>:
#include "DIO_private.h"
#include "DIO_config.h"



u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value){
    11b6:	df 93       	push	r29
    11b8:	cf 93       	push	r28
    11ba:	cd b7       	in	r28, 0x3d	; 61
    11bc:	de b7       	in	r29, 0x3e	; 62
    11be:	28 97       	sbiw	r28, 0x08	; 8
    11c0:	0f b6       	in	r0, 0x3f	; 63
    11c2:	f8 94       	cli
    11c4:	de bf       	out	0x3e, r29	; 62
    11c6:	0f be       	out	0x3f, r0	; 63
    11c8:	cd bf       	out	0x3d, r28	; 61
    11ca:	8a 83       	std	Y+2, r24	; 0x02
    11cc:	6b 83       	std	Y+3, r22	; 0x03
    11ce:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    11d0:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin <= DIO_u8PIN7){
    11d2:	8b 81       	ldd	r24, Y+3	; 0x03
    11d4:	88 30       	cpi	r24, 0x08	; 8
    11d6:	08 f0       	brcs	.+2      	; 0x11da <DIO_u8SetPinValue+0x24>
    11d8:	f4 c0       	rjmp	.+488    	; 0x13c2 <DIO_u8SetPinValue+0x20c>
		if(Copy_u8Value == DIO_u8PIN_LOW){
    11da:	8c 81       	ldd	r24, Y+4	; 0x04
    11dc:	88 23       	and	r24, r24
    11de:	09 f0       	breq	.+2      	; 0x11e2 <DIO_u8SetPinValue+0x2c>
    11e0:	77 c0       	rjmp	.+238    	; 0x12d0 <DIO_u8SetPinValue+0x11a>
			switch(Copy_u8Port){
    11e2:	8a 81       	ldd	r24, Y+2	; 0x02
    11e4:	28 2f       	mov	r18, r24
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	38 87       	std	Y+8, r19	; 0x08
    11ea:	2f 83       	std	Y+7, r18	; 0x07
    11ec:	8f 81       	ldd	r24, Y+7	; 0x07
    11ee:	98 85       	ldd	r25, Y+8	; 0x08
    11f0:	81 30       	cpi	r24, 0x01	; 1
    11f2:	91 05       	cpc	r25, r1
    11f4:	59 f1       	breq	.+86     	; 0x124c <DIO_u8SetPinValue+0x96>
    11f6:	2f 81       	ldd	r18, Y+7	; 0x07
    11f8:	38 85       	ldd	r19, Y+8	; 0x08
    11fa:	22 30       	cpi	r18, 0x02	; 2
    11fc:	31 05       	cpc	r19, r1
    11fe:	2c f4       	brge	.+10     	; 0x120a <DIO_u8SetPinValue+0x54>
    1200:	8f 81       	ldd	r24, Y+7	; 0x07
    1202:	98 85       	ldd	r25, Y+8	; 0x08
    1204:	00 97       	sbiw	r24, 0x00	; 0
    1206:	69 f0       	breq	.+26     	; 0x1222 <DIO_u8SetPinValue+0x6c>
    1208:	60 c0       	rjmp	.+192    	; 0x12ca <DIO_u8SetPinValue+0x114>
    120a:	2f 81       	ldd	r18, Y+7	; 0x07
    120c:	38 85       	ldd	r19, Y+8	; 0x08
    120e:	22 30       	cpi	r18, 0x02	; 2
    1210:	31 05       	cpc	r19, r1
    1212:	89 f1       	breq	.+98     	; 0x1276 <DIO_u8SetPinValue+0xc0>
    1214:	8f 81       	ldd	r24, Y+7	; 0x07
    1216:	98 85       	ldd	r25, Y+8	; 0x08
    1218:	83 30       	cpi	r24, 0x03	; 3
    121a:	91 05       	cpc	r25, r1
    121c:	09 f4       	brne	.+2      	; 0x1220 <DIO_u8SetPinValue+0x6a>
    121e:	40 c0       	rjmp	.+128    	; 0x12a0 <DIO_u8SetPinValue+0xea>
    1220:	54 c0       	rjmp	.+168    	; 0x12ca <DIO_u8SetPinValue+0x114>
			case DIO_u8PORTA : CLR_BIT(PORTA,Copy_u8Pin); break;
    1222:	ab e3       	ldi	r26, 0x3B	; 59
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	eb e3       	ldi	r30, 0x3B	; 59
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	48 2f       	mov	r20, r24
    122e:	8b 81       	ldd	r24, Y+3	; 0x03
    1230:	28 2f       	mov	r18, r24
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	02 2e       	mov	r0, r18
    123a:	02 c0       	rjmp	.+4      	; 0x1240 <DIO_u8SetPinValue+0x8a>
    123c:	88 0f       	add	r24, r24
    123e:	99 1f       	adc	r25, r25
    1240:	0a 94       	dec	r0
    1242:	e2 f7       	brpl	.-8      	; 0x123c <DIO_u8SetPinValue+0x86>
    1244:	80 95       	com	r24
    1246:	84 23       	and	r24, r20
    1248:	8c 93       	st	X, r24
    124a:	bd c0       	rjmp	.+378    	; 0x13c6 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB : CLR_BIT(PORTB,Copy_u8Pin); break;
    124c:	a8 e3       	ldi	r26, 0x38	; 56
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	e8 e3       	ldi	r30, 0x38	; 56
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	48 2f       	mov	r20, r24
    1258:	8b 81       	ldd	r24, Y+3	; 0x03
    125a:	28 2f       	mov	r18, r24
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	81 e0       	ldi	r24, 0x01	; 1
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	02 2e       	mov	r0, r18
    1264:	02 c0       	rjmp	.+4      	; 0x126a <DIO_u8SetPinValue+0xb4>
    1266:	88 0f       	add	r24, r24
    1268:	99 1f       	adc	r25, r25
    126a:	0a 94       	dec	r0
    126c:	e2 f7       	brpl	.-8      	; 0x1266 <DIO_u8SetPinValue+0xb0>
    126e:	80 95       	com	r24
    1270:	84 23       	and	r24, r20
    1272:	8c 93       	st	X, r24
    1274:	a8 c0       	rjmp	.+336    	; 0x13c6 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC : CLR_BIT(PORTC,Copy_u8Pin); break;
    1276:	a5 e3       	ldi	r26, 0x35	; 53
    1278:	b0 e0       	ldi	r27, 0x00	; 0
    127a:	e5 e3       	ldi	r30, 0x35	; 53
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	80 81       	ld	r24, Z
    1280:	48 2f       	mov	r20, r24
    1282:	8b 81       	ldd	r24, Y+3	; 0x03
    1284:	28 2f       	mov	r18, r24
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	81 e0       	ldi	r24, 0x01	; 1
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	02 2e       	mov	r0, r18
    128e:	02 c0       	rjmp	.+4      	; 0x1294 <DIO_u8SetPinValue+0xde>
    1290:	88 0f       	add	r24, r24
    1292:	99 1f       	adc	r25, r25
    1294:	0a 94       	dec	r0
    1296:	e2 f7       	brpl	.-8      	; 0x1290 <DIO_u8SetPinValue+0xda>
    1298:	80 95       	com	r24
    129a:	84 23       	and	r24, r20
    129c:	8c 93       	st	X, r24
    129e:	93 c0       	rjmp	.+294    	; 0x13c6 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD : CLR_BIT(PORTD,Copy_u8Pin); break;
    12a0:	a2 e3       	ldi	r26, 0x32	; 50
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	e2 e3       	ldi	r30, 0x32	; 50
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	48 2f       	mov	r20, r24
    12ac:	8b 81       	ldd	r24, Y+3	; 0x03
    12ae:	28 2f       	mov	r18, r24
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	02 2e       	mov	r0, r18
    12b8:	02 c0       	rjmp	.+4      	; 0x12be <DIO_u8SetPinValue+0x108>
    12ba:	88 0f       	add	r24, r24
    12bc:	99 1f       	adc	r25, r25
    12be:	0a 94       	dec	r0
    12c0:	e2 f7       	brpl	.-8      	; 0x12ba <DIO_u8SetPinValue+0x104>
    12c2:	80 95       	com	r24
    12c4:	84 23       	and	r24, r20
    12c6:	8c 93       	st	X, r24
    12c8:	7e c0       	rjmp	.+252    	; 0x13c6 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1;
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	89 83       	std	Y+1, r24	; 0x01
    12ce:	7b c0       	rjmp	.+246    	; 0x13c6 <DIO_u8SetPinValue+0x210>
			}
		}
		else if(Copy_u8Value == DIO_u8PIN_HIGH){
    12d0:	8c 81       	ldd	r24, Y+4	; 0x04
    12d2:	81 30       	cpi	r24, 0x01	; 1
    12d4:	09 f0       	breq	.+2      	; 0x12d8 <DIO_u8SetPinValue+0x122>
    12d6:	72 c0       	rjmp	.+228    	; 0x13bc <DIO_u8SetPinValue+0x206>
			switch(Copy_u8Port){
    12d8:	8a 81       	ldd	r24, Y+2	; 0x02
    12da:	28 2f       	mov	r18, r24
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	3e 83       	std	Y+6, r19	; 0x06
    12e0:	2d 83       	std	Y+5, r18	; 0x05
    12e2:	8d 81       	ldd	r24, Y+5	; 0x05
    12e4:	9e 81       	ldd	r25, Y+6	; 0x06
    12e6:	81 30       	cpi	r24, 0x01	; 1
    12e8:	91 05       	cpc	r25, r1
    12ea:	49 f1       	breq	.+82     	; 0x133e <DIO_u8SetPinValue+0x188>
    12ec:	2d 81       	ldd	r18, Y+5	; 0x05
    12ee:	3e 81       	ldd	r19, Y+6	; 0x06
    12f0:	22 30       	cpi	r18, 0x02	; 2
    12f2:	31 05       	cpc	r19, r1
    12f4:	2c f4       	brge	.+10     	; 0x1300 <DIO_u8SetPinValue+0x14a>
    12f6:	8d 81       	ldd	r24, Y+5	; 0x05
    12f8:	9e 81       	ldd	r25, Y+6	; 0x06
    12fa:	00 97       	sbiw	r24, 0x00	; 0
    12fc:	61 f0       	breq	.+24     	; 0x1316 <DIO_u8SetPinValue+0x160>
    12fe:	5b c0       	rjmp	.+182    	; 0x13b6 <DIO_u8SetPinValue+0x200>
    1300:	2d 81       	ldd	r18, Y+5	; 0x05
    1302:	3e 81       	ldd	r19, Y+6	; 0x06
    1304:	22 30       	cpi	r18, 0x02	; 2
    1306:	31 05       	cpc	r19, r1
    1308:	71 f1       	breq	.+92     	; 0x1366 <DIO_u8SetPinValue+0x1b0>
    130a:	8d 81       	ldd	r24, Y+5	; 0x05
    130c:	9e 81       	ldd	r25, Y+6	; 0x06
    130e:	83 30       	cpi	r24, 0x03	; 3
    1310:	91 05       	cpc	r25, r1
    1312:	e9 f1       	breq	.+122    	; 0x138e <DIO_u8SetPinValue+0x1d8>
    1314:	50 c0       	rjmp	.+160    	; 0x13b6 <DIO_u8SetPinValue+0x200>
			case DIO_u8PORTA : SET_BIT(PORTA,Copy_u8Pin); break;
    1316:	ab e3       	ldi	r26, 0x3B	; 59
    1318:	b0 e0       	ldi	r27, 0x00	; 0
    131a:	eb e3       	ldi	r30, 0x3B	; 59
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	80 81       	ld	r24, Z
    1320:	48 2f       	mov	r20, r24
    1322:	8b 81       	ldd	r24, Y+3	; 0x03
    1324:	28 2f       	mov	r18, r24
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	02 2e       	mov	r0, r18
    132e:	02 c0       	rjmp	.+4      	; 0x1334 <DIO_u8SetPinValue+0x17e>
    1330:	88 0f       	add	r24, r24
    1332:	99 1f       	adc	r25, r25
    1334:	0a 94       	dec	r0
    1336:	e2 f7       	brpl	.-8      	; 0x1330 <DIO_u8SetPinValue+0x17a>
    1338:	84 2b       	or	r24, r20
    133a:	8c 93       	st	X, r24
    133c:	44 c0       	rjmp	.+136    	; 0x13c6 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB : SET_BIT(PORTB,Copy_u8Pin); break;
    133e:	a8 e3       	ldi	r26, 0x38	; 56
    1340:	b0 e0       	ldi	r27, 0x00	; 0
    1342:	e8 e3       	ldi	r30, 0x38	; 56
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	80 81       	ld	r24, Z
    1348:	48 2f       	mov	r20, r24
    134a:	8b 81       	ldd	r24, Y+3	; 0x03
    134c:	28 2f       	mov	r18, r24
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	81 e0       	ldi	r24, 0x01	; 1
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	02 2e       	mov	r0, r18
    1356:	02 c0       	rjmp	.+4      	; 0x135c <DIO_u8SetPinValue+0x1a6>
    1358:	88 0f       	add	r24, r24
    135a:	99 1f       	adc	r25, r25
    135c:	0a 94       	dec	r0
    135e:	e2 f7       	brpl	.-8      	; 0x1358 <DIO_u8SetPinValue+0x1a2>
    1360:	84 2b       	or	r24, r20
    1362:	8c 93       	st	X, r24
    1364:	30 c0       	rjmp	.+96     	; 0x13c6 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC : SET_BIT(PORTC,Copy_u8Pin); break;
    1366:	a5 e3       	ldi	r26, 0x35	; 53
    1368:	b0 e0       	ldi	r27, 0x00	; 0
    136a:	e5 e3       	ldi	r30, 0x35	; 53
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	80 81       	ld	r24, Z
    1370:	48 2f       	mov	r20, r24
    1372:	8b 81       	ldd	r24, Y+3	; 0x03
    1374:	28 2f       	mov	r18, r24
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	02 2e       	mov	r0, r18
    137e:	02 c0       	rjmp	.+4      	; 0x1384 <DIO_u8SetPinValue+0x1ce>
    1380:	88 0f       	add	r24, r24
    1382:	99 1f       	adc	r25, r25
    1384:	0a 94       	dec	r0
    1386:	e2 f7       	brpl	.-8      	; 0x1380 <DIO_u8SetPinValue+0x1ca>
    1388:	84 2b       	or	r24, r20
    138a:	8c 93       	st	X, r24
    138c:	1c c0       	rjmp	.+56     	; 0x13c6 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD : SET_BIT(PORTD,Copy_u8Pin); break;
    138e:	a2 e3       	ldi	r26, 0x32	; 50
    1390:	b0 e0       	ldi	r27, 0x00	; 0
    1392:	e2 e3       	ldi	r30, 0x32	; 50
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	80 81       	ld	r24, Z
    1398:	48 2f       	mov	r20, r24
    139a:	8b 81       	ldd	r24, Y+3	; 0x03
    139c:	28 2f       	mov	r18, r24
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	02 2e       	mov	r0, r18
    13a6:	02 c0       	rjmp	.+4      	; 0x13ac <DIO_u8SetPinValue+0x1f6>
    13a8:	88 0f       	add	r24, r24
    13aa:	99 1f       	adc	r25, r25
    13ac:	0a 94       	dec	r0
    13ae:	e2 f7       	brpl	.-8      	; 0x13a8 <DIO_u8SetPinValue+0x1f2>
    13b0:	84 2b       	or	r24, r20
    13b2:	8c 93       	st	X, r24
    13b4:	08 c0       	rjmp	.+16     	; 0x13c6 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1;
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	89 83       	std	Y+1, r24	; 0x01
    13ba:	05 c0       	rjmp	.+10     	; 0x13c6 <DIO_u8SetPinValue+0x210>
			}
		}
		else{
			Local_u8ErrorState=1;
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	89 83       	std	Y+1, r24	; 0x01
    13c0:	02 c0       	rjmp	.+4      	; 0x13c6 <DIO_u8SetPinValue+0x210>
		}
	}
	else{
		Local_u8ErrorState=1;
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState ;
    13c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    13c8:	28 96       	adiw	r28, 0x08	; 8
    13ca:	0f b6       	in	r0, 0x3f	; 63
    13cc:	f8 94       	cli
    13ce:	de bf       	out	0x3e, r29	; 62
    13d0:	0f be       	out	0x3f, r0	; 63
    13d2:	cd bf       	out	0x3d, r28	; 61
    13d4:	cf 91       	pop	r28
    13d6:	df 91       	pop	r29
    13d8:	08 95       	ret

000013da <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8Port,u8 Copy_u8Value){
    13da:	df 93       	push	r29
    13dc:	cf 93       	push	r28
    13de:	00 d0       	rcall	.+0      	; 0x13e0 <DIO_u8SetPortValue+0x6>
    13e0:	00 d0       	rcall	.+0      	; 0x13e2 <DIO_u8SetPortValue+0x8>
    13e2:	0f 92       	push	r0
    13e4:	cd b7       	in	r28, 0x3d	; 61
    13e6:	de b7       	in	r29, 0x3e	; 62
    13e8:	8a 83       	std	Y+2, r24	; 0x02
    13ea:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    13ec:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8Port)
    13ee:	8a 81       	ldd	r24, Y+2	; 0x02
    13f0:	28 2f       	mov	r18, r24
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	3d 83       	std	Y+5, r19	; 0x05
    13f6:	2c 83       	std	Y+4, r18	; 0x04
    13f8:	8c 81       	ldd	r24, Y+4	; 0x04
    13fa:	9d 81       	ldd	r25, Y+5	; 0x05
    13fc:	81 30       	cpi	r24, 0x01	; 1
    13fe:	91 05       	cpc	r25, r1
    1400:	d1 f0       	breq	.+52     	; 0x1436 <DIO_u8SetPortValue+0x5c>
    1402:	2c 81       	ldd	r18, Y+4	; 0x04
    1404:	3d 81       	ldd	r19, Y+5	; 0x05
    1406:	22 30       	cpi	r18, 0x02	; 2
    1408:	31 05       	cpc	r19, r1
    140a:	2c f4       	brge	.+10     	; 0x1416 <DIO_u8SetPortValue+0x3c>
    140c:	8c 81       	ldd	r24, Y+4	; 0x04
    140e:	9d 81       	ldd	r25, Y+5	; 0x05
    1410:	00 97       	sbiw	r24, 0x00	; 0
    1412:	61 f0       	breq	.+24     	; 0x142c <DIO_u8SetPortValue+0x52>
    1414:	1f c0       	rjmp	.+62     	; 0x1454 <DIO_u8SetPortValue+0x7a>
    1416:	2c 81       	ldd	r18, Y+4	; 0x04
    1418:	3d 81       	ldd	r19, Y+5	; 0x05
    141a:	22 30       	cpi	r18, 0x02	; 2
    141c:	31 05       	cpc	r19, r1
    141e:	81 f0       	breq	.+32     	; 0x1440 <DIO_u8SetPortValue+0x66>
    1420:	8c 81       	ldd	r24, Y+4	; 0x04
    1422:	9d 81       	ldd	r25, Y+5	; 0x05
    1424:	83 30       	cpi	r24, 0x03	; 3
    1426:	91 05       	cpc	r25, r1
    1428:	81 f0       	breq	.+32     	; 0x144a <DIO_u8SetPortValue+0x70>
    142a:	14 c0       	rjmp	.+40     	; 0x1454 <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA: PORTA=Copy_u8Value; break;
    142c:	eb e3       	ldi	r30, 0x3B	; 59
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	8b 81       	ldd	r24, Y+3	; 0x03
    1432:	80 83       	st	Z, r24
    1434:	11 c0       	rjmp	.+34     	; 0x1458 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB: PORTB=Copy_u8Value; break;
    1436:	e8 e3       	ldi	r30, 0x38	; 56
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	8b 81       	ldd	r24, Y+3	; 0x03
    143c:	80 83       	st	Z, r24
    143e:	0c c0       	rjmp	.+24     	; 0x1458 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC: PORTC=Copy_u8Value; break;
    1440:	e5 e3       	ldi	r30, 0x35	; 53
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	8b 81       	ldd	r24, Y+3	; 0x03
    1446:	80 83       	st	Z, r24
    1448:	07 c0       	rjmp	.+14     	; 0x1458 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD: PORTD=Copy_u8Value; break;
    144a:	e2 e3       	ldi	r30, 0x32	; 50
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	8b 81       	ldd	r24, Y+3	; 0x03
    1450:	80 83       	st	Z, r24
    1452:	02 c0       	rjmp	.+4      	; 0x1458 <DIO_u8SetPortValue+0x7e>
	default: Local_u8ErrorState=1 ;
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState ;
    1458:	89 81       	ldd	r24, Y+1	; 0x01
}
    145a:	0f 90       	pop	r0
    145c:	0f 90       	pop	r0
    145e:	0f 90       	pop	r0
    1460:	0f 90       	pop	r0
    1462:	0f 90       	pop	r0
    1464:	cf 91       	pop	r28
    1466:	df 91       	pop	r29
    1468:	08 95       	ret

0000146a <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin, u8* Copy_pu8Value){
    146a:	df 93       	push	r29
    146c:	cf 93       	push	r28
    146e:	cd b7       	in	r28, 0x3d	; 61
    1470:	de b7       	in	r29, 0x3e	; 62
    1472:	27 97       	sbiw	r28, 0x07	; 7
    1474:	0f b6       	in	r0, 0x3f	; 63
    1476:	f8 94       	cli
    1478:	de bf       	out	0x3e, r29	; 62
    147a:	0f be       	out	0x3f, r0	; 63
    147c:	cd bf       	out	0x3d, r28	; 61
    147e:	8a 83       	std	Y+2, r24	; 0x02
    1480:	6b 83       	std	Y+3, r22	; 0x03
    1482:	5d 83       	std	Y+5, r21	; 0x05
    1484:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    1486:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_pu8Value != NULL) && (Copy_u8Pin <= DIO_u8PIN7)){
    1488:	8c 81       	ldd	r24, Y+4	; 0x04
    148a:	9d 81       	ldd	r25, Y+5	; 0x05
    148c:	00 97       	sbiw	r24, 0x00	; 0
    148e:	09 f4       	brne	.+2      	; 0x1492 <DIO_u8GetPinValue+0x28>
    1490:	78 c0       	rjmp	.+240    	; 0x1582 <DIO_u8GetPinValue+0x118>
    1492:	8b 81       	ldd	r24, Y+3	; 0x03
    1494:	88 30       	cpi	r24, 0x08	; 8
    1496:	08 f0       	brcs	.+2      	; 0x149a <DIO_u8GetPinValue+0x30>
    1498:	74 c0       	rjmp	.+232    	; 0x1582 <DIO_u8GetPinValue+0x118>
		switch (Copy_u8Port){
    149a:	8a 81       	ldd	r24, Y+2	; 0x02
    149c:	28 2f       	mov	r18, r24
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	3f 83       	std	Y+7, r19	; 0x07
    14a2:	2e 83       	std	Y+6, r18	; 0x06
    14a4:	4e 81       	ldd	r20, Y+6	; 0x06
    14a6:	5f 81       	ldd	r21, Y+7	; 0x07
    14a8:	41 30       	cpi	r20, 0x01	; 1
    14aa:	51 05       	cpc	r21, r1
    14ac:	59 f1       	breq	.+86     	; 0x1504 <DIO_u8GetPinValue+0x9a>
    14ae:	8e 81       	ldd	r24, Y+6	; 0x06
    14b0:	9f 81       	ldd	r25, Y+7	; 0x07
    14b2:	82 30       	cpi	r24, 0x02	; 2
    14b4:	91 05       	cpc	r25, r1
    14b6:	34 f4       	brge	.+12     	; 0x14c4 <DIO_u8GetPinValue+0x5a>
    14b8:	2e 81       	ldd	r18, Y+6	; 0x06
    14ba:	3f 81       	ldd	r19, Y+7	; 0x07
    14bc:	21 15       	cp	r18, r1
    14be:	31 05       	cpc	r19, r1
    14c0:	69 f0       	breq	.+26     	; 0x14dc <DIO_u8GetPinValue+0x72>
    14c2:	5c c0       	rjmp	.+184    	; 0x157c <DIO_u8GetPinValue+0x112>
    14c4:	4e 81       	ldd	r20, Y+6	; 0x06
    14c6:	5f 81       	ldd	r21, Y+7	; 0x07
    14c8:	42 30       	cpi	r20, 0x02	; 2
    14ca:	51 05       	cpc	r21, r1
    14cc:	79 f1       	breq	.+94     	; 0x152c <DIO_u8GetPinValue+0xc2>
    14ce:	8e 81       	ldd	r24, Y+6	; 0x06
    14d0:	9f 81       	ldd	r25, Y+7	; 0x07
    14d2:	83 30       	cpi	r24, 0x03	; 3
    14d4:	91 05       	cpc	r25, r1
    14d6:	09 f4       	brne	.+2      	; 0x14da <DIO_u8GetPinValue+0x70>
    14d8:	3d c0       	rjmp	.+122    	; 0x1554 <DIO_u8GetPinValue+0xea>
    14da:	50 c0       	rjmp	.+160    	; 0x157c <DIO_u8GetPinValue+0x112>
		case DIO_u8PORTA: *Copy_pu8Value = GET_BIT(PINA,Copy_u8Pin); break;
    14dc:	e9 e3       	ldi	r30, 0x39	; 57
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	28 2f       	mov	r18, r24
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	8b 81       	ldd	r24, Y+3	; 0x03
    14e8:	88 2f       	mov	r24, r24
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	a9 01       	movw	r20, r18
    14ee:	02 c0       	rjmp	.+4      	; 0x14f4 <DIO_u8GetPinValue+0x8a>
    14f0:	55 95       	asr	r21
    14f2:	47 95       	ror	r20
    14f4:	8a 95       	dec	r24
    14f6:	e2 f7       	brpl	.-8      	; 0x14f0 <DIO_u8GetPinValue+0x86>
    14f8:	ca 01       	movw	r24, r20
    14fa:	81 70       	andi	r24, 0x01	; 1
    14fc:	ec 81       	ldd	r30, Y+4	; 0x04
    14fe:	fd 81       	ldd	r31, Y+5	; 0x05
    1500:	80 83       	st	Z, r24
    1502:	41 c0       	rjmp	.+130    	; 0x1586 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTB: *Copy_pu8Value = GET_BIT(PINB,Copy_u8Pin); break;
    1504:	e6 e3       	ldi	r30, 0x36	; 54
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	80 81       	ld	r24, Z
    150a:	28 2f       	mov	r18, r24
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	8b 81       	ldd	r24, Y+3	; 0x03
    1510:	88 2f       	mov	r24, r24
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	a9 01       	movw	r20, r18
    1516:	02 c0       	rjmp	.+4      	; 0x151c <DIO_u8GetPinValue+0xb2>
    1518:	55 95       	asr	r21
    151a:	47 95       	ror	r20
    151c:	8a 95       	dec	r24
    151e:	e2 f7       	brpl	.-8      	; 0x1518 <DIO_u8GetPinValue+0xae>
    1520:	ca 01       	movw	r24, r20
    1522:	81 70       	andi	r24, 0x01	; 1
    1524:	ec 81       	ldd	r30, Y+4	; 0x04
    1526:	fd 81       	ldd	r31, Y+5	; 0x05
    1528:	80 83       	st	Z, r24
    152a:	2d c0       	rjmp	.+90     	; 0x1586 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTC: *Copy_pu8Value = GET_BIT(PINC,Copy_u8Pin); break;
    152c:	e3 e3       	ldi	r30, 0x33	; 51
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 81       	ld	r24, Z
    1532:	28 2f       	mov	r18, r24
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	8b 81       	ldd	r24, Y+3	; 0x03
    1538:	88 2f       	mov	r24, r24
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	a9 01       	movw	r20, r18
    153e:	02 c0       	rjmp	.+4      	; 0x1544 <DIO_u8GetPinValue+0xda>
    1540:	55 95       	asr	r21
    1542:	47 95       	ror	r20
    1544:	8a 95       	dec	r24
    1546:	e2 f7       	brpl	.-8      	; 0x1540 <DIO_u8GetPinValue+0xd6>
    1548:	ca 01       	movw	r24, r20
    154a:	81 70       	andi	r24, 0x01	; 1
    154c:	ec 81       	ldd	r30, Y+4	; 0x04
    154e:	fd 81       	ldd	r31, Y+5	; 0x05
    1550:	80 83       	st	Z, r24
    1552:	19 c0       	rjmp	.+50     	; 0x1586 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTD: *Copy_pu8Value = GET_BIT(PIND,Copy_u8Pin); break;
    1554:	e0 e3       	ldi	r30, 0x30	; 48
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	80 81       	ld	r24, Z
    155a:	28 2f       	mov	r18, r24
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	8b 81       	ldd	r24, Y+3	; 0x03
    1560:	88 2f       	mov	r24, r24
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	a9 01       	movw	r20, r18
    1566:	02 c0       	rjmp	.+4      	; 0x156c <DIO_u8GetPinValue+0x102>
    1568:	55 95       	asr	r21
    156a:	47 95       	ror	r20
    156c:	8a 95       	dec	r24
    156e:	e2 f7       	brpl	.-8      	; 0x1568 <DIO_u8GetPinValue+0xfe>
    1570:	ca 01       	movw	r24, r20
    1572:	81 70       	andi	r24, 0x01	; 1
    1574:	ec 81       	ldd	r30, Y+4	; 0x04
    1576:	fd 81       	ldd	r31, Y+5	; 0x05
    1578:	80 83       	st	Z, r24
    157a:	05 c0       	rjmp	.+10     	; 0x1586 <DIO_u8GetPinValue+0x11c>
		default:Local_u8ErrorState=1 ;
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	89 83       	std	Y+1, r24	; 0x01
    1580:	02 c0       	rjmp	.+4      	; 0x1586 <DIO_u8GetPinValue+0x11c>
		}
	}
	else{
		Local_u8ErrorState=1;
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState ;
    1586:	89 81       	ldd	r24, Y+1	; 0x01
}
    1588:	27 96       	adiw	r28, 0x07	; 7
    158a:	0f b6       	in	r0, 0x3f	; 63
    158c:	f8 94       	cli
    158e:	de bf       	out	0x3e, r29	; 62
    1590:	0f be       	out	0x3f, r0	; 63
    1592:	cd bf       	out	0x3d, r28	; 61
    1594:	cf 91       	pop	r28
    1596:	df 91       	pop	r29
    1598:	08 95       	ret

0000159a <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8Port,u8* Copy_pu8Value){
    159a:	df 93       	push	r29
    159c:	cf 93       	push	r28
    159e:	00 d0       	rcall	.+0      	; 0x15a0 <DIO_u8GetPortValue+0x6>
    15a0:	00 d0       	rcall	.+0      	; 0x15a2 <DIO_u8GetPortValue+0x8>
    15a2:	00 d0       	rcall	.+0      	; 0x15a4 <DIO_u8GetPortValue+0xa>
    15a4:	cd b7       	in	r28, 0x3d	; 61
    15a6:	de b7       	in	r29, 0x3e	; 62
    15a8:	8a 83       	std	Y+2, r24	; 0x02
    15aa:	7c 83       	std	Y+4, r23	; 0x04
    15ac:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    15ae:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8Port)
    15b0:	8a 81       	ldd	r24, Y+2	; 0x02
    15b2:	28 2f       	mov	r18, r24
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	3e 83       	std	Y+6, r19	; 0x06
    15b8:	2d 83       	std	Y+5, r18	; 0x05
    15ba:	8d 81       	ldd	r24, Y+5	; 0x05
    15bc:	9e 81       	ldd	r25, Y+6	; 0x06
    15be:	81 30       	cpi	r24, 0x01	; 1
    15c0:	91 05       	cpc	r25, r1
    15c2:	e1 f0       	breq	.+56     	; 0x15fc <DIO_u8GetPortValue+0x62>
    15c4:	2d 81       	ldd	r18, Y+5	; 0x05
    15c6:	3e 81       	ldd	r19, Y+6	; 0x06
    15c8:	22 30       	cpi	r18, 0x02	; 2
    15ca:	31 05       	cpc	r19, r1
    15cc:	2c f4       	brge	.+10     	; 0x15d8 <DIO_u8GetPortValue+0x3e>
    15ce:	8d 81       	ldd	r24, Y+5	; 0x05
    15d0:	9e 81       	ldd	r25, Y+6	; 0x06
    15d2:	00 97       	sbiw	r24, 0x00	; 0
    15d4:	61 f0       	breq	.+24     	; 0x15ee <DIO_u8GetPortValue+0x54>
    15d6:	27 c0       	rjmp	.+78     	; 0x1626 <DIO_u8GetPortValue+0x8c>
    15d8:	2d 81       	ldd	r18, Y+5	; 0x05
    15da:	3e 81       	ldd	r19, Y+6	; 0x06
    15dc:	22 30       	cpi	r18, 0x02	; 2
    15de:	31 05       	cpc	r19, r1
    15e0:	a1 f0       	breq	.+40     	; 0x160a <DIO_u8GetPortValue+0x70>
    15e2:	8d 81       	ldd	r24, Y+5	; 0x05
    15e4:	9e 81       	ldd	r25, Y+6	; 0x06
    15e6:	83 30       	cpi	r24, 0x03	; 3
    15e8:	91 05       	cpc	r25, r1
    15ea:	b1 f0       	breq	.+44     	; 0x1618 <DIO_u8GetPortValue+0x7e>
    15ec:	1c c0       	rjmp	.+56     	; 0x1626 <DIO_u8GetPortValue+0x8c>
	{
	case DIO_u8PORTA: *Copy_pu8Value = PINA; break;
    15ee:	e9 e3       	ldi	r30, 0x39	; 57
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	80 81       	ld	r24, Z
    15f4:	eb 81       	ldd	r30, Y+3	; 0x03
    15f6:	fc 81       	ldd	r31, Y+4	; 0x04
    15f8:	80 83       	st	Z, r24
    15fa:	17 c0       	rjmp	.+46     	; 0x162a <DIO_u8GetPortValue+0x90>
	case DIO_u8PORTB: *Copy_pu8Value = PINB; break;
    15fc:	e6 e3       	ldi	r30, 0x36	; 54
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 81       	ld	r24, Z
    1602:	eb 81       	ldd	r30, Y+3	; 0x03
    1604:	fc 81       	ldd	r31, Y+4	; 0x04
    1606:	80 83       	st	Z, r24
    1608:	10 c0       	rjmp	.+32     	; 0x162a <DIO_u8GetPortValue+0x90>
	case DIO_u8PORTC: *Copy_pu8Value = PINC; break;
    160a:	e3 e3       	ldi	r30, 0x33	; 51
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	80 81       	ld	r24, Z
    1610:	eb 81       	ldd	r30, Y+3	; 0x03
    1612:	fc 81       	ldd	r31, Y+4	; 0x04
    1614:	80 83       	st	Z, r24
    1616:	09 c0       	rjmp	.+18     	; 0x162a <DIO_u8GetPortValue+0x90>
	case DIO_u8PORTD: *Copy_pu8Value = PIND; break;
    1618:	e0 e3       	ldi	r30, 0x30	; 48
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	80 81       	ld	r24, Z
    161e:	eb 81       	ldd	r30, Y+3	; 0x03
    1620:	fc 81       	ldd	r31, Y+4	; 0x04
    1622:	80 83       	st	Z, r24
    1624:	02 c0       	rjmp	.+4      	; 0x162a <DIO_u8GetPortValue+0x90>
	default: Local_u8ErrorState=1 ;
    1626:	81 e0       	ldi	r24, 0x01	; 1
    1628:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    162a:	89 81       	ldd	r24, Y+1	; 0x01
}
    162c:	26 96       	adiw	r28, 0x06	; 6
    162e:	0f b6       	in	r0, 0x3f	; 63
    1630:	f8 94       	cli
    1632:	de bf       	out	0x3e, r29	; 62
    1634:	0f be       	out	0x3f, r0	; 63
    1636:	cd bf       	out	0x3d, r28	; 61
    1638:	cf 91       	pop	r28
    163a:	df 91       	pop	r29
    163c:	08 95       	ret

0000163e <EXTI_voidInt0Init>:
/*Global Pointer to Function to hold INT0,INT2,INT3 ISR addresses*/
void (*EXTI_pvInt0Func)(void)=NULL;
void (*EXTI_pvInt1Func)(void)=NULL;
void (*EXTI_pvInt2Func)(void)=NULL;

void EXTI_voidInt0Init(void){
    163e:	df 93       	push	r29
    1640:	cf 93       	push	r28
    1642:	cd b7       	in	r28, 0x3d	; 61
    1644:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(MCUCR,MCUCR_ISC01);
#elif INT0_SENSE==ON_CHANGE
	SET_BIT(MCUCR,MCUCR_ISC00);
	CLR_BIT(MCUCR,MCUCR_ISC01);
#elif INT0_SENSE==FALLING_EDGE
	CLR_BIT(MCUCR,MCUCR_ISC00);
    1646:	a5 e5       	ldi	r26, 0x55	; 85
    1648:	b0 e0       	ldi	r27, 0x00	; 0
    164a:	e5 e5       	ldi	r30, 0x55	; 85
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	80 81       	ld	r24, Z
    1650:	8e 7f       	andi	r24, 0xFE	; 254
    1652:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC01);
    1654:	a5 e5       	ldi	r26, 0x55	; 85
    1656:	b0 e0       	ldi	r27, 0x00	; 0
    1658:	e5 e5       	ldi	r30, 0x55	; 85
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	80 81       	ld	r24, Z
    165e:	82 60       	ori	r24, 0x02	; 2
    1660:	8c 93       	st	X, r24
#error "Wrong INT0_SENSE configuration option"

#endif
	//peripheral interrupt enable
#if INT0_INITIAL_STATE==ENABLED
	SET_BIT(GICR,GICR_INT0);
    1662:	ab e5       	ldi	r26, 0x5B	; 91
    1664:	b0 e0       	ldi	r27, 0x00	; 0
    1666:	eb e5       	ldi	r30, 0x5B	; 91
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	80 81       	ld	r24, Z
    166c:	80 64       	ori	r24, 0x40	; 64
    166e:	8c 93       	st	X, r24
#elif INT0_INITIAL_STATE==DISABLED
	CLR_BIT(GICR,GICR_INT0);
#else
#error "Wrong INT0_INITIAL_STATE configuration option"
#endif
}
    1670:	cf 91       	pop	r28
    1672:	df 91       	pop	r29
    1674:	08 95       	ret

00001676 <EXTI_voidInt1Init>:

void EXTI_voidInt1Init(void){
    1676:	df 93       	push	r29
    1678:	cf 93       	push	r28
    167a:	cd b7       	in	r28, 0x3d	; 61
    167c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(MCUCR,MCUCR_ISC11);
#elif INT1_SENSE == ON_CHANGE
	SET_BIT(MCUCR,MCUCR_ISC10);
	CLR_BIT(MCUCR,MCUCR_ISC11);
#elif INT1_SENSE == FALLING_EDGE
	CLR_BIT(MCUCR,MCUCR_ISC10);
    167e:	a5 e5       	ldi	r26, 0x55	; 85
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    1682:	e5 e5       	ldi	r30, 0x55	; 85
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	80 81       	ld	r24, Z
    1688:	8b 7f       	andi	r24, 0xFB	; 251
    168a:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC11);
    168c:	a5 e5       	ldi	r26, 0x55	; 85
    168e:	b0 e0       	ldi	r27, 0x00	; 0
    1690:	e5 e5       	ldi	r30, 0x55	; 85
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	80 81       	ld	r24, Z
    1696:	88 60       	ori	r24, 0x08	; 8
    1698:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC11);

#endif
	//peripheral interrupt enable
#if INT1_INITIAL_STATE==ENABLED
	SET_BIT(GICR,GICR_INT1);
    169a:	ab e5       	ldi	r26, 0x5B	; 91
    169c:	b0 e0       	ldi	r27, 0x00	; 0
    169e:	eb e5       	ldi	r30, 0x5B	; 91
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	80 81       	ld	r24, Z
    16a4:	80 68       	ori	r24, 0x80	; 128
    16a6:	8c 93       	st	X, r24
	CLR_BIT(GICR,GICR_INT1);
#else
#error "Wrong INT1_INITIAL_STATE configuration option"

#endif
}
    16a8:	cf 91       	pop	r28
    16aa:	df 91       	pop	r29
    16ac:	08 95       	ret

000016ae <EXTI_voidInt2Init>:

void EXTI_voidInt2Init(void){
    16ae:	df 93       	push	r29
    16b0:	cf 93       	push	r28
    16b2:	cd b7       	in	r28, 0x3d	; 61
    16b4:	de b7       	in	r29, 0x3e	; 62
	// Set sense control for int0

#if INT2_SENSE == FALLING_EDGE
	CLR_BIT(MCUCSR,MCUCSR_INT2);
#elif INT2_SENSE == RISING_EDGE
	SET_BIT(MCUCSR,MCUCSR_INT2);
    16b6:	a4 e5       	ldi	r26, 0x54	; 84
    16b8:	b0 e0       	ldi	r27, 0x00	; 0
    16ba:	e4 e5       	ldi	r30, 0x54	; 84
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	80 81       	ld	r24, Z
    16c0:	80 64       	ori	r24, 0x40	; 64
    16c2:	8c 93       	st	X, r24
#endif
#if INT0_INITIAL_STATE==ENABLED
	SET_BIT(GICR,GICR_INT2);
    16c4:	ab e5       	ldi	r26, 0x5B	; 91
    16c6:	b0 e0       	ldi	r27, 0x00	; 0
    16c8:	eb e5       	ldi	r30, 0x5B	; 91
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	80 81       	ld	r24, Z
    16ce:	80 62       	ori	r24, 0x20	; 32
    16d0:	8c 93       	st	X, r24
#elif INT0_INITIAL_STATE==DISABLED
	CLR_BIT(GICR,GICR_INT2);
#else
#error "Wrong INT2_INITIAL_STATE configuration option"
#endif
}
    16d2:	cf 91       	pop	r28
    16d4:	df 91       	pop	r29
    16d6:	08 95       	ret

000016d8 <EXTI_u8SetSenseControl>:

u8 EXTI_u8SetSenseControl(u8 Copy_u8Interrupt, u8 Copy_u8Sense){
    16d8:	df 93       	push	r29
    16da:	cf 93       	push	r28
    16dc:	cd b7       	in	r28, 0x3d	; 61
    16de:	de b7       	in	r29, 0x3e	; 62
    16e0:	27 97       	sbiw	r28, 0x07	; 7
    16e2:	0f b6       	in	r0, 0x3f	; 63
    16e4:	f8 94       	cli
    16e6:	de bf       	out	0x3e, r29	; 62
    16e8:	0f be       	out	0x3f, r0	; 63
    16ea:	cd bf       	out	0x3d, r28	; 61
    16ec:	8a 83       	std	Y+2, r24	; 0x02
    16ee:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = OK;
    16f0:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Interrupt==EXTI_INT0){
    16f2:	8a 81       	ldd	r24, Y+2	; 0x02
    16f4:	81 30       	cpi	r24, 0x01	; 1
    16f6:	09 f0       	breq	.+2      	; 0x16fa <EXTI_u8SetSenseControl+0x22>
    16f8:	5f c0       	rjmp	.+190    	; 0x17b8 <EXTI_u8SetSenseControl+0xe0>
		switch (Copy_u8Sense){
    16fa:	8b 81       	ldd	r24, Y+3	; 0x03
    16fc:	28 2f       	mov	r18, r24
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	3f 83       	std	Y+7, r19	; 0x07
    1702:	2e 83       	std	Y+6, r18	; 0x06
    1704:	8e 81       	ldd	r24, Y+6	; 0x06
    1706:	9f 81       	ldd	r25, Y+7	; 0x07
    1708:	82 30       	cpi	r24, 0x02	; 2
    170a:	91 05       	cpc	r25, r1
    170c:	29 f1       	breq	.+74     	; 0x1758 <EXTI_u8SetSenseControl+0x80>
    170e:	2e 81       	ldd	r18, Y+6	; 0x06
    1710:	3f 81       	ldd	r19, Y+7	; 0x07
    1712:	23 30       	cpi	r18, 0x03	; 3
    1714:	31 05       	cpc	r19, r1
    1716:	34 f4       	brge	.+12     	; 0x1724 <EXTI_u8SetSenseControl+0x4c>
    1718:	8e 81       	ldd	r24, Y+6	; 0x06
    171a:	9f 81       	ldd	r25, Y+7	; 0x07
    171c:	81 30       	cpi	r24, 0x01	; 1
    171e:	91 05       	cpc	r25, r1
    1720:	61 f0       	breq	.+24     	; 0x173a <EXTI_u8SetSenseControl+0x62>
    1722:	47 c0       	rjmp	.+142    	; 0x17b2 <EXTI_u8SetSenseControl+0xda>
    1724:	2e 81       	ldd	r18, Y+6	; 0x06
    1726:	3f 81       	ldd	r19, Y+7	; 0x07
    1728:	23 30       	cpi	r18, 0x03	; 3
    172a:	31 05       	cpc	r19, r1
    172c:	21 f1       	breq	.+72     	; 0x1776 <EXTI_u8SetSenseControl+0x9e>
    172e:	8e 81       	ldd	r24, Y+6	; 0x06
    1730:	9f 81       	ldd	r25, Y+7	; 0x07
    1732:	84 30       	cpi	r24, 0x04	; 4
    1734:	91 05       	cpc	r25, r1
    1736:	71 f1       	breq	.+92     	; 0x1794 <EXTI_u8SetSenseControl+0xbc>
    1738:	3c c0       	rjmp	.+120    	; 0x17b2 <EXTI_u8SetSenseControl+0xda>
		case EXTI_LOW_LEVEL:
			CLR_BIT(MCUCR,MCUCR_ISC00);
    173a:	a5 e5       	ldi	r26, 0x55	; 85
    173c:	b0 e0       	ldi	r27, 0x00	; 0
    173e:	e5 e5       	ldi	r30, 0x55	; 85
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	80 81       	ld	r24, Z
    1744:	8e 7f       	andi	r24, 0xFE	; 254
    1746:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,MCUCR_ISC01);
    1748:	a5 e5       	ldi	r26, 0x55	; 85
    174a:	b0 e0       	ldi	r27, 0x00	; 0
    174c:	e5 e5       	ldi	r30, 0x55	; 85
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	80 81       	ld	r24, Z
    1752:	8d 7f       	andi	r24, 0xFD	; 253
    1754:	8c 93       	st	X, r24
    1756:	b1 c0       	rjmp	.+354    	; 0x18ba <EXTI_u8SetSenseControl+0x1e2>
			break;
		case EXTI_ON_CHANGE:
			SET_BIT(MCUCR,MCUCR_ISC00);
    1758:	a5 e5       	ldi	r26, 0x55	; 85
    175a:	b0 e0       	ldi	r27, 0x00	; 0
    175c:	e5 e5       	ldi	r30, 0x55	; 85
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	80 81       	ld	r24, Z
    1762:	81 60       	ori	r24, 0x01	; 1
    1764:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,MCUCR_ISC01);
    1766:	a5 e5       	ldi	r26, 0x55	; 85
    1768:	b0 e0       	ldi	r27, 0x00	; 0
    176a:	e5 e5       	ldi	r30, 0x55	; 85
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	80 81       	ld	r24, Z
    1770:	8d 7f       	andi	r24, 0xFD	; 253
    1772:	8c 93       	st	X, r24
    1774:	a2 c0       	rjmp	.+324    	; 0x18ba <EXTI_u8SetSenseControl+0x1e2>
			break;
		case EXTI_FALLING_EDGE:
			CLR_BIT(MCUCR,MCUCR_ISC00);
    1776:	a5 e5       	ldi	r26, 0x55	; 85
    1778:	b0 e0       	ldi	r27, 0x00	; 0
    177a:	e5 e5       	ldi	r30, 0x55	; 85
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	80 81       	ld	r24, Z
    1780:	8e 7f       	andi	r24, 0xFE	; 254
    1782:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC01);
    1784:	a5 e5       	ldi	r26, 0x55	; 85
    1786:	b0 e0       	ldi	r27, 0x00	; 0
    1788:	e5 e5       	ldi	r30, 0x55	; 85
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	80 81       	ld	r24, Z
    178e:	82 60       	ori	r24, 0x02	; 2
    1790:	8c 93       	st	X, r24
    1792:	93 c0       	rjmp	.+294    	; 0x18ba <EXTI_u8SetSenseControl+0x1e2>
			break;
		case EXTI_RISING_EDGE:
			SET_BIT(MCUCR,MCUCR_ISC00);
    1794:	a5 e5       	ldi	r26, 0x55	; 85
    1796:	b0 e0       	ldi	r27, 0x00	; 0
    1798:	e5 e5       	ldi	r30, 0x55	; 85
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	80 81       	ld	r24, Z
    179e:	81 60       	ori	r24, 0x01	; 1
    17a0:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC01);
    17a2:	a5 e5       	ldi	r26, 0x55	; 85
    17a4:	b0 e0       	ldi	r27, 0x00	; 0
    17a6:	e5 e5       	ldi	r30, 0x55	; 85
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	80 81       	ld	r24, Z
    17ac:	82 60       	ori	r24, 0x02	; 2
    17ae:	8c 93       	st	X, r24
    17b0:	84 c0       	rjmp	.+264    	; 0x18ba <EXTI_u8SetSenseControl+0x1e2>
			break;
		default: Local_u8ErrorState=NOK;
    17b2:	81 e0       	ldi	r24, 0x01	; 1
    17b4:	89 83       	std	Y+1, r24	; 0x01
    17b6:	81 c0       	rjmp	.+258    	; 0x18ba <EXTI_u8SetSenseControl+0x1e2>
		}
	}
	else if(Copy_u8Interrupt==EXTI_INT1){
    17b8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ba:	82 30       	cpi	r24, 0x02	; 2
    17bc:	09 f0       	breq	.+2      	; 0x17c0 <EXTI_u8SetSenseControl+0xe8>
    17be:	5f c0       	rjmp	.+190    	; 0x187e <EXTI_u8SetSenseControl+0x1a6>
		switch (Copy_u8Sense){
    17c0:	8b 81       	ldd	r24, Y+3	; 0x03
    17c2:	28 2f       	mov	r18, r24
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	3d 83       	std	Y+5, r19	; 0x05
    17c8:	2c 83       	std	Y+4, r18	; 0x04
    17ca:	8c 81       	ldd	r24, Y+4	; 0x04
    17cc:	9d 81       	ldd	r25, Y+5	; 0x05
    17ce:	82 30       	cpi	r24, 0x02	; 2
    17d0:	91 05       	cpc	r25, r1
    17d2:	29 f1       	breq	.+74     	; 0x181e <EXTI_u8SetSenseControl+0x146>
    17d4:	2c 81       	ldd	r18, Y+4	; 0x04
    17d6:	3d 81       	ldd	r19, Y+5	; 0x05
    17d8:	23 30       	cpi	r18, 0x03	; 3
    17da:	31 05       	cpc	r19, r1
    17dc:	34 f4       	brge	.+12     	; 0x17ea <EXTI_u8SetSenseControl+0x112>
    17de:	8c 81       	ldd	r24, Y+4	; 0x04
    17e0:	9d 81       	ldd	r25, Y+5	; 0x05
    17e2:	81 30       	cpi	r24, 0x01	; 1
    17e4:	91 05       	cpc	r25, r1
    17e6:	61 f0       	breq	.+24     	; 0x1800 <EXTI_u8SetSenseControl+0x128>
    17e8:	47 c0       	rjmp	.+142    	; 0x1878 <EXTI_u8SetSenseControl+0x1a0>
    17ea:	2c 81       	ldd	r18, Y+4	; 0x04
    17ec:	3d 81       	ldd	r19, Y+5	; 0x05
    17ee:	23 30       	cpi	r18, 0x03	; 3
    17f0:	31 05       	cpc	r19, r1
    17f2:	21 f1       	breq	.+72     	; 0x183c <EXTI_u8SetSenseControl+0x164>
    17f4:	8c 81       	ldd	r24, Y+4	; 0x04
    17f6:	9d 81       	ldd	r25, Y+5	; 0x05
    17f8:	84 30       	cpi	r24, 0x04	; 4
    17fa:	91 05       	cpc	r25, r1
    17fc:	71 f1       	breq	.+92     	; 0x185a <EXTI_u8SetSenseControl+0x182>
    17fe:	3c c0       	rjmp	.+120    	; 0x1878 <EXTI_u8SetSenseControl+0x1a0>
		case EXTI_LOW_LEVEL:
			CLR_BIT(MCUCR,MCUCR_ISC10);
    1800:	a5 e5       	ldi	r26, 0x55	; 85
    1802:	b0 e0       	ldi	r27, 0x00	; 0
    1804:	e5 e5       	ldi	r30, 0x55	; 85
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	80 81       	ld	r24, Z
    180a:	8b 7f       	andi	r24, 0xFB	; 251
    180c:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,MCUCR_ISC11);
    180e:	a5 e5       	ldi	r26, 0x55	; 85
    1810:	b0 e0       	ldi	r27, 0x00	; 0
    1812:	e5 e5       	ldi	r30, 0x55	; 85
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	80 81       	ld	r24, Z
    1818:	87 7f       	andi	r24, 0xF7	; 247
    181a:	8c 93       	st	X, r24
    181c:	4e c0       	rjmp	.+156    	; 0x18ba <EXTI_u8SetSenseControl+0x1e2>
			break;
		case EXTI_ON_CHANGE:
			SET_BIT(MCUCR,MCUCR_ISC10);
    181e:	a5 e5       	ldi	r26, 0x55	; 85
    1820:	b0 e0       	ldi	r27, 0x00	; 0
    1822:	e5 e5       	ldi	r30, 0x55	; 85
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	80 81       	ld	r24, Z
    1828:	84 60       	ori	r24, 0x04	; 4
    182a:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,MCUCR_ISC11);
    182c:	a5 e5       	ldi	r26, 0x55	; 85
    182e:	b0 e0       	ldi	r27, 0x00	; 0
    1830:	e5 e5       	ldi	r30, 0x55	; 85
    1832:	f0 e0       	ldi	r31, 0x00	; 0
    1834:	80 81       	ld	r24, Z
    1836:	87 7f       	andi	r24, 0xF7	; 247
    1838:	8c 93       	st	X, r24
    183a:	3f c0       	rjmp	.+126    	; 0x18ba <EXTI_u8SetSenseControl+0x1e2>
			break;
		case EXTI_FALLING_EDGE:
			CLR_BIT(MCUCR,MCUCR_ISC10);
    183c:	a5 e5       	ldi	r26, 0x55	; 85
    183e:	b0 e0       	ldi	r27, 0x00	; 0
    1840:	e5 e5       	ldi	r30, 0x55	; 85
    1842:	f0 e0       	ldi	r31, 0x00	; 0
    1844:	80 81       	ld	r24, Z
    1846:	8b 7f       	andi	r24, 0xFB	; 251
    1848:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC11);
    184a:	a5 e5       	ldi	r26, 0x55	; 85
    184c:	b0 e0       	ldi	r27, 0x00	; 0
    184e:	e5 e5       	ldi	r30, 0x55	; 85
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	80 81       	ld	r24, Z
    1854:	88 60       	ori	r24, 0x08	; 8
    1856:	8c 93       	st	X, r24
    1858:	30 c0       	rjmp	.+96     	; 0x18ba <EXTI_u8SetSenseControl+0x1e2>
			break;
		case EXTI_RISING_EDGE:
			SET_BIT(MCUCR,MCUCR_ISC10);
    185a:	a5 e5       	ldi	r26, 0x55	; 85
    185c:	b0 e0       	ldi	r27, 0x00	; 0
    185e:	e5 e5       	ldi	r30, 0x55	; 85
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	80 81       	ld	r24, Z
    1864:	84 60       	ori	r24, 0x04	; 4
    1866:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC11);
    1868:	a5 e5       	ldi	r26, 0x55	; 85
    186a:	b0 e0       	ldi	r27, 0x00	; 0
    186c:	e5 e5       	ldi	r30, 0x55	; 85
    186e:	f0 e0       	ldi	r31, 0x00	; 0
    1870:	80 81       	ld	r24, Z
    1872:	88 60       	ori	r24, 0x08	; 8
    1874:	8c 93       	st	X, r24
    1876:	21 c0       	rjmp	.+66     	; 0x18ba <EXTI_u8SetSenseControl+0x1e2>
			break;
		default: Local_u8ErrorState=NOK;
    1878:	81 e0       	ldi	r24, 0x01	; 1
    187a:	89 83       	std	Y+1, r24	; 0x01
    187c:	1e c0       	rjmp	.+60     	; 0x18ba <EXTI_u8SetSenseControl+0x1e2>
		}

	}
	else if(Copy_u8Interrupt==EXTI_INT2){
    187e:	8a 81       	ldd	r24, Y+2	; 0x02
    1880:	83 30       	cpi	r24, 0x03	; 3
    1882:	c9 f4       	brne	.+50     	; 0x18b6 <EXTI_u8SetSenseControl+0x1de>

		if(Copy_u8Sense==EXTI_FALLING_EDGE){
    1884:	8b 81       	ldd	r24, Y+3	; 0x03
    1886:	83 30       	cpi	r24, 0x03	; 3
    1888:	41 f4       	brne	.+16     	; 0x189a <EXTI_u8SetSenseControl+0x1c2>
			CLR_BIT(MCUCSR,MCUCSR_INT2);
    188a:	a4 e5       	ldi	r26, 0x54	; 84
    188c:	b0 e0       	ldi	r27, 0x00	; 0
    188e:	e4 e5       	ldi	r30, 0x54	; 84
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	80 81       	ld	r24, Z
    1894:	8f 7b       	andi	r24, 0xBF	; 191
    1896:	8c 93       	st	X, r24
    1898:	10 c0       	rjmp	.+32     	; 0x18ba <EXTI_u8SetSenseControl+0x1e2>
		}
		else if(Copy_u8Sense==EXTI_RISING_EDGE){
    189a:	8b 81       	ldd	r24, Y+3	; 0x03
    189c:	84 30       	cpi	r24, 0x04	; 4
    189e:	41 f4       	brne	.+16     	; 0x18b0 <EXTI_u8SetSenseControl+0x1d8>
			SET_BIT(MCUCSR,MCUCSR_INT2);
    18a0:	a4 e5       	ldi	r26, 0x54	; 84
    18a2:	b0 e0       	ldi	r27, 0x00	; 0
    18a4:	e4 e5       	ldi	r30, 0x54	; 84
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	80 81       	ld	r24, Z
    18aa:	80 64       	ori	r24, 0x40	; 64
    18ac:	8c 93       	st	X, r24
    18ae:	05 c0       	rjmp	.+10     	; 0x18ba <EXTI_u8SetSenseControl+0x1e2>
		}
		else{
			Local_u8ErrorState=NOK;
    18b0:	81 e0       	ldi	r24, 0x01	; 1
    18b2:	89 83       	std	Y+1, r24	; 0x01
    18b4:	02 c0       	rjmp	.+4      	; 0x18ba <EXTI_u8SetSenseControl+0x1e2>
		}
	}
	else{
		Local_u8ErrorState=NOK;
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	89 83       	std	Y+1, r24	; 0x01
	}



	return Local_u8ErrorState;
    18ba:	89 81       	ldd	r24, Y+1	; 0x01
}
    18bc:	27 96       	adiw	r28, 0x07	; 7
    18be:	0f b6       	in	r0, 0x3f	; 63
    18c0:	f8 94       	cli
    18c2:	de bf       	out	0x3e, r29	; 62
    18c4:	0f be       	out	0x3f, r0	; 63
    18c6:	cd bf       	out	0x3d, r28	; 61
    18c8:	cf 91       	pop	r28
    18ca:	df 91       	pop	r29
    18cc:	08 95       	ret

000018ce <EXTI_u8SetInterruptStatus>:

u8 EXTI_u8SetInterruptStatus(u8 Copy_u8Interrupt, u8 Copy_u8Status){
    18ce:	df 93       	push	r29
    18d0:	cf 93       	push	r28
    18d2:	00 d0       	rcall	.+0      	; 0x18d4 <EXTI_u8SetInterruptStatus+0x6>
    18d4:	0f 92       	push	r0
    18d6:	cd b7       	in	r28, 0x3d	; 61
    18d8:	de b7       	in	r29, 0x3e	; 62
    18da:	8a 83       	std	Y+2, r24	; 0x02
    18dc:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=OK;
    18de:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Interrupt==EXTI_INT0){
    18e0:	8a 81       	ldd	r24, Y+2	; 0x02
    18e2:	81 30       	cpi	r24, 0x01	; 1
    18e4:	c9 f4       	brne	.+50     	; 0x1918 <EXTI_u8SetInterruptStatus+0x4a>
		if(Copy_u8Status==EXTI_ENABLE){
    18e6:	8b 81       	ldd	r24, Y+3	; 0x03
    18e8:	81 30       	cpi	r24, 0x01	; 1
    18ea:	41 f4       	brne	.+16     	; 0x18fc <EXTI_u8SetInterruptStatus+0x2e>
			SET_BIT(GICR,GICR_INT0);
    18ec:	ab e5       	ldi	r26, 0x5B	; 91
    18ee:	b0 e0       	ldi	r27, 0x00	; 0
    18f0:	eb e5       	ldi	r30, 0x5B	; 91
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	80 81       	ld	r24, Z
    18f6:	80 64       	ori	r24, 0x40	; 64
    18f8:	8c 93       	st	X, r24
    18fa:	48 c0       	rjmp	.+144    	; 0x198c <EXTI_u8SetInterruptStatus+0xbe>
		}
		else if(Copy_u8Status==EXTI_DISABLE){
    18fc:	8b 81       	ldd	r24, Y+3	; 0x03
    18fe:	82 30       	cpi	r24, 0x02	; 2
    1900:	41 f4       	brne	.+16     	; 0x1912 <EXTI_u8SetInterruptStatus+0x44>
			CLR_BIT(GICR,GICR_INT0);
    1902:	ab e5       	ldi	r26, 0x5B	; 91
    1904:	b0 e0       	ldi	r27, 0x00	; 0
    1906:	eb e5       	ldi	r30, 0x5B	; 91
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	80 81       	ld	r24, Z
    190c:	8f 7b       	andi	r24, 0xBF	; 191
    190e:	8c 93       	st	X, r24
    1910:	3d c0       	rjmp	.+122    	; 0x198c <EXTI_u8SetInterruptStatus+0xbe>
		}
		else{
			Local_u8ErrorState=NOK;
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	89 83       	std	Y+1, r24	; 0x01
    1916:	3a c0       	rjmp	.+116    	; 0x198c <EXTI_u8SetInterruptStatus+0xbe>
		}
	}
	else if(Copy_u8Interrupt==EXTI_INT1){
    1918:	8a 81       	ldd	r24, Y+2	; 0x02
    191a:	82 30       	cpi	r24, 0x02	; 2
    191c:	c9 f4       	brne	.+50     	; 0x1950 <EXTI_u8SetInterruptStatus+0x82>
		if(Copy_u8Status==EXTI_ENABLE){
    191e:	8b 81       	ldd	r24, Y+3	; 0x03
    1920:	81 30       	cpi	r24, 0x01	; 1
    1922:	41 f4       	brne	.+16     	; 0x1934 <EXTI_u8SetInterruptStatus+0x66>
			SET_BIT(GICR,GICR_INT1);
    1924:	ab e5       	ldi	r26, 0x5B	; 91
    1926:	b0 e0       	ldi	r27, 0x00	; 0
    1928:	eb e5       	ldi	r30, 0x5B	; 91
    192a:	f0 e0       	ldi	r31, 0x00	; 0
    192c:	80 81       	ld	r24, Z
    192e:	80 68       	ori	r24, 0x80	; 128
    1930:	8c 93       	st	X, r24
    1932:	2c c0       	rjmp	.+88     	; 0x198c <EXTI_u8SetInterruptStatus+0xbe>
		}
		else if(Copy_u8Status==EXTI_DISABLE){
    1934:	8b 81       	ldd	r24, Y+3	; 0x03
    1936:	82 30       	cpi	r24, 0x02	; 2
    1938:	41 f4       	brne	.+16     	; 0x194a <EXTI_u8SetInterruptStatus+0x7c>
			CLR_BIT(GICR,GICR_INT1);
    193a:	ab e5       	ldi	r26, 0x5B	; 91
    193c:	b0 e0       	ldi	r27, 0x00	; 0
    193e:	eb e5       	ldi	r30, 0x5B	; 91
    1940:	f0 e0       	ldi	r31, 0x00	; 0
    1942:	80 81       	ld	r24, Z
    1944:	8f 77       	andi	r24, 0x7F	; 127
    1946:	8c 93       	st	X, r24
    1948:	21 c0       	rjmp	.+66     	; 0x198c <EXTI_u8SetInterruptStatus+0xbe>
		}
		else{
			Local_u8ErrorState=NOK;
    194a:	81 e0       	ldi	r24, 0x01	; 1
    194c:	89 83       	std	Y+1, r24	; 0x01
    194e:	1e c0       	rjmp	.+60     	; 0x198c <EXTI_u8SetInterruptStatus+0xbe>
		}
	}
	else if(Copy_u8Interrupt==EXTI_INT2){
    1950:	8a 81       	ldd	r24, Y+2	; 0x02
    1952:	83 30       	cpi	r24, 0x03	; 3
    1954:	c9 f4       	brne	.+50     	; 0x1988 <EXTI_u8SetInterruptStatus+0xba>

		if(Copy_u8Status==EXTI_ENABLE){
    1956:	8b 81       	ldd	r24, Y+3	; 0x03
    1958:	81 30       	cpi	r24, 0x01	; 1
    195a:	41 f4       	brne	.+16     	; 0x196c <EXTI_u8SetInterruptStatus+0x9e>
			SET_BIT(GICR,GICR_INT2);
    195c:	ab e5       	ldi	r26, 0x5B	; 91
    195e:	b0 e0       	ldi	r27, 0x00	; 0
    1960:	eb e5       	ldi	r30, 0x5B	; 91
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	80 81       	ld	r24, Z
    1966:	80 62       	ori	r24, 0x20	; 32
    1968:	8c 93       	st	X, r24
    196a:	10 c0       	rjmp	.+32     	; 0x198c <EXTI_u8SetInterruptStatus+0xbe>
		}
		else if(Copy_u8Status==EXTI_DISABLE){
    196c:	8b 81       	ldd	r24, Y+3	; 0x03
    196e:	82 30       	cpi	r24, 0x02	; 2
    1970:	41 f4       	brne	.+16     	; 0x1982 <EXTI_u8SetInterruptStatus+0xb4>
			CLR_BIT(GICR,GICR_INT2);
    1972:	ab e5       	ldi	r26, 0x5B	; 91
    1974:	b0 e0       	ldi	r27, 0x00	; 0
    1976:	eb e5       	ldi	r30, 0x5B	; 91
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	80 81       	ld	r24, Z
    197c:	8f 7d       	andi	r24, 0xDF	; 223
    197e:	8c 93       	st	X, r24
    1980:	05 c0       	rjmp	.+10     	; 0x198c <EXTI_u8SetInterruptStatus+0xbe>
		}
		else{
			Local_u8ErrorState=NOK;
    1982:	81 e0       	ldi	r24, 0x01	; 1
    1984:	89 83       	std	Y+1, r24	; 0x01
    1986:	02 c0       	rjmp	.+4      	; 0x198c <EXTI_u8SetInterruptStatus+0xbe>
		}
	}
	else{
		Local_u8ErrorState=NOK;
    1988:	81 e0       	ldi	r24, 0x01	; 1
    198a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    198c:	89 81       	ldd	r24, Y+1	; 0x01
}
    198e:	0f 90       	pop	r0
    1990:	0f 90       	pop	r0
    1992:	0f 90       	pop	r0
    1994:	cf 91       	pop	r28
    1996:	df 91       	pop	r29
    1998:	08 95       	ret

0000199a <EXTI_u8Int0SetCallBack>:

u8 EXTI_u8Int0SetCallBack(void(*Copy_pvInt0Func)(void)){
    199a:	df 93       	push	r29
    199c:	cf 93       	push	r28
    199e:	00 d0       	rcall	.+0      	; 0x19a0 <EXTI_u8Int0SetCallBack+0x6>
    19a0:	0f 92       	push	r0
    19a2:	cd b7       	in	r28, 0x3d	; 61
    19a4:	de b7       	in	r29, 0x3e	; 62
    19a6:	9b 83       	std	Y+3, r25	; 0x03
    19a8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
    19aa:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvInt0Func!=NULL){
    19ac:	8a 81       	ldd	r24, Y+2	; 0x02
    19ae:	9b 81       	ldd	r25, Y+3	; 0x03
    19b0:	00 97       	sbiw	r24, 0x00	; 0
    19b2:	39 f0       	breq	.+14     	; 0x19c2 <EXTI_u8Int0SetCallBack+0x28>
		EXTI_pvInt0Func=Copy_pvInt0Func;
    19b4:	8a 81       	ldd	r24, Y+2	; 0x02
    19b6:	9b 81       	ldd	r25, Y+3	; 0x03
    19b8:	90 93 bd 00 	sts	0x00BD, r25
    19bc:	80 93 bc 00 	sts	0x00BC, r24
    19c0:	02 c0       	rjmp	.+4      	; 0x19c6 <EXTI_u8Int0SetCallBack+0x2c>
	}
	else{
		Local_u8ErrorState=NULL_PTR;
    19c2:	82 e0       	ldi	r24, 0x02	; 2
    19c4:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    19c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    19c8:	0f 90       	pop	r0
    19ca:	0f 90       	pop	r0
    19cc:	0f 90       	pop	r0
    19ce:	cf 91       	pop	r28
    19d0:	df 91       	pop	r29
    19d2:	08 95       	ret

000019d4 <EXTI_u8Int1SetCallBack>:

u8 EXTI_u8Int1SetCallBack(void(*Copy_pvInt1Func)(void)){
    19d4:	df 93       	push	r29
    19d6:	cf 93       	push	r28
    19d8:	00 d0       	rcall	.+0      	; 0x19da <EXTI_u8Int1SetCallBack+0x6>
    19da:	0f 92       	push	r0
    19dc:	cd b7       	in	r28, 0x3d	; 61
    19de:	de b7       	in	r29, 0x3e	; 62
    19e0:	9b 83       	std	Y+3, r25	; 0x03
    19e2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
    19e4:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvInt1Func!=NULL){
    19e6:	8a 81       	ldd	r24, Y+2	; 0x02
    19e8:	9b 81       	ldd	r25, Y+3	; 0x03
    19ea:	00 97       	sbiw	r24, 0x00	; 0
    19ec:	39 f0       	breq	.+14     	; 0x19fc <EXTI_u8Int1SetCallBack+0x28>
		EXTI_pvInt1Func=Copy_pvInt1Func;
    19ee:	8a 81       	ldd	r24, Y+2	; 0x02
    19f0:	9b 81       	ldd	r25, Y+3	; 0x03
    19f2:	90 93 bf 00 	sts	0x00BF, r25
    19f6:	80 93 be 00 	sts	0x00BE, r24
    19fa:	02 c0       	rjmp	.+4      	; 0x1a00 <EXTI_u8Int1SetCallBack+0x2c>
	}
	else{
		Local_u8ErrorState=NULL_PTR;
    19fc:	82 e0       	ldi	r24, 0x02	; 2
    19fe:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1a00:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a02:	0f 90       	pop	r0
    1a04:	0f 90       	pop	r0
    1a06:	0f 90       	pop	r0
    1a08:	cf 91       	pop	r28
    1a0a:	df 91       	pop	r29
    1a0c:	08 95       	ret

00001a0e <EXTI_u8Int2SetCallBack>:

u8 EXTI_u8Int2SetCallBack(void(*Copy_pvInt2Func)(void)){
    1a0e:	df 93       	push	r29
    1a10:	cf 93       	push	r28
    1a12:	00 d0       	rcall	.+0      	; 0x1a14 <EXTI_u8Int2SetCallBack+0x6>
    1a14:	0f 92       	push	r0
    1a16:	cd b7       	in	r28, 0x3d	; 61
    1a18:	de b7       	in	r29, 0x3e	; 62
    1a1a:	9b 83       	std	Y+3, r25	; 0x03
    1a1c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
    1a1e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvInt2Func!=NULL){
    1a20:	8a 81       	ldd	r24, Y+2	; 0x02
    1a22:	9b 81       	ldd	r25, Y+3	; 0x03
    1a24:	00 97       	sbiw	r24, 0x00	; 0
    1a26:	39 f0       	breq	.+14     	; 0x1a36 <EXTI_u8Int2SetCallBack+0x28>
		EXTI_pvInt2Func=Copy_pvInt2Func;
    1a28:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2a:	9b 81       	ldd	r25, Y+3	; 0x03
    1a2c:	90 93 c1 00 	sts	0x00C1, r25
    1a30:	80 93 c0 00 	sts	0x00C0, r24
    1a34:	02 c0       	rjmp	.+4      	; 0x1a3a <EXTI_u8Int2SetCallBack+0x2c>
	}
	else{
		Local_u8ErrorState=NULL_PTR;
    1a36:	82 e0       	ldi	r24, 0x02	; 2
    1a38:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1a3a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a3c:	0f 90       	pop	r0
    1a3e:	0f 90       	pop	r0
    1a40:	0f 90       	pop	r0
    1a42:	cf 91       	pop	r28
    1a44:	df 91       	pop	r29
    1a46:	08 95       	ret

00001a48 <__vector_1>:

/*ISR For INT0*/
void __vector_1(void)    __attribute__((signal));
void __vector_1(void){
    1a48:	1f 92       	push	r1
    1a4a:	0f 92       	push	r0
    1a4c:	0f b6       	in	r0, 0x3f	; 63
    1a4e:	0f 92       	push	r0
    1a50:	11 24       	eor	r1, r1
    1a52:	2f 93       	push	r18
    1a54:	3f 93       	push	r19
    1a56:	4f 93       	push	r20
    1a58:	5f 93       	push	r21
    1a5a:	6f 93       	push	r22
    1a5c:	7f 93       	push	r23
    1a5e:	8f 93       	push	r24
    1a60:	9f 93       	push	r25
    1a62:	af 93       	push	r26
    1a64:	bf 93       	push	r27
    1a66:	ef 93       	push	r30
    1a68:	ff 93       	push	r31
    1a6a:	df 93       	push	r29
    1a6c:	cf 93       	push	r28
    1a6e:	cd b7       	in	r28, 0x3d	; 61
    1a70:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvInt0Func!=NULL){
    1a72:	80 91 bc 00 	lds	r24, 0x00BC
    1a76:	90 91 bd 00 	lds	r25, 0x00BD
    1a7a:	00 97       	sbiw	r24, 0x00	; 0
    1a7c:	29 f0       	breq	.+10     	; 0x1a88 <__vector_1+0x40>
		EXTI_pvInt0Func();
    1a7e:	e0 91 bc 00 	lds	r30, 0x00BC
    1a82:	f0 91 bd 00 	lds	r31, 0x00BD
    1a86:	09 95       	icall
	}
}
    1a88:	cf 91       	pop	r28
    1a8a:	df 91       	pop	r29
    1a8c:	ff 91       	pop	r31
    1a8e:	ef 91       	pop	r30
    1a90:	bf 91       	pop	r27
    1a92:	af 91       	pop	r26
    1a94:	9f 91       	pop	r25
    1a96:	8f 91       	pop	r24
    1a98:	7f 91       	pop	r23
    1a9a:	6f 91       	pop	r22
    1a9c:	5f 91       	pop	r21
    1a9e:	4f 91       	pop	r20
    1aa0:	3f 91       	pop	r19
    1aa2:	2f 91       	pop	r18
    1aa4:	0f 90       	pop	r0
    1aa6:	0f be       	out	0x3f, r0	; 63
    1aa8:	0f 90       	pop	r0
    1aaa:	1f 90       	pop	r1
    1aac:	18 95       	reti

00001aae <__vector_2>:

void __vector_2(void)    __attribute__((signal));
void __vector_2(void){
    1aae:	1f 92       	push	r1
    1ab0:	0f 92       	push	r0
    1ab2:	0f b6       	in	r0, 0x3f	; 63
    1ab4:	0f 92       	push	r0
    1ab6:	11 24       	eor	r1, r1
    1ab8:	2f 93       	push	r18
    1aba:	3f 93       	push	r19
    1abc:	4f 93       	push	r20
    1abe:	5f 93       	push	r21
    1ac0:	6f 93       	push	r22
    1ac2:	7f 93       	push	r23
    1ac4:	8f 93       	push	r24
    1ac6:	9f 93       	push	r25
    1ac8:	af 93       	push	r26
    1aca:	bf 93       	push	r27
    1acc:	ef 93       	push	r30
    1ace:	ff 93       	push	r31
    1ad0:	df 93       	push	r29
    1ad2:	cf 93       	push	r28
    1ad4:	cd b7       	in	r28, 0x3d	; 61
    1ad6:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvInt1Func!=NULL){
    1ad8:	80 91 be 00 	lds	r24, 0x00BE
    1adc:	90 91 bf 00 	lds	r25, 0x00BF
    1ae0:	00 97       	sbiw	r24, 0x00	; 0
    1ae2:	29 f0       	breq	.+10     	; 0x1aee <__vector_2+0x40>
		EXTI_pvInt1Func();
    1ae4:	e0 91 be 00 	lds	r30, 0x00BE
    1ae8:	f0 91 bf 00 	lds	r31, 0x00BF
    1aec:	09 95       	icall
	}
}
    1aee:	cf 91       	pop	r28
    1af0:	df 91       	pop	r29
    1af2:	ff 91       	pop	r31
    1af4:	ef 91       	pop	r30
    1af6:	bf 91       	pop	r27
    1af8:	af 91       	pop	r26
    1afa:	9f 91       	pop	r25
    1afc:	8f 91       	pop	r24
    1afe:	7f 91       	pop	r23
    1b00:	6f 91       	pop	r22
    1b02:	5f 91       	pop	r21
    1b04:	4f 91       	pop	r20
    1b06:	3f 91       	pop	r19
    1b08:	2f 91       	pop	r18
    1b0a:	0f 90       	pop	r0
    1b0c:	0f be       	out	0x3f, r0	; 63
    1b0e:	0f 90       	pop	r0
    1b10:	1f 90       	pop	r1
    1b12:	18 95       	reti

00001b14 <__vector_3>:

void __vector_3(void)    __attribute__((signal));
void __vector_3(void){
    1b14:	1f 92       	push	r1
    1b16:	0f 92       	push	r0
    1b18:	0f b6       	in	r0, 0x3f	; 63
    1b1a:	0f 92       	push	r0
    1b1c:	11 24       	eor	r1, r1
    1b1e:	2f 93       	push	r18
    1b20:	3f 93       	push	r19
    1b22:	4f 93       	push	r20
    1b24:	5f 93       	push	r21
    1b26:	6f 93       	push	r22
    1b28:	7f 93       	push	r23
    1b2a:	8f 93       	push	r24
    1b2c:	9f 93       	push	r25
    1b2e:	af 93       	push	r26
    1b30:	bf 93       	push	r27
    1b32:	ef 93       	push	r30
    1b34:	ff 93       	push	r31
    1b36:	df 93       	push	r29
    1b38:	cf 93       	push	r28
    1b3a:	cd b7       	in	r28, 0x3d	; 61
    1b3c:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvInt2Func!=NULL){
    1b3e:	80 91 c0 00 	lds	r24, 0x00C0
    1b42:	90 91 c1 00 	lds	r25, 0x00C1
    1b46:	00 97       	sbiw	r24, 0x00	; 0
    1b48:	29 f0       	breq	.+10     	; 0x1b54 <__vector_3+0x40>
		EXTI_pvInt2Func();
    1b4a:	e0 91 c0 00 	lds	r30, 0x00C0
    1b4e:	f0 91 c1 00 	lds	r31, 0x00C1
    1b52:	09 95       	icall
	}
}
    1b54:	cf 91       	pop	r28
    1b56:	df 91       	pop	r29
    1b58:	ff 91       	pop	r31
    1b5a:	ef 91       	pop	r30
    1b5c:	bf 91       	pop	r27
    1b5e:	af 91       	pop	r26
    1b60:	9f 91       	pop	r25
    1b62:	8f 91       	pop	r24
    1b64:	7f 91       	pop	r23
    1b66:	6f 91       	pop	r22
    1b68:	5f 91       	pop	r21
    1b6a:	4f 91       	pop	r20
    1b6c:	3f 91       	pop	r19
    1b6e:	2f 91       	pop	r18
    1b70:	0f 90       	pop	r0
    1b72:	0f be       	out	0x3f, r0	; 63
    1b74:	0f 90       	pop	r0
    1b76:	1f 90       	pop	r1
    1b78:	18 95       	reti

00001b7a <GIE_voidEnable>:
#include "BIT_MATH.h"

#include "GIE_interface.h"
#include "GIE_register.h"

void GIE_voidEnable(void){
    1b7a:	df 93       	push	r29
    1b7c:	cf 93       	push	r28
    1b7e:	cd b7       	in	r28, 0x3d	; 61
    1b80:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(SREG,SREG_I);
    1b82:	af e5       	ldi	r26, 0x5F	; 95
    1b84:	b0 e0       	ldi	r27, 0x00	; 0
    1b86:	ef e5       	ldi	r30, 0x5F	; 95
    1b88:	f0 e0       	ldi	r31, 0x00	; 0
    1b8a:	80 81       	ld	r24, Z
    1b8c:	80 68       	ori	r24, 0x80	; 128
    1b8e:	8c 93       	st	X, r24
}
    1b90:	cf 91       	pop	r28
    1b92:	df 91       	pop	r29
    1b94:	08 95       	ret

00001b96 <GIE_voidDisable>:

void GIE_voidDisable(void){
    1b96:	df 93       	push	r29
    1b98:	cf 93       	push	r28
    1b9a:	cd b7       	in	r28, 0x3d	; 61
    1b9c:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(SREG,SREG_I);
    1b9e:	af e5       	ldi	r26, 0x5F	; 95
    1ba0:	b0 e0       	ldi	r27, 0x00	; 0
    1ba2:	ef e5       	ldi	r30, 0x5F	; 95
    1ba4:	f0 e0       	ldi	r31, 0x00	; 0
    1ba6:	80 81       	ld	r24, Z
    1ba8:	8f 77       	andi	r24, 0x7F	; 127
    1baa:	8c 93       	st	X, r24
}
    1bac:	cf 91       	pop	r28
    1bae:	df 91       	pop	r29
    1bb0:	08 95       	ret

00001bb2 <KPD_u8GetPressedKey>:
#include "KPD_config.h"
#include "KPD_interface.h"
#include "KPD_private.h"

u8 KPD_u8GetPressedKey(void)
{
    1bb2:	df 93       	push	r29
    1bb4:	cf 93       	push	r28
    1bb6:	00 d0       	rcall	.+0      	; 0x1bb8 <KPD_u8GetPressedKey+0x6>
    1bb8:	00 d0       	rcall	.+0      	; 0x1bba <KPD_u8GetPressedKey+0x8>
    1bba:	0f 92       	push	r0
    1bbc:	cd b7       	in	r28, 0x3d	; 61
    1bbe:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8PressedKey = KPD_NO_PRESSED_KEY, Local_u8ColumnIdx,Local_u8RowIdx,Local_u8PinState;
    1bc0:	8f ef       	ldi	r24, 0xFF	; 255
    1bc2:	8b 83       	std	Y+3, r24	; 0x03
	static u8 Local_u8KPDArr[ROW_NUM][COLUMN_NUM] = KPD_ARR_VAL;
	static u8 Local_u8ColumnArr[COLUMN_NUM] ={KPD_COLUMN0_PIN,KPD_COLUMN1_PIN,KPD_COLUMN2_PIN,KPD_COLUMN3_PIN};
	static u8 Local_u8RowArr[ROW_NUM] = {KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};

	for(Local_u8ColumnIdx=0;Local_u8ColumnIdx<COLUMN_NUM;Local_u8ColumnIdx++)
    1bc4:	1a 82       	std	Y+2, r1	; 0x02
    1bc6:	5e c0       	rjmp	.+188    	; 0x1c84 <KPD_u8GetPressedKey+0xd2>
	{
		//Activate Current Column
		DIO_u8SetPinValue(KPD_PORT,Local_u8ColumnArr[Local_u8ColumnIdx],DIO_u8PIN_LOW);
    1bc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bca:	88 2f       	mov	r24, r24
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	fc 01       	movw	r30, r24
    1bd0:	e8 56       	subi	r30, 0x68	; 104
    1bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd4:	90 81       	ld	r25, Z
    1bd6:	80 e0       	ldi	r24, 0x00	; 0
    1bd8:	69 2f       	mov	r22, r25
    1bda:	40 e0       	ldi	r20, 0x00	; 0
    1bdc:	0e 94 db 08 	call	0x11b6	; 0x11b6 <DIO_u8SetPinValue>
		for(Local_u8RowIdx=0;Local_u8RowIdx<ROW_NUM;Local_u8RowIdx++)
    1be0:	19 82       	std	Y+1, r1	; 0x01
    1be2:	3d c0       	rjmp	.+122    	; 0x1c5e <KPD_u8GetPressedKey+0xac>
		{
			//Read the current Row
			DIO_u8GetPinValue(KPD_PORT,Local_u8RowArr[Local_u8RowIdx],&Local_u8PinState);
    1be4:	89 81       	ldd	r24, Y+1	; 0x01
    1be6:	88 2f       	mov	r24, r24
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	fc 01       	movw	r30, r24
    1bec:	ec 56       	subi	r30, 0x6C	; 108
    1bee:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf0:	90 81       	ld	r25, Z
    1bf2:	9e 01       	movw	r18, r28
    1bf4:	2c 5f       	subi	r18, 0xFC	; 252
    1bf6:	3f 4f       	sbci	r19, 0xFF	; 255
    1bf8:	80 e0       	ldi	r24, 0x00	; 0
    1bfa:	69 2f       	mov	r22, r25
    1bfc:	a9 01       	movw	r20, r18
    1bfe:	0e 94 35 0a 	call	0x146a	; 0x146a <DIO_u8GetPinValue>
			//check if switch is pressed
			if(DIO_u8PIN_LOW==Local_u8PinState)
    1c02:	8c 81       	ldd	r24, Y+4	; 0x04
    1c04:	88 23       	and	r24, r24
    1c06:	41 f5       	brne	.+80     	; 0x1c58 <KPD_u8GetPressedKey+0xa6>
			{
				Local_u8PressedKey= Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumnIdx];
    1c08:	89 81       	ldd	r24, Y+1	; 0x01
    1c0a:	48 2f       	mov	r20, r24
    1c0c:	50 e0       	ldi	r21, 0x00	; 0
    1c0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c10:	28 2f       	mov	r18, r24
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	ca 01       	movw	r24, r20
    1c16:	88 0f       	add	r24, r24
    1c18:	99 1f       	adc	r25, r25
    1c1a:	88 0f       	add	r24, r24
    1c1c:	99 1f       	adc	r25, r25
    1c1e:	82 0f       	add	r24, r18
    1c20:	93 1f       	adc	r25, r19
    1c22:	fc 01       	movw	r30, r24
    1c24:	e4 56       	subi	r30, 0x64	; 100
    1c26:	ff 4f       	sbci	r31, 0xFF	; 255
    1c28:	80 81       	ld	r24, Z
    1c2a:	8b 83       	std	Y+3, r24	; 0x03
    1c2c:	0f c0       	rjmp	.+30     	; 0x1c4c <KPD_u8GetPressedKey+0x9a>
				//polling(busy waiting until the key is released
				while(DIO_u8PIN_LOW==Local_u8PinState)
				{
					DIO_u8GetPinValue(KPD_PORT,Local_u8RowArr[Local_u8RowIdx],&Local_u8PinState);
    1c2e:	89 81       	ldd	r24, Y+1	; 0x01
    1c30:	88 2f       	mov	r24, r24
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	fc 01       	movw	r30, r24
    1c36:	ec 56       	subi	r30, 0x6C	; 108
    1c38:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3a:	90 81       	ld	r25, Z
    1c3c:	9e 01       	movw	r18, r28
    1c3e:	2c 5f       	subi	r18, 0xFC	; 252
    1c40:	3f 4f       	sbci	r19, 0xFF	; 255
    1c42:	80 e0       	ldi	r24, 0x00	; 0
    1c44:	69 2f       	mov	r22, r25
    1c46:	a9 01       	movw	r20, r18
    1c48:	0e 94 35 0a 	call	0x146a	; 0x146a <DIO_u8GetPinValue>
			//check if switch is pressed
			if(DIO_u8PIN_LOW==Local_u8PinState)
			{
				Local_u8PressedKey= Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumnIdx];
				//polling(busy waiting until the key is released
				while(DIO_u8PIN_LOW==Local_u8PinState)
    1c4c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c4e:	88 23       	and	r24, r24
    1c50:	71 f3       	breq	.-36     	; 0x1c2e <KPD_u8GetPressedKey+0x7c>
				{
					DIO_u8GetPinValue(KPD_PORT,Local_u8RowArr[Local_u8RowIdx],&Local_u8PinState);
				}
				return Local_u8PressedKey;
    1c52:	8b 81       	ldd	r24, Y+3	; 0x03
    1c54:	8d 83       	std	Y+5, r24	; 0x05
    1c56:	1c c0       	rjmp	.+56     	; 0x1c90 <KPD_u8GetPressedKey+0xde>

	for(Local_u8ColumnIdx=0;Local_u8ColumnIdx<COLUMN_NUM;Local_u8ColumnIdx++)
	{
		//Activate Current Column
		DIO_u8SetPinValue(KPD_PORT,Local_u8ColumnArr[Local_u8ColumnIdx],DIO_u8PIN_LOW);
		for(Local_u8RowIdx=0;Local_u8RowIdx<ROW_NUM;Local_u8RowIdx++)
    1c58:	89 81       	ldd	r24, Y+1	; 0x01
    1c5a:	8f 5f       	subi	r24, 0xFF	; 255
    1c5c:	89 83       	std	Y+1, r24	; 0x01
    1c5e:	89 81       	ldd	r24, Y+1	; 0x01
    1c60:	84 30       	cpi	r24, 0x04	; 4
    1c62:	08 f4       	brcc	.+2      	; 0x1c66 <KPD_u8GetPressedKey+0xb4>
    1c64:	bf cf       	rjmp	.-130    	; 0x1be4 <KPD_u8GetPressedKey+0x32>
				}
				return Local_u8PressedKey;
			}
		}
		//Activate Current Column
		DIO_u8SetPinValue(KPD_PORT,Local_u8ColumnArr[Local_u8ColumnIdx],DIO_u8PIN_HIGH);
    1c66:	8a 81       	ldd	r24, Y+2	; 0x02
    1c68:	88 2f       	mov	r24, r24
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	fc 01       	movw	r30, r24
    1c6e:	e8 56       	subi	r30, 0x68	; 104
    1c70:	ff 4f       	sbci	r31, 0xFF	; 255
    1c72:	90 81       	ld	r25, Z
    1c74:	80 e0       	ldi	r24, 0x00	; 0
    1c76:	69 2f       	mov	r22, r25
    1c78:	41 e0       	ldi	r20, 0x01	; 1
    1c7a:	0e 94 db 08 	call	0x11b6	; 0x11b6 <DIO_u8SetPinValue>
	u8 Local_u8PressedKey = KPD_NO_PRESSED_KEY, Local_u8ColumnIdx,Local_u8RowIdx,Local_u8PinState;
	static u8 Local_u8KPDArr[ROW_NUM][COLUMN_NUM] = KPD_ARR_VAL;
	static u8 Local_u8ColumnArr[COLUMN_NUM] ={KPD_COLUMN0_PIN,KPD_COLUMN1_PIN,KPD_COLUMN2_PIN,KPD_COLUMN3_PIN};
	static u8 Local_u8RowArr[ROW_NUM] = {KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};

	for(Local_u8ColumnIdx=0;Local_u8ColumnIdx<COLUMN_NUM;Local_u8ColumnIdx++)
    1c7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c80:	8f 5f       	subi	r24, 0xFF	; 255
    1c82:	8a 83       	std	Y+2, r24	; 0x02
    1c84:	8a 81       	ldd	r24, Y+2	; 0x02
    1c86:	84 30       	cpi	r24, 0x04	; 4
    1c88:	08 f4       	brcc	.+2      	; 0x1c8c <KPD_u8GetPressedKey+0xda>
    1c8a:	9e cf       	rjmp	.-196    	; 0x1bc8 <KPD_u8GetPressedKey+0x16>
		}
		//Activate Current Column
		DIO_u8SetPinValue(KPD_PORT,Local_u8ColumnArr[Local_u8ColumnIdx],DIO_u8PIN_HIGH);
	}

	return Local_u8PressedKey;
    1c8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8e:	8d 83       	std	Y+5, r24	; 0x05
    1c90:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1c92:	0f 90       	pop	r0
    1c94:	0f 90       	pop	r0
    1c96:	0f 90       	pop	r0
    1c98:	0f 90       	pop	r0
    1c9a:	0f 90       	pop	r0
    1c9c:	cf 91       	pop	r28
    1c9e:	df 91       	pop	r29
    1ca0:	08 95       	ret

00001ca2 <PORT_voidInit>:
#include "PORT_config.h"
#include "PORT_private.h"
#include "PORT_interface.h"
#include "PORT_register.h"

void PORT_voidInit(){
    1ca2:	df 93       	push	r29
    1ca4:	cf 93       	push	r28
    1ca6:	cd b7       	in	r28, 0x3d	; 61
    1ca8:	de b7       	in	r29, 0x3e	; 62
    DDRA=PORTA_DIR;
    1caa:	ea e3       	ldi	r30, 0x3A	; 58
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	8f e0       	ldi	r24, 0x0F	; 15
    1cb0:	80 83       	st	Z, r24
    DDRB=PORTB_DIR;
    1cb2:	e7 e3       	ldi	r30, 0x37	; 55
    1cb4:	f0 e0       	ldi	r31, 0x00	; 0
    1cb6:	10 82       	st	Z, r1
    DDRC=PORTC_DIR;
    1cb8:	e4 e3       	ldi	r30, 0x34	; 52
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	8f ef       	ldi	r24, 0xFF	; 255
    1cbe:	80 83       	st	Z, r24
    DDRD=PORTD_DIR;
    1cc0:	e1 e3       	ldi	r30, 0x31	; 49
    1cc2:	f0 e0       	ldi	r31, 0x00	; 0
    1cc4:	80 ee       	ldi	r24, 0xE0	; 224
    1cc6:	80 83       	st	Z, r24
    
    PORTA=PORTA_INIT_VAL;
    1cc8:	eb e3       	ldi	r30, 0x3B	; 59
    1cca:	f0 e0       	ldi	r31, 0x00	; 0
    1ccc:	8f ef       	ldi	r24, 0xFF	; 255
    1cce:	80 83       	st	Z, r24
    PORTB=PORTB_INIT_VAL;
    1cd0:	e8 e3       	ldi	r30, 0x38	; 56
    1cd2:	f0 e0       	ldi	r31, 0x00	; 0
    1cd4:	10 82       	st	Z, r1
    PORTC=PORTC_INIT_VAL;
    1cd6:	e5 e3       	ldi	r30, 0x35	; 53
    1cd8:	f0 e0       	ldi	r31, 0x00	; 0
    1cda:	10 82       	st	Z, r1
    PORTD=PORTD_INIT_VAL;
    1cdc:	e2 e3       	ldi	r30, 0x32	; 50
    1cde:	f0 e0       	ldi	r31, 0x00	; 0
    1ce0:	8c e0       	ldi	r24, 0x0C	; 12
    1ce2:	80 83       	st	Z, r24
}
    1ce4:	cf 91       	pop	r28
    1ce6:	df 91       	pop	r29
    1ce8:	08 95       	ret

00001cea <main>:
void INT1_ISR(void);

u8 Bat1_Pos=0;
u8 Bat2_Pos=0;

void main(void){
    1cea:	0f 93       	push	r16
    1cec:	1f 93       	push	r17
    1cee:	df 93       	push	r29
    1cf0:	cf 93       	push	r28
    1cf2:	cd b7       	in	r28, 0x3d	; 61
    1cf4:	de b7       	in	r29, 0x3e	; 62
    1cf6:	c4 56       	subi	r28, 0x64	; 100
    1cf8:	d0 40       	sbci	r29, 0x00	; 0
    1cfa:	0f b6       	in	r0, 0x3f	; 63
    1cfc:	f8 94       	cli
    1cfe:	de bf       	out	0x3e, r29	; 62
    1d00:	0f be       	out	0x3f, r0	; 63
    1d02:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8Key;
	u8 Local_u8Bat1[8]={0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff};
    1d04:	ce 01       	movw	r24, r28
    1d06:	85 5b       	subi	r24, 0xB5	; 181
    1d08:	9f 4f       	sbci	r25, 0xFF	; 255
    1d0a:	6d 96       	adiw	r28, 0x1d	; 29
    1d0c:	9f af       	std	Y+63, r25	; 0x3f
    1d0e:	8e af       	std	Y+62, r24	; 0x3e
    1d10:	6d 97       	sbiw	r28, 0x1d	; 29
    1d12:	84 eb       	ldi	r24, 0xB4	; 180
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	6f 96       	adiw	r28, 0x1f	; 31
    1d18:	9f af       	std	Y+63, r25	; 0x3f
    1d1a:	8e af       	std	Y+62, r24	; 0x3e
    1d1c:	6f 97       	sbiw	r28, 0x1f	; 31
    1d1e:	98 e0       	ldi	r25, 0x08	; 8
    1d20:	a0 96       	adiw	r28, 0x20	; 32
    1d22:	9f af       	std	Y+63, r25	; 0x3f
    1d24:	a0 97       	sbiw	r28, 0x20	; 32
    1d26:	6f 96       	adiw	r28, 0x1f	; 31
    1d28:	ee ad       	ldd	r30, Y+62	; 0x3e
    1d2a:	ff ad       	ldd	r31, Y+63	; 0x3f
    1d2c:	6f 97       	sbiw	r28, 0x1f	; 31
    1d2e:	00 80       	ld	r0, Z
    1d30:	6f 96       	adiw	r28, 0x1f	; 31
    1d32:	8e ad       	ldd	r24, Y+62	; 0x3e
    1d34:	9f ad       	ldd	r25, Y+63	; 0x3f
    1d36:	6f 97       	sbiw	r28, 0x1f	; 31
    1d38:	01 96       	adiw	r24, 0x01	; 1
    1d3a:	6f 96       	adiw	r28, 0x1f	; 31
    1d3c:	9f af       	std	Y+63, r25	; 0x3f
    1d3e:	8e af       	std	Y+62, r24	; 0x3e
    1d40:	6f 97       	sbiw	r28, 0x1f	; 31
    1d42:	6d 96       	adiw	r28, 0x1d	; 29
    1d44:	ee ad       	ldd	r30, Y+62	; 0x3e
    1d46:	ff ad       	ldd	r31, Y+63	; 0x3f
    1d48:	6d 97       	sbiw	r28, 0x1d	; 29
    1d4a:	00 82       	st	Z, r0
    1d4c:	6d 96       	adiw	r28, 0x1d	; 29
    1d4e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1d50:	9f ad       	ldd	r25, Y+63	; 0x3f
    1d52:	6d 97       	sbiw	r28, 0x1d	; 29
    1d54:	01 96       	adiw	r24, 0x01	; 1
    1d56:	6d 96       	adiw	r28, 0x1d	; 29
    1d58:	9f af       	std	Y+63, r25	; 0x3f
    1d5a:	8e af       	std	Y+62, r24	; 0x3e
    1d5c:	6d 97       	sbiw	r28, 0x1d	; 29
    1d5e:	a0 96       	adiw	r28, 0x20	; 32
    1d60:	9f ad       	ldd	r25, Y+63	; 0x3f
    1d62:	a0 97       	sbiw	r28, 0x20	; 32
    1d64:	91 50       	subi	r25, 0x01	; 1
    1d66:	a0 96       	adiw	r28, 0x20	; 32
    1d68:	9f af       	std	Y+63, r25	; 0x3f
    1d6a:	a0 97       	sbiw	r28, 0x20	; 32
    1d6c:	a0 96       	adiw	r28, 0x20	; 32
    1d6e:	ef ad       	ldd	r30, Y+63	; 0x3f
    1d70:	a0 97       	sbiw	r28, 0x20	; 32
    1d72:	ee 23       	and	r30, r30
    1d74:	c1 f6       	brne	.-80     	; 0x1d26 <main+0x3c>
	u8 Local_u8Bat2[8]={0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff};
    1d76:	ce 01       	movw	r24, r28
    1d78:	8d 5a       	subi	r24, 0xAD	; 173
    1d7a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d7c:	a2 96       	adiw	r28, 0x22	; 34
    1d7e:	9f af       	std	Y+63, r25	; 0x3f
    1d80:	8e af       	std	Y+62, r24	; 0x3e
    1d82:	a2 97       	sbiw	r28, 0x22	; 34
    1d84:	8c ea       	ldi	r24, 0xAC	; 172
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	a4 96       	adiw	r28, 0x24	; 36
    1d8a:	9f af       	std	Y+63, r25	; 0x3f
    1d8c:	8e af       	std	Y+62, r24	; 0x3e
    1d8e:	a4 97       	sbiw	r28, 0x24	; 36
    1d90:	98 e0       	ldi	r25, 0x08	; 8
    1d92:	a5 96       	adiw	r28, 0x25	; 37
    1d94:	9f af       	std	Y+63, r25	; 0x3f
    1d96:	a5 97       	sbiw	r28, 0x25	; 37
    1d98:	a4 96       	adiw	r28, 0x24	; 36
    1d9a:	ee ad       	ldd	r30, Y+62	; 0x3e
    1d9c:	ff ad       	ldd	r31, Y+63	; 0x3f
    1d9e:	a4 97       	sbiw	r28, 0x24	; 36
    1da0:	00 80       	ld	r0, Z
    1da2:	a4 96       	adiw	r28, 0x24	; 36
    1da4:	8e ad       	ldd	r24, Y+62	; 0x3e
    1da6:	9f ad       	ldd	r25, Y+63	; 0x3f
    1da8:	a4 97       	sbiw	r28, 0x24	; 36
    1daa:	01 96       	adiw	r24, 0x01	; 1
    1dac:	a4 96       	adiw	r28, 0x24	; 36
    1dae:	9f af       	std	Y+63, r25	; 0x3f
    1db0:	8e af       	std	Y+62, r24	; 0x3e
    1db2:	a4 97       	sbiw	r28, 0x24	; 36
    1db4:	a2 96       	adiw	r28, 0x22	; 34
    1db6:	ee ad       	ldd	r30, Y+62	; 0x3e
    1db8:	ff ad       	ldd	r31, Y+63	; 0x3f
    1dba:	a2 97       	sbiw	r28, 0x22	; 34
    1dbc:	00 82       	st	Z, r0
    1dbe:	a2 96       	adiw	r28, 0x22	; 34
    1dc0:	8e ad       	ldd	r24, Y+62	; 0x3e
    1dc2:	9f ad       	ldd	r25, Y+63	; 0x3f
    1dc4:	a2 97       	sbiw	r28, 0x22	; 34
    1dc6:	01 96       	adiw	r24, 0x01	; 1
    1dc8:	a2 96       	adiw	r28, 0x22	; 34
    1dca:	9f af       	std	Y+63, r25	; 0x3f
    1dcc:	8e af       	std	Y+62, r24	; 0x3e
    1dce:	a2 97       	sbiw	r28, 0x22	; 34
    1dd0:	a5 96       	adiw	r28, 0x25	; 37
    1dd2:	9f ad       	ldd	r25, Y+63	; 0x3f
    1dd4:	a5 97       	sbiw	r28, 0x25	; 37
    1dd6:	91 50       	subi	r25, 0x01	; 1
    1dd8:	a5 96       	adiw	r28, 0x25	; 37
    1dda:	9f af       	std	Y+63, r25	; 0x3f
    1ddc:	a5 97       	sbiw	r28, 0x25	; 37
    1dde:	a5 96       	adiw	r28, 0x25	; 37
    1de0:	ef ad       	ldd	r30, Y+63	; 0x3f
    1de2:	a5 97       	sbiw	r28, 0x25	; 37
    1de4:	ee 23       	and	r30, r30
    1de6:	c1 f6       	brne	.-80     	; 0x1d98 <main+0xae>
	char Local_u8Ball ='+';
    1de8:	fe 01       	movw	r30, r28
    1dea:	e7 5b       	subi	r30, 0xB7	; 183
    1dec:	ff 4f       	sbci	r31, 0xFF	; 255
    1dee:	8b e2       	ldi	r24, 0x2B	; 43
    1df0:	80 83       	st	Z, r24
	PORT_voidInit();
    1df2:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <PORT_voidInit>
	CLCD_voidInit();
    1df6:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <CLCD_voidInit>
	EXTI_voidInt0Init();
    1dfa:	0e 94 1f 0b 	call	0x163e	; 0x163e <EXTI_voidInt0Init>
	EXTI_voidInt1Init();
    1dfe:	0e 94 3b 0b 	call	0x1676	; 0x1676 <EXTI_voidInt1Init>
	GIE_voidEnable();
    1e02:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <GIE_voidEnable>
	EXTI_u8Int0SetCallBack(&INT0_ISR);
    1e06:	83 e6       	ldi	r24, 0x63	; 99
    1e08:	92 e1       	ldi	r25, 0x12	; 18
    1e0a:	0e 94 cd 0c 	call	0x199a	; 0x199a <EXTI_u8Int0SetCallBack>
	EXTI_u8Int1SetCallBack(&INT1_ISR);
    1e0e:	80 e9       	ldi	r24, 0x90	; 144
    1e10:	92 e1       	ldi	r25, 0x12	; 18
    1e12:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <EXTI_u8Int1SetCallBack>
	CLCD_voidWriteSpecialCharacter(&Local_u8Bat1,0);
    1e16:	ce 01       	movw	r24, r28
    1e18:	85 5b       	subi	r24, 0xB5	; 181
    1e1a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e1c:	60 e0       	ldi	r22, 0x00	; 0
    1e1e:	0e 94 a9 07 	call	0xf52	; 0xf52 <CLCD_voidWriteSpecialCharacter>
	CLCD_voidSendSpecialCharacter(0,0,0);
    1e22:	80 e0       	ldi	r24, 0x00	; 0
    1e24:	60 e0       	ldi	r22, 0x00	; 0
    1e26:	40 e0       	ldi	r20, 0x00	; 0
    1e28:	0e 94 de 07 	call	0xfbc	; 0xfbc <CLCD_voidSendSpecialCharacter>
	CLCD_voidWriteSpecialCharacter(&Local_u8Bat2,1);
    1e2c:	ce 01       	movw	r24, r28
    1e2e:	8d 5a       	subi	r24, 0xAD	; 173
    1e30:	9f 4f       	sbci	r25, 0xFF	; 255
    1e32:	61 e0       	ldi	r22, 0x01	; 1
    1e34:	0e 94 a9 07 	call	0xf52	; 0xf52 <CLCD_voidWriteSpecialCharacter>
	CLCD_voidSendSpecialCharacter(1,0,15);
    1e38:	81 e0       	ldi	r24, 0x01	; 1
    1e3a:	60 e0       	ldi	r22, 0x00	; 0
    1e3c:	4f e0       	ldi	r20, 0x0F	; 15
    1e3e:	0e 94 de 07 	call	0xfbc	; 0xfbc <CLCD_voidSendSpecialCharacter>
	while(1){
		Bat1_Pos=0;Bat2_Pos=0;
    1e42:	10 92 c2 00 	sts	0x00C2, r1
    1e46:	10 92 c3 00 	sts	0x00C3, r1
		CLCD_voidGoToXY(0,1);
    1e4a:	80 e0       	ldi	r24, 0x00	; 0
    1e4c:	61 e0       	ldi	r22, 0x01	; 1
    1e4e:	0e 94 89 07 	call	0xf12	; 0xf12 <CLCD_voidGoToXY>
		CLCD_voidSendData(Local_u8Ball);
    1e52:	fe 01       	movw	r30, r28
    1e54:	e7 5b       	subi	r30, 0xB7	; 183
    1e56:	ff 4f       	sbci	r31, 0xFF	; 255
    1e58:	80 81       	ld	r24, Z
    1e5a:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    1e5e:	fe 01       	movw	r30, r28
    1e60:	ed 5b       	subi	r30, 0xBD	; 189
    1e62:	ff 4f       	sbci	r31, 0xFF	; 255
    1e64:	80 e0       	ldi	r24, 0x00	; 0
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	aa ef       	ldi	r26, 0xFA	; 250
    1e6a:	b3 e4       	ldi	r27, 0x43	; 67
    1e6c:	80 83       	st	Z, r24
    1e6e:	91 83       	std	Z+1, r25	; 0x01
    1e70:	a2 83       	std	Z+2, r26	; 0x02
    1e72:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e74:	8e 01       	movw	r16, r28
    1e76:	01 5c       	subi	r16, 0xC1	; 193
    1e78:	1f 4f       	sbci	r17, 0xFF	; 255
    1e7a:	fe 01       	movw	r30, r28
    1e7c:	ed 5b       	subi	r30, 0xBD	; 189
    1e7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e80:	60 81       	ld	r22, Z
    1e82:	71 81       	ldd	r23, Z+1	; 0x01
    1e84:	82 81       	ldd	r24, Z+2	; 0x02
    1e86:	93 81       	ldd	r25, Z+3	; 0x03
    1e88:	20 e0       	ldi	r18, 0x00	; 0
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	4a ef       	ldi	r20, 0xFA	; 250
    1e8e:	54 e4       	ldi	r21, 0x44	; 68
    1e90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e94:	dc 01       	movw	r26, r24
    1e96:	cb 01       	movw	r24, r22
    1e98:	f8 01       	movw	r30, r16
    1e9a:	80 83       	st	Z, r24
    1e9c:	91 83       	std	Z+1, r25	; 0x01
    1e9e:	a2 83       	std	Z+2, r26	; 0x02
    1ea0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ea2:	fe 01       	movw	r30, r28
    1ea4:	ff 96       	adiw	r30, 0x3f	; 63
    1ea6:	60 81       	ld	r22, Z
    1ea8:	71 81       	ldd	r23, Z+1	; 0x01
    1eaa:	82 81       	ldd	r24, Z+2	; 0x02
    1eac:	93 81       	ldd	r25, Z+3	; 0x03
    1eae:	20 e0       	ldi	r18, 0x00	; 0
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	40 e8       	ldi	r20, 0x80	; 128
    1eb4:	5f e3       	ldi	r21, 0x3F	; 63
    1eb6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1eba:	88 23       	and	r24, r24
    1ebc:	2c f4       	brge	.+10     	; 0x1ec8 <main+0x1de>
		__ticks = 1;
    1ebe:	81 e0       	ldi	r24, 0x01	; 1
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	9e af       	std	Y+62, r25	; 0x3e
    1ec4:	8d af       	std	Y+61, r24	; 0x3d
    1ec6:	46 c0       	rjmp	.+140    	; 0x1f54 <main+0x26a>
	else if (__tmp > 65535)
    1ec8:	fe 01       	movw	r30, r28
    1eca:	ff 96       	adiw	r30, 0x3f	; 63
    1ecc:	60 81       	ld	r22, Z
    1ece:	71 81       	ldd	r23, Z+1	; 0x01
    1ed0:	82 81       	ldd	r24, Z+2	; 0x02
    1ed2:	93 81       	ldd	r25, Z+3	; 0x03
    1ed4:	20 e0       	ldi	r18, 0x00	; 0
    1ed6:	3f ef       	ldi	r19, 0xFF	; 255
    1ed8:	4f e7       	ldi	r20, 0x7F	; 127
    1eda:	57 e4       	ldi	r21, 0x47	; 71
    1edc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ee0:	18 16       	cp	r1, r24
    1ee2:	64 f5       	brge	.+88     	; 0x1f3c <main+0x252>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ee4:	fe 01       	movw	r30, r28
    1ee6:	ed 5b       	subi	r30, 0xBD	; 189
    1ee8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eea:	60 81       	ld	r22, Z
    1eec:	71 81       	ldd	r23, Z+1	; 0x01
    1eee:	82 81       	ldd	r24, Z+2	; 0x02
    1ef0:	93 81       	ldd	r25, Z+3	; 0x03
    1ef2:	20 e0       	ldi	r18, 0x00	; 0
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	40 e2       	ldi	r20, 0x20	; 32
    1ef8:	51 e4       	ldi	r21, 0x41	; 65
    1efa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1efe:	dc 01       	movw	r26, r24
    1f00:	cb 01       	movw	r24, r22
    1f02:	bc 01       	movw	r22, r24
    1f04:	cd 01       	movw	r24, r26
    1f06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f0a:	dc 01       	movw	r26, r24
    1f0c:	cb 01       	movw	r24, r22
    1f0e:	9e af       	std	Y+62, r25	; 0x3e
    1f10:	8d af       	std	Y+61, r24	; 0x3d
    1f12:	0f c0       	rjmp	.+30     	; 0x1f32 <main+0x248>
    1f14:	88 ec       	ldi	r24, 0xC8	; 200
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	9c af       	std	Y+60, r25	; 0x3c
    1f1a:	8b af       	std	Y+59, r24	; 0x3b
    1f1c:	8b ad       	ldd	r24, Y+59	; 0x3b
    1f1e:	9c ad       	ldd	r25, Y+60	; 0x3c
    1f20:	01 97       	sbiw	r24, 0x01	; 1
    1f22:	f1 f7       	brne	.-4      	; 0x1f20 <main+0x236>
    1f24:	9c af       	std	Y+60, r25	; 0x3c
    1f26:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f28:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f2a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f2c:	01 97       	sbiw	r24, 0x01	; 1
    1f2e:	9e af       	std	Y+62, r25	; 0x3e
    1f30:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f32:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f34:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f36:	00 97       	sbiw	r24, 0x00	; 0
    1f38:	69 f7       	brne	.-38     	; 0x1f14 <main+0x22a>
    1f3a:	16 c0       	rjmp	.+44     	; 0x1f68 <main+0x27e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f3c:	fe 01       	movw	r30, r28
    1f3e:	ff 96       	adiw	r30, 0x3f	; 63
    1f40:	60 81       	ld	r22, Z
    1f42:	71 81       	ldd	r23, Z+1	; 0x01
    1f44:	82 81       	ldd	r24, Z+2	; 0x02
    1f46:	93 81       	ldd	r25, Z+3	; 0x03
    1f48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f4c:	dc 01       	movw	r26, r24
    1f4e:	cb 01       	movw	r24, r22
    1f50:	9e af       	std	Y+62, r25	; 0x3e
    1f52:	8d af       	std	Y+61, r24	; 0x3d
    1f54:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f56:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f58:	9a af       	std	Y+58, r25	; 0x3a
    1f5a:	89 af       	std	Y+57, r24	; 0x39
    1f5c:	89 ad       	ldd	r24, Y+57	; 0x39
    1f5e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1f60:	01 97       	sbiw	r24, 0x01	; 1
    1f62:	f1 f7       	brne	.-4      	; 0x1f60 <main+0x276>
    1f64:	9a af       	std	Y+58, r25	; 0x3a
    1f66:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(500);
		for(u8 Local_u8Iterator=1;Local_u8Iterator<14;Local_u8Iterator++){
    1f68:	fe 01       	movw	r30, r28
    1f6a:	e8 5b       	subi	r30, 0xB8	; 184
    1f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6e:	81 e0       	ldi	r24, 0x01	; 1
    1f70:	80 83       	st	Z, r24
    1f72:	8b c0       	rjmp	.+278    	; 0x208a <main+0x3a0>
			CLCD_voidGoToXY(0,Local_u8Iterator);
    1f74:	fe 01       	movw	r30, r28
    1f76:	e8 5b       	subi	r30, 0xB8	; 184
    1f78:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7a:	80 e0       	ldi	r24, 0x00	; 0
    1f7c:	60 81       	ld	r22, Z
    1f7e:	0e 94 89 07 	call	0xf12	; 0xf12 <CLCD_voidGoToXY>
			CLCD_voidSendData(' ');
    1f82:	80 e2       	ldi	r24, 0x20	; 32
    1f84:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
			CLCD_voidSendData(Local_u8Ball);
    1f88:	fe 01       	movw	r30, r28
    1f8a:	e7 5b       	subi	r30, 0xB7	; 183
    1f8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8e:	80 81       	ld	r24, Z
    1f90:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    1f94:	80 e0       	ldi	r24, 0x00	; 0
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	aa ef       	ldi	r26, 0xFA	; 250
    1f9a:	b3 e4       	ldi	r27, 0x43	; 67
    1f9c:	8d ab       	std	Y+53, r24	; 0x35
    1f9e:	9e ab       	std	Y+54, r25	; 0x36
    1fa0:	af ab       	std	Y+55, r26	; 0x37
    1fa2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fa4:	6d a9       	ldd	r22, Y+53	; 0x35
    1fa6:	7e a9       	ldd	r23, Y+54	; 0x36
    1fa8:	8f a9       	ldd	r24, Y+55	; 0x37
    1faa:	98 ad       	ldd	r25, Y+56	; 0x38
    1fac:	20 e0       	ldi	r18, 0x00	; 0
    1fae:	30 e0       	ldi	r19, 0x00	; 0
    1fb0:	4a ef       	ldi	r20, 0xFA	; 250
    1fb2:	54 e4       	ldi	r21, 0x44	; 68
    1fb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fb8:	dc 01       	movw	r26, r24
    1fba:	cb 01       	movw	r24, r22
    1fbc:	89 ab       	std	Y+49, r24	; 0x31
    1fbe:	9a ab       	std	Y+50, r25	; 0x32
    1fc0:	ab ab       	std	Y+51, r26	; 0x33
    1fc2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1fc4:	69 a9       	ldd	r22, Y+49	; 0x31
    1fc6:	7a a9       	ldd	r23, Y+50	; 0x32
    1fc8:	8b a9       	ldd	r24, Y+51	; 0x33
    1fca:	9c a9       	ldd	r25, Y+52	; 0x34
    1fcc:	20 e0       	ldi	r18, 0x00	; 0
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	40 e8       	ldi	r20, 0x80	; 128
    1fd2:	5f e3       	ldi	r21, 0x3F	; 63
    1fd4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fd8:	88 23       	and	r24, r24
    1fda:	2c f4       	brge	.+10     	; 0x1fe6 <main+0x2fc>
		__ticks = 1;
    1fdc:	81 e0       	ldi	r24, 0x01	; 1
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	98 ab       	std	Y+48, r25	; 0x30
    1fe2:	8f a7       	std	Y+47, r24	; 0x2f
    1fe4:	3f c0       	rjmp	.+126    	; 0x2064 <main+0x37a>
	else if (__tmp > 65535)
    1fe6:	69 a9       	ldd	r22, Y+49	; 0x31
    1fe8:	7a a9       	ldd	r23, Y+50	; 0x32
    1fea:	8b a9       	ldd	r24, Y+51	; 0x33
    1fec:	9c a9       	ldd	r25, Y+52	; 0x34
    1fee:	20 e0       	ldi	r18, 0x00	; 0
    1ff0:	3f ef       	ldi	r19, 0xFF	; 255
    1ff2:	4f e7       	ldi	r20, 0x7F	; 127
    1ff4:	57 e4       	ldi	r21, 0x47	; 71
    1ff6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ffa:	18 16       	cp	r1, r24
    1ffc:	4c f5       	brge	.+82     	; 0x2050 <main+0x366>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ffe:	6d a9       	ldd	r22, Y+53	; 0x35
    2000:	7e a9       	ldd	r23, Y+54	; 0x36
    2002:	8f a9       	ldd	r24, Y+55	; 0x37
    2004:	98 ad       	ldd	r25, Y+56	; 0x38
    2006:	20 e0       	ldi	r18, 0x00	; 0
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	40 e2       	ldi	r20, 0x20	; 32
    200c:	51 e4       	ldi	r21, 0x41	; 65
    200e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2012:	dc 01       	movw	r26, r24
    2014:	cb 01       	movw	r24, r22
    2016:	bc 01       	movw	r22, r24
    2018:	cd 01       	movw	r24, r26
    201a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    201e:	dc 01       	movw	r26, r24
    2020:	cb 01       	movw	r24, r22
    2022:	98 ab       	std	Y+48, r25	; 0x30
    2024:	8f a7       	std	Y+47, r24	; 0x2f
    2026:	0f c0       	rjmp	.+30     	; 0x2046 <main+0x35c>
    2028:	88 ec       	ldi	r24, 0xC8	; 200
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	9e a7       	std	Y+46, r25	; 0x2e
    202e:	8d a7       	std	Y+45, r24	; 0x2d
    2030:	8d a5       	ldd	r24, Y+45	; 0x2d
    2032:	9e a5       	ldd	r25, Y+46	; 0x2e
    2034:	01 97       	sbiw	r24, 0x01	; 1
    2036:	f1 f7       	brne	.-4      	; 0x2034 <main+0x34a>
    2038:	9e a7       	std	Y+46, r25	; 0x2e
    203a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    203c:	8f a5       	ldd	r24, Y+47	; 0x2f
    203e:	98 a9       	ldd	r25, Y+48	; 0x30
    2040:	01 97       	sbiw	r24, 0x01	; 1
    2042:	98 ab       	std	Y+48, r25	; 0x30
    2044:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2046:	8f a5       	ldd	r24, Y+47	; 0x2f
    2048:	98 a9       	ldd	r25, Y+48	; 0x30
    204a:	00 97       	sbiw	r24, 0x00	; 0
    204c:	69 f7       	brne	.-38     	; 0x2028 <main+0x33e>
    204e:	14 c0       	rjmp	.+40     	; 0x2078 <main+0x38e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2050:	69 a9       	ldd	r22, Y+49	; 0x31
    2052:	7a a9       	ldd	r23, Y+50	; 0x32
    2054:	8b a9       	ldd	r24, Y+51	; 0x33
    2056:	9c a9       	ldd	r25, Y+52	; 0x34
    2058:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    205c:	dc 01       	movw	r26, r24
    205e:	cb 01       	movw	r24, r22
    2060:	98 ab       	std	Y+48, r25	; 0x30
    2062:	8f a7       	std	Y+47, r24	; 0x2f
    2064:	8f a5       	ldd	r24, Y+47	; 0x2f
    2066:	98 a9       	ldd	r25, Y+48	; 0x30
    2068:	9c a7       	std	Y+44, r25	; 0x2c
    206a:	8b a7       	std	Y+43, r24	; 0x2b
    206c:	8b a5       	ldd	r24, Y+43	; 0x2b
    206e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2070:	01 97       	sbiw	r24, 0x01	; 1
    2072:	f1 f7       	brne	.-4      	; 0x2070 <main+0x386>
    2074:	9c a7       	std	Y+44, r25	; 0x2c
    2076:	8b a7       	std	Y+43, r24	; 0x2b
	while(1){
		Bat1_Pos=0;Bat2_Pos=0;
		CLCD_voidGoToXY(0,1);
		CLCD_voidSendData(Local_u8Ball);
		_delay_ms(500);
		for(u8 Local_u8Iterator=1;Local_u8Iterator<14;Local_u8Iterator++){
    2078:	de 01       	movw	r26, r28
    207a:	a8 5b       	subi	r26, 0xB8	; 184
    207c:	bf 4f       	sbci	r27, 0xFF	; 255
    207e:	fe 01       	movw	r30, r28
    2080:	e8 5b       	subi	r30, 0xB8	; 184
    2082:	ff 4f       	sbci	r31, 0xFF	; 255
    2084:	80 81       	ld	r24, Z
    2086:	8f 5f       	subi	r24, 0xFF	; 255
    2088:	8c 93       	st	X, r24
    208a:	fe 01       	movw	r30, r28
    208c:	e8 5b       	subi	r30, 0xB8	; 184
    208e:	ff 4f       	sbci	r31, 0xFF	; 255
    2090:	80 81       	ld	r24, Z
    2092:	8e 30       	cpi	r24, 0x0E	; 14
    2094:	08 f4       	brcc	.+2      	; 0x2098 <main+0x3ae>
    2096:	6e cf       	rjmp	.-292    	; 0x1f74 <main+0x28a>
			CLCD_voidGoToXY(0,Local_u8Iterator);
			CLCD_voidSendData(' ');
			CLCD_voidSendData(Local_u8Ball);
			_delay_ms(500);
		}
		if(Bat2_Pos==1){
    2098:	80 91 c3 00 	lds	r24, 0x00C3
    209c:	81 30       	cpi	r24, 0x01	; 1
    209e:	09 f0       	breq	.+2      	; 0x20a2 <main+0x3b8>
    20a0:	b3 c0       	rjmp	.+358    	; 0x2208 <main+0x51e>
			CLCD_voidGoToXY(0,14);
    20a2:	80 e0       	ldi	r24, 0x00	; 0
    20a4:	6e e0       	ldi	r22, 0x0E	; 14
    20a6:	0e 94 89 07 	call	0xf12	; 0xf12 <CLCD_voidGoToXY>
			CLCD_voidSendData(' ');
    20aa:	80 e2       	ldi	r24, 0x20	; 32
    20ac:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
			CLCD_voidSendData(Local_u8Ball);
    20b0:	fe 01       	movw	r30, r28
    20b2:	e7 5b       	subi	r30, 0xB7	; 183
    20b4:	ff 4f       	sbci	r31, 0xFF	; 255
    20b6:	80 81       	ld	r24, Z
    20b8:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    20bc:	80 e0       	ldi	r24, 0x00	; 0
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	aa ef       	ldi	r26, 0xFA	; 250
    20c2:	b3 e4       	ldi	r27, 0x43	; 67
    20c4:	8f a3       	std	Y+39, r24	; 0x27
    20c6:	98 a7       	std	Y+40, r25	; 0x28
    20c8:	a9 a7       	std	Y+41, r26	; 0x29
    20ca:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20cc:	6f a1       	ldd	r22, Y+39	; 0x27
    20ce:	78 a5       	ldd	r23, Y+40	; 0x28
    20d0:	89 a5       	ldd	r24, Y+41	; 0x29
    20d2:	9a a5       	ldd	r25, Y+42	; 0x2a
    20d4:	20 e0       	ldi	r18, 0x00	; 0
    20d6:	30 e0       	ldi	r19, 0x00	; 0
    20d8:	4a ef       	ldi	r20, 0xFA	; 250
    20da:	54 e4       	ldi	r21, 0x44	; 68
    20dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20e0:	dc 01       	movw	r26, r24
    20e2:	cb 01       	movw	r24, r22
    20e4:	8b a3       	std	Y+35, r24	; 0x23
    20e6:	9c a3       	std	Y+36, r25	; 0x24
    20e8:	ad a3       	std	Y+37, r26	; 0x25
    20ea:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    20ec:	6b a1       	ldd	r22, Y+35	; 0x23
    20ee:	7c a1       	ldd	r23, Y+36	; 0x24
    20f0:	8d a1       	ldd	r24, Y+37	; 0x25
    20f2:	9e a1       	ldd	r25, Y+38	; 0x26
    20f4:	20 e0       	ldi	r18, 0x00	; 0
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	40 e8       	ldi	r20, 0x80	; 128
    20fa:	5f e3       	ldi	r21, 0x3F	; 63
    20fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2100:	88 23       	and	r24, r24
    2102:	2c f4       	brge	.+10     	; 0x210e <main+0x424>
		__ticks = 1;
    2104:	81 e0       	ldi	r24, 0x01	; 1
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	9a a3       	std	Y+34, r25	; 0x22
    210a:	89 a3       	std	Y+33, r24	; 0x21
    210c:	3f c0       	rjmp	.+126    	; 0x218c <main+0x4a2>
	else if (__tmp > 65535)
    210e:	6b a1       	ldd	r22, Y+35	; 0x23
    2110:	7c a1       	ldd	r23, Y+36	; 0x24
    2112:	8d a1       	ldd	r24, Y+37	; 0x25
    2114:	9e a1       	ldd	r25, Y+38	; 0x26
    2116:	20 e0       	ldi	r18, 0x00	; 0
    2118:	3f ef       	ldi	r19, 0xFF	; 255
    211a:	4f e7       	ldi	r20, 0x7F	; 127
    211c:	57 e4       	ldi	r21, 0x47	; 71
    211e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2122:	18 16       	cp	r1, r24
    2124:	4c f5       	brge	.+82     	; 0x2178 <main+0x48e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2126:	6f a1       	ldd	r22, Y+39	; 0x27
    2128:	78 a5       	ldd	r23, Y+40	; 0x28
    212a:	89 a5       	ldd	r24, Y+41	; 0x29
    212c:	9a a5       	ldd	r25, Y+42	; 0x2a
    212e:	20 e0       	ldi	r18, 0x00	; 0
    2130:	30 e0       	ldi	r19, 0x00	; 0
    2132:	40 e2       	ldi	r20, 0x20	; 32
    2134:	51 e4       	ldi	r21, 0x41	; 65
    2136:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    213a:	dc 01       	movw	r26, r24
    213c:	cb 01       	movw	r24, r22
    213e:	bc 01       	movw	r22, r24
    2140:	cd 01       	movw	r24, r26
    2142:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2146:	dc 01       	movw	r26, r24
    2148:	cb 01       	movw	r24, r22
    214a:	9a a3       	std	Y+34, r25	; 0x22
    214c:	89 a3       	std	Y+33, r24	; 0x21
    214e:	0f c0       	rjmp	.+30     	; 0x216e <main+0x484>
    2150:	88 ec       	ldi	r24, 0xC8	; 200
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	98 a3       	std	Y+32, r25	; 0x20
    2156:	8f 8f       	std	Y+31, r24	; 0x1f
    2158:	8f 8d       	ldd	r24, Y+31	; 0x1f
    215a:	98 a1       	ldd	r25, Y+32	; 0x20
    215c:	01 97       	sbiw	r24, 0x01	; 1
    215e:	f1 f7       	brne	.-4      	; 0x215c <main+0x472>
    2160:	98 a3       	std	Y+32, r25	; 0x20
    2162:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2164:	89 a1       	ldd	r24, Y+33	; 0x21
    2166:	9a a1       	ldd	r25, Y+34	; 0x22
    2168:	01 97       	sbiw	r24, 0x01	; 1
    216a:	9a a3       	std	Y+34, r25	; 0x22
    216c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    216e:	89 a1       	ldd	r24, Y+33	; 0x21
    2170:	9a a1       	ldd	r25, Y+34	; 0x22
    2172:	00 97       	sbiw	r24, 0x00	; 0
    2174:	69 f7       	brne	.-38     	; 0x2150 <main+0x466>
    2176:	14 c0       	rjmp	.+40     	; 0x21a0 <main+0x4b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2178:	6b a1       	ldd	r22, Y+35	; 0x23
    217a:	7c a1       	ldd	r23, Y+36	; 0x24
    217c:	8d a1       	ldd	r24, Y+37	; 0x25
    217e:	9e a1       	ldd	r25, Y+38	; 0x26
    2180:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2184:	dc 01       	movw	r26, r24
    2186:	cb 01       	movw	r24, r22
    2188:	9a a3       	std	Y+34, r25	; 0x22
    218a:	89 a3       	std	Y+33, r24	; 0x21
    218c:	89 a1       	ldd	r24, Y+33	; 0x21
    218e:	9a a1       	ldd	r25, Y+34	; 0x22
    2190:	9e 8f       	std	Y+30, r25	; 0x1e
    2192:	8d 8f       	std	Y+29, r24	; 0x1d
    2194:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2196:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2198:	01 97       	sbiw	r24, 0x01	; 1
    219a:	f1 f7       	brne	.-4      	; 0x2198 <main+0x4ae>
    219c:	9e 8f       	std	Y+30, r25	; 0x1e
    219e:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(500);
			CLCD_voidSendCommand(1);
    21a0:	81 e0       	ldi	r24, 0x01	; 1
    21a2:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
			CLCD_voidSendString("Player 2 LOSES");
    21a6:	80 e6       	ldi	r24, 0x60	; 96
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	0e 94 df 06 	call	0xdbe	; 0xdbe <CLCD_voidSendString>
			CLCD_voidGoToXY(1,0);
    21ae:	81 e0       	ldi	r24, 0x01	; 1
    21b0:	60 e0       	ldi	r22, 0x00	; 0
    21b2:	0e 94 89 07 	call	0xf12	; 0xf12 <CLCD_voidGoToXY>
			CLCD_voidSendString("Press any Key");
    21b6:	8f e6       	ldi	r24, 0x6F	; 111
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	0e 94 df 06 	call	0xdbe	; 0xdbe <CLCD_voidSendString>
			do{
				Local_u8Key = KPD_u8GetPressedKey();
    21be:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <KPD_u8GetPressedKey>
    21c2:	fe 01       	movw	r30, r28
    21c4:	e6 5b       	subi	r30, 0xB6	; 182
    21c6:	ff 4f       	sbci	r31, 0xFF	; 255
    21c8:	80 83       	st	Z, r24
			}while(Local_u8Key==0xff);
    21ca:	fe 01       	movw	r30, r28
    21cc:	e6 5b       	subi	r30, 0xB6	; 182
    21ce:	ff 4f       	sbci	r31, 0xFF	; 255
    21d0:	80 81       	ld	r24, Z
    21d2:	8f 3f       	cpi	r24, 0xFF	; 255
    21d4:	a1 f3       	breq	.-24     	; 0x21be <main+0x4d4>
			CLCD_voidSendCommand(1);
    21d6:	81 e0       	ldi	r24, 0x01	; 1
    21d8:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
			CLCD_voidWriteSpecialCharacter(&Local_u8Bat1,0);
    21dc:	ce 01       	movw	r24, r28
    21de:	85 5b       	subi	r24, 0xB5	; 181
    21e0:	9f 4f       	sbci	r25, 0xFF	; 255
    21e2:	60 e0       	ldi	r22, 0x00	; 0
    21e4:	0e 94 a9 07 	call	0xf52	; 0xf52 <CLCD_voidWriteSpecialCharacter>
			CLCD_voidSendSpecialCharacter(0,0,0);
    21e8:	80 e0       	ldi	r24, 0x00	; 0
    21ea:	60 e0       	ldi	r22, 0x00	; 0
    21ec:	40 e0       	ldi	r20, 0x00	; 0
    21ee:	0e 94 de 07 	call	0xfbc	; 0xfbc <CLCD_voidSendSpecialCharacter>
			CLCD_voidWriteSpecialCharacter(&Local_u8Bat2,1);
    21f2:	ce 01       	movw	r24, r28
    21f4:	8d 5a       	subi	r24, 0xAD	; 173
    21f6:	9f 4f       	sbci	r25, 0xFF	; 255
    21f8:	61 e0       	ldi	r22, 0x01	; 1
    21fa:	0e 94 a9 07 	call	0xf52	; 0xf52 <CLCD_voidWriteSpecialCharacter>
			CLCD_voidSendSpecialCharacter(1,0,15);
    21fe:	81 e0       	ldi	r24, 0x01	; 1
    2200:	60 e0       	ldi	r22, 0x00	; 0
    2202:	4f e0       	ldi	r20, 0x0F	; 15
    2204:	0e 94 de 07 	call	0xfbc	; 0xfbc <CLCD_voidSendSpecialCharacter>
		}
		for(u8 Local_u8Iterator=14;Local_u8Iterator>1;Local_u8Iterator--){
    2208:	fe 01       	movw	r30, r28
    220a:	e9 5b       	subi	r30, 0xB9	; 185
    220c:	ff 4f       	sbci	r31, 0xFF	; 255
    220e:	8e e0       	ldi	r24, 0x0E	; 14
    2210:	80 83       	st	Z, r24
    2212:	95 c0       	rjmp	.+298    	; 0x233e <main+0x654>
			CLCD_voidGoToXY(0,Local_u8Iterator);
    2214:	fe 01       	movw	r30, r28
    2216:	e9 5b       	subi	r30, 0xB9	; 185
    2218:	ff 4f       	sbci	r31, 0xFF	; 255
    221a:	80 e0       	ldi	r24, 0x00	; 0
    221c:	60 81       	ld	r22, Z
    221e:	0e 94 89 07 	call	0xf12	; 0xf12 <CLCD_voidGoToXY>
			CLCD_voidSendData(' ');
    2222:	80 e2       	ldi	r24, 0x20	; 32
    2224:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
			CLCD_voidGoToXY(0,Local_u8Iterator-1);
    2228:	fe 01       	movw	r30, r28
    222a:	e9 5b       	subi	r30, 0xB9	; 185
    222c:	ff 4f       	sbci	r31, 0xFF	; 255
    222e:	80 81       	ld	r24, Z
    2230:	98 2f       	mov	r25, r24
    2232:	91 50       	subi	r25, 0x01	; 1
    2234:	80 e0       	ldi	r24, 0x00	; 0
    2236:	69 2f       	mov	r22, r25
    2238:	0e 94 89 07 	call	0xf12	; 0xf12 <CLCD_voidGoToXY>
			CLCD_voidSendData(Local_u8Ball);
    223c:	fe 01       	movw	r30, r28
    223e:	e7 5b       	subi	r30, 0xB7	; 183
    2240:	ff 4f       	sbci	r31, 0xFF	; 255
    2242:	80 81       	ld	r24, Z
    2244:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    2248:	80 e0       	ldi	r24, 0x00	; 0
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	aa ef       	ldi	r26, 0xFA	; 250
    224e:	b3 e4       	ldi	r27, 0x43	; 67
    2250:	89 8f       	std	Y+25, r24	; 0x19
    2252:	9a 8f       	std	Y+26, r25	; 0x1a
    2254:	ab 8f       	std	Y+27, r26	; 0x1b
    2256:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2258:	69 8d       	ldd	r22, Y+25	; 0x19
    225a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    225c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    225e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2260:	20 e0       	ldi	r18, 0x00	; 0
    2262:	30 e0       	ldi	r19, 0x00	; 0
    2264:	4a ef       	ldi	r20, 0xFA	; 250
    2266:	54 e4       	ldi	r21, 0x44	; 68
    2268:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    226c:	dc 01       	movw	r26, r24
    226e:	cb 01       	movw	r24, r22
    2270:	8d 8b       	std	Y+21, r24	; 0x15
    2272:	9e 8b       	std	Y+22, r25	; 0x16
    2274:	af 8b       	std	Y+23, r26	; 0x17
    2276:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2278:	6d 89       	ldd	r22, Y+21	; 0x15
    227a:	7e 89       	ldd	r23, Y+22	; 0x16
    227c:	8f 89       	ldd	r24, Y+23	; 0x17
    227e:	98 8d       	ldd	r25, Y+24	; 0x18
    2280:	20 e0       	ldi	r18, 0x00	; 0
    2282:	30 e0       	ldi	r19, 0x00	; 0
    2284:	40 e8       	ldi	r20, 0x80	; 128
    2286:	5f e3       	ldi	r21, 0x3F	; 63
    2288:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    228c:	88 23       	and	r24, r24
    228e:	2c f4       	brge	.+10     	; 0x229a <main+0x5b0>
		__ticks = 1;
    2290:	81 e0       	ldi	r24, 0x01	; 1
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	9c 8b       	std	Y+20, r25	; 0x14
    2296:	8b 8b       	std	Y+19, r24	; 0x13
    2298:	3f c0       	rjmp	.+126    	; 0x2318 <main+0x62e>
	else if (__tmp > 65535)
    229a:	6d 89       	ldd	r22, Y+21	; 0x15
    229c:	7e 89       	ldd	r23, Y+22	; 0x16
    229e:	8f 89       	ldd	r24, Y+23	; 0x17
    22a0:	98 8d       	ldd	r25, Y+24	; 0x18
    22a2:	20 e0       	ldi	r18, 0x00	; 0
    22a4:	3f ef       	ldi	r19, 0xFF	; 255
    22a6:	4f e7       	ldi	r20, 0x7F	; 127
    22a8:	57 e4       	ldi	r21, 0x47	; 71
    22aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22ae:	18 16       	cp	r1, r24
    22b0:	4c f5       	brge	.+82     	; 0x2304 <main+0x61a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22b2:	69 8d       	ldd	r22, Y+25	; 0x19
    22b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22ba:	20 e0       	ldi	r18, 0x00	; 0
    22bc:	30 e0       	ldi	r19, 0x00	; 0
    22be:	40 e2       	ldi	r20, 0x20	; 32
    22c0:	51 e4       	ldi	r21, 0x41	; 65
    22c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22c6:	dc 01       	movw	r26, r24
    22c8:	cb 01       	movw	r24, r22
    22ca:	bc 01       	movw	r22, r24
    22cc:	cd 01       	movw	r24, r26
    22ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22d2:	dc 01       	movw	r26, r24
    22d4:	cb 01       	movw	r24, r22
    22d6:	9c 8b       	std	Y+20, r25	; 0x14
    22d8:	8b 8b       	std	Y+19, r24	; 0x13
    22da:	0f c0       	rjmp	.+30     	; 0x22fa <main+0x610>
    22dc:	88 ec       	ldi	r24, 0xC8	; 200
    22de:	90 e0       	ldi	r25, 0x00	; 0
    22e0:	9a 8b       	std	Y+18, r25	; 0x12
    22e2:	89 8b       	std	Y+17, r24	; 0x11
    22e4:	89 89       	ldd	r24, Y+17	; 0x11
    22e6:	9a 89       	ldd	r25, Y+18	; 0x12
    22e8:	01 97       	sbiw	r24, 0x01	; 1
    22ea:	f1 f7       	brne	.-4      	; 0x22e8 <main+0x5fe>
    22ec:	9a 8b       	std	Y+18, r25	; 0x12
    22ee:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22f0:	8b 89       	ldd	r24, Y+19	; 0x13
    22f2:	9c 89       	ldd	r25, Y+20	; 0x14
    22f4:	01 97       	sbiw	r24, 0x01	; 1
    22f6:	9c 8b       	std	Y+20, r25	; 0x14
    22f8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22fa:	8b 89       	ldd	r24, Y+19	; 0x13
    22fc:	9c 89       	ldd	r25, Y+20	; 0x14
    22fe:	00 97       	sbiw	r24, 0x00	; 0
    2300:	69 f7       	brne	.-38     	; 0x22dc <main+0x5f2>
    2302:	14 c0       	rjmp	.+40     	; 0x232c <main+0x642>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2304:	6d 89       	ldd	r22, Y+21	; 0x15
    2306:	7e 89       	ldd	r23, Y+22	; 0x16
    2308:	8f 89       	ldd	r24, Y+23	; 0x17
    230a:	98 8d       	ldd	r25, Y+24	; 0x18
    230c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2310:	dc 01       	movw	r26, r24
    2312:	cb 01       	movw	r24, r22
    2314:	9c 8b       	std	Y+20, r25	; 0x14
    2316:	8b 8b       	std	Y+19, r24	; 0x13
    2318:	8b 89       	ldd	r24, Y+19	; 0x13
    231a:	9c 89       	ldd	r25, Y+20	; 0x14
    231c:	98 8b       	std	Y+16, r25	; 0x10
    231e:	8f 87       	std	Y+15, r24	; 0x0f
    2320:	8f 85       	ldd	r24, Y+15	; 0x0f
    2322:	98 89       	ldd	r25, Y+16	; 0x10
    2324:	01 97       	sbiw	r24, 0x01	; 1
    2326:	f1 f7       	brne	.-4      	; 0x2324 <main+0x63a>
    2328:	98 8b       	std	Y+16, r25	; 0x10
    232a:	8f 87       	std	Y+15, r24	; 0x0f
			CLCD_voidWriteSpecialCharacter(&Local_u8Bat1,0);
			CLCD_voidSendSpecialCharacter(0,0,0);
			CLCD_voidWriteSpecialCharacter(&Local_u8Bat2,1);
			CLCD_voidSendSpecialCharacter(1,0,15);
		}
		for(u8 Local_u8Iterator=14;Local_u8Iterator>1;Local_u8Iterator--){
    232c:	de 01       	movw	r26, r28
    232e:	a9 5b       	subi	r26, 0xB9	; 185
    2330:	bf 4f       	sbci	r27, 0xFF	; 255
    2332:	fe 01       	movw	r30, r28
    2334:	e9 5b       	subi	r30, 0xB9	; 185
    2336:	ff 4f       	sbci	r31, 0xFF	; 255
    2338:	80 81       	ld	r24, Z
    233a:	81 50       	subi	r24, 0x01	; 1
    233c:	8c 93       	st	X, r24
    233e:	fe 01       	movw	r30, r28
    2340:	e9 5b       	subi	r30, 0xB9	; 185
    2342:	ff 4f       	sbci	r31, 0xFF	; 255
    2344:	80 81       	ld	r24, Z
    2346:	82 30       	cpi	r24, 0x02	; 2
    2348:	08 f0       	brcs	.+2      	; 0x234c <main+0x662>
    234a:	64 cf       	rjmp	.-312    	; 0x2214 <main+0x52a>
			CLCD_voidSendData(' ');
			CLCD_voidGoToXY(0,Local_u8Iterator-1);
			CLCD_voidSendData(Local_u8Ball);
			_delay_ms(500);
		}
		if(Bat1_Pos==1){
    234c:	80 91 c2 00 	lds	r24, 0x00C2
    2350:	81 30       	cpi	r24, 0x01	; 1
    2352:	09 f0       	breq	.+2      	; 0x2356 <main+0x66c>
    2354:	76 cd       	rjmp	.-1300   	; 0x1e42 <main+0x158>
			CLCD_voidGoToXY(0,1);
    2356:	80 e0       	ldi	r24, 0x00	; 0
    2358:	61 e0       	ldi	r22, 0x01	; 1
    235a:	0e 94 89 07 	call	0xf12	; 0xf12 <CLCD_voidGoToXY>
			CLCD_voidSendData(' ');
    235e:	80 e2       	ldi	r24, 0x20	; 32
    2360:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
			CLCD_voidGoToXY(0,0);
    2364:	80 e0       	ldi	r24, 0x00	; 0
    2366:	60 e0       	ldi	r22, 0x00	; 0
    2368:	0e 94 89 07 	call	0xf12	; 0xf12 <CLCD_voidGoToXY>
			CLCD_voidSendData(Local_u8Ball);
    236c:	fe 01       	movw	r30, r28
    236e:	e7 5b       	subi	r30, 0xB7	; 183
    2370:	ff 4f       	sbci	r31, 0xFF	; 255
    2372:	80 81       	ld	r24, Z
    2374:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    2378:	80 e0       	ldi	r24, 0x00	; 0
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	aa ef       	ldi	r26, 0xFA	; 250
    237e:	b3 e4       	ldi	r27, 0x43	; 67
    2380:	8b 87       	std	Y+11, r24	; 0x0b
    2382:	9c 87       	std	Y+12, r25	; 0x0c
    2384:	ad 87       	std	Y+13, r26	; 0x0d
    2386:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2388:	6b 85       	ldd	r22, Y+11	; 0x0b
    238a:	7c 85       	ldd	r23, Y+12	; 0x0c
    238c:	8d 85       	ldd	r24, Y+13	; 0x0d
    238e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2390:	20 e0       	ldi	r18, 0x00	; 0
    2392:	30 e0       	ldi	r19, 0x00	; 0
    2394:	4a ef       	ldi	r20, 0xFA	; 250
    2396:	54 e4       	ldi	r21, 0x44	; 68
    2398:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    239c:	dc 01       	movw	r26, r24
    239e:	cb 01       	movw	r24, r22
    23a0:	8f 83       	std	Y+7, r24	; 0x07
    23a2:	98 87       	std	Y+8, r25	; 0x08
    23a4:	a9 87       	std	Y+9, r26	; 0x09
    23a6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23a8:	6f 81       	ldd	r22, Y+7	; 0x07
    23aa:	78 85       	ldd	r23, Y+8	; 0x08
    23ac:	89 85       	ldd	r24, Y+9	; 0x09
    23ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    23b0:	20 e0       	ldi	r18, 0x00	; 0
    23b2:	30 e0       	ldi	r19, 0x00	; 0
    23b4:	40 e8       	ldi	r20, 0x80	; 128
    23b6:	5f e3       	ldi	r21, 0x3F	; 63
    23b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23bc:	88 23       	and	r24, r24
    23be:	2c f4       	brge	.+10     	; 0x23ca <main+0x6e0>
		__ticks = 1;
    23c0:	81 e0       	ldi	r24, 0x01	; 1
    23c2:	90 e0       	ldi	r25, 0x00	; 0
    23c4:	9e 83       	std	Y+6, r25	; 0x06
    23c6:	8d 83       	std	Y+5, r24	; 0x05
    23c8:	3f c0       	rjmp	.+126    	; 0x2448 <main+0x75e>
	else if (__tmp > 65535)
    23ca:	6f 81       	ldd	r22, Y+7	; 0x07
    23cc:	78 85       	ldd	r23, Y+8	; 0x08
    23ce:	89 85       	ldd	r24, Y+9	; 0x09
    23d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    23d2:	20 e0       	ldi	r18, 0x00	; 0
    23d4:	3f ef       	ldi	r19, 0xFF	; 255
    23d6:	4f e7       	ldi	r20, 0x7F	; 127
    23d8:	57 e4       	ldi	r21, 0x47	; 71
    23da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23de:	18 16       	cp	r1, r24
    23e0:	4c f5       	brge	.+82     	; 0x2434 <main+0x74a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    23e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    23e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    23e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    23ea:	20 e0       	ldi	r18, 0x00	; 0
    23ec:	30 e0       	ldi	r19, 0x00	; 0
    23ee:	40 e2       	ldi	r20, 0x20	; 32
    23f0:	51 e4       	ldi	r21, 0x41	; 65
    23f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23f6:	dc 01       	movw	r26, r24
    23f8:	cb 01       	movw	r24, r22
    23fa:	bc 01       	movw	r22, r24
    23fc:	cd 01       	movw	r24, r26
    23fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2402:	dc 01       	movw	r26, r24
    2404:	cb 01       	movw	r24, r22
    2406:	9e 83       	std	Y+6, r25	; 0x06
    2408:	8d 83       	std	Y+5, r24	; 0x05
    240a:	0f c0       	rjmp	.+30     	; 0x242a <main+0x740>
    240c:	88 ec       	ldi	r24, 0xC8	; 200
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	9c 83       	std	Y+4, r25	; 0x04
    2412:	8b 83       	std	Y+3, r24	; 0x03
    2414:	8b 81       	ldd	r24, Y+3	; 0x03
    2416:	9c 81       	ldd	r25, Y+4	; 0x04
    2418:	01 97       	sbiw	r24, 0x01	; 1
    241a:	f1 f7       	brne	.-4      	; 0x2418 <main+0x72e>
    241c:	9c 83       	std	Y+4, r25	; 0x04
    241e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2420:	8d 81       	ldd	r24, Y+5	; 0x05
    2422:	9e 81       	ldd	r25, Y+6	; 0x06
    2424:	01 97       	sbiw	r24, 0x01	; 1
    2426:	9e 83       	std	Y+6, r25	; 0x06
    2428:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    242a:	8d 81       	ldd	r24, Y+5	; 0x05
    242c:	9e 81       	ldd	r25, Y+6	; 0x06
    242e:	00 97       	sbiw	r24, 0x00	; 0
    2430:	69 f7       	brne	.-38     	; 0x240c <main+0x722>
    2432:	14 c0       	rjmp	.+40     	; 0x245c <main+0x772>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2434:	6f 81       	ldd	r22, Y+7	; 0x07
    2436:	78 85       	ldd	r23, Y+8	; 0x08
    2438:	89 85       	ldd	r24, Y+9	; 0x09
    243a:	9a 85       	ldd	r25, Y+10	; 0x0a
    243c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2440:	dc 01       	movw	r26, r24
    2442:	cb 01       	movw	r24, r22
    2444:	9e 83       	std	Y+6, r25	; 0x06
    2446:	8d 83       	std	Y+5, r24	; 0x05
    2448:	8d 81       	ldd	r24, Y+5	; 0x05
    244a:	9e 81       	ldd	r25, Y+6	; 0x06
    244c:	9a 83       	std	Y+2, r25	; 0x02
    244e:	89 83       	std	Y+1, r24	; 0x01
    2450:	89 81       	ldd	r24, Y+1	; 0x01
    2452:	9a 81       	ldd	r25, Y+2	; 0x02
    2454:	01 97       	sbiw	r24, 0x01	; 1
    2456:	f1 f7       	brne	.-4      	; 0x2454 <main+0x76a>
    2458:	9a 83       	std	Y+2, r25	; 0x02
    245a:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
			CLCD_voidSendCommand(1);
    245c:	81 e0       	ldi	r24, 0x01	; 1
    245e:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
			CLCD_voidSendString("Player 1 LOSES");
    2462:	8d e7       	ldi	r24, 0x7D	; 125
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	0e 94 df 06 	call	0xdbe	; 0xdbe <CLCD_voidSendString>
			CLCD_voidGoToXY(1,0);
    246a:	81 e0       	ldi	r24, 0x01	; 1
    246c:	60 e0       	ldi	r22, 0x00	; 0
    246e:	0e 94 89 07 	call	0xf12	; 0xf12 <CLCD_voidGoToXY>
			CLCD_voidSendString("Press any Key");
    2472:	8f e6       	ldi	r24, 0x6F	; 111
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	0e 94 df 06 	call	0xdbe	; 0xdbe <CLCD_voidSendString>
			do{
				Local_u8Key = KPD_u8GetPressedKey();
    247a:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <KPD_u8GetPressedKey>
    247e:	fe 01       	movw	r30, r28
    2480:	e6 5b       	subi	r30, 0xB6	; 182
    2482:	ff 4f       	sbci	r31, 0xFF	; 255
    2484:	80 83       	st	Z, r24
			}while(Local_u8Key==0xff);
    2486:	fe 01       	movw	r30, r28
    2488:	e6 5b       	subi	r30, 0xB6	; 182
    248a:	ff 4f       	sbci	r31, 0xFF	; 255
    248c:	80 81       	ld	r24, Z
    248e:	8f 3f       	cpi	r24, 0xFF	; 255
    2490:	a1 f3       	breq	.-24     	; 0x247a <main+0x790>
			CLCD_voidSendCommand(1);
    2492:	81 e0       	ldi	r24, 0x01	; 1
    2494:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
			CLCD_voidWriteSpecialCharacter(&Local_u8Bat1,0);
    2498:	ce 01       	movw	r24, r28
    249a:	85 5b       	subi	r24, 0xB5	; 181
    249c:	9f 4f       	sbci	r25, 0xFF	; 255
    249e:	60 e0       	ldi	r22, 0x00	; 0
    24a0:	0e 94 a9 07 	call	0xf52	; 0xf52 <CLCD_voidWriteSpecialCharacter>
			CLCD_voidSendSpecialCharacter(0,0,0);
    24a4:	80 e0       	ldi	r24, 0x00	; 0
    24a6:	60 e0       	ldi	r22, 0x00	; 0
    24a8:	40 e0       	ldi	r20, 0x00	; 0
    24aa:	0e 94 de 07 	call	0xfbc	; 0xfbc <CLCD_voidSendSpecialCharacter>
			CLCD_voidWriteSpecialCharacter(&Local_u8Bat2,1);
    24ae:	ce 01       	movw	r24, r28
    24b0:	8d 5a       	subi	r24, 0xAD	; 173
    24b2:	9f 4f       	sbci	r25, 0xFF	; 255
    24b4:	61 e0       	ldi	r22, 0x01	; 1
    24b6:	0e 94 a9 07 	call	0xf52	; 0xf52 <CLCD_voidWriteSpecialCharacter>
			CLCD_voidSendSpecialCharacter(1,0,15);
    24ba:	81 e0       	ldi	r24, 0x01	; 1
    24bc:	60 e0       	ldi	r22, 0x00	; 0
    24be:	4f e0       	ldi	r20, 0x0F	; 15
    24c0:	0e 94 de 07 	call	0xfbc	; 0xfbc <CLCD_voidSendSpecialCharacter>
    24c4:	be cc       	rjmp	.-1668   	; 0x1e42 <main+0x158>

000024c6 <INT0_ISR>:
		}
	}
}


void INT0_ISR(void){
    24c6:	df 93       	push	r29
    24c8:	cf 93       	push	r28
    24ca:	cd b7       	in	r28, 0x3d	; 61
    24cc:	de b7       	in	r29, 0x3e	; 62
	if(Bat1_Pos==0){
    24ce:	80 91 c2 00 	lds	r24, 0x00C2
    24d2:	88 23       	and	r24, r24
    24d4:	81 f4       	brne	.+32     	; 0x24f6 <INT0_ISR+0x30>
		CLCD_voidGoToXY(0,0);
    24d6:	80 e0       	ldi	r24, 0x00	; 0
    24d8:	60 e0       	ldi	r22, 0x00	; 0
    24da:	0e 94 89 07 	call	0xf12	; 0xf12 <CLCD_voidGoToXY>
		CLCD_voidSendData(' ');
    24de:	80 e2       	ldi	r24, 0x20	; 32
    24e0:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
		CLCD_voidSendSpecialCharacter(0,1,0);
    24e4:	80 e0       	ldi	r24, 0x00	; 0
    24e6:	61 e0       	ldi	r22, 0x01	; 1
    24e8:	40 e0       	ldi	r20, 0x00	; 0
    24ea:	0e 94 de 07 	call	0xfbc	; 0xfbc <CLCD_voidSendSpecialCharacter>
		Bat1_Pos=1;
    24ee:	81 e0       	ldi	r24, 0x01	; 1
    24f0:	80 93 c2 00 	sts	0x00C2, r24
    24f4:	12 c0       	rjmp	.+36     	; 0x251a <INT0_ISR+0x54>
	}
	else if(Bat1_Pos==1){
    24f6:	80 91 c2 00 	lds	r24, 0x00C2
    24fa:	81 30       	cpi	r24, 0x01	; 1
    24fc:	71 f4       	brne	.+28     	; 0x251a <INT0_ISR+0x54>
		CLCD_voidGoToXY(1,0);
    24fe:	81 e0       	ldi	r24, 0x01	; 1
    2500:	60 e0       	ldi	r22, 0x00	; 0
    2502:	0e 94 89 07 	call	0xf12	; 0xf12 <CLCD_voidGoToXY>
		CLCD_voidSendData(' ');
    2506:	80 e2       	ldi	r24, 0x20	; 32
    2508:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
		CLCD_voidSendSpecialCharacter(0,0,0);
    250c:	80 e0       	ldi	r24, 0x00	; 0
    250e:	60 e0       	ldi	r22, 0x00	; 0
    2510:	40 e0       	ldi	r20, 0x00	; 0
    2512:	0e 94 de 07 	call	0xfbc	; 0xfbc <CLCD_voidSendSpecialCharacter>
		Bat1_Pos=0;
    2516:	10 92 c2 00 	sts	0x00C2, r1
	}
}
    251a:	cf 91       	pop	r28
    251c:	df 91       	pop	r29
    251e:	08 95       	ret

00002520 <INT1_ISR>:

void INT1_ISR(void){
    2520:	df 93       	push	r29
    2522:	cf 93       	push	r28
    2524:	cd b7       	in	r28, 0x3d	; 61
    2526:	de b7       	in	r29, 0x3e	; 62
	if(Bat2_Pos==0){
    2528:	80 91 c3 00 	lds	r24, 0x00C3
    252c:	88 23       	and	r24, r24
    252e:	81 f4       	brne	.+32     	; 0x2550 <INT1_ISR+0x30>
		CLCD_voidGoToXY(0,15);
    2530:	80 e0       	ldi	r24, 0x00	; 0
    2532:	6f e0       	ldi	r22, 0x0F	; 15
    2534:	0e 94 89 07 	call	0xf12	; 0xf12 <CLCD_voidGoToXY>
		CLCD_voidSendData(' ');
    2538:	80 e2       	ldi	r24, 0x20	; 32
    253a:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
		CLCD_voidSendSpecialCharacter(0,1,15);
    253e:	80 e0       	ldi	r24, 0x00	; 0
    2540:	61 e0       	ldi	r22, 0x01	; 1
    2542:	4f e0       	ldi	r20, 0x0F	; 15
    2544:	0e 94 de 07 	call	0xfbc	; 0xfbc <CLCD_voidSendSpecialCharacter>
		Bat2_Pos=1;
    2548:	81 e0       	ldi	r24, 0x01	; 1
    254a:	80 93 c3 00 	sts	0x00C3, r24
    254e:	12 c0       	rjmp	.+36     	; 0x2574 <INT1_ISR+0x54>
	}
	else if(Bat2_Pos==1){
    2550:	80 91 c3 00 	lds	r24, 0x00C3
    2554:	81 30       	cpi	r24, 0x01	; 1
    2556:	71 f4       	brne	.+28     	; 0x2574 <INT1_ISR+0x54>
		CLCD_voidGoToXY(1,15);
    2558:	81 e0       	ldi	r24, 0x01	; 1
    255a:	6f e0       	ldi	r22, 0x0F	; 15
    255c:	0e 94 89 07 	call	0xf12	; 0xf12 <CLCD_voidGoToXY>
		CLCD_voidSendData(' ');
    2560:	80 e2       	ldi	r24, 0x20	; 32
    2562:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
		CLCD_voidSendSpecialCharacter(0,0,15);
    2566:	80 e0       	ldi	r24, 0x00	; 0
    2568:	60 e0       	ldi	r22, 0x00	; 0
    256a:	4f e0       	ldi	r20, 0x0F	; 15
    256c:	0e 94 de 07 	call	0xfbc	; 0xfbc <CLCD_voidSendSpecialCharacter>
		Bat2_Pos=0;
    2570:	10 92 c3 00 	sts	0x00C3, r1
	}

}
    2574:	cf 91       	pop	r28
    2576:	df 91       	pop	r29
    2578:	08 95       	ret

0000257a <__mulsi3>:
    257a:	62 9f       	mul	r22, r18
    257c:	d0 01       	movw	r26, r0
    257e:	73 9f       	mul	r23, r19
    2580:	f0 01       	movw	r30, r0
    2582:	82 9f       	mul	r24, r18
    2584:	e0 0d       	add	r30, r0
    2586:	f1 1d       	adc	r31, r1
    2588:	64 9f       	mul	r22, r20
    258a:	e0 0d       	add	r30, r0
    258c:	f1 1d       	adc	r31, r1
    258e:	92 9f       	mul	r25, r18
    2590:	f0 0d       	add	r31, r0
    2592:	83 9f       	mul	r24, r19
    2594:	f0 0d       	add	r31, r0
    2596:	74 9f       	mul	r23, r20
    2598:	f0 0d       	add	r31, r0
    259a:	65 9f       	mul	r22, r21
    259c:	f0 0d       	add	r31, r0
    259e:	99 27       	eor	r25, r25
    25a0:	72 9f       	mul	r23, r18
    25a2:	b0 0d       	add	r27, r0
    25a4:	e1 1d       	adc	r30, r1
    25a6:	f9 1f       	adc	r31, r25
    25a8:	63 9f       	mul	r22, r19
    25aa:	b0 0d       	add	r27, r0
    25ac:	e1 1d       	adc	r30, r1
    25ae:	f9 1f       	adc	r31, r25
    25b0:	bd 01       	movw	r22, r26
    25b2:	cf 01       	movw	r24, r30
    25b4:	11 24       	eor	r1, r1
    25b6:	08 95       	ret

000025b8 <__udivmodsi4>:
    25b8:	a1 e2       	ldi	r26, 0x21	; 33
    25ba:	1a 2e       	mov	r1, r26
    25bc:	aa 1b       	sub	r26, r26
    25be:	bb 1b       	sub	r27, r27
    25c0:	fd 01       	movw	r30, r26
    25c2:	0d c0       	rjmp	.+26     	; 0x25de <__udivmodsi4_ep>

000025c4 <__udivmodsi4_loop>:
    25c4:	aa 1f       	adc	r26, r26
    25c6:	bb 1f       	adc	r27, r27
    25c8:	ee 1f       	adc	r30, r30
    25ca:	ff 1f       	adc	r31, r31
    25cc:	a2 17       	cp	r26, r18
    25ce:	b3 07       	cpc	r27, r19
    25d0:	e4 07       	cpc	r30, r20
    25d2:	f5 07       	cpc	r31, r21
    25d4:	20 f0       	brcs	.+8      	; 0x25de <__udivmodsi4_ep>
    25d6:	a2 1b       	sub	r26, r18
    25d8:	b3 0b       	sbc	r27, r19
    25da:	e4 0b       	sbc	r30, r20
    25dc:	f5 0b       	sbc	r31, r21

000025de <__udivmodsi4_ep>:
    25de:	66 1f       	adc	r22, r22
    25e0:	77 1f       	adc	r23, r23
    25e2:	88 1f       	adc	r24, r24
    25e4:	99 1f       	adc	r25, r25
    25e6:	1a 94       	dec	r1
    25e8:	69 f7       	brne	.-38     	; 0x25c4 <__udivmodsi4_loop>
    25ea:	60 95       	com	r22
    25ec:	70 95       	com	r23
    25ee:	80 95       	com	r24
    25f0:	90 95       	com	r25
    25f2:	9b 01       	movw	r18, r22
    25f4:	ac 01       	movw	r20, r24
    25f6:	bd 01       	movw	r22, r26
    25f8:	cf 01       	movw	r24, r30
    25fa:	08 95       	ret

000025fc <__prologue_saves__>:
    25fc:	2f 92       	push	r2
    25fe:	3f 92       	push	r3
    2600:	4f 92       	push	r4
    2602:	5f 92       	push	r5
    2604:	6f 92       	push	r6
    2606:	7f 92       	push	r7
    2608:	8f 92       	push	r8
    260a:	9f 92       	push	r9
    260c:	af 92       	push	r10
    260e:	bf 92       	push	r11
    2610:	cf 92       	push	r12
    2612:	df 92       	push	r13
    2614:	ef 92       	push	r14
    2616:	ff 92       	push	r15
    2618:	0f 93       	push	r16
    261a:	1f 93       	push	r17
    261c:	cf 93       	push	r28
    261e:	df 93       	push	r29
    2620:	cd b7       	in	r28, 0x3d	; 61
    2622:	de b7       	in	r29, 0x3e	; 62
    2624:	ca 1b       	sub	r28, r26
    2626:	db 0b       	sbc	r29, r27
    2628:	0f b6       	in	r0, 0x3f	; 63
    262a:	f8 94       	cli
    262c:	de bf       	out	0x3e, r29	; 62
    262e:	0f be       	out	0x3f, r0	; 63
    2630:	cd bf       	out	0x3d, r28	; 61
    2632:	09 94       	ijmp

00002634 <__epilogue_restores__>:
    2634:	2a 88       	ldd	r2, Y+18	; 0x12
    2636:	39 88       	ldd	r3, Y+17	; 0x11
    2638:	48 88       	ldd	r4, Y+16	; 0x10
    263a:	5f 84       	ldd	r5, Y+15	; 0x0f
    263c:	6e 84       	ldd	r6, Y+14	; 0x0e
    263e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2640:	8c 84       	ldd	r8, Y+12	; 0x0c
    2642:	9b 84       	ldd	r9, Y+11	; 0x0b
    2644:	aa 84       	ldd	r10, Y+10	; 0x0a
    2646:	b9 84       	ldd	r11, Y+9	; 0x09
    2648:	c8 84       	ldd	r12, Y+8	; 0x08
    264a:	df 80       	ldd	r13, Y+7	; 0x07
    264c:	ee 80       	ldd	r14, Y+6	; 0x06
    264e:	fd 80       	ldd	r15, Y+5	; 0x05
    2650:	0c 81       	ldd	r16, Y+4	; 0x04
    2652:	1b 81       	ldd	r17, Y+3	; 0x03
    2654:	aa 81       	ldd	r26, Y+2	; 0x02
    2656:	b9 81       	ldd	r27, Y+1	; 0x01
    2658:	ce 0f       	add	r28, r30
    265a:	d1 1d       	adc	r29, r1
    265c:	0f b6       	in	r0, 0x3f	; 63
    265e:	f8 94       	cli
    2660:	de bf       	out	0x3e, r29	; 62
    2662:	0f be       	out	0x3f, r0	; 63
    2664:	cd bf       	out	0x3d, r28	; 61
    2666:	ed 01       	movw	r28, r26
    2668:	08 95       	ret

0000266a <_exit>:
    266a:	f8 94       	cli

0000266c <__stop_program>:
    266c:	ff cf       	rjmp	.-2      	; 0x266c <__stop_program>
