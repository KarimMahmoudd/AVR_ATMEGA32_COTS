
BIG_ASS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ef2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000088  00800060  00002ef2  00002f86  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  008000e8  008000e8  0000300e  2**0
                  ALLOC
  3 .stab         00003450  00000000  00000000  00003010  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000016f3  00000000  00000000  00006460  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007b53  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007c93  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007e03  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a937  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b6e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b844  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000bad1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c29f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 d8 15 	jmp	0x2bb0	; 0x2bb0 <__vector_4>
      14:	0c 94 0b 16 	jmp	0x2c16	; 0x2c16 <__vector_5>
      18:	0c 94 1b 16 	jmp	0x2c36	; 0x2c36 <__vector_6>
      1c:	0c 94 2b 16 	jmp	0x2c56	; 0x2c56 <__vector_7>
      20:	0c 94 3b 16 	jmp	0x2c76	; 0x2c76 <__vector_8>
      24:	0c 94 4b 16 	jmp	0x2c96	; 0x2c96 <__vector_9>
      28:	0c 94 5b 16 	jmp	0x2cb6	; 0x2cb6 <__vector_10>
      2c:	0c 94 8e 16 	jmp	0x2d1c	; 0x2d1c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 16 07 	jmp	0xe2c	; 0xe2c <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ef       	ldi	r30, 0xF2	; 242
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3e       	cpi	r26, 0xE8	; 232
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 ee       	ldi	r26, 0xE8	; 232
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 3f       	cpi	r26, 0xF9	; 249
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <main>
      8a:	0c 94 77 17 	jmp	0x2eee	; 0x2eee <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 40 17 	jmp	0x2e80	; 0x2e80 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 eb       	ldi	r26, 0xB1	; 177
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 5c 17 	jmp	0x2eb8	; 0x2eb8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 4c 17 	jmp	0x2e98	; 0x2e98 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 68 17 	jmp	0x2ed0	; 0x2ed0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 4c 17 	jmp	0x2e98	; 0x2e98 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 68 17 	jmp	0x2ed0	; 0x2ed0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 40 17 	jmp	0x2e80	; 0x2e80 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	81 eb       	ldi	r24, 0xB1	; 177
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 5c 17 	jmp	0x2eb8	; 0x2eb8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 4c 17 	jmp	0x2e98	; 0x2e98 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 68 17 	jmp	0x2ed0	; 0x2ed0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 4c 17 	jmp	0x2e98	; 0x2e98 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 68 17 	jmp	0x2ed0	; 0x2ed0 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 4c 17 	jmp	0x2e98	; 0x2e98 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 68 17 	jmp	0x2ed0	; 0x2ed0 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 50 17 	jmp	0x2ea0	; 0x2ea0 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 6c 17 	jmp	0x2ed8	; 0x2ed8 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_voidInit>:
static u8 ADC_u8ConversionMode;
//variables for Asynchronous Chain Conversion
static Chain_t *ADC_psChain=NULL;
static u8 ADC_u8ChainIndex=0;

void ADC_voidInit(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	//Reference Selection
#if REFERENCE_SELECTION==AREF_REF
	CLR_BIT(ADMUX,ADMUX_REFS1);
	CLR_BIT(ADMUX,ADMUX_REFS0);
#elif REFERENCE_SELECTION==AVCC_REF
	CLR_BIT(ADMUX,ADMUX_REFS1);
     b4e:	a7 e2       	ldi	r26, 0x27	; 39
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e7 e2       	ldi	r30, 0x27	; 39
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	8f 77       	andi	r24, 0x7F	; 127
     b5a:	8c 93       	st	X, r24
	SET_BIT(ADMUX,ADMUX_REFS0);
     b5c:	a7 e2       	ldi	r26, 0x27	; 39
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e7 e2       	ldi	r30, 0x27	; 39
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	80 64       	ori	r24, 0x40	; 64
     b68:	8c 93       	st	X, r24
#endif
	//Adjust Resultion
#if ADC_RESOLUTION==10
	CLR_BIT(ADMUX,ADMUX_ADLAR);
#elif ADC_RESOLUTION==8
	SET_BIT(ADMUX,ADMUX_ADLAR);
     b6a:	a7 e2       	ldi	r26, 0x27	; 39
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e7 e2       	ldi	r30, 0x27	; 39
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	80 62       	ori	r24, 0x20	; 32
     b76:	8c 93       	st	X, r24
	SFIOR|=(AUTO_TRIGGER_SOURCE<<5);
#if AUTO_TRIGGER_SOURCE==FREE_RUNNING
	SET_BIT(ADCSRA,ADCSRA_ADSC);
#endif
#elif AUTO_TRIGGER==DISABLE
	CLR_BIT(ADCSRA,ADCSRA_ADATE);
     b78:	a6 e2       	ldi	r26, 0x26	; 38
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e6 e2       	ldi	r30, 0x26	; 38
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	8f 7d       	andi	r24, 0xDF	; 223
     b84:	8c 93       	st	X, r24

	//Interrupt enable
#if ADC_INT==ENABLE
	SET_BIT(ADCSRA,ADCSRA_ADIE);
#elif ADC_INT==DISABLE
	CLR_BIT(ADCSRA,ADCSRA_ADIE);
     b86:	a6 e2       	ldi	r26, 0x26	; 38
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e6 e2       	ldi	r30, 0x26	; 38
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	87 7f       	andi	r24, 0xF7	; 247
     b92:	8c 93       	st	X, r24
#else
#error "WRONG INT OPTION"
#endif

	//Prescaler Setting
	ADCSRA&=ADC_PRESCALER_MASK;
     b94:	a6 e2       	ldi	r26, 0x26	; 38
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e6 e2       	ldi	r30, 0x26	; 38
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	88 7f       	andi	r24, 0xF8	; 248
     ba0:	8c 93       	st	X, r24
	ADCSRA|=PRESCALER ;
     ba2:	a6 e2       	ldi	r26, 0x26	; 38
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e6 e2       	ldi	r30, 0x26	; 38
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	87 60       	ori	r24, 0x07	; 7
     bae:	8c 93       	st	X, r24

	//Enable or Disable ADC
#if ADC_ENABLE==ENABLE
	SET_BIT(ADCSRA,ADCSRA_ADEN);
     bb0:	a6 e2       	ldi	r26, 0x26	; 38
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	e6 e2       	ldi	r30, 0x26	; 38
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	80 68       	ori	r24, 0x80	; 128
     bbc:	8c 93       	st	X, r24
#elif ADC_ENABLE==DISABLE
	CLR_BIT(ADCSRA,ADCSRA_ADEN);
#else
#error "Wrong ADC_ENABLE Option"
#endif
}
     bbe:	cf 91       	pop	r28
     bc0:	df 91       	pop	r29
     bc2:	08 95       	ret

00000bc4 <ADC_u8StartConversionSynch>:

u8 ADC_u8StartConversionSynch(u8 Copy_u8Channel,u16* Copy_pu16Reading){
     bc4:	df 93       	push	r29
     bc6:	cf 93       	push	r28
     bc8:	cd b7       	in	r28, 0x3d	; 61
     bca:	de b7       	in	r29, 0x3e	; 62
     bcc:	28 97       	sbiw	r28, 0x08	; 8
     bce:	0f b6       	in	r0, 0x3f	; 63
     bd0:	f8 94       	cli
     bd2:	de bf       	out	0x3e, r29	; 62
     bd4:	0f be       	out	0x3f, r0	; 63
     bd6:	cd bf       	out	0x3d, r28	; 61
     bd8:	8e 83       	std	Y+6, r24	; 0x06
     bda:	78 87       	std	Y+8, r23	; 0x08
     bdc:	6f 83       	std	Y+7, r22	; 0x07
	u32 Local_u32Counter=0;
     bde:	1a 82       	std	Y+2, r1	; 0x02
     be0:	1b 82       	std	Y+3, r1	; 0x03
     be2:	1c 82       	std	Y+4, r1	; 0x04
     be4:	1d 82       	std	Y+5, r1	; 0x05
	u8 Local_u8ErrorState=OK;
     be6:	19 82       	std	Y+1, r1	; 0x01
	if(ADC_u8BusyState==IDLE){
     be8:	80 91 ec 00 	lds	r24, 0x00EC
     bec:	88 23       	and	r24, r24
     bee:	09 f0       	breq	.+2      	; 0xbf2 <ADC_u8StartConversionSynch+0x2e>
     bf0:	65 c0       	rjmp	.+202    	; 0xcbc <ADC_u8StartConversionSynch+0xf8>
		if(Copy_pu16Reading==NULL){
     bf2:	8f 81       	ldd	r24, Y+7	; 0x07
     bf4:	98 85       	ldd	r25, Y+8	; 0x08
     bf6:	00 97       	sbiw	r24, 0x00	; 0
     bf8:	19 f4       	brne	.+6      	; 0xc00 <ADC_u8StartConversionSynch+0x3c>
			Local_u8ErrorState=NULL_POINTER;
     bfa:	82 e0       	ldi	r24, 0x02	; 2
     bfc:	89 83       	std	Y+1, r24	; 0x01
     bfe:	60 c0       	rjmp	.+192    	; 0xcc0 <ADC_u8StartConversionSynch+0xfc>
		}
		else{
			ADC_u8BusyState=BUSY;
     c00:	81 e0       	ldi	r24, 0x01	; 1
     c02:	80 93 ec 00 	sts	0x00EC, r24
			//adjusting the channel using bit masking
			ADMUX&=CHANNEL_MUX_MASK;
     c06:	a7 e2       	ldi	r26, 0x27	; 39
     c08:	b0 e0       	ldi	r27, 0x00	; 0
     c0a:	e7 e2       	ldi	r30, 0x27	; 39
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	80 81       	ld	r24, Z
     c10:	80 7e       	andi	r24, 0xE0	; 224
     c12:	8c 93       	st	X, r24
			ADMUX|=Copy_u8Channel;
     c14:	a7 e2       	ldi	r26, 0x27	; 39
     c16:	b0 e0       	ldi	r27, 0x00	; 0
     c18:	e7 e2       	ldi	r30, 0x27	; 39
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	90 81       	ld	r25, Z
     c1e:	8e 81       	ldd	r24, Y+6	; 0x06
     c20:	89 2b       	or	r24, r25
     c22:	8c 93       	st	X, r24
			//start conversion
			SET_BIT(ADCSRA,ADCSRA_ADSC);
     c24:	a6 e2       	ldi	r26, 0x26	; 38
     c26:	b0 e0       	ldi	r27, 0x00	; 0
     c28:	e6 e2       	ldi	r30, 0x26	; 38
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	80 81       	ld	r24, Z
     c2e:	80 64       	ori	r24, 0x40	; 64
     c30:	8c 93       	st	X, r24
     c32:	0b c0       	rjmp	.+22     	; 0xc4a <ADC_u8StartConversionSynch+0x86>
			//polling until the conversion is finished using the interrupt flag
			while((GET_BIT(ADCSRA,ADCSRA_ADIF)==0) && (Local_u32Counter!=ADC_u32TIMEOUT)){
				Local_u32Counter++;
     c34:	8a 81       	ldd	r24, Y+2	; 0x02
     c36:	9b 81       	ldd	r25, Y+3	; 0x03
     c38:	ac 81       	ldd	r26, Y+4	; 0x04
     c3a:	bd 81       	ldd	r27, Y+5	; 0x05
     c3c:	01 96       	adiw	r24, 0x01	; 1
     c3e:	a1 1d       	adc	r26, r1
     c40:	b1 1d       	adc	r27, r1
     c42:	8a 83       	std	Y+2, r24	; 0x02
     c44:	9b 83       	std	Y+3, r25	; 0x03
     c46:	ac 83       	std	Y+4, r26	; 0x04
     c48:	bd 83       	std	Y+5, r27	; 0x05
			ADMUX&=CHANNEL_MUX_MASK;
			ADMUX|=Copy_u8Channel;
			//start conversion
			SET_BIT(ADCSRA,ADCSRA_ADSC);
			//polling until the conversion is finished using the interrupt flag
			while((GET_BIT(ADCSRA,ADCSRA_ADIF)==0) && (Local_u32Counter!=ADC_u32TIMEOUT)){
     c4a:	e6 e2       	ldi	r30, 0x26	; 38
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	80 81       	ld	r24, Z
     c50:	82 95       	swap	r24
     c52:	8f 70       	andi	r24, 0x0F	; 15
     c54:	88 2f       	mov	r24, r24
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	81 70       	andi	r24, 0x01	; 1
     c5a:	90 70       	andi	r25, 0x00	; 0
     c5c:	00 97       	sbiw	r24, 0x00	; 0
     c5e:	61 f4       	brne	.+24     	; 0xc78 <ADC_u8StartConversionSynch+0xb4>
     c60:	8a 81       	ldd	r24, Y+2	; 0x02
     c62:	9b 81       	ldd	r25, Y+3	; 0x03
     c64:	ac 81       	ldd	r26, Y+4	; 0x04
     c66:	bd 81       	ldd	r27, Y+5	; 0x05
     c68:	80 35       	cpi	r24, 0x50	; 80
     c6a:	23 ec       	ldi	r18, 0xC3	; 195
     c6c:	92 07       	cpc	r25, r18
     c6e:	20 e0       	ldi	r18, 0x00	; 0
     c70:	a2 07       	cpc	r26, r18
     c72:	20 e0       	ldi	r18, 0x00	; 0
     c74:	b2 07       	cpc	r27, r18
     c76:	f1 f6       	brne	.-68     	; 0xc34 <ADC_u8StartConversionSynch+0x70>
				Local_u32Counter++;
			}
			//clearing the interrupt flag by writing 1
			if(Local_u32Counter==ADC_u32TIMEOUT){
     c78:	8a 81       	ldd	r24, Y+2	; 0x02
     c7a:	9b 81       	ldd	r25, Y+3	; 0x03
     c7c:	ac 81       	ldd	r26, Y+4	; 0x04
     c7e:	bd 81       	ldd	r27, Y+5	; 0x05
     c80:	80 35       	cpi	r24, 0x50	; 80
     c82:	23 ec       	ldi	r18, 0xC3	; 195
     c84:	92 07       	cpc	r25, r18
     c86:	20 e0       	ldi	r18, 0x00	; 0
     c88:	a2 07       	cpc	r26, r18
     c8a:	20 e0       	ldi	r18, 0x00	; 0
     c8c:	b2 07       	cpc	r27, r18
     c8e:	19 f4       	brne	.+6      	; 0xc96 <ADC_u8StartConversionSynch+0xd2>
				//loop is broken because timeout is reached
				Local_u8ErrorState=NOK;
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	89 83       	std	Y+1, r24	; 0x01
     c94:	15 c0       	rjmp	.+42     	; 0xcc0 <ADC_u8StartConversionSynch+0xfc>
			}
			else{
				//flag is raised
				SET_BIT(ADCSRA,ADCSRA_ADIF);
     c96:	a6 e2       	ldi	r26, 0x26	; 38
     c98:	b0 e0       	ldi	r27, 0x00	; 0
     c9a:	e6 e2       	ldi	r30, 0x26	; 38
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	80 81       	ld	r24, Z
     ca0:	80 61       	ori	r24, 0x10	; 16
     ca2:	8c 93       	st	X, r24
				//returning the reading
#if ADC_RESOLUTION == 8
				*Copy_pu16Reading= ADCH;
     ca4:	e5 e2       	ldi	r30, 0x25	; 37
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	80 81       	ld	r24, Z
     caa:	88 2f       	mov	r24, r24
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	ef 81       	ldd	r30, Y+7	; 0x07
     cb0:	f8 85       	ldd	r31, Y+8	; 0x08
     cb2:	91 83       	std	Z+1, r25	; 0x01
     cb4:	80 83       	st	Z, r24
#elif ADC_RESOLUTION == 10
				*Copy_pu16Reading = ADC;
#else
#error "Wrong ADJUST OPTION"
#endif
				ADC_u8BusyState=IDLE;
     cb6:	10 92 ec 00 	sts	0x00EC, r1
     cba:	02 c0       	rjmp	.+4      	; 0xcc0 <ADC_u8StartConversionSynch+0xfc>
			}
		}
	}
	else{
		Local_u8ErrorState=BUSY_FUNC;
     cbc:	83 e0       	ldi	r24, 0x03	; 3
     cbe:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErrorState;
     cc0:	89 81       	ldd	r24, Y+1	; 0x01
}
     cc2:	28 96       	adiw	r28, 0x08	; 8
     cc4:	0f b6       	in	r0, 0x3f	; 63
     cc6:	f8 94       	cli
     cc8:	de bf       	out	0x3e, r29	; 62
     cca:	0f be       	out	0x3f, r0	; 63
     ccc:	cd bf       	out	0x3d, r28	; 61
     cce:	cf 91       	pop	r28
     cd0:	df 91       	pop	r29
     cd2:	08 95       	ret

00000cd4 <ADC_u8StartConversionAsynch>:

u8 ADC_u8StartConversionAsynch(u8 Copy_u8Channel,u16* Copy_pu16Reading, void (*Copy_pvNotificationFunc)(void)){
     cd4:	df 93       	push	r29
     cd6:	cf 93       	push	r28
     cd8:	00 d0       	rcall	.+0      	; 0xcda <ADC_u8StartConversionAsynch+0x6>
     cda:	00 d0       	rcall	.+0      	; 0xcdc <ADC_u8StartConversionAsynch+0x8>
     cdc:	00 d0       	rcall	.+0      	; 0xcde <ADC_u8StartConversionAsynch+0xa>
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
     ce2:	8a 83       	std	Y+2, r24	; 0x02
     ce4:	7c 83       	std	Y+4, r23	; 0x04
     ce6:	6b 83       	std	Y+3, r22	; 0x03
     ce8:	5e 83       	std	Y+6, r21	; 0x06
     cea:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState=OK;
     cec:	19 82       	std	Y+1, r1	; 0x01
	if(ADC_u8BusyState==IDLE){
     cee:	80 91 ec 00 	lds	r24, 0x00EC
     cf2:	88 23       	and	r24, r24
     cf4:	d1 f5       	brne	.+116    	; 0xd6a <ADC_u8StartConversionAsynch+0x96>
		ADC_u8BusyState=BUSY;
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	80 93 ec 00 	sts	0x00EC, r24
		if(Copy_pu16Reading==NULL||Copy_pvNotificationFunc==NULL){
     cfc:	8b 81       	ldd	r24, Y+3	; 0x03
     cfe:	9c 81       	ldd	r25, Y+4	; 0x04
     d00:	00 97       	sbiw	r24, 0x00	; 0
     d02:	21 f0       	breq	.+8      	; 0xd0c <ADC_u8StartConversionAsynch+0x38>
     d04:	8d 81       	ldd	r24, Y+5	; 0x05
     d06:	9e 81       	ldd	r25, Y+6	; 0x06
     d08:	00 97       	sbiw	r24, 0x00	; 0
     d0a:	19 f4       	brne	.+6      	; 0xd12 <ADC_u8StartConversionAsynch+0x3e>
			Local_u8ErrorState=NULL_POINTER;
     d0c:	82 e0       	ldi	r24, 0x02	; 2
     d0e:	89 83       	std	Y+1, r24	; 0x01
     d10:	2e c0       	rjmp	.+92     	; 0xd6e <ADC_u8StartConversionAsynch+0x9a>
		}
		else{
			ADC_u8ConversionMode=SINGLE;
     d12:	10 92 f0 00 	sts	0x00F0, r1
			//put the local variables into global so they can be used in the ISR
			ADC_pu16Reading=Copy_pu16Reading;
     d16:	8b 81       	ldd	r24, Y+3	; 0x03
     d18:	9c 81       	ldd	r25, Y+4	; 0x04
     d1a:	90 93 e9 00 	sts	0x00E9, r25
     d1e:	80 93 e8 00 	sts	0x00E8, r24
			ADC_pvCallBackNotificationFunc=Copy_pvNotificationFunc;
     d22:	8d 81       	ldd	r24, Y+5	; 0x05
     d24:	9e 81       	ldd	r25, Y+6	; 0x06
     d26:	90 93 eb 00 	sts	0x00EB, r25
     d2a:	80 93 ea 00 	sts	0x00EA, r24
			//adjusting the channel using bit masking
			ADMUX&=CHANNEL_MUX_MASK;
     d2e:	a7 e2       	ldi	r26, 0x27	; 39
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	e7 e2       	ldi	r30, 0x27	; 39
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	80 81       	ld	r24, Z
     d38:	80 7e       	andi	r24, 0xE0	; 224
     d3a:	8c 93       	st	X, r24
			ADMUX|=Copy_u8Channel;
     d3c:	a7 e2       	ldi	r26, 0x27	; 39
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	e7 e2       	ldi	r30, 0x27	; 39
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	90 81       	ld	r25, Z
     d46:	8a 81       	ldd	r24, Y+2	; 0x02
     d48:	89 2b       	or	r24, r25
     d4a:	8c 93       	st	X, r24
			//start conversion
			SET_BIT(ADCSRA,ADCSRA_ADSC);
     d4c:	a6 e2       	ldi	r26, 0x26	; 38
     d4e:	b0 e0       	ldi	r27, 0x00	; 0
     d50:	e6 e2       	ldi	r30, 0x26	; 38
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	80 81       	ld	r24, Z
     d56:	80 64       	ori	r24, 0x40	; 64
     d58:	8c 93       	st	X, r24
			//Interrupt enable user enables global interrupt
			SET_BIT(ADCSRA,ADCSRA_ADIE);
     d5a:	a6 e2       	ldi	r26, 0x26	; 38
     d5c:	b0 e0       	ldi	r27, 0x00	; 0
     d5e:	e6 e2       	ldi	r30, 0x26	; 38
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	80 81       	ld	r24, Z
     d64:	88 60       	ori	r24, 0x08	; 8
     d66:	8c 93       	st	X, r24
     d68:	02 c0       	rjmp	.+4      	; 0xd6e <ADC_u8StartConversionAsynch+0x9a>
		}
	}
	else{
		Local_u8ErrorState=BUSY_FUNC;
     d6a:	83 e0       	ldi	r24, 0x03	; 3
     d6c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
     d6e:	89 81       	ldd	r24, Y+1	; 0x01
}
     d70:	26 96       	adiw	r28, 0x06	; 6
     d72:	0f b6       	in	r0, 0x3f	; 63
     d74:	f8 94       	cli
     d76:	de bf       	out	0x3e, r29	; 62
     d78:	0f be       	out	0x3f, r0	; 63
     d7a:	cd bf       	out	0x3d, r28	; 61
     d7c:	cf 91       	pop	r28
     d7e:	df 91       	pop	r29
     d80:	08 95       	ret

00000d82 <ADC_u8StartChainConversion>:

u8 ADC_u8StartChainConversion(Chain_t* Copy_psADCChain){
     d82:	df 93       	push	r29
     d84:	cf 93       	push	r28
     d86:	00 d0       	rcall	.+0      	; 0xd88 <ADC_u8StartChainConversion+0x6>
     d88:	0f 92       	push	r0
     d8a:	cd b7       	in	r28, 0x3d	; 61
     d8c:	de b7       	in	r29, 0x3e	; 62
     d8e:	9b 83       	std	Y+3, r25	; 0x03
     d90:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
     d92:	19 82       	std	Y+1, r1	; 0x01
	if(ADC_u8BusyState==IDLE){
     d94:	80 91 ec 00 	lds	r24, 0x00EC
     d98:	88 23       	and	r24, r24
     d9a:	09 f0       	breq	.+2      	; 0xd9e <ADC_u8StartChainConversion+0x1c>
     d9c:	3e c0       	rjmp	.+124    	; 0xe1a <ADC_u8StartChainConversion+0x98>
		if(Copy_psADCChain==NULL){
     d9e:	8a 81       	ldd	r24, Y+2	; 0x02
     da0:	9b 81       	ldd	r25, Y+3	; 0x03
     da2:	00 97       	sbiw	r24, 0x00	; 0
     da4:	19 f4       	brne	.+6      	; 0xdac <ADC_u8StartChainConversion+0x2a>
			Local_u8ErrorState=NULL_POINTER;
     da6:	82 e0       	ldi	r24, 0x02	; 2
     da8:	89 83       	std	Y+1, r24	; 0x01
     daa:	39 c0       	rjmp	.+114    	; 0xe1e <ADC_u8StartChainConversion+0x9c>
		}
		else{
			//make ADC busy
			ADC_u8BusyState=BUSY;
     dac:	81 e0       	ldi	r24, 0x01	; 1
     dae:	80 93 ec 00 	sts	0x00EC, r24
			//make Conversion Mode Chain Conversion
			ADC_u8ConversionMode=CHAIN;
     db2:	81 e0       	ldi	r24, 0x01	; 1
     db4:	80 93 f0 00 	sts	0x00F0, r24
			//put the local variables into global so they can be used in the ISR
			ADC_psChain=Copy_psADCChain;
     db8:	8a 81       	ldd	r24, Y+2	; 0x02
     dba:	9b 81       	ldd	r25, Y+3	; 0x03
     dbc:	90 93 ee 00 	sts	0x00EE, r25
     dc0:	80 93 ed 00 	sts	0x00ED, r24
			//adjusting the channel using bit masking
			ADC_u8ChainIndex=0;
     dc4:	10 92 ef 00 	sts	0x00EF, r1
			ADMUX&=CHANNEL_MUX_MASK;
     dc8:	a7 e2       	ldi	r26, 0x27	; 39
     dca:	b0 e0       	ldi	r27, 0x00	; 0
     dcc:	e7 e2       	ldi	r30, 0x27	; 39
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	80 81       	ld	r24, Z
     dd2:	80 7e       	andi	r24, 0xE0	; 224
     dd4:	8c 93       	st	X, r24
			ADMUX|=Copy_psADCChain->ChannelArr[ADC_u8ChainIndex];
     dd6:	a7 e2       	ldi	r26, 0x27	; 39
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	e7 e2       	ldi	r30, 0x27	; 39
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	40 81       	ld	r20, Z
     de0:	ea 81       	ldd	r30, Y+2	; 0x02
     de2:	fb 81       	ldd	r31, Y+3	; 0x03
     de4:	20 81       	ld	r18, Z
     de6:	31 81       	ldd	r19, Z+1	; 0x01
     de8:	80 91 ef 00 	lds	r24, 0x00EF
     dec:	88 2f       	mov	r24, r24
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	f9 01       	movw	r30, r18
     df2:	e8 0f       	add	r30, r24
     df4:	f9 1f       	adc	r31, r25
     df6:	80 81       	ld	r24, Z
     df8:	84 2b       	or	r24, r20
     dfa:	8c 93       	st	X, r24
			//start conversion
			SET_BIT(ADCSRA,ADCSRA_ADSC);
     dfc:	a6 e2       	ldi	r26, 0x26	; 38
     dfe:	b0 e0       	ldi	r27, 0x00	; 0
     e00:	e6 e2       	ldi	r30, 0x26	; 38
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	80 64       	ori	r24, 0x40	; 64
     e08:	8c 93       	st	X, r24
			//Interrupt enable user enables global interrupt
			SET_BIT(ADCSRA,ADCSRA_ADIE);
     e0a:	a6 e2       	ldi	r26, 0x26	; 38
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e6 e2       	ldi	r30, 0x26	; 38
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	88 60       	ori	r24, 0x08	; 8
     e16:	8c 93       	st	X, r24
     e18:	02 c0       	rjmp	.+4      	; 0xe1e <ADC_u8StartChainConversion+0x9c>
		}
	}
	else{
		Local_u8ErrorState=BUSY_FUNC;
     e1a:	83 e0       	ldi	r24, 0x03	; 3
     e1c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
     e1e:	89 81       	ldd	r24, Y+1	; 0x01
}
     e20:	0f 90       	pop	r0
     e22:	0f 90       	pop	r0
     e24:	0f 90       	pop	r0
     e26:	cf 91       	pop	r28
     e28:	df 91       	pop	r29
     e2a:	08 95       	ret

00000e2c <__vector_16>:

void __vector_16(void)   __attribute__((signal));
void __vector_16(void){
     e2c:	1f 92       	push	r1
     e2e:	0f 92       	push	r0
     e30:	0f b6       	in	r0, 0x3f	; 63
     e32:	0f 92       	push	r0
     e34:	11 24       	eor	r1, r1
     e36:	2f 93       	push	r18
     e38:	3f 93       	push	r19
     e3a:	4f 93       	push	r20
     e3c:	5f 93       	push	r21
     e3e:	6f 93       	push	r22
     e40:	7f 93       	push	r23
     e42:	8f 93       	push	r24
     e44:	9f 93       	push	r25
     e46:	af 93       	push	r26
     e48:	bf 93       	push	r27
     e4a:	ef 93       	push	r30
     e4c:	ff 93       	push	r31
     e4e:	df 93       	push	r29
     e50:	cf 93       	push	r28
     e52:	cd b7       	in	r28, 0x3d	; 61
     e54:	de b7       	in	r29, 0x3e	; 62
	if(ADC_u8ConversionMode==SINGLE){
     e56:	80 91 f0 00 	lds	r24, 0x00F0
     e5a:	88 23       	and	r24, r24
     e5c:	d1 f4       	brne	.+52     	; 0xe92 <__vector_16+0x66>
		//read result
#if ADC_RESOLUTION == 8
		*ADC_pu16Reading= ADCH;
     e5e:	a0 91 e8 00 	lds	r26, 0x00E8
     e62:	b0 91 e9 00 	lds	r27, 0x00E9
     e66:	e5 e2       	ldi	r30, 0x25	; 37
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	88 2f       	mov	r24, r24
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	8d 93       	st	X+, r24
     e72:	9c 93       	st	X, r25
		*ADC_pu16Reading = ADC;
#else
#error "Wrong ADJUST OPTION"
#endif
		//make the adc idle to work again
		ADC_u8BusyState=IDLE;
     e74:	10 92 ec 00 	sts	0x00EC, r1
		//call the notification function
		ADC_pvCallBackNotificationFunc();
     e78:	e0 91 ea 00 	lds	r30, 0x00EA
     e7c:	f0 91 eb 00 	lds	r31, 0x00EB
     e80:	09 95       	icall
		//disable interrupt
		CLR_BIT(ADCSRA,ADCSRA_ADIE);
     e82:	a6 e2       	ldi	r26, 0x26	; 38
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	e6 e2       	ldi	r30, 0x26	; 38
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	87 7f       	andi	r24, 0xF7	; 247
     e8e:	8c 93       	st	X, r24
     e90:	5f c0       	rjmp	.+190    	; 0xf50 <__vector_16+0x124>
	}
	else if(ADC_u8ConversionMode==CHAIN){
     e92:	80 91 f0 00 	lds	r24, 0x00F0
     e96:	81 30       	cpi	r24, 0x01	; 1
     e98:	09 f0       	breq	.+2      	; 0xe9c <__vector_16+0x70>
     e9a:	5a c0       	rjmp	.+180    	; 0xf50 <__vector_16+0x124>
#if ADC_RESOLUTION == 8
			ADC_psChain->ResultArr[ADC_u8ChainIndex]= ADCH;
     e9c:	e0 91 ed 00 	lds	r30, 0x00ED
     ea0:	f0 91 ee 00 	lds	r31, 0x00EE
     ea4:	22 81       	ldd	r18, Z+2	; 0x02
     ea6:	33 81       	ldd	r19, Z+3	; 0x03
     ea8:	80 91 ef 00 	lds	r24, 0x00EF
     eac:	88 2f       	mov	r24, r24
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	88 0f       	add	r24, r24
     eb2:	99 1f       	adc	r25, r25
     eb4:	d9 01       	movw	r26, r18
     eb6:	a8 0f       	add	r26, r24
     eb8:	b9 1f       	adc	r27, r25
     eba:	e5 e2       	ldi	r30, 0x25	; 37
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	88 2f       	mov	r24, r24
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	11 96       	adiw	r26, 0x01	; 1
     ec6:	9c 93       	st	X, r25
     ec8:	8e 93       	st	-X, r24
			ADC_psChain->ResultArr[ADC_u8ChainIndex] = ADC;
#else
#error "WRONG RESOLUTION OPTION"
#endif
		//increment index
		ADC_u8ChainIndex++;
     eca:	80 91 ef 00 	lds	r24, 0x00EF
     ece:	8f 5f       	subi	r24, 0xFF	; 255
     ed0:	80 93 ef 00 	sts	0x00EF, r24
		
		if(ADC_u8ChainIndex==ADC_psChain->Size){
     ed4:	e0 91 ed 00 	lds	r30, 0x00ED
     ed8:	f0 91 ee 00 	lds	r31, 0x00EE
     edc:	94 81       	ldd	r25, Z+4	; 0x04
     ede:	80 91 ef 00 	lds	r24, 0x00EF
     ee2:	98 17       	cp	r25, r24
     ee4:	91 f4       	brne	.+36     	; 0xf0a <__vector_16+0xde>
			ADC_psChain->NotiFunc();
     ee6:	e0 91 ed 00 	lds	r30, 0x00ED
     eea:	f0 91 ee 00 	lds	r31, 0x00EE
     eee:	05 80       	ldd	r0, Z+5	; 0x05
     ef0:	f6 81       	ldd	r31, Z+6	; 0x06
     ef2:	e0 2d       	mov	r30, r0
     ef4:	09 95       	icall
			//disable interrupt
			CLR_BIT(ADCSRA,ADCSRA_ADIE);
     ef6:	a6 e2       	ldi	r26, 0x26	; 38
     ef8:	b0 e0       	ldi	r27, 0x00	; 0
     efa:	e6 e2       	ldi	r30, 0x26	; 38
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
     f00:	87 7f       	andi	r24, 0xF7	; 247
     f02:	8c 93       	st	X, r24
			//make the adc idle to work again
			ADC_u8BusyState=IDLE;
     f04:	10 92 ec 00 	sts	0x00EC, r1
     f08:	23 c0       	rjmp	.+70     	; 0xf50 <__vector_16+0x124>
		}
		else{
			//store the result

			//set new channel and start next conversion
			ADMUX&=CHANNEL_MUX_MASK;
     f0a:	a7 e2       	ldi	r26, 0x27	; 39
     f0c:	b0 e0       	ldi	r27, 0x00	; 0
     f0e:	e7 e2       	ldi	r30, 0x27	; 39
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	80 81       	ld	r24, Z
     f14:	80 7e       	andi	r24, 0xE0	; 224
     f16:	8c 93       	st	X, r24
			ADMUX|=ADC_psChain->ChannelArr[ADC_u8ChainIndex];
     f18:	a7 e2       	ldi	r26, 0x27	; 39
     f1a:	b0 e0       	ldi	r27, 0x00	; 0
     f1c:	e7 e2       	ldi	r30, 0x27	; 39
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	40 81       	ld	r20, Z
     f22:	e0 91 ed 00 	lds	r30, 0x00ED
     f26:	f0 91 ee 00 	lds	r31, 0x00EE
     f2a:	20 81       	ld	r18, Z
     f2c:	31 81       	ldd	r19, Z+1	; 0x01
     f2e:	80 91 ef 00 	lds	r24, 0x00EF
     f32:	88 2f       	mov	r24, r24
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	f9 01       	movw	r30, r18
     f38:	e8 0f       	add	r30, r24
     f3a:	f9 1f       	adc	r31, r25
     f3c:	80 81       	ld	r24, Z
     f3e:	84 2b       	or	r24, r20
     f40:	8c 93       	st	X, r24
			SET_BIT(ADCSRA,ADCSRA_ADSC);
     f42:	a6 e2       	ldi	r26, 0x26	; 38
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	e6 e2       	ldi	r30, 0x26	; 38
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	80 64       	ori	r24, 0x40	; 64
     f4e:	8c 93       	st	X, r24

		}
	}
}
     f50:	cf 91       	pop	r28
     f52:	df 91       	pop	r29
     f54:	ff 91       	pop	r31
     f56:	ef 91       	pop	r30
     f58:	bf 91       	pop	r27
     f5a:	af 91       	pop	r26
     f5c:	9f 91       	pop	r25
     f5e:	8f 91       	pop	r24
     f60:	7f 91       	pop	r23
     f62:	6f 91       	pop	r22
     f64:	5f 91       	pop	r21
     f66:	4f 91       	pop	r20
     f68:	3f 91       	pop	r19
     f6a:	2f 91       	pop	r18
     f6c:	0f 90       	pop	r0
     f6e:	0f be       	out	0x3f, r0	; 63
     f70:	0f 90       	pop	r0
     f72:	1f 90       	pop	r1
     f74:	18 95       	reti

00000f76 <APP_voidShowStartMenu>:

#include "APP_interface.h"

extern Chain_t ADCChain1;

void APP_voidShowStartMenu(){
     f76:	df 93       	push	r29
     f78:	cf 93       	push	r28
     f7a:	cd b7       	in	r28, 0x3d	; 61
     f7c:	de b7       	in	r29, 0x3e	; 62
     f7e:	2e 97       	sbiw	r28, 0x0e	; 14
     f80:	0f b6       	in	r0, 0x3f	; 63
     f82:	f8 94       	cli
     f84:	de bf       	out	0x3e, r29	; 62
     f86:	0f be       	out	0x3f, r0	; 63
     f88:	cd bf       	out	0x3d, r28	; 61
	CLCD_voidCLR();
     f8a:	0e 94 76 0f 	call	0x1eec	; 0x1eec <CLCD_voidCLR>
	CLCD_voidGoToXY(0,4);
     f8e:	80 e0       	ldi	r24, 0x00	; 0
     f90:	64 e0       	ldi	r22, 0x04	; 4
     f92:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <CLCD_voidGoToXY>
	CLCD_voidSendString("WELCOME");
     f96:	80 e6       	ldi	r24, 0x60	; 96
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <CLCD_voidSendString>
     f9e:	80 e0       	ldi	r24, 0x00	; 0
     fa0:	90 e8       	ldi	r25, 0x80	; 128
     fa2:	ab e3       	ldi	r26, 0x3B	; 59
     fa4:	b5 e4       	ldi	r27, 0x45	; 69
     fa6:	8b 87       	std	Y+11, r24	; 0x0b
     fa8:	9c 87       	std	Y+12, r25	; 0x0c
     faa:	ad 87       	std	Y+13, r26	; 0x0d
     fac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fae:	6b 85       	ldd	r22, Y+11	; 0x0b
     fb0:	7c 85       	ldd	r23, Y+12	; 0x0c
     fb2:	8d 85       	ldd	r24, Y+13	; 0x0d
     fb4:	9e 85       	ldd	r25, Y+14	; 0x0e
     fb6:	20 e0       	ldi	r18, 0x00	; 0
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	4a ef       	ldi	r20, 0xFA	; 250
     fbc:	54 e4       	ldi	r21, 0x44	; 68
     fbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fc2:	dc 01       	movw	r26, r24
     fc4:	cb 01       	movw	r24, r22
     fc6:	8f 83       	std	Y+7, r24	; 0x07
     fc8:	98 87       	std	Y+8, r25	; 0x08
     fca:	a9 87       	std	Y+9, r26	; 0x09
     fcc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fce:	6f 81       	ldd	r22, Y+7	; 0x07
     fd0:	78 85       	ldd	r23, Y+8	; 0x08
     fd2:	89 85       	ldd	r24, Y+9	; 0x09
     fd4:	9a 85       	ldd	r25, Y+10	; 0x0a
     fd6:	20 e0       	ldi	r18, 0x00	; 0
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	40 e8       	ldi	r20, 0x80	; 128
     fdc:	5f e3       	ldi	r21, 0x3F	; 63
     fde:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fe2:	88 23       	and	r24, r24
     fe4:	2c f4       	brge	.+10     	; 0xff0 <APP_voidShowStartMenu+0x7a>
		__ticks = 1;
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	9e 83       	std	Y+6, r25	; 0x06
     fec:	8d 83       	std	Y+5, r24	; 0x05
     fee:	3f c0       	rjmp	.+126    	; 0x106e <APP_voidShowStartMenu+0xf8>
	else if (__tmp > 65535)
     ff0:	6f 81       	ldd	r22, Y+7	; 0x07
     ff2:	78 85       	ldd	r23, Y+8	; 0x08
     ff4:	89 85       	ldd	r24, Y+9	; 0x09
     ff6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ff8:	20 e0       	ldi	r18, 0x00	; 0
     ffa:	3f ef       	ldi	r19, 0xFF	; 255
     ffc:	4f e7       	ldi	r20, 0x7F	; 127
     ffe:	57 e4       	ldi	r21, 0x47	; 71
    1000:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1004:	18 16       	cp	r1, r24
    1006:	4c f5       	brge	.+82     	; 0x105a <APP_voidShowStartMenu+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1008:	6b 85       	ldd	r22, Y+11	; 0x0b
    100a:	7c 85       	ldd	r23, Y+12	; 0x0c
    100c:	8d 85       	ldd	r24, Y+13	; 0x0d
    100e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1010:	20 e0       	ldi	r18, 0x00	; 0
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	40 e2       	ldi	r20, 0x20	; 32
    1016:	51 e4       	ldi	r21, 0x41	; 65
    1018:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    101c:	dc 01       	movw	r26, r24
    101e:	cb 01       	movw	r24, r22
    1020:	bc 01       	movw	r22, r24
    1022:	cd 01       	movw	r24, r26
    1024:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1028:	dc 01       	movw	r26, r24
    102a:	cb 01       	movw	r24, r22
    102c:	9e 83       	std	Y+6, r25	; 0x06
    102e:	8d 83       	std	Y+5, r24	; 0x05
    1030:	0f c0       	rjmp	.+30     	; 0x1050 <APP_voidShowStartMenu+0xda>
    1032:	88 ec       	ldi	r24, 0xC8	; 200
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	9c 83       	std	Y+4, r25	; 0x04
    1038:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    103a:	8b 81       	ldd	r24, Y+3	; 0x03
    103c:	9c 81       	ldd	r25, Y+4	; 0x04
    103e:	01 97       	sbiw	r24, 0x01	; 1
    1040:	f1 f7       	brne	.-4      	; 0x103e <APP_voidShowStartMenu+0xc8>
    1042:	9c 83       	std	Y+4, r25	; 0x04
    1044:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1046:	8d 81       	ldd	r24, Y+5	; 0x05
    1048:	9e 81       	ldd	r25, Y+6	; 0x06
    104a:	01 97       	sbiw	r24, 0x01	; 1
    104c:	9e 83       	std	Y+6, r25	; 0x06
    104e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1050:	8d 81       	ldd	r24, Y+5	; 0x05
    1052:	9e 81       	ldd	r25, Y+6	; 0x06
    1054:	00 97       	sbiw	r24, 0x00	; 0
    1056:	69 f7       	brne	.-38     	; 0x1032 <APP_voidShowStartMenu+0xbc>
    1058:	14 c0       	rjmp	.+40     	; 0x1082 <APP_voidShowStartMenu+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    105a:	6f 81       	ldd	r22, Y+7	; 0x07
    105c:	78 85       	ldd	r23, Y+8	; 0x08
    105e:	89 85       	ldd	r24, Y+9	; 0x09
    1060:	9a 85       	ldd	r25, Y+10	; 0x0a
    1062:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1066:	dc 01       	movw	r26, r24
    1068:	cb 01       	movw	r24, r22
    106a:	9e 83       	std	Y+6, r25	; 0x06
    106c:	8d 83       	std	Y+5, r24	; 0x05
    106e:	8d 81       	ldd	r24, Y+5	; 0x05
    1070:	9e 81       	ldd	r25, Y+6	; 0x06
    1072:	9a 83       	std	Y+2, r25	; 0x02
    1074:	89 83       	std	Y+1, r24	; 0x01
    1076:	89 81       	ldd	r24, Y+1	; 0x01
    1078:	9a 81       	ldd	r25, Y+2	; 0x02
    107a:	01 97       	sbiw	r24, 0x01	; 1
    107c:	f1 f7       	brne	.-4      	; 0x107a <APP_voidShowStartMenu+0x104>
    107e:	9a 83       	std	Y+2, r25	; 0x02
    1080:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3000);
}
    1082:	2e 96       	adiw	r28, 0x0e	; 14
    1084:	0f b6       	in	r0, 0x3f	; 63
    1086:	f8 94       	cli
    1088:	de bf       	out	0x3e, r29	; 62
    108a:	0f be       	out	0x3f, r0	; 63
    108c:	cd bf       	out	0x3d, r28	; 61
    108e:	cf 91       	pop	r28
    1090:	df 91       	pop	r29
    1092:	08 95       	ret

00001094 <APP_voidGetID>:

void APP_voidGetID(u8 *Copy_pu8IDArr){
    1094:	df 93       	push	r29
    1096:	cf 93       	push	r28
    1098:	00 d0       	rcall	.+0      	; 0x109a <APP_voidGetID+0x6>
    109a:	00 d0       	rcall	.+0      	; 0x109c <APP_voidGetID+0x8>
    109c:	cd b7       	in	r28, 0x3d	; 61
    109e:	de b7       	in	r29, 0x3e	; 62
    10a0:	9c 83       	std	Y+4, r25	; 0x04
    10a2:	8b 83       	std	Y+3, r24	; 0x03
	if(Copy_pu8IDArr!=NULL){
    10a4:	8b 81       	ldd	r24, Y+3	; 0x03
    10a6:	9c 81       	ldd	r25, Y+4	; 0x04
    10a8:	00 97       	sbiw	r24, 0x00	; 0
    10aa:	39 f1       	breq	.+78     	; 0x10fa <APP_voidGetID+0x66>
		u8 Local_u8PressedKey;
		CLCD_voidCLR();
    10ac:	0e 94 76 0f 	call	0x1eec	; 0x1eec <CLCD_voidCLR>
		CLCD_voidSendString("Enter ID:");
    10b0:	88 e6       	ldi	r24, 0x68	; 104
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <CLCD_voidSendString>
		for(u8 Local_u8Iterator=0;Local_u8Iterator<4;Local_u8Iterator++){
    10b8:	19 82       	std	Y+1, r1	; 0x01
    10ba:	1c c0       	rjmp	.+56     	; 0x10f4 <APP_voidGetID+0x60>
			do{
				Local_u8PressedKey=KPD_u8GetPressedKey();
    10bc:	0e 94 13 12 	call	0x2426	; 0x2426 <KPD_u8GetPressedKey>
    10c0:	8a 83       	std	Y+2, r24	; 0x02
			}while(Local_u8PressedKey==0xff);
    10c2:	8a 81       	ldd	r24, Y+2	; 0x02
    10c4:	8f 3f       	cpi	r24, 0xFF	; 255
    10c6:	d1 f3       	breq	.-12     	; 0x10bc <APP_voidGetID+0x28>
			CLCD_voidSendNumber(Local_u8PressedKey);
    10c8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ca:	88 2f       	mov	r24, r24
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	a0 e0       	ldi	r26, 0x00	; 0
    10d0:	b0 e0       	ldi	r27, 0x00	; 0
    10d2:	bc 01       	movw	r22, r24
    10d4:	cd 01       	movw	r24, r26
    10d6:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <CLCD_voidSendNumber>
			Copy_pu8IDArr[Local_u8Iterator]=Local_u8PressedKey;
    10da:	89 81       	ldd	r24, Y+1	; 0x01
    10dc:	28 2f       	mov	r18, r24
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	8b 81       	ldd	r24, Y+3	; 0x03
    10e2:	9c 81       	ldd	r25, Y+4	; 0x04
    10e4:	fc 01       	movw	r30, r24
    10e6:	e2 0f       	add	r30, r18
    10e8:	f3 1f       	adc	r31, r19
    10ea:	8a 81       	ldd	r24, Y+2	; 0x02
    10ec:	80 83       	st	Z, r24
void APP_voidGetID(u8 *Copy_pu8IDArr){
	if(Copy_pu8IDArr!=NULL){
		u8 Local_u8PressedKey;
		CLCD_voidCLR();
		CLCD_voidSendString("Enter ID:");
		for(u8 Local_u8Iterator=0;Local_u8Iterator<4;Local_u8Iterator++){
    10ee:	89 81       	ldd	r24, Y+1	; 0x01
    10f0:	8f 5f       	subi	r24, 0xFF	; 255
    10f2:	89 83       	std	Y+1, r24	; 0x01
    10f4:	89 81       	ldd	r24, Y+1	; 0x01
    10f6:	84 30       	cpi	r24, 0x04	; 4
    10f8:	08 f3       	brcs	.-62     	; 0x10bc <APP_voidGetID+0x28>
			}while(Local_u8PressedKey==0xff);
			CLCD_voidSendNumber(Local_u8PressedKey);
			Copy_pu8IDArr[Local_u8Iterator]=Local_u8PressedKey;
		}
	}
}
    10fa:	0f 90       	pop	r0
    10fc:	0f 90       	pop	r0
    10fe:	0f 90       	pop	r0
    1100:	0f 90       	pop	r0
    1102:	cf 91       	pop	r28
    1104:	df 91       	pop	r29
    1106:	08 95       	ret

00001108 <APP_voidGetPassword>:
void APP_voidGetPassword(u8* Copy_pu8PassArr){
    1108:	df 93       	push	r29
    110a:	cf 93       	push	r28
    110c:	00 d0       	rcall	.+0      	; 0x110e <APP_voidGetPassword+0x6>
    110e:	00 d0       	rcall	.+0      	; 0x1110 <APP_voidGetPassword+0x8>
    1110:	cd b7       	in	r28, 0x3d	; 61
    1112:	de b7       	in	r29, 0x3e	; 62
    1114:	9c 83       	std	Y+4, r25	; 0x04
    1116:	8b 83       	std	Y+3, r24	; 0x03
	if(Copy_pu8PassArr!=NULL){
    1118:	8b 81       	ldd	r24, Y+3	; 0x03
    111a:	9c 81       	ldd	r25, Y+4	; 0x04
    111c:	00 97       	sbiw	r24, 0x00	; 0
    111e:	59 f1       	breq	.+86     	; 0x1176 <APP_voidGetPassword+0x6e>
		u8 Local_u8PressedKey;
		CLCD_voidCLR();
    1120:	0e 94 76 0f 	call	0x1eec	; 0x1eec <CLCD_voidCLR>
		CLCD_voidSendString("Enter Password:");
    1124:	82 e7       	ldi	r24, 0x72	; 114
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <CLCD_voidSendString>
		CLCD_voidGoToXY(1,0);
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	60 e0       	ldi	r22, 0x00	; 0
    1130:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <CLCD_voidGoToXY>
		for(u8 Local_u8Iterator=0;Local_u8Iterator<4;Local_u8Iterator++){
    1134:	19 82       	std	Y+1, r1	; 0x01
    1136:	1c c0       	rjmp	.+56     	; 0x1170 <APP_voidGetPassword+0x68>
			do{
				Local_u8PressedKey=KPD_u8GetPressedKey();
    1138:	0e 94 13 12 	call	0x2426	; 0x2426 <KPD_u8GetPressedKey>
    113c:	8a 83       	std	Y+2, r24	; 0x02
			}while(Local_u8PressedKey==0xff);
    113e:	8a 81       	ldd	r24, Y+2	; 0x02
    1140:	8f 3f       	cpi	r24, 0xFF	; 255
    1142:	d1 f3       	breq	.-12     	; 0x1138 <APP_voidGetPassword+0x30>
			CLCD_voidSendNumber(Local_u8PressedKey);
    1144:	8a 81       	ldd	r24, Y+2	; 0x02
    1146:	88 2f       	mov	r24, r24
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	a0 e0       	ldi	r26, 0x00	; 0
    114c:	b0 e0       	ldi	r27, 0x00	; 0
    114e:	bc 01       	movw	r22, r24
    1150:	cd 01       	movw	r24, r26
    1152:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <CLCD_voidSendNumber>
			Copy_pu8PassArr[Local_u8Iterator]=Local_u8PressedKey;
    1156:	89 81       	ldd	r24, Y+1	; 0x01
    1158:	28 2f       	mov	r18, r24
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	8b 81       	ldd	r24, Y+3	; 0x03
    115e:	9c 81       	ldd	r25, Y+4	; 0x04
    1160:	fc 01       	movw	r30, r24
    1162:	e2 0f       	add	r30, r18
    1164:	f3 1f       	adc	r31, r19
    1166:	8a 81       	ldd	r24, Y+2	; 0x02
    1168:	80 83       	st	Z, r24
	if(Copy_pu8PassArr!=NULL){
		u8 Local_u8PressedKey;
		CLCD_voidCLR();
		CLCD_voidSendString("Enter Password:");
		CLCD_voidGoToXY(1,0);
		for(u8 Local_u8Iterator=0;Local_u8Iterator<4;Local_u8Iterator++){
    116a:	89 81       	ldd	r24, Y+1	; 0x01
    116c:	8f 5f       	subi	r24, 0xFF	; 255
    116e:	89 83       	std	Y+1, r24	; 0x01
    1170:	89 81       	ldd	r24, Y+1	; 0x01
    1172:	84 30       	cpi	r24, 0x04	; 4
    1174:	08 f3       	brcs	.-62     	; 0x1138 <APP_voidGetPassword+0x30>
			}while(Local_u8PressedKey==0xff);
			CLCD_voidSendNumber(Local_u8PressedKey);
			Copy_pu8PassArr[Local_u8Iterator]=Local_u8PressedKey;
		}
	}
}
    1176:	0f 90       	pop	r0
    1178:	0f 90       	pop	r0
    117a:	0f 90       	pop	r0
    117c:	0f 90       	pop	r0
    117e:	cf 91       	pop	r28
    1180:	df 91       	pop	r29
    1182:	08 95       	ret

00001184 <APP_voidCheckPassword>:
u8 APP_voidCheckPassword(const SSD_t* Copy_psSSD,const u8* Copy_pu8IDArr,u8* Copy_pu8PassArr){
    1184:	df 93       	push	r29
    1186:	cf 93       	push	r28
    1188:	cd b7       	in	r28, 0x3d	; 61
    118a:	de b7       	in	r29, 0x3e	; 62
    118c:	e5 97       	sbiw	r28, 0x35	; 53
    118e:	0f b6       	in	r0, 0x3f	; 63
    1190:	f8 94       	cli
    1192:	de bf       	out	0x3e, r29	; 62
    1194:	0f be       	out	0x3f, r0	; 63
    1196:	cd bf       	out	0x3d, r28	; 61
    1198:	98 ab       	std	Y+48, r25	; 0x30
    119a:	8f a7       	std	Y+47, r24	; 0x2f
    119c:	7a ab       	std	Y+50, r23	; 0x32
    119e:	69 ab       	std	Y+49, r22	; 0x31
    11a0:	5c ab       	std	Y+52, r21	; 0x34
    11a2:	4b ab       	std	Y+51, r20	; 0x33
	u8 Local_u8ErrorState=OK;
    11a4:	1e a6       	std	Y+46, r1	; 0x2e
	if(Copy_pu8IDArr!=NULL && Copy_psSSD!=NULL && Copy_pu8PassArr!=NULL){
    11a6:	89 a9       	ldd	r24, Y+49	; 0x31
    11a8:	9a a9       	ldd	r25, Y+50	; 0x32
    11aa:	00 97       	sbiw	r24, 0x00	; 0
    11ac:	09 f4       	brne	.+2      	; 0x11b0 <APP_voidCheckPassword+0x2c>
    11ae:	01 c2       	rjmp	.+1026   	; 0x15b2 <APP_voidCheckPassword+0x42e>
    11b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    11b2:	98 a9       	ldd	r25, Y+48	; 0x30
    11b4:	00 97       	sbiw	r24, 0x00	; 0
    11b6:	09 f4       	brne	.+2      	; 0x11ba <APP_voidCheckPassword+0x36>
    11b8:	fc c1       	rjmp	.+1016   	; 0x15b2 <APP_voidCheckPassword+0x42e>
    11ba:	8b a9       	ldd	r24, Y+51	; 0x33
    11bc:	9c a9       	ldd	r25, Y+52	; 0x34
    11be:	00 97       	sbiw	r24, 0x00	; 0
    11c0:	09 f4       	brne	.+2      	; 0x11c4 <APP_voidCheckPassword+0x40>
    11c2:	f7 c1       	rjmp	.+1006   	; 0x15b2 <APP_voidCheckPassword+0x42e>
		SSD_u8Enable(Copy_psSSD);
    11c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    11c6:	98 a9       	ldd	r25, Y+48	; 0x30
    11c8:	0e 94 c4 13 	call	0x2788	; 0x2788 <SSD_u8Enable>
		SSD_u8SetNumber(3,Copy_psSSD);
    11cc:	2f a5       	ldd	r18, Y+47	; 0x2f
    11ce:	38 a9       	ldd	r19, Y+48	; 0x30
    11d0:	83 e0       	ldi	r24, 0x03	; 3
    11d2:	b9 01       	movw	r22, r18
    11d4:	0e 94 80 13 	call	0x2700	; 0x2700 <SSD_u8SetNumber>
		for(u8 Local_u8Iterator=1;Local_u8Iterator<4;Local_u8Iterator++){
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	8d a7       	std	Y+45, r24	; 0x2d
    11dc:	51 c1       	rjmp	.+674    	; 0x1480 <APP_voidCheckPassword+0x2fc>
			if(Copy_pu8PassArr[3]!=Copy_pu8IDArr[0]||Copy_pu8PassArr[2]!=Copy_pu8IDArr[1]||Copy_pu8PassArr[1]!=Copy_pu8IDArr[2]||Copy_pu8PassArr[0]!=Copy_pu8IDArr[3]){
    11de:	8b a9       	ldd	r24, Y+51	; 0x33
    11e0:	9c a9       	ldd	r25, Y+52	; 0x34
    11e2:	fc 01       	movw	r30, r24
    11e4:	33 96       	adiw	r30, 0x03	; 3
    11e6:	90 81       	ld	r25, Z
    11e8:	e9 a9       	ldd	r30, Y+49	; 0x31
    11ea:	fa a9       	ldd	r31, Y+50	; 0x32
    11ec:	80 81       	ld	r24, Z
    11ee:	98 17       	cp	r25, r24
    11f0:	19 f5       	brne	.+70     	; 0x1238 <APP_voidCheckPassword+0xb4>
    11f2:	8b a9       	ldd	r24, Y+51	; 0x33
    11f4:	9c a9       	ldd	r25, Y+52	; 0x34
    11f6:	fc 01       	movw	r30, r24
    11f8:	32 96       	adiw	r30, 0x02	; 2
    11fa:	20 81       	ld	r18, Z
    11fc:	89 a9       	ldd	r24, Y+49	; 0x31
    11fe:	9a a9       	ldd	r25, Y+50	; 0x32
    1200:	fc 01       	movw	r30, r24
    1202:	31 96       	adiw	r30, 0x01	; 1
    1204:	80 81       	ld	r24, Z
    1206:	28 17       	cp	r18, r24
    1208:	b9 f4       	brne	.+46     	; 0x1238 <APP_voidCheckPassword+0xb4>
    120a:	8b a9       	ldd	r24, Y+51	; 0x33
    120c:	9c a9       	ldd	r25, Y+52	; 0x34
    120e:	fc 01       	movw	r30, r24
    1210:	31 96       	adiw	r30, 0x01	; 1
    1212:	20 81       	ld	r18, Z
    1214:	89 a9       	ldd	r24, Y+49	; 0x31
    1216:	9a a9       	ldd	r25, Y+50	; 0x32
    1218:	fc 01       	movw	r30, r24
    121a:	32 96       	adiw	r30, 0x02	; 2
    121c:	80 81       	ld	r24, Z
    121e:	28 17       	cp	r18, r24
    1220:	59 f4       	brne	.+22     	; 0x1238 <APP_voidCheckPassword+0xb4>
    1222:	eb a9       	ldd	r30, Y+51	; 0x33
    1224:	fc a9       	ldd	r31, Y+52	; 0x34
    1226:	20 81       	ld	r18, Z
    1228:	89 a9       	ldd	r24, Y+49	; 0x31
    122a:	9a a9       	ldd	r25, Y+50	; 0x32
    122c:	fc 01       	movw	r30, r24
    122e:	33 96       	adiw	r30, 0x03	; 3
    1230:	80 81       	ld	r24, Z
    1232:	28 17       	cp	r18, r24
    1234:	09 f4       	brne	.+2      	; 0x1238 <APP_voidCheckPassword+0xb4>
    1236:	21 c1       	rjmp	.+578    	; 0x147a <APP_voidCheckPassword+0x2f6>
				if(Local_u8Iterator==3){
    1238:	8d a5       	ldd	r24, Y+45	; 0x2d
    123a:	83 30       	cpi	r24, 0x03	; 3
    123c:	09 f0       	breq	.+2      	; 0x1240 <APP_voidCheckPassword+0xbc>
    123e:	97 c0       	rjmp	.+302    	; 0x136e <APP_voidCheckPassword+0x1ea>
					CLCD_voidCLR();
    1240:	0e 94 76 0f 	call	0x1eec	; 0x1eec <CLCD_voidCLR>
					CLCD_voidSendString("BYE BYE");
    1244:	82 e8       	ldi	r24, 0x82	; 130
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <CLCD_voidSendString>
					for(s8 Local_s8CountDown=3;Local_s8CountDown>=0;Local_s8CountDown--){
    124c:	83 e0       	ldi	r24, 0x03	; 3
    124e:	8c a7       	std	Y+44, r24	; 0x2c
    1250:	7b c0       	rjmp	.+246    	; 0x1348 <APP_voidCheckPassword+0x1c4>
						SSD_u8SetNumber(Local_s8CountDown,Copy_psSSD);
    1252:	8c a5       	ldd	r24, Y+44	; 0x2c
    1254:	2f a5       	ldd	r18, Y+47	; 0x2f
    1256:	38 a9       	ldd	r19, Y+48	; 0x30
    1258:	b9 01       	movw	r22, r18
    125a:	0e 94 80 13 	call	0x2700	; 0x2700 <SSD_u8SetNumber>
    125e:	80 e0       	ldi	r24, 0x00	; 0
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	aa e7       	ldi	r26, 0x7A	; 122
    1264:	b4 e4       	ldi	r27, 0x44	; 68
    1266:	8f a3       	std	Y+39, r24	; 0x27
    1268:	98 a7       	std	Y+40, r25	; 0x28
    126a:	a9 a7       	std	Y+41, r26	; 0x29
    126c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    126e:	6f a1       	ldd	r22, Y+39	; 0x27
    1270:	78 a5       	ldd	r23, Y+40	; 0x28
    1272:	89 a5       	ldd	r24, Y+41	; 0x29
    1274:	9a a5       	ldd	r25, Y+42	; 0x2a
    1276:	20 e0       	ldi	r18, 0x00	; 0
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	4a ef       	ldi	r20, 0xFA	; 250
    127c:	54 e4       	ldi	r21, 0x44	; 68
    127e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1282:	dc 01       	movw	r26, r24
    1284:	cb 01       	movw	r24, r22
    1286:	8b a3       	std	Y+35, r24	; 0x23
    1288:	9c a3       	std	Y+36, r25	; 0x24
    128a:	ad a3       	std	Y+37, r26	; 0x25
    128c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    128e:	6b a1       	ldd	r22, Y+35	; 0x23
    1290:	7c a1       	ldd	r23, Y+36	; 0x24
    1292:	8d a1       	ldd	r24, Y+37	; 0x25
    1294:	9e a1       	ldd	r25, Y+38	; 0x26
    1296:	20 e0       	ldi	r18, 0x00	; 0
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	40 e8       	ldi	r20, 0x80	; 128
    129c:	5f e3       	ldi	r21, 0x3F	; 63
    129e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12a2:	88 23       	and	r24, r24
    12a4:	2c f4       	brge	.+10     	; 0x12b0 <APP_voidCheckPassword+0x12c>
		__ticks = 1;
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	9a a3       	std	Y+34, r25	; 0x22
    12ac:	89 a3       	std	Y+33, r24	; 0x21
    12ae:	3f c0       	rjmp	.+126    	; 0x132e <APP_voidCheckPassword+0x1aa>
	else if (__tmp > 65535)
    12b0:	6b a1       	ldd	r22, Y+35	; 0x23
    12b2:	7c a1       	ldd	r23, Y+36	; 0x24
    12b4:	8d a1       	ldd	r24, Y+37	; 0x25
    12b6:	9e a1       	ldd	r25, Y+38	; 0x26
    12b8:	20 e0       	ldi	r18, 0x00	; 0
    12ba:	3f ef       	ldi	r19, 0xFF	; 255
    12bc:	4f e7       	ldi	r20, 0x7F	; 127
    12be:	57 e4       	ldi	r21, 0x47	; 71
    12c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12c4:	18 16       	cp	r1, r24
    12c6:	4c f5       	brge	.+82     	; 0x131a <APP_voidCheckPassword+0x196>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12c8:	6f a1       	ldd	r22, Y+39	; 0x27
    12ca:	78 a5       	ldd	r23, Y+40	; 0x28
    12cc:	89 a5       	ldd	r24, Y+41	; 0x29
    12ce:	9a a5       	ldd	r25, Y+42	; 0x2a
    12d0:	20 e0       	ldi	r18, 0x00	; 0
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	40 e2       	ldi	r20, 0x20	; 32
    12d6:	51 e4       	ldi	r21, 0x41	; 65
    12d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12dc:	dc 01       	movw	r26, r24
    12de:	cb 01       	movw	r24, r22
    12e0:	bc 01       	movw	r22, r24
    12e2:	cd 01       	movw	r24, r26
    12e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12e8:	dc 01       	movw	r26, r24
    12ea:	cb 01       	movw	r24, r22
    12ec:	9a a3       	std	Y+34, r25	; 0x22
    12ee:	89 a3       	std	Y+33, r24	; 0x21
    12f0:	0f c0       	rjmp	.+30     	; 0x1310 <APP_voidCheckPassword+0x18c>
    12f2:	88 ec       	ldi	r24, 0xC8	; 200
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	98 a3       	std	Y+32, r25	; 0x20
    12f8:	8f 8f       	std	Y+31, r24	; 0x1f
    12fa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    12fc:	98 a1       	ldd	r25, Y+32	; 0x20
    12fe:	01 97       	sbiw	r24, 0x01	; 1
    1300:	f1 f7       	brne	.-4      	; 0x12fe <APP_voidCheckPassword+0x17a>
    1302:	98 a3       	std	Y+32, r25	; 0x20
    1304:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1306:	89 a1       	ldd	r24, Y+33	; 0x21
    1308:	9a a1       	ldd	r25, Y+34	; 0x22
    130a:	01 97       	sbiw	r24, 0x01	; 1
    130c:	9a a3       	std	Y+34, r25	; 0x22
    130e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1310:	89 a1       	ldd	r24, Y+33	; 0x21
    1312:	9a a1       	ldd	r25, Y+34	; 0x22
    1314:	00 97       	sbiw	r24, 0x00	; 0
    1316:	69 f7       	brne	.-38     	; 0x12f2 <APP_voidCheckPassword+0x16e>
    1318:	14 c0       	rjmp	.+40     	; 0x1342 <APP_voidCheckPassword+0x1be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    131a:	6b a1       	ldd	r22, Y+35	; 0x23
    131c:	7c a1       	ldd	r23, Y+36	; 0x24
    131e:	8d a1       	ldd	r24, Y+37	; 0x25
    1320:	9e a1       	ldd	r25, Y+38	; 0x26
    1322:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1326:	dc 01       	movw	r26, r24
    1328:	cb 01       	movw	r24, r22
    132a:	9a a3       	std	Y+34, r25	; 0x22
    132c:	89 a3       	std	Y+33, r24	; 0x21
    132e:	89 a1       	ldd	r24, Y+33	; 0x21
    1330:	9a a1       	ldd	r25, Y+34	; 0x22
    1332:	9e 8f       	std	Y+30, r25	; 0x1e
    1334:	8d 8f       	std	Y+29, r24	; 0x1d
    1336:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1338:	9e 8d       	ldd	r25, Y+30	; 0x1e
    133a:	01 97       	sbiw	r24, 0x01	; 1
    133c:	f1 f7       	brne	.-4      	; 0x133a <APP_voidCheckPassword+0x1b6>
    133e:	9e 8f       	std	Y+30, r25	; 0x1e
    1340:	8d 8f       	std	Y+29, r24	; 0x1d
		for(u8 Local_u8Iterator=1;Local_u8Iterator<4;Local_u8Iterator++){
			if(Copy_pu8PassArr[3]!=Copy_pu8IDArr[0]||Copy_pu8PassArr[2]!=Copy_pu8IDArr[1]||Copy_pu8PassArr[1]!=Copy_pu8IDArr[2]||Copy_pu8PassArr[0]!=Copy_pu8IDArr[3]){
				if(Local_u8Iterator==3){
					CLCD_voidCLR();
					CLCD_voidSendString("BYE BYE");
					for(s8 Local_s8CountDown=3;Local_s8CountDown>=0;Local_s8CountDown--){
    1342:	8c a5       	ldd	r24, Y+44	; 0x2c
    1344:	81 50       	subi	r24, 0x01	; 1
    1346:	8c a7       	std	Y+44, r24	; 0x2c
    1348:	8c a5       	ldd	r24, Y+44	; 0x2c
    134a:	88 23       	and	r24, r24
    134c:	0c f0       	brlt	.+2      	; 0x1350 <APP_voidCheckPassword+0x1cc>
    134e:	81 cf       	rjmp	.-254    	; 0x1252 <APP_voidCheckPassword+0xce>
						SSD_u8SetNumber(Local_s8CountDown,Copy_psSSD);
						_delay_ms(1000);
					}
					SSD_u8Disable(Copy_psSSD);
    1350:	8f a5       	ldd	r24, Y+47	; 0x2f
    1352:	98 a9       	ldd	r25, Y+48	; 0x30
    1354:	0e 94 f6 13 	call	0x27ec	; 0x27ec <SSD_u8Disable>
					DIO_u8SetPortValue(DIO_u8PORTD,0);
    1358:	83 e0       	ldi	r24, 0x03	; 3
    135a:	60 e0       	ldi	r22, 0x00	; 0
    135c:	0e 94 c5 10 	call	0x218a	; 0x218a <DIO_u8SetPortValue>
					CLCD_voidCLR();
    1360:	0e 94 76 0f 	call	0x1eec	; 0x1eec <CLCD_voidCLR>
					Local_u8ErrorState = NOK;
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	8e a7       	std	Y+46, r24	; 0x2e
					return Local_u8ErrorState;
    1368:	2e a5       	ldd	r18, Y+46	; 0x2e
    136a:	2d ab       	std	Y+53, r18	; 0x35
    136c:	24 c1       	rjmp	.+584    	; 0x15b6 <APP_voidCheckPassword+0x432>
				}
				else{
					SSD_u8SetNumber(3-Local_u8Iterator,Copy_psSSD);
    136e:	93 e0       	ldi	r25, 0x03	; 3
    1370:	8d a5       	ldd	r24, Y+45	; 0x2d
    1372:	29 2f       	mov	r18, r25
    1374:	28 1b       	sub	r18, r24
    1376:	82 2f       	mov	r24, r18
    1378:	2f a5       	ldd	r18, Y+47	; 0x2f
    137a:	38 a9       	ldd	r19, Y+48	; 0x30
    137c:	b9 01       	movw	r22, r18
    137e:	0e 94 80 13 	call	0x2700	; 0x2700 <SSD_u8SetNumber>
					CLCD_voidCLR();
    1382:	0e 94 76 0f 	call	0x1eec	; 0x1eec <CLCD_voidCLR>
					CLCD_voidSendString("TRY AGAIN!");
    1386:	8a e8       	ldi	r24, 0x8A	; 138
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <CLCD_voidSendString>
    138e:	80 e0       	ldi	r24, 0x00	; 0
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	aa e7       	ldi	r26, 0x7A	; 122
    1394:	b4 e4       	ldi	r27, 0x44	; 68
    1396:	89 8f       	std	Y+25, r24	; 0x19
    1398:	9a 8f       	std	Y+26, r25	; 0x1a
    139a:	ab 8f       	std	Y+27, r26	; 0x1b
    139c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    139e:	69 8d       	ldd	r22, Y+25	; 0x19
    13a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13a6:	20 e0       	ldi	r18, 0x00	; 0
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	4a ef       	ldi	r20, 0xFA	; 250
    13ac:	54 e4       	ldi	r21, 0x44	; 68
    13ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13b2:	dc 01       	movw	r26, r24
    13b4:	cb 01       	movw	r24, r22
    13b6:	8d 8b       	std	Y+21, r24	; 0x15
    13b8:	9e 8b       	std	Y+22, r25	; 0x16
    13ba:	af 8b       	std	Y+23, r26	; 0x17
    13bc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    13be:	6d 89       	ldd	r22, Y+21	; 0x15
    13c0:	7e 89       	ldd	r23, Y+22	; 0x16
    13c2:	8f 89       	ldd	r24, Y+23	; 0x17
    13c4:	98 8d       	ldd	r25, Y+24	; 0x18
    13c6:	20 e0       	ldi	r18, 0x00	; 0
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	40 e8       	ldi	r20, 0x80	; 128
    13cc:	5f e3       	ldi	r21, 0x3F	; 63
    13ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13d2:	88 23       	and	r24, r24
    13d4:	2c f4       	brge	.+10     	; 0x13e0 <APP_voidCheckPassword+0x25c>
		__ticks = 1;
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	9c 8b       	std	Y+20, r25	; 0x14
    13dc:	8b 8b       	std	Y+19, r24	; 0x13
    13de:	3f c0       	rjmp	.+126    	; 0x145e <APP_voidCheckPassword+0x2da>
	else if (__tmp > 65535)
    13e0:	6d 89       	ldd	r22, Y+21	; 0x15
    13e2:	7e 89       	ldd	r23, Y+22	; 0x16
    13e4:	8f 89       	ldd	r24, Y+23	; 0x17
    13e6:	98 8d       	ldd	r25, Y+24	; 0x18
    13e8:	20 e0       	ldi	r18, 0x00	; 0
    13ea:	3f ef       	ldi	r19, 0xFF	; 255
    13ec:	4f e7       	ldi	r20, 0x7F	; 127
    13ee:	57 e4       	ldi	r21, 0x47	; 71
    13f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13f4:	18 16       	cp	r1, r24
    13f6:	4c f5       	brge	.+82     	; 0x144a <APP_voidCheckPassword+0x2c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13f8:	69 8d       	ldd	r22, Y+25	; 0x19
    13fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1400:	20 e0       	ldi	r18, 0x00	; 0
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	40 e2       	ldi	r20, 0x20	; 32
    1406:	51 e4       	ldi	r21, 0x41	; 65
    1408:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    140c:	dc 01       	movw	r26, r24
    140e:	cb 01       	movw	r24, r22
    1410:	bc 01       	movw	r22, r24
    1412:	cd 01       	movw	r24, r26
    1414:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1418:	dc 01       	movw	r26, r24
    141a:	cb 01       	movw	r24, r22
    141c:	9c 8b       	std	Y+20, r25	; 0x14
    141e:	8b 8b       	std	Y+19, r24	; 0x13
    1420:	0f c0       	rjmp	.+30     	; 0x1440 <APP_voidCheckPassword+0x2bc>
    1422:	88 ec       	ldi	r24, 0xC8	; 200
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	9a 8b       	std	Y+18, r25	; 0x12
    1428:	89 8b       	std	Y+17, r24	; 0x11
    142a:	89 89       	ldd	r24, Y+17	; 0x11
    142c:	9a 89       	ldd	r25, Y+18	; 0x12
    142e:	01 97       	sbiw	r24, 0x01	; 1
    1430:	f1 f7       	brne	.-4      	; 0x142e <APP_voidCheckPassword+0x2aa>
    1432:	9a 8b       	std	Y+18, r25	; 0x12
    1434:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1436:	8b 89       	ldd	r24, Y+19	; 0x13
    1438:	9c 89       	ldd	r25, Y+20	; 0x14
    143a:	01 97       	sbiw	r24, 0x01	; 1
    143c:	9c 8b       	std	Y+20, r25	; 0x14
    143e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1440:	8b 89       	ldd	r24, Y+19	; 0x13
    1442:	9c 89       	ldd	r25, Y+20	; 0x14
    1444:	00 97       	sbiw	r24, 0x00	; 0
    1446:	69 f7       	brne	.-38     	; 0x1422 <APP_voidCheckPassword+0x29e>
    1448:	14 c0       	rjmp	.+40     	; 0x1472 <APP_voidCheckPassword+0x2ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    144a:	6d 89       	ldd	r22, Y+21	; 0x15
    144c:	7e 89       	ldd	r23, Y+22	; 0x16
    144e:	8f 89       	ldd	r24, Y+23	; 0x17
    1450:	98 8d       	ldd	r25, Y+24	; 0x18
    1452:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1456:	dc 01       	movw	r26, r24
    1458:	cb 01       	movw	r24, r22
    145a:	9c 8b       	std	Y+20, r25	; 0x14
    145c:	8b 8b       	std	Y+19, r24	; 0x13
    145e:	8b 89       	ldd	r24, Y+19	; 0x13
    1460:	9c 89       	ldd	r25, Y+20	; 0x14
    1462:	98 8b       	std	Y+16, r25	; 0x10
    1464:	8f 87       	std	Y+15, r24	; 0x0f
    1466:	8f 85       	ldd	r24, Y+15	; 0x0f
    1468:	98 89       	ldd	r25, Y+16	; 0x10
    146a:	01 97       	sbiw	r24, 0x01	; 1
    146c:	f1 f7       	brne	.-4      	; 0x146a <APP_voidCheckPassword+0x2e6>
    146e:	98 8b       	std	Y+16, r25	; 0x10
    1470:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(1000);
					APP_voidGetPassword(Copy_pu8PassArr);
    1472:	8b a9       	ldd	r24, Y+51	; 0x33
    1474:	9c a9       	ldd	r25, Y+52	; 0x34
    1476:	0e 94 84 08 	call	0x1108	; 0x1108 <APP_voidGetPassword>
u8 APP_voidCheckPassword(const SSD_t* Copy_psSSD,const u8* Copy_pu8IDArr,u8* Copy_pu8PassArr){
	u8 Local_u8ErrorState=OK;
	if(Copy_pu8IDArr!=NULL && Copy_psSSD!=NULL && Copy_pu8PassArr!=NULL){
		SSD_u8Enable(Copy_psSSD);
		SSD_u8SetNumber(3,Copy_psSSD);
		for(u8 Local_u8Iterator=1;Local_u8Iterator<4;Local_u8Iterator++){
    147a:	8d a5       	ldd	r24, Y+45	; 0x2d
    147c:	8f 5f       	subi	r24, 0xFF	; 255
    147e:	8d a7       	std	Y+45, r24	; 0x2d
    1480:	8d a5       	ldd	r24, Y+45	; 0x2d
    1482:	84 30       	cpi	r24, 0x04	; 4
    1484:	08 f4       	brcc	.+2      	; 0x1488 <APP_voidCheckPassword+0x304>
    1486:	ab ce       	rjmp	.-682    	; 0x11de <APP_voidCheckPassword+0x5a>
					_delay_ms(1000);
					APP_voidGetPassword(Copy_pu8PassArr);
				}
			}
		}
		SSD_u8Disable(Copy_psSSD);
    1488:	8f a5       	ldd	r24, Y+47	; 0x2f
    148a:	98 a9       	ldd	r25, Y+48	; 0x30
    148c:	0e 94 f6 13 	call	0x27ec	; 0x27ec <SSD_u8Disable>
		CLCD_voidCLR();
    1490:	0e 94 76 0f 	call	0x1eec	; 0x1eec <CLCD_voidCLR>
		CLCD_voidSendString("Welcome ");
    1494:	85 e9       	ldi	r24, 0x95	; 149
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <CLCD_voidSendString>
		for(u8 Local_u8Iterator=0;Local_u8Iterator<4;Local_u8Iterator++){
    149c:	1b a6       	std	Y+43, r1	; 0x2b
    149e:	14 c0       	rjmp	.+40     	; 0x14c8 <APP_voidCheckPassword+0x344>
			CLCD_voidSendNumber(Copy_pu8IDArr[Local_u8Iterator]);
    14a0:	8b a5       	ldd	r24, Y+43	; 0x2b
    14a2:	28 2f       	mov	r18, r24
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	89 a9       	ldd	r24, Y+49	; 0x31
    14a8:	9a a9       	ldd	r25, Y+50	; 0x32
    14aa:	fc 01       	movw	r30, r24
    14ac:	e2 0f       	add	r30, r18
    14ae:	f3 1f       	adc	r31, r19
    14b0:	80 81       	ld	r24, Z
    14b2:	88 2f       	mov	r24, r24
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	a0 e0       	ldi	r26, 0x00	; 0
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	bc 01       	movw	r22, r24
    14bc:	cd 01       	movw	r24, r26
    14be:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <CLCD_voidSendNumber>
			}
		}
		SSD_u8Disable(Copy_psSSD);
		CLCD_voidCLR();
		CLCD_voidSendString("Welcome ");
		for(u8 Local_u8Iterator=0;Local_u8Iterator<4;Local_u8Iterator++){
    14c2:	8b a5       	ldd	r24, Y+43	; 0x2b
    14c4:	8f 5f       	subi	r24, 0xFF	; 255
    14c6:	8b a7       	std	Y+43, r24	; 0x2b
    14c8:	8b a5       	ldd	r24, Y+43	; 0x2b
    14ca:	84 30       	cpi	r24, 0x04	; 4
    14cc:	48 f3       	brcs	.-46     	; 0x14a0 <APP_voidCheckPassword+0x31c>
    14ce:	80 e0       	ldi	r24, 0x00	; 0
    14d0:	90 e8       	ldi	r25, 0x80	; 128
    14d2:	ab e3       	ldi	r26, 0x3B	; 59
    14d4:	b5 e4       	ldi	r27, 0x45	; 69
    14d6:	8b 87       	std	Y+11, r24	; 0x0b
    14d8:	9c 87       	std	Y+12, r25	; 0x0c
    14da:	ad 87       	std	Y+13, r26	; 0x0d
    14dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14de:	6b 85       	ldd	r22, Y+11	; 0x0b
    14e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    14e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    14e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    14e6:	20 e0       	ldi	r18, 0x00	; 0
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	4a ef       	ldi	r20, 0xFA	; 250
    14ec:	54 e4       	ldi	r21, 0x44	; 68
    14ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14f2:	dc 01       	movw	r26, r24
    14f4:	cb 01       	movw	r24, r22
    14f6:	8f 83       	std	Y+7, r24	; 0x07
    14f8:	98 87       	std	Y+8, r25	; 0x08
    14fa:	a9 87       	std	Y+9, r26	; 0x09
    14fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1500:	78 85       	ldd	r23, Y+8	; 0x08
    1502:	89 85       	ldd	r24, Y+9	; 0x09
    1504:	9a 85       	ldd	r25, Y+10	; 0x0a
    1506:	20 e0       	ldi	r18, 0x00	; 0
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	40 e8       	ldi	r20, 0x80	; 128
    150c:	5f e3       	ldi	r21, 0x3F	; 63
    150e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1512:	88 23       	and	r24, r24
    1514:	2c f4       	brge	.+10     	; 0x1520 <APP_voidCheckPassword+0x39c>
		__ticks = 1;
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	9e 83       	std	Y+6, r25	; 0x06
    151c:	8d 83       	std	Y+5, r24	; 0x05
    151e:	3f c0       	rjmp	.+126    	; 0x159e <APP_voidCheckPassword+0x41a>
	else if (__tmp > 65535)
    1520:	6f 81       	ldd	r22, Y+7	; 0x07
    1522:	78 85       	ldd	r23, Y+8	; 0x08
    1524:	89 85       	ldd	r24, Y+9	; 0x09
    1526:	9a 85       	ldd	r25, Y+10	; 0x0a
    1528:	20 e0       	ldi	r18, 0x00	; 0
    152a:	3f ef       	ldi	r19, 0xFF	; 255
    152c:	4f e7       	ldi	r20, 0x7F	; 127
    152e:	57 e4       	ldi	r21, 0x47	; 71
    1530:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1534:	18 16       	cp	r1, r24
    1536:	4c f5       	brge	.+82     	; 0x158a <APP_voidCheckPassword+0x406>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1538:	6b 85       	ldd	r22, Y+11	; 0x0b
    153a:	7c 85       	ldd	r23, Y+12	; 0x0c
    153c:	8d 85       	ldd	r24, Y+13	; 0x0d
    153e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1540:	20 e0       	ldi	r18, 0x00	; 0
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	40 e2       	ldi	r20, 0x20	; 32
    1546:	51 e4       	ldi	r21, 0x41	; 65
    1548:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    154c:	dc 01       	movw	r26, r24
    154e:	cb 01       	movw	r24, r22
    1550:	bc 01       	movw	r22, r24
    1552:	cd 01       	movw	r24, r26
    1554:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1558:	dc 01       	movw	r26, r24
    155a:	cb 01       	movw	r24, r22
    155c:	9e 83       	std	Y+6, r25	; 0x06
    155e:	8d 83       	std	Y+5, r24	; 0x05
    1560:	0f c0       	rjmp	.+30     	; 0x1580 <APP_voidCheckPassword+0x3fc>
    1562:	88 ec       	ldi	r24, 0xC8	; 200
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	9c 83       	std	Y+4, r25	; 0x04
    1568:	8b 83       	std	Y+3, r24	; 0x03
    156a:	8b 81       	ldd	r24, Y+3	; 0x03
    156c:	9c 81       	ldd	r25, Y+4	; 0x04
    156e:	01 97       	sbiw	r24, 0x01	; 1
    1570:	f1 f7       	brne	.-4      	; 0x156e <APP_voidCheckPassword+0x3ea>
    1572:	9c 83       	std	Y+4, r25	; 0x04
    1574:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1576:	8d 81       	ldd	r24, Y+5	; 0x05
    1578:	9e 81       	ldd	r25, Y+6	; 0x06
    157a:	01 97       	sbiw	r24, 0x01	; 1
    157c:	9e 83       	std	Y+6, r25	; 0x06
    157e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1580:	8d 81       	ldd	r24, Y+5	; 0x05
    1582:	9e 81       	ldd	r25, Y+6	; 0x06
    1584:	00 97       	sbiw	r24, 0x00	; 0
    1586:	69 f7       	brne	.-38     	; 0x1562 <APP_voidCheckPassword+0x3de>
    1588:	14 c0       	rjmp	.+40     	; 0x15b2 <APP_voidCheckPassword+0x42e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    158a:	6f 81       	ldd	r22, Y+7	; 0x07
    158c:	78 85       	ldd	r23, Y+8	; 0x08
    158e:	89 85       	ldd	r24, Y+9	; 0x09
    1590:	9a 85       	ldd	r25, Y+10	; 0x0a
    1592:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1596:	dc 01       	movw	r26, r24
    1598:	cb 01       	movw	r24, r22
    159a:	9e 83       	std	Y+6, r25	; 0x06
    159c:	8d 83       	std	Y+5, r24	; 0x05
    159e:	8d 81       	ldd	r24, Y+5	; 0x05
    15a0:	9e 81       	ldd	r25, Y+6	; 0x06
    15a2:	9a 83       	std	Y+2, r25	; 0x02
    15a4:	89 83       	std	Y+1, r24	; 0x01
    15a6:	89 81       	ldd	r24, Y+1	; 0x01
    15a8:	9a 81       	ldd	r25, Y+2	; 0x02
    15aa:	01 97       	sbiw	r24, 0x01	; 1
    15ac:	f1 f7       	brne	.-4      	; 0x15aa <APP_voidCheckPassword+0x426>
    15ae:	9a 83       	std	Y+2, r25	; 0x02
    15b0:	89 83       	std	Y+1, r24	; 0x01
			CLCD_voidSendNumber(Copy_pu8IDArr[Local_u8Iterator]);
		}
		_delay_ms(3000);
	}
	return Local_u8ErrorState;
    15b2:	8e a5       	ldd	r24, Y+46	; 0x2e
    15b4:	8d ab       	std	Y+53, r24	; 0x35
    15b6:	8d a9       	ldd	r24, Y+53	; 0x35
}
    15b8:	e5 96       	adiw	r28, 0x35	; 53
    15ba:	0f b6       	in	r0, 0x3f	; 63
    15bc:	f8 94       	cli
    15be:	de bf       	out	0x3e, r29	; 62
    15c0:	0f be       	out	0x3f, r0	; 63
    15c2:	cd bf       	out	0x3d, r28	; 61
    15c4:	cf 91       	pop	r28
    15c6:	df 91       	pop	r29
    15c8:	08 95       	ret

000015ca <ADCNotifFunc>:

void ADCNotifFunc(void){
    15ca:	af 92       	push	r10
    15cc:	bf 92       	push	r11
    15ce:	cf 92       	push	r12
    15d0:	df 92       	push	r13
    15d2:	ef 92       	push	r14
    15d4:	ff 92       	push	r15
    15d6:	0f 93       	push	r16
    15d8:	1f 93       	push	r17
    15da:	df 93       	push	r29
    15dc:	cf 93       	push	r28
    15de:	cd b7       	in	r28, 0x3d	; 61
    15e0:	de b7       	in	r29, 0x3e	; 62
    15e2:	64 97       	sbiw	r28, 0x14	; 20
    15e4:	0f b6       	in	r0, 0x3f	; 63
    15e6:	f8 94       	cli
    15e8:	de bf       	out	0x3e, r29	; 62
    15ea:	0f be       	out	0x3f, r0	; 63
    15ec:	cd bf       	out	0x3d, r28	; 61
	TIMER1_voidSetTopValue(20000);
    15ee:	80 e2       	ldi	r24, 0x20	; 32
    15f0:	9e e4       	ldi	r25, 0x4E	; 78
    15f2:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <TIMER1_voidSetTopValue>
	u16 Local_u16Temp=MATH_s32Map(0,255,0,5000,ADCChain1.ResultArr[0]),Local_u16OnTime;
    15f6:	e0 91 e3 00 	lds	r30, 0x00E3
    15fa:	f0 91 e4 00 	lds	r31, 0x00E4
    15fe:	80 81       	ld	r24, Z
    1600:	91 81       	ldd	r25, Z+1	; 0x01
    1602:	cc 01       	movw	r24, r24
    1604:	a0 e0       	ldi	r26, 0x00	; 0
    1606:	b0 e0       	ldi	r27, 0x00	; 0
    1608:	00 d0       	rcall	.+0      	; 0x160a <ADCNotifFunc+0x40>
    160a:	00 d0       	rcall	.+0      	; 0x160c <ADCNotifFunc+0x42>
    160c:	ed b7       	in	r30, 0x3d	; 61
    160e:	fe b7       	in	r31, 0x3e	; 62
    1610:	31 96       	adiw	r30, 0x01	; 1
    1612:	80 83       	st	Z, r24
    1614:	91 83       	std	Z+1, r25	; 0x01
    1616:	a2 83       	std	Z+2, r26	; 0x02
    1618:	b3 83       	std	Z+3, r27	; 0x03
    161a:	60 e0       	ldi	r22, 0x00	; 0
    161c:	70 e0       	ldi	r23, 0x00	; 0
    161e:	80 e0       	ldi	r24, 0x00	; 0
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	2f ef       	ldi	r18, 0xFF	; 255
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	40 e0       	ldi	r20, 0x00	; 0
    1628:	50 e0       	ldi	r21, 0x00	; 0
    162a:	ee 24       	eor	r14, r14
    162c:	ff 24       	eor	r15, r15
    162e:	87 01       	movw	r16, r14
    1630:	0f 2e       	mov	r0, r31
    1632:	f8 e8       	ldi	r31, 0x88	; 136
    1634:	af 2e       	mov	r10, r31
    1636:	f3 e1       	ldi	r31, 0x13	; 19
    1638:	bf 2e       	mov	r11, r31
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	cf 2e       	mov	r12, r31
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	df 2e       	mov	r13, r31
    1642:	f0 2d       	mov	r31, r0
    1644:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <MATH_s32Map>
    1648:	0f 90       	pop	r0
    164a:	0f 90       	pop	r0
    164c:	0f 90       	pop	r0
    164e:	0f 90       	pop	r0
    1650:	dc 01       	movw	r26, r24
    1652:	cb 01       	movw	r24, r22
    1654:	9c 8b       	std	Y+20, r25	; 0x14
    1656:	8b 8b       	std	Y+19, r24	; 0x13
	Local_u16Temp/=10;
    1658:	8b 89       	ldd	r24, Y+19	; 0x13
    165a:	9c 89       	ldd	r25, Y+20	; 0x14
    165c:	2a e0       	ldi	r18, 0x0A	; 10
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	b9 01       	movw	r22, r18
    1662:	0e 94 ef 16 	call	0x2dde	; 0x2dde <__udivmodhi4>
    1666:	cb 01       	movw	r24, r22
    1668:	9c 8b       	std	Y+20, r25	; 0x14
    166a:	8b 8b       	std	Y+19, r24	; 0x13
	u16 Local_u16Leds=MATH_s32Map(0,255,0,100,ADCChain1.ResultArr[1]);
    166c:	80 91 e3 00 	lds	r24, 0x00E3
    1670:	90 91 e4 00 	lds	r25, 0x00E4
    1674:	fc 01       	movw	r30, r24
    1676:	32 96       	adiw	r30, 0x02	; 2
    1678:	80 81       	ld	r24, Z
    167a:	91 81       	ldd	r25, Z+1	; 0x01
    167c:	cc 01       	movw	r24, r24
    167e:	a0 e0       	ldi	r26, 0x00	; 0
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    1682:	00 d0       	rcall	.+0      	; 0x1684 <ADCNotifFunc+0xba>
    1684:	00 d0       	rcall	.+0      	; 0x1686 <ADCNotifFunc+0xbc>
    1686:	ed b7       	in	r30, 0x3d	; 61
    1688:	fe b7       	in	r31, 0x3e	; 62
    168a:	31 96       	adiw	r30, 0x01	; 1
    168c:	80 83       	st	Z, r24
    168e:	91 83       	std	Z+1, r25	; 0x01
    1690:	a2 83       	std	Z+2, r26	; 0x02
    1692:	b3 83       	std	Z+3, r27	; 0x03
    1694:	60 e0       	ldi	r22, 0x00	; 0
    1696:	70 e0       	ldi	r23, 0x00	; 0
    1698:	80 e0       	ldi	r24, 0x00	; 0
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	2f ef       	ldi	r18, 0xFF	; 255
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	40 e0       	ldi	r20, 0x00	; 0
    16a2:	50 e0       	ldi	r21, 0x00	; 0
    16a4:	ee 24       	eor	r14, r14
    16a6:	ff 24       	eor	r15, r15
    16a8:	87 01       	movw	r16, r14
    16aa:	0f 2e       	mov	r0, r31
    16ac:	f4 e6       	ldi	r31, 0x64	; 100
    16ae:	af 2e       	mov	r10, r31
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	bf 2e       	mov	r11, r31
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	cf 2e       	mov	r12, r31
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	df 2e       	mov	r13, r31
    16bc:	f0 2d       	mov	r31, r0
    16be:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <MATH_s32Map>
    16c2:	0f 90       	pop	r0
    16c4:	0f 90       	pop	r0
    16c6:	0f 90       	pop	r0
    16c8:	0f 90       	pop	r0
    16ca:	dc 01       	movw	r26, r24
    16cc:	cb 01       	movw	r24, r22
    16ce:	98 8b       	std	Y+16, r25	; 0x10
    16d0:	8f 87       	std	Y+15, r24	; 0x0f
	CLCD_voidCLR();
    16d2:	0e 94 76 0f 	call	0x1eec	; 0x1eec <CLCD_voidCLR>
	CLCD_voidSendString("Temp: ");
    16d6:	8e e9       	ldi	r24, 0x9E	; 158
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <CLCD_voidSendString>
	CLCD_voidSendNumber(Local_u16Temp);
    16de:	8b 89       	ldd	r24, Y+19	; 0x13
    16e0:	9c 89       	ldd	r25, Y+20	; 0x14
    16e2:	cc 01       	movw	r24, r24
    16e4:	a0 e0       	ldi	r26, 0x00	; 0
    16e6:	b0 e0       	ldi	r27, 0x00	; 0
    16e8:	bc 01       	movw	r22, r24
    16ea:	cd 01       	movw	r24, r26
    16ec:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <CLCD_voidSendNumber>
	CLCD_voidSendString(" 'c");
    16f0:	85 ea       	ldi	r24, 0xA5	; 165
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <CLCD_voidSendString>
	CLCD_voidGoToXY(1,0);
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	60 e0       	ldi	r22, 0x00	; 0
    16fc:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <CLCD_voidGoToXY>
	CLCD_voidSendString("LEVEL: ");
    1700:	89 ea       	ldi	r24, 0xA9	; 169
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <CLCD_voidSendString>
	CLCD_voidSendNumber(100-Local_u16Leds);
    1708:	24 e6       	ldi	r18, 0x64	; 100
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	8f 85       	ldd	r24, Y+15	; 0x0f
    170e:	98 89       	ldd	r25, Y+16	; 0x10
    1710:	a9 01       	movw	r20, r18
    1712:	48 1b       	sub	r20, r24
    1714:	59 0b       	sbc	r21, r25
    1716:	ca 01       	movw	r24, r20
    1718:	cc 01       	movw	r24, r24
    171a:	a0 e0       	ldi	r26, 0x00	; 0
    171c:	b0 e0       	ldi	r27, 0x00	; 0
    171e:	bc 01       	movw	r22, r24
    1720:	cd 01       	movw	r24, r26
    1722:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <CLCD_voidSendNumber>
	if(Local_u16Temp>25){
    1726:	8b 89       	ldd	r24, Y+19	; 0x13
    1728:	9c 89       	ldd	r25, Y+20	; 0x14
    172a:	8a 31       	cpi	r24, 0x1A	; 26
    172c:	91 05       	cpc	r25, r1
    172e:	f0 f1       	brcs	.+124    	; 0x17ac <ADCNotifFunc+0x1e2>
		DIO_u8SetPinValue(DCM_PORT,DCM_PIN,DIO_u8PIN_HIGH);
    1730:	80 e0       	ldi	r24, 0x00	; 0
    1732:	63 e0       	ldi	r22, 0x03	; 3
    1734:	41 e0       	ldi	r20, 0x01	; 1
    1736:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DIO_u8SetPinValue>
		CLCD_voidGoToXY(0,15);
    173a:	80 e0       	ldi	r24, 0x00	; 0
    173c:	6f e0       	ldi	r22, 0x0F	; 15
    173e:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <CLCD_voidGoToXY>
		CLCD_voidSendData('M');
    1742:	8d e4       	ldi	r24, 0x4D	; 77
    1744:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <CLCD_voidSendData>
		Local_u16OnTime=MATH_s32Map(25,40,0,20000,Local_u16Temp);
    1748:	8b 89       	ldd	r24, Y+19	; 0x13
    174a:	9c 89       	ldd	r25, Y+20	; 0x14
    174c:	cc 01       	movw	r24, r24
    174e:	a0 e0       	ldi	r26, 0x00	; 0
    1750:	b0 e0       	ldi	r27, 0x00	; 0
    1752:	00 d0       	rcall	.+0      	; 0x1754 <ADCNotifFunc+0x18a>
    1754:	00 d0       	rcall	.+0      	; 0x1756 <ADCNotifFunc+0x18c>
    1756:	ed b7       	in	r30, 0x3d	; 61
    1758:	fe b7       	in	r31, 0x3e	; 62
    175a:	31 96       	adiw	r30, 0x01	; 1
    175c:	80 83       	st	Z, r24
    175e:	91 83       	std	Z+1, r25	; 0x01
    1760:	a2 83       	std	Z+2, r26	; 0x02
    1762:	b3 83       	std	Z+3, r27	; 0x03
    1764:	69 e1       	ldi	r22, 0x19	; 25
    1766:	70 e0       	ldi	r23, 0x00	; 0
    1768:	80 e0       	ldi	r24, 0x00	; 0
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	28 e2       	ldi	r18, 0x28	; 40
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	40 e0       	ldi	r20, 0x00	; 0
    1772:	50 e0       	ldi	r21, 0x00	; 0
    1774:	ee 24       	eor	r14, r14
    1776:	ff 24       	eor	r15, r15
    1778:	87 01       	movw	r16, r14
    177a:	0f 2e       	mov	r0, r31
    177c:	f0 e2       	ldi	r31, 0x20	; 32
    177e:	af 2e       	mov	r10, r31
    1780:	fe e4       	ldi	r31, 0x4E	; 78
    1782:	bf 2e       	mov	r11, r31
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	cf 2e       	mov	r12, r31
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	df 2e       	mov	r13, r31
    178c:	f0 2d       	mov	r31, r0
    178e:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <MATH_s32Map>
    1792:	0f 90       	pop	r0
    1794:	0f 90       	pop	r0
    1796:	0f 90       	pop	r0
    1798:	0f 90       	pop	r0
    179a:	dc 01       	movw	r26, r24
    179c:	cb 01       	movw	r24, r22
    179e:	9a 8b       	std	Y+18, r25	; 0x12
    17a0:	89 8b       	std	Y+17, r24	; 0x11
		TIMER1B_voidSetCompMatchValue(Local_u16OnTime);
    17a2:	89 89       	ldd	r24, Y+17	; 0x11
    17a4:	9a 89       	ldd	r25, Y+18	; 0x12
    17a6:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <TIMER1B_voidSetCompMatchValue>
    17aa:	0c c0       	rjmp	.+24     	; 0x17c4 <ADCNotifFunc+0x1fa>
	}
	else{
		CLCD_voidGoToXY(0,15);
    17ac:	80 e0       	ldi	r24, 0x00	; 0
    17ae:	6f e0       	ldi	r22, 0x0F	; 15
    17b0:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <CLCD_voidGoToXY>
		CLCD_voidSendData(' ');
    17b4:	80 e2       	ldi	r24, 0x20	; 32
    17b6:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <CLCD_voidSendData>
		DIO_u8SetPinValue(DCM_PORT,DCM_PIN,DIO_u8PIN_LOW);
    17ba:	80 e0       	ldi	r24, 0x00	; 0
    17bc:	63 e0       	ldi	r22, 0x03	; 3
    17be:	40 e0       	ldi	r20, 0x00	; 0
    17c0:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DIO_u8SetPinValue>
	}
	Local_u16Leds=MATH_s32Map(10,100,0,20000,Local_u16Leds);
    17c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    17c6:	98 89       	ldd	r25, Y+16	; 0x10
    17c8:	cc 01       	movw	r24, r24
    17ca:	a0 e0       	ldi	r26, 0x00	; 0
    17cc:	b0 e0       	ldi	r27, 0x00	; 0
    17ce:	00 d0       	rcall	.+0      	; 0x17d0 <ADCNotifFunc+0x206>
    17d0:	00 d0       	rcall	.+0      	; 0x17d2 <ADCNotifFunc+0x208>
    17d2:	ed b7       	in	r30, 0x3d	; 61
    17d4:	fe b7       	in	r31, 0x3e	; 62
    17d6:	31 96       	adiw	r30, 0x01	; 1
    17d8:	80 83       	st	Z, r24
    17da:	91 83       	std	Z+1, r25	; 0x01
    17dc:	a2 83       	std	Z+2, r26	; 0x02
    17de:	b3 83       	std	Z+3, r27	; 0x03
    17e0:	6a e0       	ldi	r22, 0x0A	; 10
    17e2:	70 e0       	ldi	r23, 0x00	; 0
    17e4:	80 e0       	ldi	r24, 0x00	; 0
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	24 e6       	ldi	r18, 0x64	; 100
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	40 e0       	ldi	r20, 0x00	; 0
    17ee:	50 e0       	ldi	r21, 0x00	; 0
    17f0:	ee 24       	eor	r14, r14
    17f2:	ff 24       	eor	r15, r15
    17f4:	87 01       	movw	r16, r14
    17f6:	0f 2e       	mov	r0, r31
    17f8:	f0 e2       	ldi	r31, 0x20	; 32
    17fa:	af 2e       	mov	r10, r31
    17fc:	fe e4       	ldi	r31, 0x4E	; 78
    17fe:	bf 2e       	mov	r11, r31
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	cf 2e       	mov	r12, r31
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	df 2e       	mov	r13, r31
    1808:	f0 2d       	mov	r31, r0
    180a:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <MATH_s32Map>
    180e:	0f 90       	pop	r0
    1810:	0f 90       	pop	r0
    1812:	0f 90       	pop	r0
    1814:	0f 90       	pop	r0
    1816:	dc 01       	movw	r26, r24
    1818:	cb 01       	movw	r24, r22
    181a:	98 8b       	std	Y+16, r25	; 0x10
    181c:	8f 87       	std	Y+15, r24	; 0x0f
	TIMER1A_voidSetCompMatchValue(Local_u16Leds);
    181e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1820:	98 89       	ldd	r25, Y+16	; 0x10
    1822:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <TIMER1A_voidSetCompMatchValue>
    1826:	80 e0       	ldi	r24, 0x00	; 0
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	aa e7       	ldi	r26, 0x7A	; 122
    182c:	b4 e4       	ldi	r27, 0x44	; 68
    182e:	8b 87       	std	Y+11, r24	; 0x0b
    1830:	9c 87       	std	Y+12, r25	; 0x0c
    1832:	ad 87       	std	Y+13, r26	; 0x0d
    1834:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1836:	6b 85       	ldd	r22, Y+11	; 0x0b
    1838:	7c 85       	ldd	r23, Y+12	; 0x0c
    183a:	8d 85       	ldd	r24, Y+13	; 0x0d
    183c:	9e 85       	ldd	r25, Y+14	; 0x0e
    183e:	20 e0       	ldi	r18, 0x00	; 0
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	4a ef       	ldi	r20, 0xFA	; 250
    1844:	54 e4       	ldi	r21, 0x44	; 68
    1846:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    184a:	dc 01       	movw	r26, r24
    184c:	cb 01       	movw	r24, r22
    184e:	8f 83       	std	Y+7, r24	; 0x07
    1850:	98 87       	std	Y+8, r25	; 0x08
    1852:	a9 87       	std	Y+9, r26	; 0x09
    1854:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1856:	6f 81       	ldd	r22, Y+7	; 0x07
    1858:	78 85       	ldd	r23, Y+8	; 0x08
    185a:	89 85       	ldd	r24, Y+9	; 0x09
    185c:	9a 85       	ldd	r25, Y+10	; 0x0a
    185e:	20 e0       	ldi	r18, 0x00	; 0
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	40 e8       	ldi	r20, 0x80	; 128
    1864:	5f e3       	ldi	r21, 0x3F	; 63
    1866:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    186a:	88 23       	and	r24, r24
    186c:	2c f4       	brge	.+10     	; 0x1878 <ADCNotifFunc+0x2ae>
		__ticks = 1;
    186e:	81 e0       	ldi	r24, 0x01	; 1
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	9e 83       	std	Y+6, r25	; 0x06
    1874:	8d 83       	std	Y+5, r24	; 0x05
    1876:	3f c0       	rjmp	.+126    	; 0x18f6 <ADCNotifFunc+0x32c>
	else if (__tmp > 65535)
    1878:	6f 81       	ldd	r22, Y+7	; 0x07
    187a:	78 85       	ldd	r23, Y+8	; 0x08
    187c:	89 85       	ldd	r24, Y+9	; 0x09
    187e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1880:	20 e0       	ldi	r18, 0x00	; 0
    1882:	3f ef       	ldi	r19, 0xFF	; 255
    1884:	4f e7       	ldi	r20, 0x7F	; 127
    1886:	57 e4       	ldi	r21, 0x47	; 71
    1888:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    188c:	18 16       	cp	r1, r24
    188e:	4c f5       	brge	.+82     	; 0x18e2 <ADCNotifFunc+0x318>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1890:	6b 85       	ldd	r22, Y+11	; 0x0b
    1892:	7c 85       	ldd	r23, Y+12	; 0x0c
    1894:	8d 85       	ldd	r24, Y+13	; 0x0d
    1896:	9e 85       	ldd	r25, Y+14	; 0x0e
    1898:	20 e0       	ldi	r18, 0x00	; 0
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	40 e2       	ldi	r20, 0x20	; 32
    189e:	51 e4       	ldi	r21, 0x41	; 65
    18a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18a4:	dc 01       	movw	r26, r24
    18a6:	cb 01       	movw	r24, r22
    18a8:	bc 01       	movw	r22, r24
    18aa:	cd 01       	movw	r24, r26
    18ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18b0:	dc 01       	movw	r26, r24
    18b2:	cb 01       	movw	r24, r22
    18b4:	9e 83       	std	Y+6, r25	; 0x06
    18b6:	8d 83       	std	Y+5, r24	; 0x05
    18b8:	0f c0       	rjmp	.+30     	; 0x18d8 <ADCNotifFunc+0x30e>
    18ba:	88 ec       	ldi	r24, 0xC8	; 200
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	9c 83       	std	Y+4, r25	; 0x04
    18c0:	8b 83       	std	Y+3, r24	; 0x03
    18c2:	8b 81       	ldd	r24, Y+3	; 0x03
    18c4:	9c 81       	ldd	r25, Y+4	; 0x04
    18c6:	01 97       	sbiw	r24, 0x01	; 1
    18c8:	f1 f7       	brne	.-4      	; 0x18c6 <ADCNotifFunc+0x2fc>
    18ca:	9c 83       	std	Y+4, r25	; 0x04
    18cc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18ce:	8d 81       	ldd	r24, Y+5	; 0x05
    18d0:	9e 81       	ldd	r25, Y+6	; 0x06
    18d2:	01 97       	sbiw	r24, 0x01	; 1
    18d4:	9e 83       	std	Y+6, r25	; 0x06
    18d6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18d8:	8d 81       	ldd	r24, Y+5	; 0x05
    18da:	9e 81       	ldd	r25, Y+6	; 0x06
    18dc:	00 97       	sbiw	r24, 0x00	; 0
    18de:	69 f7       	brne	.-38     	; 0x18ba <ADCNotifFunc+0x2f0>
    18e0:	14 c0       	rjmp	.+40     	; 0x190a <ADCNotifFunc+0x340>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18e2:	6f 81       	ldd	r22, Y+7	; 0x07
    18e4:	78 85       	ldd	r23, Y+8	; 0x08
    18e6:	89 85       	ldd	r24, Y+9	; 0x09
    18e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ee:	dc 01       	movw	r26, r24
    18f0:	cb 01       	movw	r24, r22
    18f2:	9e 83       	std	Y+6, r25	; 0x06
    18f4:	8d 83       	std	Y+5, r24	; 0x05
    18f6:	8d 81       	ldd	r24, Y+5	; 0x05
    18f8:	9e 81       	ldd	r25, Y+6	; 0x06
    18fa:	9a 83       	std	Y+2, r25	; 0x02
    18fc:	89 83       	std	Y+1, r24	; 0x01
    18fe:	89 81       	ldd	r24, Y+1	; 0x01
    1900:	9a 81       	ldd	r25, Y+2	; 0x02
    1902:	01 97       	sbiw	r24, 0x01	; 1
    1904:	f1 f7       	brne	.-4      	; 0x1902 <ADCNotifFunc+0x338>
    1906:	9a 83       	std	Y+2, r25	; 0x02
    1908:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
}
    190a:	64 96       	adiw	r28, 0x14	; 20
    190c:	0f b6       	in	r0, 0x3f	; 63
    190e:	f8 94       	cli
    1910:	de bf       	out	0x3e, r29	; 62
    1912:	0f be       	out	0x3f, r0	; 63
    1914:	cd bf       	out	0x3d, r28	; 61
    1916:	cf 91       	pop	r28
    1918:	df 91       	pop	r29
    191a:	1f 91       	pop	r17
    191c:	0f 91       	pop	r16
    191e:	ff 90       	pop	r15
    1920:	ef 90       	pop	r14
    1922:	df 90       	pop	r13
    1924:	cf 90       	pop	r12
    1926:	bf 90       	pop	r11
    1928:	af 90       	pop	r10
    192a:	08 95       	ret

0000192c <CLCD_voidSendCommand>:
#include "CLCD_private.h"
#include "CLCD_config.h"



void CLCD_voidSendCommand(u8 Copy_u8Command){
    192c:	df 93       	push	r29
    192e:	cf 93       	push	r28
    1930:	cd b7       	in	r28, 0x3d	; 61
    1932:	de b7       	in	r29, 0x3e	; 62
    1934:	2f 97       	sbiw	r28, 0x0f	; 15
    1936:	0f b6       	in	r0, 0x3f	; 63
    1938:	f8 94       	cli
    193a:	de bf       	out	0x3e, r29	; 62
    193c:	0f be       	out	0x3f, r0	; 63
    193e:	cd bf       	out	0x3d, r28	; 61
    1940:	8f 87       	std	Y+15, r24	; 0x0f
	/*set RS pin to low for command*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
    1942:	80 e0       	ldi	r24, 0x00	; 0
    1944:	67 e0       	ldi	r22, 0x07	; 7
    1946:	40 e0       	ldi	r20, 0x00	; 0
    1948:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DIO_u8SetPinValue>
	/*set RW pin to low for write*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
    194c:	80 e0       	ldi	r24, 0x00	; 0
    194e:	66 e0       	ldi	r22, 0x06	; 6
    1950:	40 e0       	ldi	r20, 0x00	; 0
    1952:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DIO_u8SetPinValue>
	/*set data port to command*/
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Command);
    1956:	82 e0       	ldi	r24, 0x02	; 2
    1958:	6f 85       	ldd	r22, Y+15	; 0x0f
    195a:	0e 94 c5 10 	call	0x218a	; 0x218a <DIO_u8SetPortValue>
	/*send enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    195e:	80 e0       	ldi	r24, 0x00	; 0
    1960:	65 e0       	ldi	r22, 0x05	; 5
    1962:	41 e0       	ldi	r20, 0x01	; 1
    1964:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DIO_u8SetPinValue>
    1968:	80 e0       	ldi	r24, 0x00	; 0
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	a0 e0       	ldi	r26, 0x00	; 0
    196e:	b0 e4       	ldi	r27, 0x40	; 64
    1970:	8b 87       	std	Y+11, r24	; 0x0b
    1972:	9c 87       	std	Y+12, r25	; 0x0c
    1974:	ad 87       	std	Y+13, r26	; 0x0d
    1976:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1978:	6b 85       	ldd	r22, Y+11	; 0x0b
    197a:	7c 85       	ldd	r23, Y+12	; 0x0c
    197c:	8d 85       	ldd	r24, Y+13	; 0x0d
    197e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1980:	20 e0       	ldi	r18, 0x00	; 0
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	4a ef       	ldi	r20, 0xFA	; 250
    1986:	54 e4       	ldi	r21, 0x44	; 68
    1988:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    198c:	dc 01       	movw	r26, r24
    198e:	cb 01       	movw	r24, r22
    1990:	8f 83       	std	Y+7, r24	; 0x07
    1992:	98 87       	std	Y+8, r25	; 0x08
    1994:	a9 87       	std	Y+9, r26	; 0x09
    1996:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1998:	6f 81       	ldd	r22, Y+7	; 0x07
    199a:	78 85       	ldd	r23, Y+8	; 0x08
    199c:	89 85       	ldd	r24, Y+9	; 0x09
    199e:	9a 85       	ldd	r25, Y+10	; 0x0a
    19a0:	20 e0       	ldi	r18, 0x00	; 0
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	40 e8       	ldi	r20, 0x80	; 128
    19a6:	5f e3       	ldi	r21, 0x3F	; 63
    19a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19ac:	88 23       	and	r24, r24
    19ae:	2c f4       	brge	.+10     	; 0x19ba <CLCD_voidSendCommand+0x8e>
		__ticks = 1;
    19b0:	81 e0       	ldi	r24, 0x01	; 1
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	9e 83       	std	Y+6, r25	; 0x06
    19b6:	8d 83       	std	Y+5, r24	; 0x05
    19b8:	3f c0       	rjmp	.+126    	; 0x1a38 <CLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    19ba:	6f 81       	ldd	r22, Y+7	; 0x07
    19bc:	78 85       	ldd	r23, Y+8	; 0x08
    19be:	89 85       	ldd	r24, Y+9	; 0x09
    19c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    19c2:	20 e0       	ldi	r18, 0x00	; 0
    19c4:	3f ef       	ldi	r19, 0xFF	; 255
    19c6:	4f e7       	ldi	r20, 0x7F	; 127
    19c8:	57 e4       	ldi	r21, 0x47	; 71
    19ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19ce:	18 16       	cp	r1, r24
    19d0:	4c f5       	brge	.+82     	; 0x1a24 <CLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    19d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    19d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    19d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    19da:	20 e0       	ldi	r18, 0x00	; 0
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	40 e2       	ldi	r20, 0x20	; 32
    19e0:	51 e4       	ldi	r21, 0x41	; 65
    19e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19e6:	dc 01       	movw	r26, r24
    19e8:	cb 01       	movw	r24, r22
    19ea:	bc 01       	movw	r22, r24
    19ec:	cd 01       	movw	r24, r26
    19ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19f2:	dc 01       	movw	r26, r24
    19f4:	cb 01       	movw	r24, r22
    19f6:	9e 83       	std	Y+6, r25	; 0x06
    19f8:	8d 83       	std	Y+5, r24	; 0x05
    19fa:	0f c0       	rjmp	.+30     	; 0x1a1a <CLCD_voidSendCommand+0xee>
    19fc:	88 ec       	ldi	r24, 0xC8	; 200
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	9c 83       	std	Y+4, r25	; 0x04
    1a02:	8b 83       	std	Y+3, r24	; 0x03
    1a04:	8b 81       	ldd	r24, Y+3	; 0x03
    1a06:	9c 81       	ldd	r25, Y+4	; 0x04
    1a08:	01 97       	sbiw	r24, 0x01	; 1
    1a0a:	f1 f7       	brne	.-4      	; 0x1a08 <CLCD_voidSendCommand+0xdc>
    1a0c:	9c 83       	std	Y+4, r25	; 0x04
    1a0e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a10:	8d 81       	ldd	r24, Y+5	; 0x05
    1a12:	9e 81       	ldd	r25, Y+6	; 0x06
    1a14:	01 97       	sbiw	r24, 0x01	; 1
    1a16:	9e 83       	std	Y+6, r25	; 0x06
    1a18:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a1e:	00 97       	sbiw	r24, 0x00	; 0
    1a20:	69 f7       	brne	.-38     	; 0x19fc <CLCD_voidSendCommand+0xd0>
    1a22:	14 c0       	rjmp	.+40     	; 0x1a4c <CLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a24:	6f 81       	ldd	r22, Y+7	; 0x07
    1a26:	78 85       	ldd	r23, Y+8	; 0x08
    1a28:	89 85       	ldd	r24, Y+9	; 0x09
    1a2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a30:	dc 01       	movw	r26, r24
    1a32:	cb 01       	movw	r24, r22
    1a34:	9e 83       	std	Y+6, r25	; 0x06
    1a36:	8d 83       	std	Y+5, r24	; 0x05
    1a38:	8d 81       	ldd	r24, Y+5	; 0x05
    1a3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a3c:	9a 83       	std	Y+2, r25	; 0x02
    1a3e:	89 83       	std	Y+1, r24	; 0x01
    1a40:	89 81       	ldd	r24, Y+1	; 0x01
    1a42:	9a 81       	ldd	r25, Y+2	; 0x02
    1a44:	01 97       	sbiw	r24, 0x01	; 1
    1a46:	f1 f7       	brne	.-4      	; 0x1a44 <CLCD_voidSendCommand+0x118>
    1a48:	9a 83       	std	Y+2, r25	; 0x02
    1a4a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    1a4c:	80 e0       	ldi	r24, 0x00	; 0
    1a4e:	65 e0       	ldi	r22, 0x05	; 5
    1a50:	40 e0       	ldi	r20, 0x00	; 0
    1a52:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DIO_u8SetPinValue>
}
    1a56:	2f 96       	adiw	r28, 0x0f	; 15
    1a58:	0f b6       	in	r0, 0x3f	; 63
    1a5a:	f8 94       	cli
    1a5c:	de bf       	out	0x3e, r29	; 62
    1a5e:	0f be       	out	0x3f, r0	; 63
    1a60:	cd bf       	out	0x3d, r28	; 61
    1a62:	cf 91       	pop	r28
    1a64:	df 91       	pop	r29
    1a66:	08 95       	ret

00001a68 <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data){
    1a68:	df 93       	push	r29
    1a6a:	cf 93       	push	r28
    1a6c:	cd b7       	in	r28, 0x3d	; 61
    1a6e:	de b7       	in	r29, 0x3e	; 62
    1a70:	2f 97       	sbiw	r28, 0x0f	; 15
    1a72:	0f b6       	in	r0, 0x3f	; 63
    1a74:	f8 94       	cli
    1a76:	de bf       	out	0x3e, r29	; 62
    1a78:	0f be       	out	0x3f, r0	; 63
    1a7a:	cd bf       	out	0x3d, r28	; 61
    1a7c:	8f 87       	std	Y+15, r24	; 0x0f
	/*set RS pin to high for data*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
    1a7e:	80 e0       	ldi	r24, 0x00	; 0
    1a80:	67 e0       	ldi	r22, 0x07	; 7
    1a82:	41 e0       	ldi	r20, 0x01	; 1
    1a84:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DIO_u8SetPinValue>
	/*set RW pin to low for write*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
    1a88:	80 e0       	ldi	r24, 0x00	; 0
    1a8a:	66 e0       	ldi	r22, 0x06	; 6
    1a8c:	40 e0       	ldi	r20, 0x00	; 0
    1a8e:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DIO_u8SetPinValue>
	/*set data port to data*/
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Data);
    1a92:	82 e0       	ldi	r24, 0x02	; 2
    1a94:	6f 85       	ldd	r22, Y+15	; 0x0f
    1a96:	0e 94 c5 10 	call	0x218a	; 0x218a <DIO_u8SetPortValue>
	/*send enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    1a9a:	80 e0       	ldi	r24, 0x00	; 0
    1a9c:	65 e0       	ldi	r22, 0x05	; 5
    1a9e:	41 e0       	ldi	r20, 0x01	; 1
    1aa0:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DIO_u8SetPinValue>
    1aa4:	80 e0       	ldi	r24, 0x00	; 0
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	a0 e0       	ldi	r26, 0x00	; 0
    1aaa:	b0 e4       	ldi	r27, 0x40	; 64
    1aac:	8b 87       	std	Y+11, r24	; 0x0b
    1aae:	9c 87       	std	Y+12, r25	; 0x0c
    1ab0:	ad 87       	std	Y+13, r26	; 0x0d
    1ab2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ab4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ab6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ab8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aba:	9e 85       	ldd	r25, Y+14	; 0x0e
    1abc:	20 e0       	ldi	r18, 0x00	; 0
    1abe:	30 e0       	ldi	r19, 0x00	; 0
    1ac0:	4a ef       	ldi	r20, 0xFA	; 250
    1ac2:	54 e4       	ldi	r21, 0x44	; 68
    1ac4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ac8:	dc 01       	movw	r26, r24
    1aca:	cb 01       	movw	r24, r22
    1acc:	8f 83       	std	Y+7, r24	; 0x07
    1ace:	98 87       	std	Y+8, r25	; 0x08
    1ad0:	a9 87       	std	Y+9, r26	; 0x09
    1ad2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ad4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ad6:	78 85       	ldd	r23, Y+8	; 0x08
    1ad8:	89 85       	ldd	r24, Y+9	; 0x09
    1ada:	9a 85       	ldd	r25, Y+10	; 0x0a
    1adc:	20 e0       	ldi	r18, 0x00	; 0
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	40 e8       	ldi	r20, 0x80	; 128
    1ae2:	5f e3       	ldi	r21, 0x3F	; 63
    1ae4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ae8:	88 23       	and	r24, r24
    1aea:	2c f4       	brge	.+10     	; 0x1af6 <CLCD_voidSendData+0x8e>
		__ticks = 1;
    1aec:	81 e0       	ldi	r24, 0x01	; 1
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	9e 83       	std	Y+6, r25	; 0x06
    1af2:	8d 83       	std	Y+5, r24	; 0x05
    1af4:	3f c0       	rjmp	.+126    	; 0x1b74 <CLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    1af6:	6f 81       	ldd	r22, Y+7	; 0x07
    1af8:	78 85       	ldd	r23, Y+8	; 0x08
    1afa:	89 85       	ldd	r24, Y+9	; 0x09
    1afc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1afe:	20 e0       	ldi	r18, 0x00	; 0
    1b00:	3f ef       	ldi	r19, 0xFF	; 255
    1b02:	4f e7       	ldi	r20, 0x7F	; 127
    1b04:	57 e4       	ldi	r21, 0x47	; 71
    1b06:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b0a:	18 16       	cp	r1, r24
    1b0c:	4c f5       	brge	.+82     	; 0x1b60 <CLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b10:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b12:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b14:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b16:	20 e0       	ldi	r18, 0x00	; 0
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	40 e2       	ldi	r20, 0x20	; 32
    1b1c:	51 e4       	ldi	r21, 0x41	; 65
    1b1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b22:	dc 01       	movw	r26, r24
    1b24:	cb 01       	movw	r24, r22
    1b26:	bc 01       	movw	r22, r24
    1b28:	cd 01       	movw	r24, r26
    1b2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b2e:	dc 01       	movw	r26, r24
    1b30:	cb 01       	movw	r24, r22
    1b32:	9e 83       	std	Y+6, r25	; 0x06
    1b34:	8d 83       	std	Y+5, r24	; 0x05
    1b36:	0f c0       	rjmp	.+30     	; 0x1b56 <CLCD_voidSendData+0xee>
    1b38:	88 ec       	ldi	r24, 0xC8	; 200
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	9c 83       	std	Y+4, r25	; 0x04
    1b3e:	8b 83       	std	Y+3, r24	; 0x03
    1b40:	8b 81       	ldd	r24, Y+3	; 0x03
    1b42:	9c 81       	ldd	r25, Y+4	; 0x04
    1b44:	01 97       	sbiw	r24, 0x01	; 1
    1b46:	f1 f7       	brne	.-4      	; 0x1b44 <CLCD_voidSendData+0xdc>
    1b48:	9c 83       	std	Y+4, r25	; 0x04
    1b4a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b50:	01 97       	sbiw	r24, 0x01	; 1
    1b52:	9e 83       	std	Y+6, r25	; 0x06
    1b54:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b56:	8d 81       	ldd	r24, Y+5	; 0x05
    1b58:	9e 81       	ldd	r25, Y+6	; 0x06
    1b5a:	00 97       	sbiw	r24, 0x00	; 0
    1b5c:	69 f7       	brne	.-38     	; 0x1b38 <CLCD_voidSendData+0xd0>
    1b5e:	14 c0       	rjmp	.+40     	; 0x1b88 <CLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b60:	6f 81       	ldd	r22, Y+7	; 0x07
    1b62:	78 85       	ldd	r23, Y+8	; 0x08
    1b64:	89 85       	ldd	r24, Y+9	; 0x09
    1b66:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b6c:	dc 01       	movw	r26, r24
    1b6e:	cb 01       	movw	r24, r22
    1b70:	9e 83       	std	Y+6, r25	; 0x06
    1b72:	8d 83       	std	Y+5, r24	; 0x05
    1b74:	8d 81       	ldd	r24, Y+5	; 0x05
    1b76:	9e 81       	ldd	r25, Y+6	; 0x06
    1b78:	9a 83       	std	Y+2, r25	; 0x02
    1b7a:	89 83       	std	Y+1, r24	; 0x01
    1b7c:	89 81       	ldd	r24, Y+1	; 0x01
    1b7e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b80:	01 97       	sbiw	r24, 0x01	; 1
    1b82:	f1 f7       	brne	.-4      	; 0x1b80 <CLCD_voidSendData+0x118>
    1b84:	9a 83       	std	Y+2, r25	; 0x02
    1b86:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    1b88:	80 e0       	ldi	r24, 0x00	; 0
    1b8a:	65 e0       	ldi	r22, 0x05	; 5
    1b8c:	40 e0       	ldi	r20, 0x00	; 0
    1b8e:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DIO_u8SetPinValue>
}
    1b92:	2f 96       	adiw	r28, 0x0f	; 15
    1b94:	0f b6       	in	r0, 0x3f	; 63
    1b96:	f8 94       	cli
    1b98:	de bf       	out	0x3e, r29	; 62
    1b9a:	0f be       	out	0x3f, r0	; 63
    1b9c:	cd bf       	out	0x3d, r28	; 61
    1b9e:	cf 91       	pop	r28
    1ba0:	df 91       	pop	r29
    1ba2:	08 95       	ret

00001ba4 <CLCD_voidSendString>:
void CLCD_voidSendString(const char* Copy_pcString){
    1ba4:	df 93       	push	r29
    1ba6:	cf 93       	push	r28
    1ba8:	00 d0       	rcall	.+0      	; 0x1baa <CLCD_voidSendString+0x6>
    1baa:	cd b7       	in	r28, 0x3d	; 61
    1bac:	de b7       	in	r29, 0x3e	; 62
    1bae:	9a 83       	std	Y+2, r25	; 0x02
    1bb0:	89 83       	std	Y+1, r24	; 0x01
    1bb2:	0a c0       	rjmp	.+20     	; 0x1bc8 <CLCD_voidSendString+0x24>
	while(*Copy_pcString != '\0'){
		CLCD_voidSendData(*Copy_pcString);
    1bb4:	e9 81       	ldd	r30, Y+1	; 0x01
    1bb6:	fa 81       	ldd	r31, Y+2	; 0x02
    1bb8:	80 81       	ld	r24, Z
    1bba:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <CLCD_voidSendData>
		Copy_pcString++;
    1bbe:	89 81       	ldd	r24, Y+1	; 0x01
    1bc0:	9a 81       	ldd	r25, Y+2	; 0x02
    1bc2:	01 96       	adiw	r24, 0x01	; 1
    1bc4:	9a 83       	std	Y+2, r25	; 0x02
    1bc6:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
}
void CLCD_voidSendString(const char* Copy_pcString){
	while(*Copy_pcString != '\0'){
    1bc8:	e9 81       	ldd	r30, Y+1	; 0x01
    1bca:	fa 81       	ldd	r31, Y+2	; 0x02
    1bcc:	80 81       	ld	r24, Z
    1bce:	88 23       	and	r24, r24
    1bd0:	89 f7       	brne	.-30     	; 0x1bb4 <CLCD_voidSendString+0x10>
		CLCD_voidSendData(*Copy_pcString);
		Copy_pcString++;
	}
}
    1bd2:	0f 90       	pop	r0
    1bd4:	0f 90       	pop	r0
    1bd6:	cf 91       	pop	r28
    1bd8:	df 91       	pop	r29
    1bda:	08 95       	ret

00001bdc <CLCD_voidInit>:
void CLCD_voidInit(void){
    1bdc:	df 93       	push	r29
    1bde:	cf 93       	push	r28
    1be0:	cd b7       	in	r28, 0x3d	; 61
    1be2:	de b7       	in	r29, 0x3e	; 62
    1be4:	2e 97       	sbiw	r28, 0x0e	; 14
    1be6:	0f b6       	in	r0, 0x3f	; 63
    1be8:	f8 94       	cli
    1bea:	de bf       	out	0x3e, r29	; 62
    1bec:	0f be       	out	0x3f, r0	; 63
    1bee:	cd bf       	out	0x3d, r28	; 61
    1bf0:	80 e0       	ldi	r24, 0x00	; 0
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	a0 e2       	ldi	r26, 0x20	; 32
    1bf6:	b2 e4       	ldi	r27, 0x42	; 66
    1bf8:	8b 87       	std	Y+11, r24	; 0x0b
    1bfa:	9c 87       	std	Y+12, r25	; 0x0c
    1bfc:	ad 87       	std	Y+13, r26	; 0x0d
    1bfe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c00:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c02:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c04:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c06:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c08:	20 e0       	ldi	r18, 0x00	; 0
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	4a ef       	ldi	r20, 0xFA	; 250
    1c0e:	54 e4       	ldi	r21, 0x44	; 68
    1c10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c14:	dc 01       	movw	r26, r24
    1c16:	cb 01       	movw	r24, r22
    1c18:	8f 83       	std	Y+7, r24	; 0x07
    1c1a:	98 87       	std	Y+8, r25	; 0x08
    1c1c:	a9 87       	std	Y+9, r26	; 0x09
    1c1e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c20:	6f 81       	ldd	r22, Y+7	; 0x07
    1c22:	78 85       	ldd	r23, Y+8	; 0x08
    1c24:	89 85       	ldd	r24, Y+9	; 0x09
    1c26:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c28:	20 e0       	ldi	r18, 0x00	; 0
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	40 e8       	ldi	r20, 0x80	; 128
    1c2e:	5f e3       	ldi	r21, 0x3F	; 63
    1c30:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c34:	88 23       	and	r24, r24
    1c36:	2c f4       	brge	.+10     	; 0x1c42 <CLCD_voidInit+0x66>
		__ticks = 1;
    1c38:	81 e0       	ldi	r24, 0x01	; 1
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	9e 83       	std	Y+6, r25	; 0x06
    1c3e:	8d 83       	std	Y+5, r24	; 0x05
    1c40:	3f c0       	rjmp	.+126    	; 0x1cc0 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    1c42:	6f 81       	ldd	r22, Y+7	; 0x07
    1c44:	78 85       	ldd	r23, Y+8	; 0x08
    1c46:	89 85       	ldd	r24, Y+9	; 0x09
    1c48:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c4a:	20 e0       	ldi	r18, 0x00	; 0
    1c4c:	3f ef       	ldi	r19, 0xFF	; 255
    1c4e:	4f e7       	ldi	r20, 0x7F	; 127
    1c50:	57 e4       	ldi	r21, 0x47	; 71
    1c52:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c56:	18 16       	cp	r1, r24
    1c58:	4c f5       	brge	.+82     	; 0x1cac <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c60:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c62:	20 e0       	ldi	r18, 0x00	; 0
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	40 e2       	ldi	r20, 0x20	; 32
    1c68:	51 e4       	ldi	r21, 0x41	; 65
    1c6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c6e:	dc 01       	movw	r26, r24
    1c70:	cb 01       	movw	r24, r22
    1c72:	bc 01       	movw	r22, r24
    1c74:	cd 01       	movw	r24, r26
    1c76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c7a:	dc 01       	movw	r26, r24
    1c7c:	cb 01       	movw	r24, r22
    1c7e:	9e 83       	std	Y+6, r25	; 0x06
    1c80:	8d 83       	std	Y+5, r24	; 0x05
    1c82:	0f c0       	rjmp	.+30     	; 0x1ca2 <CLCD_voidInit+0xc6>
    1c84:	88 ec       	ldi	r24, 0xC8	; 200
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	9c 83       	std	Y+4, r25	; 0x04
    1c8a:	8b 83       	std	Y+3, r24	; 0x03
    1c8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c90:	01 97       	sbiw	r24, 0x01	; 1
    1c92:	f1 f7       	brne	.-4      	; 0x1c90 <CLCD_voidInit+0xb4>
    1c94:	9c 83       	std	Y+4, r25	; 0x04
    1c96:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c98:	8d 81       	ldd	r24, Y+5	; 0x05
    1c9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c9c:	01 97       	sbiw	r24, 0x01	; 1
    1c9e:	9e 83       	std	Y+6, r25	; 0x06
    1ca0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ca2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ca6:	00 97       	sbiw	r24, 0x00	; 0
    1ca8:	69 f7       	brne	.-38     	; 0x1c84 <CLCD_voidInit+0xa8>
    1caa:	14 c0       	rjmp	.+40     	; 0x1cd4 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cac:	6f 81       	ldd	r22, Y+7	; 0x07
    1cae:	78 85       	ldd	r23, Y+8	; 0x08
    1cb0:	89 85       	ldd	r24, Y+9	; 0x09
    1cb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cb8:	dc 01       	movw	r26, r24
    1cba:	cb 01       	movw	r24, r22
    1cbc:	9e 83       	std	Y+6, r25	; 0x06
    1cbe:	8d 83       	std	Y+5, r24	; 0x05
    1cc0:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc2:	9e 81       	ldd	r25, Y+6	; 0x06
    1cc4:	9a 83       	std	Y+2, r25	; 0x02
    1cc6:	89 83       	std	Y+1, r24	; 0x01
    1cc8:	89 81       	ldd	r24, Y+1	; 0x01
    1cca:	9a 81       	ldd	r25, Y+2	; 0x02
    1ccc:	01 97       	sbiw	r24, 0x01	; 1
    1cce:	f1 f7       	brne	.-4      	; 0x1ccc <CLCD_voidInit+0xf0>
    1cd0:	9a 83       	std	Y+2, r25	; 0x02
    1cd2:	89 83       	std	Y+1, r24	; 0x01
	/*wait for more than 30 ms*/
	_delay_ms(40);
	/*Function Set Command: 2 lines, 5*8 Font Size*/
	CLCD_voidSendCommand(0b00111000);
    1cd4:	88 e3       	ldi	r24, 0x38	; 56
    1cd6:	0e 94 96 0c 	call	0x192c	; 0x192c <CLCD_voidSendCommand>
	/*Display control on off: enable display disable cursor no blinking cursor*/
	CLCD_voidSendCommand(0b00001100);
    1cda:	8c e0       	ldi	r24, 0x0C	; 12
    1cdc:	0e 94 96 0c 	call	0x192c	; 0x192c <CLCD_voidSendCommand>
	/*clear display*/
	CLCD_voidSendCommand(1);
    1ce0:	81 e0       	ldi	r24, 0x01	; 1
    1ce2:	0e 94 96 0c 	call	0x192c	; 0x192c <CLCD_voidSendCommand>


}
    1ce6:	2e 96       	adiw	r28, 0x0e	; 14
    1ce8:	0f b6       	in	r0, 0x3f	; 63
    1cea:	f8 94       	cli
    1cec:	de bf       	out	0x3e, r29	; 62
    1cee:	0f be       	out	0x3f, r0	; 63
    1cf0:	cd bf       	out	0x3d, r28	; 61
    1cf2:	cf 91       	pop	r28
    1cf4:	df 91       	pop	r29
    1cf6:	08 95       	ret

00001cf8 <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(u8 Copy_u8XPos,u8 Copy_u8YPos){
    1cf8:	df 93       	push	r29
    1cfa:	cf 93       	push	r28
    1cfc:	00 d0       	rcall	.+0      	; 0x1cfe <CLCD_voidGoToXY+0x6>
    1cfe:	0f 92       	push	r0
    1d00:	cd b7       	in	r28, 0x3d	; 61
    1d02:	de b7       	in	r29, 0x3e	; 62
    1d04:	8a 83       	std	Y+2, r24	; 0x02
    1d06:	6b 83       	std	Y+3, r22	; 0x03
	/*converting the position into an address*/
	u8 Local_u8Adress;
	if(Copy_u8XPos==0){
    1d08:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0a:	88 23       	and	r24, r24
    1d0c:	19 f4       	brne	.+6      	; 0x1d14 <CLCD_voidGoToXY+0x1c>
		Local_u8Adress = Copy_u8YPos;
    1d0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d10:	89 83       	std	Y+1, r24	; 0x01
    1d12:	06 c0       	rjmp	.+12     	; 0x1d20 <CLCD_voidGoToXY+0x28>
	}
	else if(Copy_u8XPos==1){
    1d14:	8a 81       	ldd	r24, Y+2	; 0x02
    1d16:	81 30       	cpi	r24, 0x01	; 1
    1d18:	19 f4       	brne	.+6      	; 0x1d20 <CLCD_voidGoToXY+0x28>
		Local_u8Adress = Copy_u8YPos+0x40;
    1d1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1c:	80 5c       	subi	r24, 0xC0	; 192
    1d1e:	89 83       	std	Y+1, r24	; 0x01
	}
	/*setting the 7th bit so we can send the set ddram address command*/
	SET_BIT(Local_u8Adress,7);
    1d20:	89 81       	ldd	r24, Y+1	; 0x01
    1d22:	80 68       	ori	r24, 0x80	; 128
    1d24:	89 83       	std	Y+1, r24	; 0x01
	CLCD_voidSendCommand(Local_u8Adress);
    1d26:	89 81       	ldd	r24, Y+1	; 0x01
    1d28:	0e 94 96 0c 	call	0x192c	; 0x192c <CLCD_voidSendCommand>
}
    1d2c:	0f 90       	pop	r0
    1d2e:	0f 90       	pop	r0
    1d30:	0f 90       	pop	r0
    1d32:	cf 91       	pop	r28
    1d34:	df 91       	pop	r29
    1d36:	08 95       	ret

00001d38 <CLCD_voidWriteSpecialCharacter>:

void CLCD_voidWriteSpecialCharacter(u8* Copy_pu8Arr,u8 Copy_u8PatternNumber){
    1d38:	df 93       	push	r29
    1d3a:	cf 93       	push	r28
    1d3c:	00 d0       	rcall	.+0      	; 0x1d3e <CLCD_voidWriteSpecialCharacter+0x6>
    1d3e:	00 d0       	rcall	.+0      	; 0x1d40 <CLCD_voidWriteSpecialCharacter+0x8>
    1d40:	0f 92       	push	r0
    1d42:	cd b7       	in	r28, 0x3d	; 61
    1d44:	de b7       	in	r29, 0x3e	; 62
    1d46:	9c 83       	std	Y+4, r25	; 0x04
    1d48:	8b 83       	std	Y+3, r24	; 0x03
    1d4a:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8Iterator;
	/*calculate CGRAM address of block 8 bytes*/
	u8 Local_u8CGRAMAdress = Copy_u8PatternNumber*8;
    1d4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d4e:	88 2f       	mov	r24, r24
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	88 0f       	add	r24, r24
    1d54:	99 1f       	adc	r25, r25
    1d56:	88 0f       	add	r24, r24
    1d58:	99 1f       	adc	r25, r25
    1d5a:	88 0f       	add	r24, r24
    1d5c:	99 1f       	adc	r25, r25
    1d5e:	89 83       	std	Y+1, r24	; 0x01
	/*set bit 6 for command and set the CGRAM address command*/
	SET_BIT(Local_u8CGRAMAdress,6);
    1d60:	89 81       	ldd	r24, Y+1	; 0x01
    1d62:	80 64       	ori	r24, 0x40	; 64
    1d64:	89 83       	std	Y+1, r24	; 0x01
	CLCD_voidSendCommand(Local_u8CGRAMAdress);
    1d66:	89 81       	ldd	r24, Y+1	; 0x01
    1d68:	0e 94 96 0c 	call	0x192c	; 0x192c <CLCD_voidSendCommand>
	/*write the pattern on CGRAM*/
	for(Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++){
    1d6c:	1a 82       	std	Y+2, r1	; 0x02
    1d6e:	0e c0       	rjmp	.+28     	; 0x1d8c <CLCD_voidWriteSpecialCharacter+0x54>
		CLCD_voidSendData(Copy_pu8Arr[Local_u8Iterator]);
    1d70:	8a 81       	ldd	r24, Y+2	; 0x02
    1d72:	28 2f       	mov	r18, r24
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	8b 81       	ldd	r24, Y+3	; 0x03
    1d78:	9c 81       	ldd	r25, Y+4	; 0x04
    1d7a:	fc 01       	movw	r30, r24
    1d7c:	e2 0f       	add	r30, r18
    1d7e:	f3 1f       	adc	r31, r19
    1d80:	80 81       	ld	r24, Z
    1d82:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <CLCD_voidSendData>
	u8 Local_u8CGRAMAdress = Copy_u8PatternNumber*8;
	/*set bit 6 for command and set the CGRAM address command*/
	SET_BIT(Local_u8CGRAMAdress,6);
	CLCD_voidSendCommand(Local_u8CGRAMAdress);
	/*write the pattern on CGRAM*/
	for(Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++){
    1d86:	8a 81       	ldd	r24, Y+2	; 0x02
    1d88:	8f 5f       	subi	r24, 0xFF	; 255
    1d8a:	8a 83       	std	Y+2, r24	; 0x02
    1d8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8e:	88 30       	cpi	r24, 0x08	; 8
    1d90:	78 f3       	brcs	.-34     	; 0x1d70 <CLCD_voidWriteSpecialCharacter+0x38>
		CLCD_voidSendData(Copy_pu8Arr[Local_u8Iterator]);
	}
}
    1d92:	0f 90       	pop	r0
    1d94:	0f 90       	pop	r0
    1d96:	0f 90       	pop	r0
    1d98:	0f 90       	pop	r0
    1d9a:	0f 90       	pop	r0
    1d9c:	cf 91       	pop	r28
    1d9e:	df 91       	pop	r29
    1da0:	08 95       	ret

00001da2 <CLCD_voidSendSpecialCharacter>:
void CLCD_voidSendSpecialCharacter(u8 Copy_u8PatternNumber,u8 Copy_u8XPos,u8 Copy_u8YPos){
    1da2:	df 93       	push	r29
    1da4:	cf 93       	push	r28
    1da6:	00 d0       	rcall	.+0      	; 0x1da8 <CLCD_voidSendSpecialCharacter+0x6>
    1da8:	0f 92       	push	r0
    1daa:	cd b7       	in	r28, 0x3d	; 61
    1dac:	de b7       	in	r29, 0x3e	; 62
    1dae:	89 83       	std	Y+1, r24	; 0x01
    1db0:	6a 83       	std	Y+2, r22	; 0x02
    1db2:	4b 83       	std	Y+3, r20	; 0x03
	/*go back to ddram to display pattern and send pattern by choosing battern blovk*/
	CLCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
    1db4:	8a 81       	ldd	r24, Y+2	; 0x02
    1db6:	6b 81       	ldd	r22, Y+3	; 0x03
    1db8:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <CLCD_voidGoToXY>
	CLCD_voidSendData(Copy_u8PatternNumber);
    1dbc:	89 81       	ldd	r24, Y+1	; 0x01
    1dbe:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <CLCD_voidSendData>
}
    1dc2:	0f 90       	pop	r0
    1dc4:	0f 90       	pop	r0
    1dc6:	0f 90       	pop	r0
    1dc8:	cf 91       	pop	r28
    1dca:	df 91       	pop	r29
    1dcc:	08 95       	ret

00001dce <CLCD_voidSendNumber>:


void CLCD_voidSendNumber(u32 Copy_u32Number){
    1dce:	df 93       	push	r29
    1dd0:	cf 93       	push	r28
    1dd2:	cd b7       	in	r28, 0x3d	; 61
    1dd4:	de b7       	in	r29, 0x3e	; 62
    1dd6:	2b 97       	sbiw	r28, 0x0b	; 11
    1dd8:	0f b6       	in	r0, 0x3f	; 63
    1dda:	f8 94       	cli
    1ddc:	de bf       	out	0x3e, r29	; 62
    1dde:	0f be       	out	0x3f, r0	; 63
    1de0:	cd bf       	out	0x3d, r28	; 61
    1de2:	68 87       	std	Y+8, r22	; 0x08
    1de4:	79 87       	std	Y+9, r23	; 0x09
    1de6:	8a 87       	std	Y+10, r24	; 0x0a
    1de8:	9b 87       	std	Y+11, r25	; 0x0b
	/*set local variables to know the number of digits and the digit to print*/
	u8 Local_u8Quotient=1;
    1dea:	81 e0       	ldi	r24, 0x01	; 1
    1dec:	8f 83       	std	Y+7, r24	; 0x07
	u8 Local_u8NumOfDigits=0;
    1dee:	1e 82       	std	Y+6, r1	; 0x06
    1df0:	1b c0       	rjmp	.+54     	; 0x1e28 <CLCD_voidSendNumber+0x5a>
    u8 Local_u8Digit;
    /*calculating the number of digits in the number*/
	while(Local_u8Quotient!=0){
		Local_u8Quotient = Copy_u32Number/MATH_u32Power(10,++Local_u8NumOfDigits);
    1df2:	8e 81       	ldd	r24, Y+6	; 0x06
    1df4:	8f 5f       	subi	r24, 0xFF	; 255
    1df6:	8e 83       	std	Y+6, r24	; 0x06
    1df8:	8e 81       	ldd	r24, Y+6	; 0x06
    1dfa:	28 2f       	mov	r18, r24
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	40 e0       	ldi	r20, 0x00	; 0
    1e00:	50 e0       	ldi	r21, 0x00	; 0
    1e02:	6a e0       	ldi	r22, 0x0A	; 10
    1e04:	70 e0       	ldi	r23, 0x00	; 0
    1e06:	80 e0       	ldi	r24, 0x00	; 0
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	0e 94 8b 12 	call	0x2516	; 0x2516 <MATH_u32Power>
    1e0e:	9b 01       	movw	r18, r22
    1e10:	ac 01       	movw	r20, r24
    1e12:	88 85       	ldd	r24, Y+8	; 0x08
    1e14:	99 85       	ldd	r25, Y+9	; 0x09
    1e16:	aa 85       	ldd	r26, Y+10	; 0x0a
    1e18:	bb 85       	ldd	r27, Y+11	; 0x0b
    1e1a:	bc 01       	movw	r22, r24
    1e1c:	cd 01       	movw	r24, r26
    1e1e:	0e 94 03 17 	call	0x2e06	; 0x2e06 <__udivmodsi4>
    1e22:	da 01       	movw	r26, r20
    1e24:	c9 01       	movw	r24, r18
    1e26:	8f 83       	std	Y+7, r24	; 0x07
	/*set local variables to know the number of digits and the digit to print*/
	u8 Local_u8Quotient=1;
	u8 Local_u8NumOfDigits=0;
    u8 Local_u8Digit;
    /*calculating the number of digits in the number*/
	while(Local_u8Quotient!=0){
    1e28:	8f 81       	ldd	r24, Y+7	; 0x07
    1e2a:	88 23       	and	r24, r24
    1e2c:	11 f7       	brne	.-60     	; 0x1df2 <CLCD_voidSendNumber+0x24>
		Local_u8Quotient = Copy_u32Number/MATH_u32Power(10,++Local_u8NumOfDigits);
	}
	/*separating each digit then sending then sending them separately to the CLCD*/
	for(s32 Local_u8Power =Local_u8NumOfDigits-1;Local_u8Power>=0;Local_u8Power--){
    1e2e:	8e 81       	ldd	r24, Y+6	; 0x06
    1e30:	88 2f       	mov	r24, r24
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	01 97       	sbiw	r24, 0x01	; 1
    1e36:	aa 27       	eor	r26, r26
    1e38:	97 fd       	sbrc	r25, 7
    1e3a:	a0 95       	com	r26
    1e3c:	ba 2f       	mov	r27, r26
    1e3e:	89 83       	std	Y+1, r24	; 0x01
    1e40:	9a 83       	std	Y+2, r25	; 0x02
    1e42:	ab 83       	std	Y+3, r26	; 0x03
    1e44:	bc 83       	std	Y+4, r27	; 0x04
    1e46:	42 c0       	rjmp	.+132    	; 0x1ecc <CLCD_voidSendNumber+0xfe>
	        Local_u8Digit=Copy_u32Number/MATH_u32Power(10,Local_u8Power);
    1e48:	29 81       	ldd	r18, Y+1	; 0x01
    1e4a:	3a 81       	ldd	r19, Y+2	; 0x02
    1e4c:	4b 81       	ldd	r20, Y+3	; 0x03
    1e4e:	5c 81       	ldd	r21, Y+4	; 0x04
    1e50:	6a e0       	ldi	r22, 0x0A	; 10
    1e52:	70 e0       	ldi	r23, 0x00	; 0
    1e54:	80 e0       	ldi	r24, 0x00	; 0
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	0e 94 8b 12 	call	0x2516	; 0x2516 <MATH_u32Power>
    1e5c:	9b 01       	movw	r18, r22
    1e5e:	ac 01       	movw	r20, r24
    1e60:	88 85       	ldd	r24, Y+8	; 0x08
    1e62:	99 85       	ldd	r25, Y+9	; 0x09
    1e64:	aa 85       	ldd	r26, Y+10	; 0x0a
    1e66:	bb 85       	ldd	r27, Y+11	; 0x0b
    1e68:	bc 01       	movw	r22, r24
    1e6a:	cd 01       	movw	r24, r26
    1e6c:	0e 94 03 17 	call	0x2e06	; 0x2e06 <__udivmodsi4>
    1e70:	da 01       	movw	r26, r20
    1e72:	c9 01       	movw	r24, r18
    1e74:	8d 83       	std	Y+5, r24	; 0x05
	        Copy_u32Number %= MATH_u32Power(10,Local_u8Power);
    1e76:	29 81       	ldd	r18, Y+1	; 0x01
    1e78:	3a 81       	ldd	r19, Y+2	; 0x02
    1e7a:	4b 81       	ldd	r20, Y+3	; 0x03
    1e7c:	5c 81       	ldd	r21, Y+4	; 0x04
    1e7e:	6a e0       	ldi	r22, 0x0A	; 10
    1e80:	70 e0       	ldi	r23, 0x00	; 0
    1e82:	80 e0       	ldi	r24, 0x00	; 0
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	0e 94 8b 12 	call	0x2516	; 0x2516 <MATH_u32Power>
    1e8a:	9b 01       	movw	r18, r22
    1e8c:	ac 01       	movw	r20, r24
    1e8e:	88 85       	ldd	r24, Y+8	; 0x08
    1e90:	99 85       	ldd	r25, Y+9	; 0x09
    1e92:	aa 85       	ldd	r26, Y+10	; 0x0a
    1e94:	bb 85       	ldd	r27, Y+11	; 0x0b
    1e96:	bc 01       	movw	r22, r24
    1e98:	cd 01       	movw	r24, r26
    1e9a:	0e 94 03 17 	call	0x2e06	; 0x2e06 <__udivmodsi4>
    1e9e:	dc 01       	movw	r26, r24
    1ea0:	cb 01       	movw	r24, r22
    1ea2:	88 87       	std	Y+8, r24	; 0x08
    1ea4:	99 87       	std	Y+9, r25	; 0x09
    1ea6:	aa 87       	std	Y+10, r26	; 0x0a
    1ea8:	bb 87       	std	Y+11, r27	; 0x0b
	        Local_u8Digit+=48;
    1eaa:	8d 81       	ldd	r24, Y+5	; 0x05
    1eac:	80 5d       	subi	r24, 0xD0	; 208
    1eae:	8d 83       	std	Y+5, r24	; 0x05
	        CLCD_voidSendData(Local_u8Digit);
    1eb0:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb2:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <CLCD_voidSendData>
    /*calculating the number of digits in the number*/
	while(Local_u8Quotient!=0){
		Local_u8Quotient = Copy_u32Number/MATH_u32Power(10,++Local_u8NumOfDigits);
	}
	/*separating each digit then sending then sending them separately to the CLCD*/
	for(s32 Local_u8Power =Local_u8NumOfDigits-1;Local_u8Power>=0;Local_u8Power--){
    1eb6:	89 81       	ldd	r24, Y+1	; 0x01
    1eb8:	9a 81       	ldd	r25, Y+2	; 0x02
    1eba:	ab 81       	ldd	r26, Y+3	; 0x03
    1ebc:	bc 81       	ldd	r27, Y+4	; 0x04
    1ebe:	01 97       	sbiw	r24, 0x01	; 1
    1ec0:	a1 09       	sbc	r26, r1
    1ec2:	b1 09       	sbc	r27, r1
    1ec4:	89 83       	std	Y+1, r24	; 0x01
    1ec6:	9a 83       	std	Y+2, r25	; 0x02
    1ec8:	ab 83       	std	Y+3, r26	; 0x03
    1eca:	bc 83       	std	Y+4, r27	; 0x04
    1ecc:	89 81       	ldd	r24, Y+1	; 0x01
    1ece:	9a 81       	ldd	r25, Y+2	; 0x02
    1ed0:	ab 81       	ldd	r26, Y+3	; 0x03
    1ed2:	bc 81       	ldd	r27, Y+4	; 0x04
    1ed4:	bb 23       	and	r27, r27
    1ed6:	0c f0       	brlt	.+2      	; 0x1eda <CLCD_voidSendNumber+0x10c>
    1ed8:	b7 cf       	rjmp	.-146    	; 0x1e48 <CLCD_voidSendNumber+0x7a>
	        Local_u8Digit=Copy_u32Number/MATH_u32Power(10,Local_u8Power);
	        Copy_u32Number %= MATH_u32Power(10,Local_u8Power);
	        Local_u8Digit+=48;
	        CLCD_voidSendData(Local_u8Digit);
	    }
}
    1eda:	2b 96       	adiw	r28, 0x0b	; 11
    1edc:	0f b6       	in	r0, 0x3f	; 63
    1ede:	f8 94       	cli
    1ee0:	de bf       	out	0x3e, r29	; 62
    1ee2:	0f be       	out	0x3f, r0	; 63
    1ee4:	cd bf       	out	0x3d, r28	; 61
    1ee6:	cf 91       	pop	r28
    1ee8:	df 91       	pop	r29
    1eea:	08 95       	ret

00001eec <CLCD_voidCLR>:

void CLCD_voidCLR(void){
    1eec:	df 93       	push	r29
    1eee:	cf 93       	push	r28
    1ef0:	cd b7       	in	r28, 0x3d	; 61
    1ef2:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSendCommand(CLCD_CLR);
    1ef4:	81 e0       	ldi	r24, 0x01	; 1
    1ef6:	0e 94 96 0c 	call	0x192c	; 0x192c <CLCD_voidSendCommand>
}
    1efa:	cf 91       	pop	r28
    1efc:	df 91       	pop	r29
    1efe:	08 95       	ret

00001f00 <DCM_voidRotateClockwise>:

#include "DCM_config.h"
#include "DCM_private.h"
#include "DCM_Interface.h"

void DCM_voidRotateClockwise(){
    1f00:	df 93       	push	r29
    1f02:	cf 93       	push	r28
    1f04:	cd b7       	in	r28, 0x3d	; 61
    1f06:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(DCM_PORT,DCM_CTR_CLKWISE_PIN,DIO_u8PIN_LOW);
    1f08:	80 e0       	ldi	r24, 0x00	; 0
    1f0a:	63 e0       	ldi	r22, 0x03	; 3
    1f0c:	40 e0       	ldi	r20, 0x00	; 0
    1f0e:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DCM_PORT,DCM_CLKWISE_PIN,DIO_u8PIN_HIGH);
    1f12:	80 e0       	ldi	r24, 0x00	; 0
    1f14:	64 e0       	ldi	r22, 0x04	; 4
    1f16:	41 e0       	ldi	r20, 0x01	; 1
    1f18:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DIO_u8SetPinValue>
}
    1f1c:	cf 91       	pop	r28
    1f1e:	df 91       	pop	r29
    1f20:	08 95       	ret

00001f22 <DCM_voidRotateCounterClockwise>:
void DCM_voidRotateCounterClockwise(){
    1f22:	df 93       	push	r29
    1f24:	cf 93       	push	r28
    1f26:	cd b7       	in	r28, 0x3d	; 61
    1f28:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(DCM_PORT,DCM_CLKWISE_PIN,DIO_u8PIN_LOW);
    1f2a:	80 e0       	ldi	r24, 0x00	; 0
    1f2c:	64 e0       	ldi	r22, 0x04	; 4
    1f2e:	40 e0       	ldi	r20, 0x00	; 0
    1f30:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DCM_PORT,DCM_CTR_CLKWISE_PIN,DIO_u8PIN_HIGH);
    1f34:	80 e0       	ldi	r24, 0x00	; 0
    1f36:	63 e0       	ldi	r22, 0x03	; 3
    1f38:	41 e0       	ldi	r20, 0x01	; 1
    1f3a:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DIO_u8SetPinValue>
}
    1f3e:	cf 91       	pop	r28
    1f40:	df 91       	pop	r29
    1f42:	08 95       	ret

00001f44 <DCM_voidStop>:

void DCM_voidStop(){
    1f44:	df 93       	push	r29
    1f46:	cf 93       	push	r28
    1f48:	cd b7       	in	r28, 0x3d	; 61
    1f4a:	de b7       	in	r29, 0x3e	; 62
		DIO_u8SetPinValue(DCM_PORT,DCM_CLKWISE_PIN,DIO_u8PIN_LOW);
    1f4c:	80 e0       	ldi	r24, 0x00	; 0
    1f4e:	64 e0       	ldi	r22, 0x04	; 4
    1f50:	40 e0       	ldi	r20, 0x00	; 0
    1f52:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DCM_PORT,DCM_CTR_CLKWISE_PIN,DIO_u8PIN_LOW);
    1f56:	80 e0       	ldi	r24, 0x00	; 0
    1f58:	63 e0       	ldi	r22, 0x03	; 3
    1f5a:	40 e0       	ldi	r20, 0x00	; 0
    1f5c:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DIO_u8SetPinValue>
    1f60:	cf 91       	pop	r28
    1f62:	df 91       	pop	r29
    1f64:	08 95       	ret

00001f66 <DIO_u8SetPinValue>:
#include "DIO_private.h"
#include "DIO_config.h"



u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value){
    1f66:	df 93       	push	r29
    1f68:	cf 93       	push	r28
    1f6a:	cd b7       	in	r28, 0x3d	; 61
    1f6c:	de b7       	in	r29, 0x3e	; 62
    1f6e:	28 97       	sbiw	r28, 0x08	; 8
    1f70:	0f b6       	in	r0, 0x3f	; 63
    1f72:	f8 94       	cli
    1f74:	de bf       	out	0x3e, r29	; 62
    1f76:	0f be       	out	0x3f, r0	; 63
    1f78:	cd bf       	out	0x3d, r28	; 61
    1f7a:	8a 83       	std	Y+2, r24	; 0x02
    1f7c:	6b 83       	std	Y+3, r22	; 0x03
    1f7e:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    1f80:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin <= DIO_u8PIN7){
    1f82:	8b 81       	ldd	r24, Y+3	; 0x03
    1f84:	88 30       	cpi	r24, 0x08	; 8
    1f86:	08 f0       	brcs	.+2      	; 0x1f8a <DIO_u8SetPinValue+0x24>
    1f88:	f4 c0       	rjmp	.+488    	; 0x2172 <DIO_u8SetPinValue+0x20c>
		if(Copy_u8Value == DIO_u8PIN_LOW){
    1f8a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f8c:	88 23       	and	r24, r24
    1f8e:	09 f0       	breq	.+2      	; 0x1f92 <DIO_u8SetPinValue+0x2c>
    1f90:	77 c0       	rjmp	.+238    	; 0x2080 <DIO_u8SetPinValue+0x11a>
			switch(Copy_u8Port){
    1f92:	8a 81       	ldd	r24, Y+2	; 0x02
    1f94:	28 2f       	mov	r18, r24
    1f96:	30 e0       	ldi	r19, 0x00	; 0
    1f98:	38 87       	std	Y+8, r19	; 0x08
    1f9a:	2f 83       	std	Y+7, r18	; 0x07
    1f9c:	8f 81       	ldd	r24, Y+7	; 0x07
    1f9e:	98 85       	ldd	r25, Y+8	; 0x08
    1fa0:	81 30       	cpi	r24, 0x01	; 1
    1fa2:	91 05       	cpc	r25, r1
    1fa4:	59 f1       	breq	.+86     	; 0x1ffc <DIO_u8SetPinValue+0x96>
    1fa6:	2f 81       	ldd	r18, Y+7	; 0x07
    1fa8:	38 85       	ldd	r19, Y+8	; 0x08
    1faa:	22 30       	cpi	r18, 0x02	; 2
    1fac:	31 05       	cpc	r19, r1
    1fae:	2c f4       	brge	.+10     	; 0x1fba <DIO_u8SetPinValue+0x54>
    1fb0:	8f 81       	ldd	r24, Y+7	; 0x07
    1fb2:	98 85       	ldd	r25, Y+8	; 0x08
    1fb4:	00 97       	sbiw	r24, 0x00	; 0
    1fb6:	69 f0       	breq	.+26     	; 0x1fd2 <DIO_u8SetPinValue+0x6c>
    1fb8:	60 c0       	rjmp	.+192    	; 0x207a <DIO_u8SetPinValue+0x114>
    1fba:	2f 81       	ldd	r18, Y+7	; 0x07
    1fbc:	38 85       	ldd	r19, Y+8	; 0x08
    1fbe:	22 30       	cpi	r18, 0x02	; 2
    1fc0:	31 05       	cpc	r19, r1
    1fc2:	89 f1       	breq	.+98     	; 0x2026 <DIO_u8SetPinValue+0xc0>
    1fc4:	8f 81       	ldd	r24, Y+7	; 0x07
    1fc6:	98 85       	ldd	r25, Y+8	; 0x08
    1fc8:	83 30       	cpi	r24, 0x03	; 3
    1fca:	91 05       	cpc	r25, r1
    1fcc:	09 f4       	brne	.+2      	; 0x1fd0 <DIO_u8SetPinValue+0x6a>
    1fce:	40 c0       	rjmp	.+128    	; 0x2050 <DIO_u8SetPinValue+0xea>
    1fd0:	54 c0       	rjmp	.+168    	; 0x207a <DIO_u8SetPinValue+0x114>
			case DIO_u8PORTA : CLR_BIT(PORTA,Copy_u8Pin); break;
    1fd2:	ab e3       	ldi	r26, 0x3B	; 59
    1fd4:	b0 e0       	ldi	r27, 0x00	; 0
    1fd6:	eb e3       	ldi	r30, 0x3B	; 59
    1fd8:	f0 e0       	ldi	r31, 0x00	; 0
    1fda:	80 81       	ld	r24, Z
    1fdc:	48 2f       	mov	r20, r24
    1fde:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe0:	28 2f       	mov	r18, r24
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	81 e0       	ldi	r24, 0x01	; 1
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	02 2e       	mov	r0, r18
    1fea:	02 c0       	rjmp	.+4      	; 0x1ff0 <DIO_u8SetPinValue+0x8a>
    1fec:	88 0f       	add	r24, r24
    1fee:	99 1f       	adc	r25, r25
    1ff0:	0a 94       	dec	r0
    1ff2:	e2 f7       	brpl	.-8      	; 0x1fec <DIO_u8SetPinValue+0x86>
    1ff4:	80 95       	com	r24
    1ff6:	84 23       	and	r24, r20
    1ff8:	8c 93       	st	X, r24
    1ffa:	bd c0       	rjmp	.+378    	; 0x2176 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB : CLR_BIT(PORTB,Copy_u8Pin); break;
    1ffc:	a8 e3       	ldi	r26, 0x38	; 56
    1ffe:	b0 e0       	ldi	r27, 0x00	; 0
    2000:	e8 e3       	ldi	r30, 0x38	; 56
    2002:	f0 e0       	ldi	r31, 0x00	; 0
    2004:	80 81       	ld	r24, Z
    2006:	48 2f       	mov	r20, r24
    2008:	8b 81       	ldd	r24, Y+3	; 0x03
    200a:	28 2f       	mov	r18, r24
    200c:	30 e0       	ldi	r19, 0x00	; 0
    200e:	81 e0       	ldi	r24, 0x01	; 1
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	02 2e       	mov	r0, r18
    2014:	02 c0       	rjmp	.+4      	; 0x201a <DIO_u8SetPinValue+0xb4>
    2016:	88 0f       	add	r24, r24
    2018:	99 1f       	adc	r25, r25
    201a:	0a 94       	dec	r0
    201c:	e2 f7       	brpl	.-8      	; 0x2016 <DIO_u8SetPinValue+0xb0>
    201e:	80 95       	com	r24
    2020:	84 23       	and	r24, r20
    2022:	8c 93       	st	X, r24
    2024:	a8 c0       	rjmp	.+336    	; 0x2176 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC : CLR_BIT(PORTC,Copy_u8Pin); break;
    2026:	a5 e3       	ldi	r26, 0x35	; 53
    2028:	b0 e0       	ldi	r27, 0x00	; 0
    202a:	e5 e3       	ldi	r30, 0x35	; 53
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	80 81       	ld	r24, Z
    2030:	48 2f       	mov	r20, r24
    2032:	8b 81       	ldd	r24, Y+3	; 0x03
    2034:	28 2f       	mov	r18, r24
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	81 e0       	ldi	r24, 0x01	; 1
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	02 2e       	mov	r0, r18
    203e:	02 c0       	rjmp	.+4      	; 0x2044 <DIO_u8SetPinValue+0xde>
    2040:	88 0f       	add	r24, r24
    2042:	99 1f       	adc	r25, r25
    2044:	0a 94       	dec	r0
    2046:	e2 f7       	brpl	.-8      	; 0x2040 <DIO_u8SetPinValue+0xda>
    2048:	80 95       	com	r24
    204a:	84 23       	and	r24, r20
    204c:	8c 93       	st	X, r24
    204e:	93 c0       	rjmp	.+294    	; 0x2176 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD : CLR_BIT(PORTD,Copy_u8Pin); break;
    2050:	a2 e3       	ldi	r26, 0x32	; 50
    2052:	b0 e0       	ldi	r27, 0x00	; 0
    2054:	e2 e3       	ldi	r30, 0x32	; 50
    2056:	f0 e0       	ldi	r31, 0x00	; 0
    2058:	80 81       	ld	r24, Z
    205a:	48 2f       	mov	r20, r24
    205c:	8b 81       	ldd	r24, Y+3	; 0x03
    205e:	28 2f       	mov	r18, r24
    2060:	30 e0       	ldi	r19, 0x00	; 0
    2062:	81 e0       	ldi	r24, 0x01	; 1
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	02 2e       	mov	r0, r18
    2068:	02 c0       	rjmp	.+4      	; 0x206e <DIO_u8SetPinValue+0x108>
    206a:	88 0f       	add	r24, r24
    206c:	99 1f       	adc	r25, r25
    206e:	0a 94       	dec	r0
    2070:	e2 f7       	brpl	.-8      	; 0x206a <DIO_u8SetPinValue+0x104>
    2072:	80 95       	com	r24
    2074:	84 23       	and	r24, r20
    2076:	8c 93       	st	X, r24
    2078:	7e c0       	rjmp	.+252    	; 0x2176 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1;
    207a:	81 e0       	ldi	r24, 0x01	; 1
    207c:	89 83       	std	Y+1, r24	; 0x01
    207e:	7b c0       	rjmp	.+246    	; 0x2176 <DIO_u8SetPinValue+0x210>
			}
		}
		else if(Copy_u8Value == DIO_u8PIN_HIGH){
    2080:	8c 81       	ldd	r24, Y+4	; 0x04
    2082:	81 30       	cpi	r24, 0x01	; 1
    2084:	09 f0       	breq	.+2      	; 0x2088 <DIO_u8SetPinValue+0x122>
    2086:	72 c0       	rjmp	.+228    	; 0x216c <DIO_u8SetPinValue+0x206>
			switch(Copy_u8Port){
    2088:	8a 81       	ldd	r24, Y+2	; 0x02
    208a:	28 2f       	mov	r18, r24
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	3e 83       	std	Y+6, r19	; 0x06
    2090:	2d 83       	std	Y+5, r18	; 0x05
    2092:	8d 81       	ldd	r24, Y+5	; 0x05
    2094:	9e 81       	ldd	r25, Y+6	; 0x06
    2096:	81 30       	cpi	r24, 0x01	; 1
    2098:	91 05       	cpc	r25, r1
    209a:	49 f1       	breq	.+82     	; 0x20ee <DIO_u8SetPinValue+0x188>
    209c:	2d 81       	ldd	r18, Y+5	; 0x05
    209e:	3e 81       	ldd	r19, Y+6	; 0x06
    20a0:	22 30       	cpi	r18, 0x02	; 2
    20a2:	31 05       	cpc	r19, r1
    20a4:	2c f4       	brge	.+10     	; 0x20b0 <DIO_u8SetPinValue+0x14a>
    20a6:	8d 81       	ldd	r24, Y+5	; 0x05
    20a8:	9e 81       	ldd	r25, Y+6	; 0x06
    20aa:	00 97       	sbiw	r24, 0x00	; 0
    20ac:	61 f0       	breq	.+24     	; 0x20c6 <DIO_u8SetPinValue+0x160>
    20ae:	5b c0       	rjmp	.+182    	; 0x2166 <DIO_u8SetPinValue+0x200>
    20b0:	2d 81       	ldd	r18, Y+5	; 0x05
    20b2:	3e 81       	ldd	r19, Y+6	; 0x06
    20b4:	22 30       	cpi	r18, 0x02	; 2
    20b6:	31 05       	cpc	r19, r1
    20b8:	71 f1       	breq	.+92     	; 0x2116 <DIO_u8SetPinValue+0x1b0>
    20ba:	8d 81       	ldd	r24, Y+5	; 0x05
    20bc:	9e 81       	ldd	r25, Y+6	; 0x06
    20be:	83 30       	cpi	r24, 0x03	; 3
    20c0:	91 05       	cpc	r25, r1
    20c2:	e9 f1       	breq	.+122    	; 0x213e <DIO_u8SetPinValue+0x1d8>
    20c4:	50 c0       	rjmp	.+160    	; 0x2166 <DIO_u8SetPinValue+0x200>
			case DIO_u8PORTA : SET_BIT(PORTA,Copy_u8Pin); break;
    20c6:	ab e3       	ldi	r26, 0x3B	; 59
    20c8:	b0 e0       	ldi	r27, 0x00	; 0
    20ca:	eb e3       	ldi	r30, 0x3B	; 59
    20cc:	f0 e0       	ldi	r31, 0x00	; 0
    20ce:	80 81       	ld	r24, Z
    20d0:	48 2f       	mov	r20, r24
    20d2:	8b 81       	ldd	r24, Y+3	; 0x03
    20d4:	28 2f       	mov	r18, r24
    20d6:	30 e0       	ldi	r19, 0x00	; 0
    20d8:	81 e0       	ldi	r24, 0x01	; 1
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	02 2e       	mov	r0, r18
    20de:	02 c0       	rjmp	.+4      	; 0x20e4 <DIO_u8SetPinValue+0x17e>
    20e0:	88 0f       	add	r24, r24
    20e2:	99 1f       	adc	r25, r25
    20e4:	0a 94       	dec	r0
    20e6:	e2 f7       	brpl	.-8      	; 0x20e0 <DIO_u8SetPinValue+0x17a>
    20e8:	84 2b       	or	r24, r20
    20ea:	8c 93       	st	X, r24
    20ec:	44 c0       	rjmp	.+136    	; 0x2176 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB : SET_BIT(PORTB,Copy_u8Pin); break;
    20ee:	a8 e3       	ldi	r26, 0x38	; 56
    20f0:	b0 e0       	ldi	r27, 0x00	; 0
    20f2:	e8 e3       	ldi	r30, 0x38	; 56
    20f4:	f0 e0       	ldi	r31, 0x00	; 0
    20f6:	80 81       	ld	r24, Z
    20f8:	48 2f       	mov	r20, r24
    20fa:	8b 81       	ldd	r24, Y+3	; 0x03
    20fc:	28 2f       	mov	r18, r24
    20fe:	30 e0       	ldi	r19, 0x00	; 0
    2100:	81 e0       	ldi	r24, 0x01	; 1
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	02 2e       	mov	r0, r18
    2106:	02 c0       	rjmp	.+4      	; 0x210c <DIO_u8SetPinValue+0x1a6>
    2108:	88 0f       	add	r24, r24
    210a:	99 1f       	adc	r25, r25
    210c:	0a 94       	dec	r0
    210e:	e2 f7       	brpl	.-8      	; 0x2108 <DIO_u8SetPinValue+0x1a2>
    2110:	84 2b       	or	r24, r20
    2112:	8c 93       	st	X, r24
    2114:	30 c0       	rjmp	.+96     	; 0x2176 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC : SET_BIT(PORTC,Copy_u8Pin); break;
    2116:	a5 e3       	ldi	r26, 0x35	; 53
    2118:	b0 e0       	ldi	r27, 0x00	; 0
    211a:	e5 e3       	ldi	r30, 0x35	; 53
    211c:	f0 e0       	ldi	r31, 0x00	; 0
    211e:	80 81       	ld	r24, Z
    2120:	48 2f       	mov	r20, r24
    2122:	8b 81       	ldd	r24, Y+3	; 0x03
    2124:	28 2f       	mov	r18, r24
    2126:	30 e0       	ldi	r19, 0x00	; 0
    2128:	81 e0       	ldi	r24, 0x01	; 1
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	02 2e       	mov	r0, r18
    212e:	02 c0       	rjmp	.+4      	; 0x2134 <DIO_u8SetPinValue+0x1ce>
    2130:	88 0f       	add	r24, r24
    2132:	99 1f       	adc	r25, r25
    2134:	0a 94       	dec	r0
    2136:	e2 f7       	brpl	.-8      	; 0x2130 <DIO_u8SetPinValue+0x1ca>
    2138:	84 2b       	or	r24, r20
    213a:	8c 93       	st	X, r24
    213c:	1c c0       	rjmp	.+56     	; 0x2176 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD : SET_BIT(PORTD,Copy_u8Pin); break;
    213e:	a2 e3       	ldi	r26, 0x32	; 50
    2140:	b0 e0       	ldi	r27, 0x00	; 0
    2142:	e2 e3       	ldi	r30, 0x32	; 50
    2144:	f0 e0       	ldi	r31, 0x00	; 0
    2146:	80 81       	ld	r24, Z
    2148:	48 2f       	mov	r20, r24
    214a:	8b 81       	ldd	r24, Y+3	; 0x03
    214c:	28 2f       	mov	r18, r24
    214e:	30 e0       	ldi	r19, 0x00	; 0
    2150:	81 e0       	ldi	r24, 0x01	; 1
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	02 2e       	mov	r0, r18
    2156:	02 c0       	rjmp	.+4      	; 0x215c <DIO_u8SetPinValue+0x1f6>
    2158:	88 0f       	add	r24, r24
    215a:	99 1f       	adc	r25, r25
    215c:	0a 94       	dec	r0
    215e:	e2 f7       	brpl	.-8      	; 0x2158 <DIO_u8SetPinValue+0x1f2>
    2160:	84 2b       	or	r24, r20
    2162:	8c 93       	st	X, r24
    2164:	08 c0       	rjmp	.+16     	; 0x2176 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1;
    2166:	81 e0       	ldi	r24, 0x01	; 1
    2168:	89 83       	std	Y+1, r24	; 0x01
    216a:	05 c0       	rjmp	.+10     	; 0x2176 <DIO_u8SetPinValue+0x210>
			}
		}
		else{
			Local_u8ErrorState=1;
    216c:	81 e0       	ldi	r24, 0x01	; 1
    216e:	89 83       	std	Y+1, r24	; 0x01
    2170:	02 c0       	rjmp	.+4      	; 0x2176 <DIO_u8SetPinValue+0x210>
		}
	}
	else{
		Local_u8ErrorState=1;
    2172:	81 e0       	ldi	r24, 0x01	; 1
    2174:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState ;
    2176:	89 81       	ldd	r24, Y+1	; 0x01
}
    2178:	28 96       	adiw	r28, 0x08	; 8
    217a:	0f b6       	in	r0, 0x3f	; 63
    217c:	f8 94       	cli
    217e:	de bf       	out	0x3e, r29	; 62
    2180:	0f be       	out	0x3f, r0	; 63
    2182:	cd bf       	out	0x3d, r28	; 61
    2184:	cf 91       	pop	r28
    2186:	df 91       	pop	r29
    2188:	08 95       	ret

0000218a <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8Port,u8 Copy_u8Value){
    218a:	df 93       	push	r29
    218c:	cf 93       	push	r28
    218e:	00 d0       	rcall	.+0      	; 0x2190 <DIO_u8SetPortValue+0x6>
    2190:	00 d0       	rcall	.+0      	; 0x2192 <DIO_u8SetPortValue+0x8>
    2192:	0f 92       	push	r0
    2194:	cd b7       	in	r28, 0x3d	; 61
    2196:	de b7       	in	r29, 0x3e	; 62
    2198:	8a 83       	std	Y+2, r24	; 0x02
    219a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    219c:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8Port)
    219e:	8a 81       	ldd	r24, Y+2	; 0x02
    21a0:	28 2f       	mov	r18, r24
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	3d 83       	std	Y+5, r19	; 0x05
    21a6:	2c 83       	std	Y+4, r18	; 0x04
    21a8:	8c 81       	ldd	r24, Y+4	; 0x04
    21aa:	9d 81       	ldd	r25, Y+5	; 0x05
    21ac:	81 30       	cpi	r24, 0x01	; 1
    21ae:	91 05       	cpc	r25, r1
    21b0:	d1 f0       	breq	.+52     	; 0x21e6 <DIO_u8SetPortValue+0x5c>
    21b2:	2c 81       	ldd	r18, Y+4	; 0x04
    21b4:	3d 81       	ldd	r19, Y+5	; 0x05
    21b6:	22 30       	cpi	r18, 0x02	; 2
    21b8:	31 05       	cpc	r19, r1
    21ba:	2c f4       	brge	.+10     	; 0x21c6 <DIO_u8SetPortValue+0x3c>
    21bc:	8c 81       	ldd	r24, Y+4	; 0x04
    21be:	9d 81       	ldd	r25, Y+5	; 0x05
    21c0:	00 97       	sbiw	r24, 0x00	; 0
    21c2:	61 f0       	breq	.+24     	; 0x21dc <DIO_u8SetPortValue+0x52>
    21c4:	1f c0       	rjmp	.+62     	; 0x2204 <DIO_u8SetPortValue+0x7a>
    21c6:	2c 81       	ldd	r18, Y+4	; 0x04
    21c8:	3d 81       	ldd	r19, Y+5	; 0x05
    21ca:	22 30       	cpi	r18, 0x02	; 2
    21cc:	31 05       	cpc	r19, r1
    21ce:	81 f0       	breq	.+32     	; 0x21f0 <DIO_u8SetPortValue+0x66>
    21d0:	8c 81       	ldd	r24, Y+4	; 0x04
    21d2:	9d 81       	ldd	r25, Y+5	; 0x05
    21d4:	83 30       	cpi	r24, 0x03	; 3
    21d6:	91 05       	cpc	r25, r1
    21d8:	81 f0       	breq	.+32     	; 0x21fa <DIO_u8SetPortValue+0x70>
    21da:	14 c0       	rjmp	.+40     	; 0x2204 <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA: PORTA=Copy_u8Value; break;
    21dc:	eb e3       	ldi	r30, 0x3B	; 59
    21de:	f0 e0       	ldi	r31, 0x00	; 0
    21e0:	8b 81       	ldd	r24, Y+3	; 0x03
    21e2:	80 83       	st	Z, r24
    21e4:	11 c0       	rjmp	.+34     	; 0x2208 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB: PORTB=Copy_u8Value; break;
    21e6:	e8 e3       	ldi	r30, 0x38	; 56
    21e8:	f0 e0       	ldi	r31, 0x00	; 0
    21ea:	8b 81       	ldd	r24, Y+3	; 0x03
    21ec:	80 83       	st	Z, r24
    21ee:	0c c0       	rjmp	.+24     	; 0x2208 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC: PORTC=Copy_u8Value; break;
    21f0:	e5 e3       	ldi	r30, 0x35	; 53
    21f2:	f0 e0       	ldi	r31, 0x00	; 0
    21f4:	8b 81       	ldd	r24, Y+3	; 0x03
    21f6:	80 83       	st	Z, r24
    21f8:	07 c0       	rjmp	.+14     	; 0x2208 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD: PORTD=Copy_u8Value; break;
    21fa:	e2 e3       	ldi	r30, 0x32	; 50
    21fc:	f0 e0       	ldi	r31, 0x00	; 0
    21fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2200:	80 83       	st	Z, r24
    2202:	02 c0       	rjmp	.+4      	; 0x2208 <DIO_u8SetPortValue+0x7e>
	default: Local_u8ErrorState=1 ;
    2204:	81 e0       	ldi	r24, 0x01	; 1
    2206:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState ;
    2208:	89 81       	ldd	r24, Y+1	; 0x01
}
    220a:	0f 90       	pop	r0
    220c:	0f 90       	pop	r0
    220e:	0f 90       	pop	r0
    2210:	0f 90       	pop	r0
    2212:	0f 90       	pop	r0
    2214:	cf 91       	pop	r28
    2216:	df 91       	pop	r29
    2218:	08 95       	ret

0000221a <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin, u8* Copy_pu8Value){
    221a:	df 93       	push	r29
    221c:	cf 93       	push	r28
    221e:	cd b7       	in	r28, 0x3d	; 61
    2220:	de b7       	in	r29, 0x3e	; 62
    2222:	27 97       	sbiw	r28, 0x07	; 7
    2224:	0f b6       	in	r0, 0x3f	; 63
    2226:	f8 94       	cli
    2228:	de bf       	out	0x3e, r29	; 62
    222a:	0f be       	out	0x3f, r0	; 63
    222c:	cd bf       	out	0x3d, r28	; 61
    222e:	8a 83       	std	Y+2, r24	; 0x02
    2230:	6b 83       	std	Y+3, r22	; 0x03
    2232:	5d 83       	std	Y+5, r21	; 0x05
    2234:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    2236:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_pu8Value != NULL) && (Copy_u8Pin <= DIO_u8PIN7)){
    2238:	8c 81       	ldd	r24, Y+4	; 0x04
    223a:	9d 81       	ldd	r25, Y+5	; 0x05
    223c:	00 97       	sbiw	r24, 0x00	; 0
    223e:	09 f4       	brne	.+2      	; 0x2242 <DIO_u8GetPinValue+0x28>
    2240:	78 c0       	rjmp	.+240    	; 0x2332 <DIO_u8GetPinValue+0x118>
    2242:	8b 81       	ldd	r24, Y+3	; 0x03
    2244:	88 30       	cpi	r24, 0x08	; 8
    2246:	08 f0       	brcs	.+2      	; 0x224a <DIO_u8GetPinValue+0x30>
    2248:	74 c0       	rjmp	.+232    	; 0x2332 <DIO_u8GetPinValue+0x118>
		switch (Copy_u8Port){
    224a:	8a 81       	ldd	r24, Y+2	; 0x02
    224c:	28 2f       	mov	r18, r24
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	3f 83       	std	Y+7, r19	; 0x07
    2252:	2e 83       	std	Y+6, r18	; 0x06
    2254:	4e 81       	ldd	r20, Y+6	; 0x06
    2256:	5f 81       	ldd	r21, Y+7	; 0x07
    2258:	41 30       	cpi	r20, 0x01	; 1
    225a:	51 05       	cpc	r21, r1
    225c:	59 f1       	breq	.+86     	; 0x22b4 <DIO_u8GetPinValue+0x9a>
    225e:	8e 81       	ldd	r24, Y+6	; 0x06
    2260:	9f 81       	ldd	r25, Y+7	; 0x07
    2262:	82 30       	cpi	r24, 0x02	; 2
    2264:	91 05       	cpc	r25, r1
    2266:	34 f4       	brge	.+12     	; 0x2274 <DIO_u8GetPinValue+0x5a>
    2268:	2e 81       	ldd	r18, Y+6	; 0x06
    226a:	3f 81       	ldd	r19, Y+7	; 0x07
    226c:	21 15       	cp	r18, r1
    226e:	31 05       	cpc	r19, r1
    2270:	69 f0       	breq	.+26     	; 0x228c <DIO_u8GetPinValue+0x72>
    2272:	5c c0       	rjmp	.+184    	; 0x232c <DIO_u8GetPinValue+0x112>
    2274:	4e 81       	ldd	r20, Y+6	; 0x06
    2276:	5f 81       	ldd	r21, Y+7	; 0x07
    2278:	42 30       	cpi	r20, 0x02	; 2
    227a:	51 05       	cpc	r21, r1
    227c:	79 f1       	breq	.+94     	; 0x22dc <DIO_u8GetPinValue+0xc2>
    227e:	8e 81       	ldd	r24, Y+6	; 0x06
    2280:	9f 81       	ldd	r25, Y+7	; 0x07
    2282:	83 30       	cpi	r24, 0x03	; 3
    2284:	91 05       	cpc	r25, r1
    2286:	09 f4       	brne	.+2      	; 0x228a <DIO_u8GetPinValue+0x70>
    2288:	3d c0       	rjmp	.+122    	; 0x2304 <DIO_u8GetPinValue+0xea>
    228a:	50 c0       	rjmp	.+160    	; 0x232c <DIO_u8GetPinValue+0x112>
		case DIO_u8PORTA: *Copy_pu8Value = GET_BIT(PINA,Copy_u8Pin); break;
    228c:	e9 e3       	ldi	r30, 0x39	; 57
    228e:	f0 e0       	ldi	r31, 0x00	; 0
    2290:	80 81       	ld	r24, Z
    2292:	28 2f       	mov	r18, r24
    2294:	30 e0       	ldi	r19, 0x00	; 0
    2296:	8b 81       	ldd	r24, Y+3	; 0x03
    2298:	88 2f       	mov	r24, r24
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	a9 01       	movw	r20, r18
    229e:	02 c0       	rjmp	.+4      	; 0x22a4 <DIO_u8GetPinValue+0x8a>
    22a0:	55 95       	asr	r21
    22a2:	47 95       	ror	r20
    22a4:	8a 95       	dec	r24
    22a6:	e2 f7       	brpl	.-8      	; 0x22a0 <DIO_u8GetPinValue+0x86>
    22a8:	ca 01       	movw	r24, r20
    22aa:	81 70       	andi	r24, 0x01	; 1
    22ac:	ec 81       	ldd	r30, Y+4	; 0x04
    22ae:	fd 81       	ldd	r31, Y+5	; 0x05
    22b0:	80 83       	st	Z, r24
    22b2:	41 c0       	rjmp	.+130    	; 0x2336 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTB: *Copy_pu8Value = GET_BIT(PINB,Copy_u8Pin); break;
    22b4:	e6 e3       	ldi	r30, 0x36	; 54
    22b6:	f0 e0       	ldi	r31, 0x00	; 0
    22b8:	80 81       	ld	r24, Z
    22ba:	28 2f       	mov	r18, r24
    22bc:	30 e0       	ldi	r19, 0x00	; 0
    22be:	8b 81       	ldd	r24, Y+3	; 0x03
    22c0:	88 2f       	mov	r24, r24
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	a9 01       	movw	r20, r18
    22c6:	02 c0       	rjmp	.+4      	; 0x22cc <DIO_u8GetPinValue+0xb2>
    22c8:	55 95       	asr	r21
    22ca:	47 95       	ror	r20
    22cc:	8a 95       	dec	r24
    22ce:	e2 f7       	brpl	.-8      	; 0x22c8 <DIO_u8GetPinValue+0xae>
    22d0:	ca 01       	movw	r24, r20
    22d2:	81 70       	andi	r24, 0x01	; 1
    22d4:	ec 81       	ldd	r30, Y+4	; 0x04
    22d6:	fd 81       	ldd	r31, Y+5	; 0x05
    22d8:	80 83       	st	Z, r24
    22da:	2d c0       	rjmp	.+90     	; 0x2336 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTC: *Copy_pu8Value = GET_BIT(PINC,Copy_u8Pin); break;
    22dc:	e3 e3       	ldi	r30, 0x33	; 51
    22de:	f0 e0       	ldi	r31, 0x00	; 0
    22e0:	80 81       	ld	r24, Z
    22e2:	28 2f       	mov	r18, r24
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	8b 81       	ldd	r24, Y+3	; 0x03
    22e8:	88 2f       	mov	r24, r24
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	a9 01       	movw	r20, r18
    22ee:	02 c0       	rjmp	.+4      	; 0x22f4 <DIO_u8GetPinValue+0xda>
    22f0:	55 95       	asr	r21
    22f2:	47 95       	ror	r20
    22f4:	8a 95       	dec	r24
    22f6:	e2 f7       	brpl	.-8      	; 0x22f0 <DIO_u8GetPinValue+0xd6>
    22f8:	ca 01       	movw	r24, r20
    22fa:	81 70       	andi	r24, 0x01	; 1
    22fc:	ec 81       	ldd	r30, Y+4	; 0x04
    22fe:	fd 81       	ldd	r31, Y+5	; 0x05
    2300:	80 83       	st	Z, r24
    2302:	19 c0       	rjmp	.+50     	; 0x2336 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTD: *Copy_pu8Value = GET_BIT(PIND,Copy_u8Pin); break;
    2304:	e0 e3       	ldi	r30, 0x30	; 48
    2306:	f0 e0       	ldi	r31, 0x00	; 0
    2308:	80 81       	ld	r24, Z
    230a:	28 2f       	mov	r18, r24
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	8b 81       	ldd	r24, Y+3	; 0x03
    2310:	88 2f       	mov	r24, r24
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	a9 01       	movw	r20, r18
    2316:	02 c0       	rjmp	.+4      	; 0x231c <DIO_u8GetPinValue+0x102>
    2318:	55 95       	asr	r21
    231a:	47 95       	ror	r20
    231c:	8a 95       	dec	r24
    231e:	e2 f7       	brpl	.-8      	; 0x2318 <DIO_u8GetPinValue+0xfe>
    2320:	ca 01       	movw	r24, r20
    2322:	81 70       	andi	r24, 0x01	; 1
    2324:	ec 81       	ldd	r30, Y+4	; 0x04
    2326:	fd 81       	ldd	r31, Y+5	; 0x05
    2328:	80 83       	st	Z, r24
    232a:	05 c0       	rjmp	.+10     	; 0x2336 <DIO_u8GetPinValue+0x11c>
		default:Local_u8ErrorState=1 ;
    232c:	81 e0       	ldi	r24, 0x01	; 1
    232e:	89 83       	std	Y+1, r24	; 0x01
    2330:	02 c0       	rjmp	.+4      	; 0x2336 <DIO_u8GetPinValue+0x11c>
		}
	}
	else{
		Local_u8ErrorState=1;
    2332:	81 e0       	ldi	r24, 0x01	; 1
    2334:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState ;
    2336:	89 81       	ldd	r24, Y+1	; 0x01
}
    2338:	27 96       	adiw	r28, 0x07	; 7
    233a:	0f b6       	in	r0, 0x3f	; 63
    233c:	f8 94       	cli
    233e:	de bf       	out	0x3e, r29	; 62
    2340:	0f be       	out	0x3f, r0	; 63
    2342:	cd bf       	out	0x3d, r28	; 61
    2344:	cf 91       	pop	r28
    2346:	df 91       	pop	r29
    2348:	08 95       	ret

0000234a <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8Port,u8* Copy_pu8Value){
    234a:	df 93       	push	r29
    234c:	cf 93       	push	r28
    234e:	00 d0       	rcall	.+0      	; 0x2350 <DIO_u8GetPortValue+0x6>
    2350:	00 d0       	rcall	.+0      	; 0x2352 <DIO_u8GetPortValue+0x8>
    2352:	00 d0       	rcall	.+0      	; 0x2354 <DIO_u8GetPortValue+0xa>
    2354:	cd b7       	in	r28, 0x3d	; 61
    2356:	de b7       	in	r29, 0x3e	; 62
    2358:	8a 83       	std	Y+2, r24	; 0x02
    235a:	7c 83       	std	Y+4, r23	; 0x04
    235c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    235e:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8Port)
    2360:	8a 81       	ldd	r24, Y+2	; 0x02
    2362:	28 2f       	mov	r18, r24
    2364:	30 e0       	ldi	r19, 0x00	; 0
    2366:	3e 83       	std	Y+6, r19	; 0x06
    2368:	2d 83       	std	Y+5, r18	; 0x05
    236a:	8d 81       	ldd	r24, Y+5	; 0x05
    236c:	9e 81       	ldd	r25, Y+6	; 0x06
    236e:	81 30       	cpi	r24, 0x01	; 1
    2370:	91 05       	cpc	r25, r1
    2372:	e1 f0       	breq	.+56     	; 0x23ac <DIO_u8GetPortValue+0x62>
    2374:	2d 81       	ldd	r18, Y+5	; 0x05
    2376:	3e 81       	ldd	r19, Y+6	; 0x06
    2378:	22 30       	cpi	r18, 0x02	; 2
    237a:	31 05       	cpc	r19, r1
    237c:	2c f4       	brge	.+10     	; 0x2388 <DIO_u8GetPortValue+0x3e>
    237e:	8d 81       	ldd	r24, Y+5	; 0x05
    2380:	9e 81       	ldd	r25, Y+6	; 0x06
    2382:	00 97       	sbiw	r24, 0x00	; 0
    2384:	61 f0       	breq	.+24     	; 0x239e <DIO_u8GetPortValue+0x54>
    2386:	27 c0       	rjmp	.+78     	; 0x23d6 <DIO_u8GetPortValue+0x8c>
    2388:	2d 81       	ldd	r18, Y+5	; 0x05
    238a:	3e 81       	ldd	r19, Y+6	; 0x06
    238c:	22 30       	cpi	r18, 0x02	; 2
    238e:	31 05       	cpc	r19, r1
    2390:	a1 f0       	breq	.+40     	; 0x23ba <DIO_u8GetPortValue+0x70>
    2392:	8d 81       	ldd	r24, Y+5	; 0x05
    2394:	9e 81       	ldd	r25, Y+6	; 0x06
    2396:	83 30       	cpi	r24, 0x03	; 3
    2398:	91 05       	cpc	r25, r1
    239a:	b1 f0       	breq	.+44     	; 0x23c8 <DIO_u8GetPortValue+0x7e>
    239c:	1c c0       	rjmp	.+56     	; 0x23d6 <DIO_u8GetPortValue+0x8c>
	{
	case DIO_u8PORTA: *Copy_pu8Value = PINA; break;
    239e:	e9 e3       	ldi	r30, 0x39	; 57
    23a0:	f0 e0       	ldi	r31, 0x00	; 0
    23a2:	80 81       	ld	r24, Z
    23a4:	eb 81       	ldd	r30, Y+3	; 0x03
    23a6:	fc 81       	ldd	r31, Y+4	; 0x04
    23a8:	80 83       	st	Z, r24
    23aa:	17 c0       	rjmp	.+46     	; 0x23da <DIO_u8GetPortValue+0x90>
	case DIO_u8PORTB: *Copy_pu8Value = PINB; break;
    23ac:	e6 e3       	ldi	r30, 0x36	; 54
    23ae:	f0 e0       	ldi	r31, 0x00	; 0
    23b0:	80 81       	ld	r24, Z
    23b2:	eb 81       	ldd	r30, Y+3	; 0x03
    23b4:	fc 81       	ldd	r31, Y+4	; 0x04
    23b6:	80 83       	st	Z, r24
    23b8:	10 c0       	rjmp	.+32     	; 0x23da <DIO_u8GetPortValue+0x90>
	case DIO_u8PORTC: *Copy_pu8Value = PINC; break;
    23ba:	e3 e3       	ldi	r30, 0x33	; 51
    23bc:	f0 e0       	ldi	r31, 0x00	; 0
    23be:	80 81       	ld	r24, Z
    23c0:	eb 81       	ldd	r30, Y+3	; 0x03
    23c2:	fc 81       	ldd	r31, Y+4	; 0x04
    23c4:	80 83       	st	Z, r24
    23c6:	09 c0       	rjmp	.+18     	; 0x23da <DIO_u8GetPortValue+0x90>
	case DIO_u8PORTD: *Copy_pu8Value = PIND; break;
    23c8:	e0 e3       	ldi	r30, 0x30	; 48
    23ca:	f0 e0       	ldi	r31, 0x00	; 0
    23cc:	80 81       	ld	r24, Z
    23ce:	eb 81       	ldd	r30, Y+3	; 0x03
    23d0:	fc 81       	ldd	r31, Y+4	; 0x04
    23d2:	80 83       	st	Z, r24
    23d4:	02 c0       	rjmp	.+4      	; 0x23da <DIO_u8GetPortValue+0x90>
	default: Local_u8ErrorState=1 ;
    23d6:	81 e0       	ldi	r24, 0x01	; 1
    23d8:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    23da:	89 81       	ldd	r24, Y+1	; 0x01
}
    23dc:	26 96       	adiw	r28, 0x06	; 6
    23de:	0f b6       	in	r0, 0x3f	; 63
    23e0:	f8 94       	cli
    23e2:	de bf       	out	0x3e, r29	; 62
    23e4:	0f be       	out	0x3f, r0	; 63
    23e6:	cd bf       	out	0x3d, r28	; 61
    23e8:	cf 91       	pop	r28
    23ea:	df 91       	pop	r29
    23ec:	08 95       	ret

000023ee <GIE_voidEnable>:
#include "BIT_MATH.h"

#include "GIE_interface.h"
#include "GIE_register.h"

void GIE_voidEnable(void){
    23ee:	df 93       	push	r29
    23f0:	cf 93       	push	r28
    23f2:	cd b7       	in	r28, 0x3d	; 61
    23f4:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(SREG,SREG_I);
    23f6:	af e5       	ldi	r26, 0x5F	; 95
    23f8:	b0 e0       	ldi	r27, 0x00	; 0
    23fa:	ef e5       	ldi	r30, 0x5F	; 95
    23fc:	f0 e0       	ldi	r31, 0x00	; 0
    23fe:	80 81       	ld	r24, Z
    2400:	80 68       	ori	r24, 0x80	; 128
    2402:	8c 93       	st	X, r24
}
    2404:	cf 91       	pop	r28
    2406:	df 91       	pop	r29
    2408:	08 95       	ret

0000240a <GIE_voidDisable>:

void GIE_voidDisable(void){
    240a:	df 93       	push	r29
    240c:	cf 93       	push	r28
    240e:	cd b7       	in	r28, 0x3d	; 61
    2410:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(SREG,SREG_I);
    2412:	af e5       	ldi	r26, 0x5F	; 95
    2414:	b0 e0       	ldi	r27, 0x00	; 0
    2416:	ef e5       	ldi	r30, 0x5F	; 95
    2418:	f0 e0       	ldi	r31, 0x00	; 0
    241a:	80 81       	ld	r24, Z
    241c:	8f 77       	andi	r24, 0x7F	; 127
    241e:	8c 93       	st	X, r24
    2420:	cf 91       	pop	r28
    2422:	df 91       	pop	r29
    2424:	08 95       	ret

00002426 <KPD_u8GetPressedKey>:
#include "KPD_config.h"
#include "KPD_interface.h"
#include "KPD_private.h"

u8 KPD_u8GetPressedKey(void)
{
    2426:	df 93       	push	r29
    2428:	cf 93       	push	r28
    242a:	00 d0       	rcall	.+0      	; 0x242c <KPD_u8GetPressedKey+0x6>
    242c:	00 d0       	rcall	.+0      	; 0x242e <KPD_u8GetPressedKey+0x8>
    242e:	0f 92       	push	r0
    2430:	cd b7       	in	r28, 0x3d	; 61
    2432:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8PressedKey = KPD_NO_PRESSED_KEY, Local_u8ColumnIdx,Local_u8RowIdx,Local_u8PinState;
    2434:	8f ef       	ldi	r24, 0xFF	; 255
    2436:	8b 83       	std	Y+3, r24	; 0x03
	static u8 Local_u8KPDArr[ROW_NUM][COLUMN_NUM] = KPD_ARR_VAL;
	static u8 Local_u8ColumnArr[COLUMN_NUM] ={KPD_COLUMN0_PIN,KPD_COLUMN1_PIN,KPD_COLUMN2_PIN,KPD_COLUMN3_PIN};
	static u8 Local_u8RowArr[ROW_NUM] = {KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};

	for(Local_u8ColumnIdx=0;Local_u8ColumnIdx<COLUMN_NUM;Local_u8ColumnIdx++)
    2438:	1a 82       	std	Y+2, r1	; 0x02
    243a:	5e c0       	rjmp	.+188    	; 0x24f8 <KPD_u8GetPressedKey+0xd2>
	{
		//Activate Current Column
		DIO_u8SetPinValue(KPD_PORT,Local_u8ColumnArr[Local_u8ColumnIdx],DIO_u8PIN_LOW);
    243c:	8a 81       	ldd	r24, Y+2	; 0x02
    243e:	88 2f       	mov	r24, r24
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	fc 01       	movw	r30, r24
    2444:	e3 54       	subi	r30, 0x43	; 67
    2446:	ff 4f       	sbci	r31, 0xFF	; 255
    2448:	90 81       	ld	r25, Z
    244a:	81 e0       	ldi	r24, 0x01	; 1
    244c:	69 2f       	mov	r22, r25
    244e:	40 e0       	ldi	r20, 0x00	; 0
    2450:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DIO_u8SetPinValue>
		for(Local_u8RowIdx=0;Local_u8RowIdx<ROW_NUM;Local_u8RowIdx++)
    2454:	19 82       	std	Y+1, r1	; 0x01
    2456:	3d c0       	rjmp	.+122    	; 0x24d2 <KPD_u8GetPressedKey+0xac>
		{
			//Read the current Row
			DIO_u8GetPinValue(KPD_PORT,Local_u8RowArr[Local_u8RowIdx],&Local_u8PinState);
    2458:	89 81       	ldd	r24, Y+1	; 0x01
    245a:	88 2f       	mov	r24, r24
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	fc 01       	movw	r30, r24
    2460:	e7 54       	subi	r30, 0x47	; 71
    2462:	ff 4f       	sbci	r31, 0xFF	; 255
    2464:	90 81       	ld	r25, Z
    2466:	9e 01       	movw	r18, r28
    2468:	2c 5f       	subi	r18, 0xFC	; 252
    246a:	3f 4f       	sbci	r19, 0xFF	; 255
    246c:	81 e0       	ldi	r24, 0x01	; 1
    246e:	69 2f       	mov	r22, r25
    2470:	a9 01       	movw	r20, r18
    2472:	0e 94 0d 11 	call	0x221a	; 0x221a <DIO_u8GetPinValue>
			//check if switch is pressed
			if(DIO_u8PIN_LOW==Local_u8PinState)
    2476:	8c 81       	ldd	r24, Y+4	; 0x04
    2478:	88 23       	and	r24, r24
    247a:	41 f5       	brne	.+80     	; 0x24cc <KPD_u8GetPressedKey+0xa6>
			{
				Local_u8PressedKey= Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumnIdx];
    247c:	89 81       	ldd	r24, Y+1	; 0x01
    247e:	48 2f       	mov	r20, r24
    2480:	50 e0       	ldi	r21, 0x00	; 0
    2482:	8a 81       	ldd	r24, Y+2	; 0x02
    2484:	28 2f       	mov	r18, r24
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	ca 01       	movw	r24, r20
    248a:	88 0f       	add	r24, r24
    248c:	99 1f       	adc	r25, r25
    248e:	88 0f       	add	r24, r24
    2490:	99 1f       	adc	r25, r25
    2492:	82 0f       	add	r24, r18
    2494:	93 1f       	adc	r25, r19
    2496:	fc 01       	movw	r30, r24
    2498:	ef 53       	subi	r30, 0x3F	; 63
    249a:	ff 4f       	sbci	r31, 0xFF	; 255
    249c:	80 81       	ld	r24, Z
    249e:	8b 83       	std	Y+3, r24	; 0x03
    24a0:	0f c0       	rjmp	.+30     	; 0x24c0 <KPD_u8GetPressedKey+0x9a>
				//polling(busy waiting until the key is released
				while(DIO_u8PIN_LOW==Local_u8PinState)
				{
					DIO_u8GetPinValue(KPD_PORT,Local_u8RowArr[Local_u8RowIdx],&Local_u8PinState);
    24a2:	89 81       	ldd	r24, Y+1	; 0x01
    24a4:	88 2f       	mov	r24, r24
    24a6:	90 e0       	ldi	r25, 0x00	; 0
    24a8:	fc 01       	movw	r30, r24
    24aa:	e7 54       	subi	r30, 0x47	; 71
    24ac:	ff 4f       	sbci	r31, 0xFF	; 255
    24ae:	90 81       	ld	r25, Z
    24b0:	9e 01       	movw	r18, r28
    24b2:	2c 5f       	subi	r18, 0xFC	; 252
    24b4:	3f 4f       	sbci	r19, 0xFF	; 255
    24b6:	81 e0       	ldi	r24, 0x01	; 1
    24b8:	69 2f       	mov	r22, r25
    24ba:	a9 01       	movw	r20, r18
    24bc:	0e 94 0d 11 	call	0x221a	; 0x221a <DIO_u8GetPinValue>
			//check if switch is pressed
			if(DIO_u8PIN_LOW==Local_u8PinState)
			{
				Local_u8PressedKey= Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumnIdx];
				//polling(busy waiting until the key is released
				while(DIO_u8PIN_LOW==Local_u8PinState)
    24c0:	8c 81       	ldd	r24, Y+4	; 0x04
    24c2:	88 23       	and	r24, r24
    24c4:	71 f3       	breq	.-36     	; 0x24a2 <KPD_u8GetPressedKey+0x7c>
				{
					DIO_u8GetPinValue(KPD_PORT,Local_u8RowArr[Local_u8RowIdx],&Local_u8PinState);
				}
				return Local_u8PressedKey;
    24c6:	8b 81       	ldd	r24, Y+3	; 0x03
    24c8:	8d 83       	std	Y+5, r24	; 0x05
    24ca:	1c c0       	rjmp	.+56     	; 0x2504 <KPD_u8GetPressedKey+0xde>

	for(Local_u8ColumnIdx=0;Local_u8ColumnIdx<COLUMN_NUM;Local_u8ColumnIdx++)
	{
		//Activate Current Column
		DIO_u8SetPinValue(KPD_PORT,Local_u8ColumnArr[Local_u8ColumnIdx],DIO_u8PIN_LOW);
		for(Local_u8RowIdx=0;Local_u8RowIdx<ROW_NUM;Local_u8RowIdx++)
    24cc:	89 81       	ldd	r24, Y+1	; 0x01
    24ce:	8f 5f       	subi	r24, 0xFF	; 255
    24d0:	89 83       	std	Y+1, r24	; 0x01
    24d2:	89 81       	ldd	r24, Y+1	; 0x01
    24d4:	84 30       	cpi	r24, 0x04	; 4
    24d6:	08 f4       	brcc	.+2      	; 0x24da <KPD_u8GetPressedKey+0xb4>
    24d8:	bf cf       	rjmp	.-130    	; 0x2458 <KPD_u8GetPressedKey+0x32>
				}
				return Local_u8PressedKey;
			}
		}
		//Activate Current Column
		DIO_u8SetPinValue(KPD_PORT,Local_u8ColumnArr[Local_u8ColumnIdx],DIO_u8PIN_HIGH);
    24da:	8a 81       	ldd	r24, Y+2	; 0x02
    24dc:	88 2f       	mov	r24, r24
    24de:	90 e0       	ldi	r25, 0x00	; 0
    24e0:	fc 01       	movw	r30, r24
    24e2:	e3 54       	subi	r30, 0x43	; 67
    24e4:	ff 4f       	sbci	r31, 0xFF	; 255
    24e6:	90 81       	ld	r25, Z
    24e8:	81 e0       	ldi	r24, 0x01	; 1
    24ea:	69 2f       	mov	r22, r25
    24ec:	41 e0       	ldi	r20, 0x01	; 1
    24ee:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DIO_u8SetPinValue>
	u8 Local_u8PressedKey = KPD_NO_PRESSED_KEY, Local_u8ColumnIdx,Local_u8RowIdx,Local_u8PinState;
	static u8 Local_u8KPDArr[ROW_NUM][COLUMN_NUM] = KPD_ARR_VAL;
	static u8 Local_u8ColumnArr[COLUMN_NUM] ={KPD_COLUMN0_PIN,KPD_COLUMN1_PIN,KPD_COLUMN2_PIN,KPD_COLUMN3_PIN};
	static u8 Local_u8RowArr[ROW_NUM] = {KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};

	for(Local_u8ColumnIdx=0;Local_u8ColumnIdx<COLUMN_NUM;Local_u8ColumnIdx++)
    24f2:	8a 81       	ldd	r24, Y+2	; 0x02
    24f4:	8f 5f       	subi	r24, 0xFF	; 255
    24f6:	8a 83       	std	Y+2, r24	; 0x02
    24f8:	8a 81       	ldd	r24, Y+2	; 0x02
    24fa:	84 30       	cpi	r24, 0x04	; 4
    24fc:	08 f4       	brcc	.+2      	; 0x2500 <KPD_u8GetPressedKey+0xda>
    24fe:	9e cf       	rjmp	.-196    	; 0x243c <KPD_u8GetPressedKey+0x16>
		}
		//Activate Current Column
		DIO_u8SetPinValue(KPD_PORT,Local_u8ColumnArr[Local_u8ColumnIdx],DIO_u8PIN_HIGH);
	}

	return Local_u8PressedKey;
    2500:	8b 81       	ldd	r24, Y+3	; 0x03
    2502:	8d 83       	std	Y+5, r24	; 0x05
    2504:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2506:	0f 90       	pop	r0
    2508:	0f 90       	pop	r0
    250a:	0f 90       	pop	r0
    250c:	0f 90       	pop	r0
    250e:	0f 90       	pop	r0
    2510:	cf 91       	pop	r28
    2512:	df 91       	pop	r29
    2514:	08 95       	ret

00002516 <MATH_u32Power>:
#include "STD_TYPES.h"
#include "BIT_MATH.h"
#include "MATH_HELPER.h"

u32 MATH_u32Power(u32 Copy_u32Base,s32 Copy_u32Exponent){
    2516:	df 93       	push	r29
    2518:	cf 93       	push	r28
    251a:	cd b7       	in	r28, 0x3d	; 61
    251c:	de b7       	in	r29, 0x3e	; 62
    251e:	60 97       	sbiw	r28, 0x10	; 16
    2520:	0f b6       	in	r0, 0x3f	; 63
    2522:	f8 94       	cli
    2524:	de bf       	out	0x3e, r29	; 62
    2526:	0f be       	out	0x3f, r0	; 63
    2528:	cd bf       	out	0x3d, r28	; 61
    252a:	69 87       	std	Y+9, r22	; 0x09
    252c:	7a 87       	std	Y+10, r23	; 0x0a
    252e:	8b 87       	std	Y+11, r24	; 0x0b
    2530:	9c 87       	std	Y+12, r25	; 0x0c
    2532:	2d 87       	std	Y+13, r18	; 0x0d
    2534:	3e 87       	std	Y+14, r19	; 0x0e
    2536:	4f 87       	std	Y+15, r20	; 0x0f
    2538:	58 8b       	std	Y+16, r21	; 0x10
	u32 Local_u32Result=1;
    253a:	81 e0       	ldi	r24, 0x01	; 1
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	a0 e0       	ldi	r26, 0x00	; 0
    2540:	b0 e0       	ldi	r27, 0x00	; 0
    2542:	8d 83       	std	Y+5, r24	; 0x05
    2544:	9e 83       	std	Y+6, r25	; 0x06
    2546:	af 83       	std	Y+7, r26	; 0x07
    2548:	b8 87       	std	Y+8, r27	; 0x08
	for(u32 i=0;i<Copy_u32Exponent;i++){
    254a:	19 82       	std	Y+1, r1	; 0x01
    254c:	1a 82       	std	Y+2, r1	; 0x02
    254e:	1b 82       	std	Y+3, r1	; 0x03
    2550:	1c 82       	std	Y+4, r1	; 0x04
    2552:	1d c0       	rjmp	.+58     	; 0x258e <MATH_u32Power+0x78>
		Local_u32Result*=Copy_u32Base;
    2554:	8d 81       	ldd	r24, Y+5	; 0x05
    2556:	9e 81       	ldd	r25, Y+6	; 0x06
    2558:	af 81       	ldd	r26, Y+7	; 0x07
    255a:	b8 85       	ldd	r27, Y+8	; 0x08
    255c:	29 85       	ldd	r18, Y+9	; 0x09
    255e:	3a 85       	ldd	r19, Y+10	; 0x0a
    2560:	4b 85       	ldd	r20, Y+11	; 0x0b
    2562:	5c 85       	ldd	r21, Y+12	; 0x0c
    2564:	bc 01       	movw	r22, r24
    2566:	cd 01       	movw	r24, r26
    2568:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <__mulsi3>
    256c:	dc 01       	movw	r26, r24
    256e:	cb 01       	movw	r24, r22
    2570:	8d 83       	std	Y+5, r24	; 0x05
    2572:	9e 83       	std	Y+6, r25	; 0x06
    2574:	af 83       	std	Y+7, r26	; 0x07
    2576:	b8 87       	std	Y+8, r27	; 0x08
#include "BIT_MATH.h"
#include "MATH_HELPER.h"

u32 MATH_u32Power(u32 Copy_u32Base,s32 Copy_u32Exponent){
	u32 Local_u32Result=1;
	for(u32 i=0;i<Copy_u32Exponent;i++){
    2578:	89 81       	ldd	r24, Y+1	; 0x01
    257a:	9a 81       	ldd	r25, Y+2	; 0x02
    257c:	ab 81       	ldd	r26, Y+3	; 0x03
    257e:	bc 81       	ldd	r27, Y+4	; 0x04
    2580:	01 96       	adiw	r24, 0x01	; 1
    2582:	a1 1d       	adc	r26, r1
    2584:	b1 1d       	adc	r27, r1
    2586:	89 83       	std	Y+1, r24	; 0x01
    2588:	9a 83       	std	Y+2, r25	; 0x02
    258a:	ab 83       	std	Y+3, r26	; 0x03
    258c:	bc 83       	std	Y+4, r27	; 0x04
    258e:	2d 85       	ldd	r18, Y+13	; 0x0d
    2590:	3e 85       	ldd	r19, Y+14	; 0x0e
    2592:	4f 85       	ldd	r20, Y+15	; 0x0f
    2594:	58 89       	ldd	r21, Y+16	; 0x10
    2596:	89 81       	ldd	r24, Y+1	; 0x01
    2598:	9a 81       	ldd	r25, Y+2	; 0x02
    259a:	ab 81       	ldd	r26, Y+3	; 0x03
    259c:	bc 81       	ldd	r27, Y+4	; 0x04
    259e:	82 17       	cp	r24, r18
    25a0:	93 07       	cpc	r25, r19
    25a2:	a4 07       	cpc	r26, r20
    25a4:	b5 07       	cpc	r27, r21
    25a6:	b0 f2       	brcs	.-84     	; 0x2554 <MATH_u32Power+0x3e>
		Local_u32Result*=Copy_u32Base;
	}
	return Local_u32Result;
    25a8:	8d 81       	ldd	r24, Y+5	; 0x05
    25aa:	9e 81       	ldd	r25, Y+6	; 0x06
    25ac:	af 81       	ldd	r26, Y+7	; 0x07
    25ae:	b8 85       	ldd	r27, Y+8	; 0x08
}
    25b0:	bc 01       	movw	r22, r24
    25b2:	cd 01       	movw	r24, r26
    25b4:	60 96       	adiw	r28, 0x10	; 16
    25b6:	0f b6       	in	r0, 0x3f	; 63
    25b8:	f8 94       	cli
    25ba:	de bf       	out	0x3e, r29	; 62
    25bc:	0f be       	out	0x3f, r0	; 63
    25be:	cd bf       	out	0x3d, r28	; 61
    25c0:	cf 91       	pop	r28
    25c2:	df 91       	pop	r29
    25c4:	08 95       	ret

000025c6 <MATH_s32Map>:

s32 MATH_s32Map(s32 Copy_s32InputMin,s32 Copy_s32InputMax,s32 Copy_s32OutputMin,s32 Copy_s32OutputMax,s32 Copy_s32InputVal){
    25c6:	af 92       	push	r10
    25c8:	bf 92       	push	r11
    25ca:	cf 92       	push	r12
    25cc:	df 92       	push	r13
    25ce:	ef 92       	push	r14
    25d0:	ff 92       	push	r15
    25d2:	0f 93       	push	r16
    25d4:	1f 93       	push	r17
    25d6:	df 93       	push	r29
    25d8:	cf 93       	push	r28
    25da:	cd b7       	in	r28, 0x3d	; 61
    25dc:	de b7       	in	r29, 0x3e	; 62
    25de:	64 97       	sbiw	r28, 0x14	; 20
    25e0:	0f b6       	in	r0, 0x3f	; 63
    25e2:	f8 94       	cli
    25e4:	de bf       	out	0x3e, r29	; 62
    25e6:	0f be       	out	0x3f, r0	; 63
    25e8:	cd bf       	out	0x3d, r28	; 61
    25ea:	6d 83       	std	Y+5, r22	; 0x05
    25ec:	7e 83       	std	Y+6, r23	; 0x06
    25ee:	8f 83       	std	Y+7, r24	; 0x07
    25f0:	98 87       	std	Y+8, r25	; 0x08
    25f2:	29 87       	std	Y+9, r18	; 0x09
    25f4:	3a 87       	std	Y+10, r19	; 0x0a
    25f6:	4b 87       	std	Y+11, r20	; 0x0b
    25f8:	5c 87       	std	Y+12, r21	; 0x0c
    25fa:	ed 86       	std	Y+13, r14	; 0x0d
    25fc:	fe 86       	std	Y+14, r15	; 0x0e
    25fe:	0f 87       	std	Y+15, r16	; 0x0f
    2600:	18 8b       	std	Y+16, r17	; 0x10
    2602:	a9 8a       	std	Y+17, r10	; 0x11
    2604:	ba 8a       	std	Y+18, r11	; 0x12
    2606:	cb 8a       	std	Y+19, r12	; 0x13
    2608:	dc 8a       	std	Y+20, r13	; 0x14
    s32 Local_s32OutputVal;
    Local_s32OutputVal= (((Copy_s32OutputMax-Copy_s32OutputMin)*(Copy_s32InputVal-Copy_s32InputMin))/(Copy_s32InputMax-Copy_s32InputMin))+Copy_s32OutputMin;
    260a:	29 89       	ldd	r18, Y+17	; 0x11
    260c:	3a 89       	ldd	r19, Y+18	; 0x12
    260e:	4b 89       	ldd	r20, Y+19	; 0x13
    2610:	5c 89       	ldd	r21, Y+20	; 0x14
    2612:	8d 85       	ldd	r24, Y+13	; 0x0d
    2614:	9e 85       	ldd	r25, Y+14	; 0x0e
    2616:	af 85       	ldd	r26, Y+15	; 0x0f
    2618:	b8 89       	ldd	r27, Y+16	; 0x10
    261a:	79 01       	movw	r14, r18
    261c:	8a 01       	movw	r16, r20
    261e:	e8 1a       	sub	r14, r24
    2620:	f9 0a       	sbc	r15, r25
    2622:	0a 0b       	sbc	r16, r26
    2624:	1b 0b       	sbc	r17, r27
    2626:	29 a1       	ldd	r18, Y+33	; 0x21
    2628:	3a a1       	ldd	r19, Y+34	; 0x22
    262a:	4b a1       	ldd	r20, Y+35	; 0x23
    262c:	5c a1       	ldd	r21, Y+36	; 0x24
    262e:	8d 81       	ldd	r24, Y+5	; 0x05
    2630:	9e 81       	ldd	r25, Y+6	; 0x06
    2632:	af 81       	ldd	r26, Y+7	; 0x07
    2634:	b8 85       	ldd	r27, Y+8	; 0x08
    2636:	28 1b       	sub	r18, r24
    2638:	39 0b       	sbc	r19, r25
    263a:	4a 0b       	sbc	r20, r26
    263c:	5b 0b       	sbc	r21, r27
    263e:	c8 01       	movw	r24, r16
    2640:	b7 01       	movw	r22, r14
    2642:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <__mulsi3>
    2646:	7b 01       	movw	r14, r22
    2648:	8c 01       	movw	r16, r24
    264a:	29 85       	ldd	r18, Y+9	; 0x09
    264c:	3a 85       	ldd	r19, Y+10	; 0x0a
    264e:	4b 85       	ldd	r20, Y+11	; 0x0b
    2650:	5c 85       	ldd	r21, Y+12	; 0x0c
    2652:	8d 81       	ldd	r24, Y+5	; 0x05
    2654:	9e 81       	ldd	r25, Y+6	; 0x06
    2656:	af 81       	ldd	r26, Y+7	; 0x07
    2658:	b8 85       	ldd	r27, Y+8	; 0x08
    265a:	28 1b       	sub	r18, r24
    265c:	39 0b       	sbc	r19, r25
    265e:	4a 0b       	sbc	r20, r26
    2660:	5b 0b       	sbc	r21, r27
    2662:	c8 01       	movw	r24, r16
    2664:	b7 01       	movw	r22, r14
    2666:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <__divmodsi4>
    266a:	da 01       	movw	r26, r20
    266c:	c9 01       	movw	r24, r18
    266e:	9c 01       	movw	r18, r24
    2670:	ad 01       	movw	r20, r26
    2672:	8d 85       	ldd	r24, Y+13	; 0x0d
    2674:	9e 85       	ldd	r25, Y+14	; 0x0e
    2676:	af 85       	ldd	r26, Y+15	; 0x0f
    2678:	b8 89       	ldd	r27, Y+16	; 0x10
    267a:	82 0f       	add	r24, r18
    267c:	93 1f       	adc	r25, r19
    267e:	a4 1f       	adc	r26, r20
    2680:	b5 1f       	adc	r27, r21
    2682:	89 83       	std	Y+1, r24	; 0x01
    2684:	9a 83       	std	Y+2, r25	; 0x02
    2686:	ab 83       	std	Y+3, r26	; 0x03
    2688:	bc 83       	std	Y+4, r27	; 0x04
    return Local_s32OutputVal;
    268a:	89 81       	ldd	r24, Y+1	; 0x01
    268c:	9a 81       	ldd	r25, Y+2	; 0x02
    268e:	ab 81       	ldd	r26, Y+3	; 0x03
    2690:	bc 81       	ldd	r27, Y+4	; 0x04
    2692:	bc 01       	movw	r22, r24
    2694:	cd 01       	movw	r24, r26
    2696:	64 96       	adiw	r28, 0x14	; 20
    2698:	0f b6       	in	r0, 0x3f	; 63
    269a:	f8 94       	cli
    269c:	de bf       	out	0x3e, r29	; 62
    269e:	0f be       	out	0x3f, r0	; 63
    26a0:	cd bf       	out	0x3d, r28	; 61
    26a2:	cf 91       	pop	r28
    26a4:	df 91       	pop	r29
    26a6:	1f 91       	pop	r17
    26a8:	0f 91       	pop	r16
    26aa:	ff 90       	pop	r15
    26ac:	ef 90       	pop	r14
    26ae:	df 90       	pop	r13
    26b0:	cf 90       	pop	r12
    26b2:	bf 90       	pop	r11
    26b4:	af 90       	pop	r10
    26b6:	08 95       	ret

000026b8 <PORT_voidInit>:
#include "PORT_config.h"
#include "PORT_private.h"
#include "PORT_interface.h"
#include "PORT_register.h"

void PORT_voidInit(){
    26b8:	df 93       	push	r29
    26ba:	cf 93       	push	r28
    26bc:	cd b7       	in	r28, 0x3d	; 61
    26be:	de b7       	in	r29, 0x3e	; 62
    DDRA=PORTA_DIR;
    26c0:	ea e3       	ldi	r30, 0x3A	; 58
    26c2:	f0 e0       	ldi	r31, 0x00	; 0
    26c4:	8c ef       	ldi	r24, 0xFC	; 252
    26c6:	80 83       	st	Z, r24
    DDRB=PORTB_DIR;
    26c8:	e7 e3       	ldi	r30, 0x37	; 55
    26ca:	f0 e0       	ldi	r31, 0x00	; 0
    26cc:	8f e0       	ldi	r24, 0x0F	; 15
    26ce:	80 83       	st	Z, r24
    DDRC=PORTC_DIR;
    26d0:	e4 e3       	ldi	r30, 0x34	; 52
    26d2:	f0 e0       	ldi	r31, 0x00	; 0
    26d4:	8f ef       	ldi	r24, 0xFF	; 255
    26d6:	80 83       	st	Z, r24
    DDRD=PORTD_DIR;
    26d8:	e1 e3       	ldi	r30, 0x31	; 49
    26da:	f0 e0       	ldi	r31, 0x00	; 0
    26dc:	8f ef       	ldi	r24, 0xFF	; 255
    26de:	80 83       	st	Z, r24
    
    PORTA=PORTA_INIT_VAL;
    26e0:	eb e3       	ldi	r30, 0x3B	; 59
    26e2:	f0 e0       	ldi	r31, 0x00	; 0
    26e4:	10 82       	st	Z, r1
    PORTB=PORTB_INIT_VAL;
    26e6:	e8 e3       	ldi	r30, 0x38	; 56
    26e8:	f0 e0       	ldi	r31, 0x00	; 0
    26ea:	8f ef       	ldi	r24, 0xFF	; 255
    26ec:	80 83       	st	Z, r24
    PORTC=PORTC_INIT_VAL;
    26ee:	e5 e3       	ldi	r30, 0x35	; 53
    26f0:	f0 e0       	ldi	r31, 0x00	; 0
    26f2:	10 82       	st	Z, r1
    PORTD=PORTD_INIT_VAL;
    26f4:	e2 e3       	ldi	r30, 0x32	; 50
    26f6:	f0 e0       	ldi	r31, 0x00	; 0
    26f8:	10 82       	st	Z, r1
}
    26fa:	cf 91       	pop	r28
    26fc:	df 91       	pop	r29
    26fe:	08 95       	ret

00002700 <SSD_u8SetNumber>:
		0b01111101,
		0b00000111,
		0b01111111,
		0b01101111};

u8 SSD_u8SetNumber(u8 Copy_u8Number,SSD_t* SSD){
    2700:	df 93       	push	r29
    2702:	cf 93       	push	r28
    2704:	00 d0       	rcall	.+0      	; 0x2706 <SSD_u8SetNumber+0x6>
    2706:	00 d0       	rcall	.+0      	; 0x2708 <SSD_u8SetNumber+0x8>
    2708:	cd b7       	in	r28, 0x3d	; 61
    270a:	de b7       	in	r29, 0x3e	; 62
    270c:	8a 83       	std	Y+2, r24	; 0x02
    270e:	7c 83       	std	Y+4, r23	; 0x04
    2710:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorStatus=OK;
    2712:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Number<=9){
    2714:	8a 81       	ldd	r24, Y+2	; 0x02
    2716:	8a 30       	cpi	r24, 0x0A	; 10
    2718:	68 f5       	brcc	.+90     	; 0x2774 <SSD_u8SetNumber+0x74>
		if((SSD->COM_TYPE)==ANODE){
    271a:	eb 81       	ldd	r30, Y+3	; 0x03
    271c:	fc 81       	ldd	r31, Y+4	; 0x04
    271e:	80 81       	ld	r24, Z
    2720:	81 30       	cpi	r24, 0x01	; 1
    2722:	89 f4       	brne	.+34     	; 0x2746 <SSD_u8SetNumber+0x46>
			DIO_u8SetPortValue((SSD)->Port,~(SevenSegArray[Copy_u8Number]));
    2724:	eb 81       	ldd	r30, Y+3	; 0x03
    2726:	fc 81       	ldd	r31, Y+4	; 0x04
    2728:	21 81       	ldd	r18, Z+1	; 0x01
    272a:	8a 81       	ldd	r24, Y+2	; 0x02
    272c:	88 2f       	mov	r24, r24
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	fc 01       	movw	r30, r24
    2732:	ef 52       	subi	r30, 0x2F	; 47
    2734:	ff 4f       	sbci	r31, 0xFF	; 255
    2736:	80 81       	ld	r24, Z
    2738:	98 2f       	mov	r25, r24
    273a:	90 95       	com	r25
    273c:	82 2f       	mov	r24, r18
    273e:	69 2f       	mov	r22, r25
    2740:	0e 94 c5 10 	call	0x218a	; 0x218a <DIO_u8SetPortValue>
    2744:	19 c0       	rjmp	.+50     	; 0x2778 <SSD_u8SetNumber+0x78>
		}
		else if((SSD->COM_TYPE)==CATHODE){
    2746:	eb 81       	ldd	r30, Y+3	; 0x03
    2748:	fc 81       	ldd	r31, Y+4	; 0x04
    274a:	80 81       	ld	r24, Z
    274c:	88 23       	and	r24, r24
    274e:	79 f4       	brne	.+30     	; 0x276e <SSD_u8SetNumber+0x6e>
			DIO_u8SetPortValue((SSD)->Port,SevenSegArray[Copy_u8Number]);
    2750:	eb 81       	ldd	r30, Y+3	; 0x03
    2752:	fc 81       	ldd	r31, Y+4	; 0x04
    2754:	21 81       	ldd	r18, Z+1	; 0x01
    2756:	8a 81       	ldd	r24, Y+2	; 0x02
    2758:	88 2f       	mov	r24, r24
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	fc 01       	movw	r30, r24
    275e:	ef 52       	subi	r30, 0x2F	; 47
    2760:	ff 4f       	sbci	r31, 0xFF	; 255
    2762:	90 81       	ld	r25, Z
    2764:	82 2f       	mov	r24, r18
    2766:	69 2f       	mov	r22, r25
    2768:	0e 94 c5 10 	call	0x218a	; 0x218a <DIO_u8SetPortValue>
    276c:	05 c0       	rjmp	.+10     	; 0x2778 <SSD_u8SetNumber+0x78>
		}
		else{
			Local_u8ErrorStatus=NOK;
    276e:	81 e0       	ldi	r24, 0x01	; 1
    2770:	89 83       	std	Y+1, r24	; 0x01
    2772:	02 c0       	rjmp	.+4      	; 0x2778 <SSD_u8SetNumber+0x78>
		}
	}
	else{
		Local_u8ErrorStatus=NOK;
    2774:	81 e0       	ldi	r24, 0x01	; 1
    2776:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorStatus;
    2778:	89 81       	ldd	r24, Y+1	; 0x01
}
    277a:	0f 90       	pop	r0
    277c:	0f 90       	pop	r0
    277e:	0f 90       	pop	r0
    2780:	0f 90       	pop	r0
    2782:	cf 91       	pop	r28
    2784:	df 91       	pop	r29
    2786:	08 95       	ret

00002788 <SSD_u8Enable>:

u8 SSD_u8Enable(SSD_t* SSD){
    2788:	df 93       	push	r29
    278a:	cf 93       	push	r28
    278c:	00 d0       	rcall	.+0      	; 0x278e <SSD_u8Enable+0x6>
    278e:	0f 92       	push	r0
    2790:	cd b7       	in	r28, 0x3d	; 61
    2792:	de b7       	in	r29, 0x3e	; 62
    2794:	9b 83       	std	Y+3, r25	; 0x03
    2796:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus=OK;
    2798:	19 82       	std	Y+1, r1	; 0x01
	if((SSD->COM_TYPE)==ANODE){
    279a:	ea 81       	ldd	r30, Y+2	; 0x02
    279c:	fb 81       	ldd	r31, Y+3	; 0x03
    279e:	80 81       	ld	r24, Z
    27a0:	81 30       	cpi	r24, 0x01	; 1
    27a2:	59 f4       	brne	.+22     	; 0x27ba <SSD_u8Enable+0x32>
		DIO_u8SetPinValue((SSD)->EnablePort,(SSD)->EnablePin,DIO_u8PIN_HIGH);
    27a4:	ea 81       	ldd	r30, Y+2	; 0x02
    27a6:	fb 81       	ldd	r31, Y+3	; 0x03
    27a8:	82 81       	ldd	r24, Z+2	; 0x02
    27aa:	ea 81       	ldd	r30, Y+2	; 0x02
    27ac:	fb 81       	ldd	r31, Y+3	; 0x03
    27ae:	93 81       	ldd	r25, Z+3	; 0x03
    27b0:	69 2f       	mov	r22, r25
    27b2:	41 e0       	ldi	r20, 0x01	; 1
    27b4:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DIO_u8SetPinValue>
    27b8:	12 c0       	rjmp	.+36     	; 0x27de <SSD_u8Enable+0x56>
	}
	else if((SSD->COM_TYPE)==CATHODE){
    27ba:	ea 81       	ldd	r30, Y+2	; 0x02
    27bc:	fb 81       	ldd	r31, Y+3	; 0x03
    27be:	80 81       	ld	r24, Z
    27c0:	88 23       	and	r24, r24
    27c2:	59 f4       	brne	.+22     	; 0x27da <SSD_u8Enable+0x52>
		DIO_u8SetPinValue((SSD)->EnablePort,(SSD)->EnablePin,DIO_u8PIN_LOW);
    27c4:	ea 81       	ldd	r30, Y+2	; 0x02
    27c6:	fb 81       	ldd	r31, Y+3	; 0x03
    27c8:	82 81       	ldd	r24, Z+2	; 0x02
    27ca:	ea 81       	ldd	r30, Y+2	; 0x02
    27cc:	fb 81       	ldd	r31, Y+3	; 0x03
    27ce:	93 81       	ldd	r25, Z+3	; 0x03
    27d0:	69 2f       	mov	r22, r25
    27d2:	40 e0       	ldi	r20, 0x00	; 0
    27d4:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DIO_u8SetPinValue>
    27d8:	02 c0       	rjmp	.+4      	; 0x27de <SSD_u8Enable+0x56>
	}
	else{
		Local_u8ErrorStatus=NOK;
    27da:	81 e0       	ldi	r24, 0x01	; 1
    27dc:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorStatus;
    27de:	89 81       	ldd	r24, Y+1	; 0x01
}
    27e0:	0f 90       	pop	r0
    27e2:	0f 90       	pop	r0
    27e4:	0f 90       	pop	r0
    27e6:	cf 91       	pop	r28
    27e8:	df 91       	pop	r29
    27ea:	08 95       	ret

000027ec <SSD_u8Disable>:

u8 SSD_u8Disable(SSD_t* SSD){
    27ec:	df 93       	push	r29
    27ee:	cf 93       	push	r28
    27f0:	00 d0       	rcall	.+0      	; 0x27f2 <SSD_u8Disable+0x6>
    27f2:	0f 92       	push	r0
    27f4:	cd b7       	in	r28, 0x3d	; 61
    27f6:	de b7       	in	r29, 0x3e	; 62
    27f8:	9b 83       	std	Y+3, r25	; 0x03
    27fa:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus=OK;
    27fc:	19 82       	std	Y+1, r1	; 0x01
	if((SSD->COM_TYPE)==ANODE){
    27fe:	ea 81       	ldd	r30, Y+2	; 0x02
    2800:	fb 81       	ldd	r31, Y+3	; 0x03
    2802:	80 81       	ld	r24, Z
    2804:	81 30       	cpi	r24, 0x01	; 1
    2806:	59 f4       	brne	.+22     	; 0x281e <SSD_u8Disable+0x32>
		DIO_u8SetPinValue((SSD)->EnablePort,(SSD)->EnablePin,DIO_u8PIN_LOW);
    2808:	ea 81       	ldd	r30, Y+2	; 0x02
    280a:	fb 81       	ldd	r31, Y+3	; 0x03
    280c:	82 81       	ldd	r24, Z+2	; 0x02
    280e:	ea 81       	ldd	r30, Y+2	; 0x02
    2810:	fb 81       	ldd	r31, Y+3	; 0x03
    2812:	93 81       	ldd	r25, Z+3	; 0x03
    2814:	69 2f       	mov	r22, r25
    2816:	40 e0       	ldi	r20, 0x00	; 0
    2818:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DIO_u8SetPinValue>
    281c:	12 c0       	rjmp	.+36     	; 0x2842 <SSD_u8Disable+0x56>
	}
	else if((SSD->COM_TYPE)==CATHODE){
    281e:	ea 81       	ldd	r30, Y+2	; 0x02
    2820:	fb 81       	ldd	r31, Y+3	; 0x03
    2822:	80 81       	ld	r24, Z
    2824:	88 23       	and	r24, r24
    2826:	59 f4       	brne	.+22     	; 0x283e <SSD_u8Disable+0x52>
		DIO_u8SetPinValue((SSD)->EnablePort,(SSD)->EnablePin,DIO_u8PIN_HIGH);
    2828:	ea 81       	ldd	r30, Y+2	; 0x02
    282a:	fb 81       	ldd	r31, Y+3	; 0x03
    282c:	82 81       	ldd	r24, Z+2	; 0x02
    282e:	ea 81       	ldd	r30, Y+2	; 0x02
    2830:	fb 81       	ldd	r31, Y+3	; 0x03
    2832:	93 81       	ldd	r25, Z+3	; 0x03
    2834:	69 2f       	mov	r22, r25
    2836:	41 e0       	ldi	r20, 0x01	; 1
    2838:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DIO_u8SetPinValue>
    283c:	02 c0       	rjmp	.+4      	; 0x2842 <SSD_u8Disable+0x56>
	}
	else{
		Local_u8ErrorStatus=NOK;
    283e:	81 e0       	ldi	r24, 0x01	; 1
    2840:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorStatus;
    2842:	89 81       	ldd	r24, Y+1	; 0x01
}
    2844:	0f 90       	pop	r0
    2846:	0f 90       	pop	r0
    2848:	0f 90       	pop	r0
    284a:	cf 91       	pop	r28
    284c:	df 91       	pop	r29
    284e:	08 95       	ret

00002850 <TIMER0_voidInit>:
static void (*TIMER2_pvCallBackFunc)(void)=NULL;
/********************************************************TIMER0**********************************************************
 ************************************************************************************************************************/


void TIMER0_voidInit(void){
    2850:	df 93       	push	r29
    2852:	cf 93       	push	r28
    2854:	cd b7       	in	r28, 0x3d	; 61
    2856:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR0,TCCR0_WGM00);
#elif TIMER0_GEN_MODE==CTC
	SET_BIT(TCCR0,TCCR0_WGM01);
	CLR_BIT(TCCR0,TCCR0_WGM00);
#elif TIMER0_GEN_MODE==FAST_PWM
	SET_BIT(TCCR0,TCCR0_WGM01);
    2858:	a3 e5       	ldi	r26, 0x53	; 83
    285a:	b0 e0       	ldi	r27, 0x00	; 0
    285c:	e3 e5       	ldi	r30, 0x53	; 83
    285e:	f0 e0       	ldi	r31, 0x00	; 0
    2860:	80 81       	ld	r24, Z
    2862:	88 60       	ori	r24, 0x08	; 8
    2864:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_WGM00);
    2866:	a3 e5       	ldi	r26, 0x53	; 83
    2868:	b0 e0       	ldi	r27, 0x00	; 0
    286a:	e3 e5       	ldi	r30, 0x53	; 83
    286c:	f0 e0       	ldi	r31, 0x00	; 0
    286e:	80 81       	ld	r24, Z
    2870:	80 64       	ori	r24, 0x40	; 64
    2872:	8c 93       	st	X, r24
#endif

	//Initialize Compare Match Output Mode
	TCCR0&=COMP_MATCH_OUT_MASK;
    2874:	a3 e5       	ldi	r26, 0x53	; 83
    2876:	b0 e0       	ldi	r27, 0x00	; 0
    2878:	e3 e5       	ldi	r30, 0x53	; 83
    287a:	f0 e0       	ldi	r31, 0x00	; 0
    287c:	80 81       	ld	r24, Z
    287e:	8f 7c       	andi	r24, 0xCF	; 207
    2880:	8c 93       	st	X, r24
	TCCR0|=(TIMER0_COMP_MATCH_OUTPUT_MODE<<4);
    2882:	a3 e5       	ldi	r26, 0x53	; 83
    2884:	b0 e0       	ldi	r27, 0x00	; 0
    2886:	e3 e5       	ldi	r30, 0x53	; 83
    2888:	f0 e0       	ldi	r31, 0x00	; 0
    288a:	80 81       	ld	r24, Z
    288c:	80 62       	ori	r24, 0x20	; 32
    288e:	8c 93       	st	X, r24

	//Initialize Interrupt Enable pins
#if TIMER0_COMP_MATCH_INT==ENABLE
	SET_BIT(TIMSK,TIMSK_OCIE0);
#elif TIMER0_COMP_MATCH_INT==DISABLE
	CLR_BIT(TIMSK,TIMSK_OCIE0);
    2890:	a9 e5       	ldi	r26, 0x59	; 89
    2892:	b0 e0       	ldi	r27, 0x00	; 0
    2894:	e9 e5       	ldi	r30, 0x59	; 89
    2896:	f0 e0       	ldi	r31, 0x00	; 0
    2898:	80 81       	ld	r24, Z
    289a:	8d 7f       	andi	r24, 0xFD	; 253
    289c:	8c 93       	st	X, r24
#endif

#if TIMER0_OVERFLOW_INT==ENABLE
	SET_BIT(TIMSK,TIMSK_TOIE0);
#elif TIMER0_OVERFLOW_INT==DISABLE
	CLR_BIT(TIMSK,TIMSK_TOIE0);
    289e:	a9 e5       	ldi	r26, 0x59	; 89
    28a0:	b0 e0       	ldi	r27, 0x00	; 0
    28a2:	e9 e5       	ldi	r30, 0x59	; 89
    28a4:	f0 e0       	ldi	r31, 0x00	; 0
    28a6:	80 81       	ld	r24, Z
    28a8:	8e 7f       	andi	r24, 0xFE	; 254
    28aa:	8c 93       	st	X, r24
#endif

	//Initialize Prescaler
	TCCR0&=PRESCALER_MASK;
    28ac:	a3 e5       	ldi	r26, 0x53	; 83
    28ae:	b0 e0       	ldi	r27, 0x00	; 0
    28b0:	e3 e5       	ldi	r30, 0x53	; 83
    28b2:	f0 e0       	ldi	r31, 0x00	; 0
    28b4:	80 81       	ld	r24, Z
    28b6:	88 7f       	andi	r24, 0xF8	; 248
    28b8:	8c 93       	st	X, r24
	TCCR0|=TIMER0_PRESCALER;
    28ba:	a3 e5       	ldi	r26, 0x53	; 83
    28bc:	b0 e0       	ldi	r27, 0x00	; 0
    28be:	e3 e5       	ldi	r30, 0x53	; 83
    28c0:	f0 e0       	ldi	r31, 0x00	; 0
    28c2:	80 81       	ld	r24, Z
    28c4:	83 60       	ori	r24, 0x03	; 3
    28c6:	8c 93       	st	X, r24
}
    28c8:	cf 91       	pop	r28
    28ca:	df 91       	pop	r29
    28cc:	08 95       	ret

000028ce <TIMER0_voidSetCompMatchValue>:

void TIMER0_voidSetCompMatchValue(u8 Copy_u8Value){
    28ce:	df 93       	push	r29
    28d0:	cf 93       	push	r28
    28d2:	0f 92       	push	r0
    28d4:	cd b7       	in	r28, 0x3d	; 61
    28d6:	de b7       	in	r29, 0x3e	; 62
    28d8:	89 83       	std	Y+1, r24	; 0x01
	OCR0=Copy_u8Value;
    28da:	ec e5       	ldi	r30, 0x5C	; 92
    28dc:	f0 e0       	ldi	r31, 0x00	; 0
    28de:	89 81       	ldd	r24, Y+1	; 0x01
    28e0:	80 83       	st	Z, r24
}
    28e2:	0f 90       	pop	r0
    28e4:	cf 91       	pop	r28
    28e6:	df 91       	pop	r29
    28e8:	08 95       	ret

000028ea <TIMER0_voidSetPreloadValue>:

void TIMER0_voidSetPreloadValue(u8 Copy_u8Value){
    28ea:	df 93       	push	r29
    28ec:	cf 93       	push	r28
    28ee:	0f 92       	push	r0
    28f0:	cd b7       	in	r28, 0x3d	; 61
    28f2:	de b7       	in	r29, 0x3e	; 62
    28f4:	89 83       	std	Y+1, r24	; 0x01
	TCNT0=Copy_u8Value;
    28f6:	e2 e5       	ldi	r30, 0x52	; 82
    28f8:	f0 e0       	ldi	r31, 0x00	; 0
    28fa:	89 81       	ldd	r24, Y+1	; 0x01
    28fc:	80 83       	st	Z, r24
}
    28fe:	0f 90       	pop	r0
    2900:	cf 91       	pop	r28
    2902:	df 91       	pop	r29
    2904:	08 95       	ret

00002906 <TIMER0_u8SetCallBack>:

u8 TIMER0_u8SetCallBack(void(*Copy_pvCallBackFunc)(void)){
    2906:	df 93       	push	r29
    2908:	cf 93       	push	r28
    290a:	00 d0       	rcall	.+0      	; 0x290c <TIMER0_u8SetCallBack+0x6>
    290c:	0f 92       	push	r0
    290e:	cd b7       	in	r28, 0x3d	; 61
    2910:	de b7       	in	r29, 0x3e	; 62
    2912:	9b 83       	std	Y+3, r25	; 0x03
    2914:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
    2916:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvCallBackFunc!=NULL){
    2918:	8a 81       	ldd	r24, Y+2	; 0x02
    291a:	9b 81       	ldd	r25, Y+3	; 0x03
    291c:	00 97       	sbiw	r24, 0x00	; 0
    291e:	39 f0       	breq	.+14     	; 0x292e <TIMER0_u8SetCallBack+0x28>
		TIMER0_pvCallBackFunc=Copy_pvCallBackFunc;
    2920:	8a 81       	ldd	r24, Y+2	; 0x02
    2922:	9b 81       	ldd	r25, Y+3	; 0x03
    2924:	90 93 f2 00 	sts	0x00F2, r25
    2928:	80 93 f1 00 	sts	0x00F1, r24
    292c:	02 c0       	rjmp	.+4      	; 0x2932 <TIMER0_u8SetCallBack+0x2c>
	}
	else{
		Local_u8ErrorState=NULL_POINTER;
    292e:	82 e0       	ldi	r24, 0x02	; 2
    2930:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    2932:	89 81       	ldd	r24, Y+1	; 0x01
}
    2934:	0f 90       	pop	r0
    2936:	0f 90       	pop	r0
    2938:	0f 90       	pop	r0
    293a:	cf 91       	pop	r28
    293c:	df 91       	pop	r29
    293e:	08 95       	ret

00002940 <TIMER0_voidPWMGenerate>:

u8 TIMER0_voidPWMGenerate(u8 Copy_u8DutyCycle){
    2940:	ef 92       	push	r14
    2942:	ff 92       	push	r15
    2944:	0f 93       	push	r16
    2946:	1f 93       	push	r17
    2948:	df 93       	push	r29
    294a:	cf 93       	push	r28
    294c:	00 d0       	rcall	.+0      	; 0x294e <TIMER0_voidPWMGenerate+0xe>
    294e:	cd b7       	in	r28, 0x3d	; 61
    2950:	de b7       	in	r29, 0x3e	; 62
    2952:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
    2954:	19 82       	std	Y+1, r1	; 0x01
	if(TIMER0_GEN_MODE==PHC_PWM||TIMER0_GEN_MODE==FAST_PWM){
		if(Copy_u8DutyCycle<=100){
    2956:	8a 81       	ldd	r24, Y+2	; 0x02
    2958:	85 36       	cpi	r24, 0x65	; 101
    295a:	b0 f4       	brcc	.+44     	; 0x2988 <TIMER0_voidPWMGenerate+0x48>
			OCR0=MATH_s32Map(0,100,0,255,Copy_u8DutyCycle);
    295c:	0f 2e       	mov	r0, r31
    295e:	fc e5       	ldi	r31, 0x5C	; 92
    2960:	ef 2e       	mov	r14, r31
    2962:	ff 24       	eor	r15, r15
    2964:	f0 2d       	mov	r31, r0
    2966:	8a 81       	ldd	r24, Y+2	; 0x02
    2968:	e8 2f       	mov	r30, r24
    296a:	f0 e0       	ldi	r31, 0x00	; 0
    296c:	80 e0       	ldi	r24, 0x00	; 0
    296e:	90 e0       	ldi	r25, 0x00	; 0
    2970:	64 e6       	ldi	r22, 0x64	; 100
    2972:	70 e0       	ldi	r23, 0x00	; 0
    2974:	40 e0       	ldi	r20, 0x00	; 0
    2976:	50 e0       	ldi	r21, 0x00	; 0
    2978:	2f ef       	ldi	r18, 0xFF	; 255
    297a:	30 e0       	ldi	r19, 0x00	; 0
    297c:	8f 01       	movw	r16, r30
    297e:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <MATH_s32Map>
    2982:	f7 01       	movw	r30, r14
    2984:	80 83       	st	Z, r24
    2986:	02 c0       	rjmp	.+4      	; 0x298c <TIMER0_voidPWMGenerate+0x4c>
		}
		else{
			Local_u8ErrorState=NOK;
    2988:	81 e0       	ldi	r24, 0x01	; 1
    298a:	89 83       	std	Y+1, r24	; 0x01
}
	else{
		Local_u8ErrorState=NOK;
	}

	return Local_u8ErrorState;
    298c:	89 81       	ldd	r24, Y+1	; 0x01

}
    298e:	0f 90       	pop	r0
    2990:	0f 90       	pop	r0
    2992:	cf 91       	pop	r28
    2994:	df 91       	pop	r29
    2996:	1f 91       	pop	r17
    2998:	0f 91       	pop	r16
    299a:	ff 90       	pop	r15
    299c:	ef 90       	pop	r14
    299e:	08 95       	ret

000029a0 <TIMER1_voidInit>:

/********************************************************TIMER1**********************************************************
 ************************************************************************************************************************/


void TIMER1_voidInit(void){
    29a0:	df 93       	push	r29
    29a2:	cf 93       	push	r28
    29a4:	cd b7       	in	r28, 0x3d	; 61
    29a6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR1B,TCCR1B_WGM13);
	SET_BIT(TCCR1B,TCCR1B_WGM12);
	CLR_BIT(TCCR1A,TCCR1A_WGM11);
	CLR_BIT(TCCR1A,TCCR1A_WGM10);
#elif TIMER1_GEN_MODE==T1_FAST_PWM_CUSTOM_TOP
	SET_BIT(TCCR1B,TCCR1B_WGM13);
    29a8:	ae e4       	ldi	r26, 0x4E	; 78
    29aa:	b0 e0       	ldi	r27, 0x00	; 0
    29ac:	ee e4       	ldi	r30, 0x4E	; 78
    29ae:	f0 e0       	ldi	r31, 0x00	; 0
    29b0:	80 81       	ld	r24, Z
    29b2:	80 61       	ori	r24, 0x10	; 16
    29b4:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM12);
    29b6:	ae e4       	ldi	r26, 0x4E	; 78
    29b8:	b0 e0       	ldi	r27, 0x00	; 0
    29ba:	ee e4       	ldi	r30, 0x4E	; 78
    29bc:	f0 e0       	ldi	r31, 0x00	; 0
    29be:	80 81       	ld	r24, Z
    29c0:	88 60       	ori	r24, 0x08	; 8
    29c2:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_WGM11);
    29c4:	af e4       	ldi	r26, 0x4F	; 79
    29c6:	b0 e0       	ldi	r27, 0x00	; 0
    29c8:	ef e4       	ldi	r30, 0x4F	; 79
    29ca:	f0 e0       	ldi	r31, 0x00	; 0
    29cc:	80 81       	ld	r24, Z
    29ce:	82 60       	ori	r24, 0x02	; 2
    29d0:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,TCCR1A_WGM10);
    29d2:	af e4       	ldi	r26, 0x4F	; 79
    29d4:	b0 e0       	ldi	r27, 0x00	; 0
    29d6:	ef e4       	ldi	r30, 0x4F	; 79
    29d8:	f0 e0       	ldi	r31, 0x00	; 0
    29da:	80 81       	ld	r24, Z
    29dc:	8e 7f       	andi	r24, 0xFE	; 254
    29de:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM12);
	SET_BIT(TCCR1A,TCCR1A_WGM11);
	SET_BIT(TCCR1A,TCCR1A_WGM10);
#endif
	//Set Match Compare Output Mode for both channel A and B
	TCCR1A&=T1_COMP_MATCH_OUT_MASK;
    29e0:	af e4       	ldi	r26, 0x4F	; 79
    29e2:	b0 e0       	ldi	r27, 0x00	; 0
    29e4:	ef e4       	ldi	r30, 0x4F	; 79
    29e6:	f0 e0       	ldi	r31, 0x00	; 0
    29e8:	80 81       	ld	r24, Z
    29ea:	8f 70       	andi	r24, 0x0F	; 15
    29ec:	8c 93       	st	X, r24
	TCCR1A|=(TIMER1B_COMP_MATCH_OUTPUT_MODE<<4);
    29ee:	af e4       	ldi	r26, 0x4F	; 79
    29f0:	b0 e0       	ldi	r27, 0x00	; 0
    29f2:	ef e4       	ldi	r30, 0x4F	; 79
    29f4:	f0 e0       	ldi	r31, 0x00	; 0
    29f6:	80 81       	ld	r24, Z
    29f8:	80 62       	ori	r24, 0x20	; 32
    29fa:	8c 93       	st	X, r24
	TCCR1A|=(TIMER1A_COMP_MATCH_OUTPUT_MODE<<6);
    29fc:	af e4       	ldi	r26, 0x4F	; 79
    29fe:	b0 e0       	ldi	r27, 0x00	; 0
    2a00:	ef e4       	ldi	r30, 0x4F	; 79
    2a02:	f0 e0       	ldi	r31, 0x00	; 0
    2a04:	80 81       	ld	r24, Z
    2a06:	80 68       	ori	r24, 0x80	; 128
    2a08:	8c 93       	st	X, r24
	//Settine interrupts
#if TIMER1A_COMP_MATCH_INT==ENABLE
	SET_BIT(TIMSK,TIMSK_OCIE1A);
#elif TIMER1A_COMP_MATCH_INT==DISABLE
	CLR_BIT(TIMSK,TIMSK_OCIE1A);
    2a0a:	a9 e5       	ldi	r26, 0x59	; 89
    2a0c:	b0 e0       	ldi	r27, 0x00	; 0
    2a0e:	e9 e5       	ldi	r30, 0x59	; 89
    2a10:	f0 e0       	ldi	r31, 0x00	; 0
    2a12:	80 81       	ld	r24, Z
    2a14:	8f 7e       	andi	r24, 0xEF	; 239
    2a16:	8c 93       	st	X, r24
#endif

#if TIMER1B_COMP_MATCH_INT==ENABLE
	SET_BIT(TIMSK,TIMSK_OCIE1B);
#elif TIMER1B_COMP_MATCH_INT==DISABLE
	CLR_BIT(TIMSK,TIMSK_OCIE1B);
    2a18:	a9 e5       	ldi	r26, 0x59	; 89
    2a1a:	b0 e0       	ldi	r27, 0x00	; 0
    2a1c:	e9 e5       	ldi	r30, 0x59	; 89
    2a1e:	f0 e0       	ldi	r31, 0x00	; 0
    2a20:	80 81       	ld	r24, Z
    2a22:	87 7f       	andi	r24, 0xF7	; 247
    2a24:	8c 93       	st	X, r24
#endif

#if TIMER1_OVERFLOW_INT==ENABLE
	SET_BIT(TIMSK,TIMSK_TOIE1);
#elif TIMER1_OVERFLOW_INT==DISABLE
	CLR_BIT(TIMSK,TIMSK_TOIE1);
    2a26:	a9 e5       	ldi	r26, 0x59	; 89
    2a28:	b0 e0       	ldi	r27, 0x00	; 0
    2a2a:	e9 e5       	ldi	r30, 0x59	; 89
    2a2c:	f0 e0       	ldi	r31, 0x00	; 0
    2a2e:	80 81       	ld	r24, Z
    2a30:	8b 7f       	andi	r24, 0xFB	; 251
    2a32:	8c 93       	st	X, r24
#endif

	//Set Prescaler
	TCCR1B&=PRESCALER_MASK;
    2a34:	ae e4       	ldi	r26, 0x4E	; 78
    2a36:	b0 e0       	ldi	r27, 0x00	; 0
    2a38:	ee e4       	ldi	r30, 0x4E	; 78
    2a3a:	f0 e0       	ldi	r31, 0x00	; 0
    2a3c:	80 81       	ld	r24, Z
    2a3e:	88 7f       	andi	r24, 0xF8	; 248
    2a40:	8c 93       	st	X, r24
	TCCR1B|=TIMER1_PRESCALER;
    2a42:	ae e4       	ldi	r26, 0x4E	; 78
    2a44:	b0 e0       	ldi	r27, 0x00	; 0
    2a46:	ee e4       	ldi	r30, 0x4E	; 78
    2a48:	f0 e0       	ldi	r31, 0x00	; 0
    2a4a:	80 81       	ld	r24, Z
    2a4c:	82 60       	ori	r24, 0x02	; 2
    2a4e:	8c 93       	st	X, r24

}
    2a50:	cf 91       	pop	r28
    2a52:	df 91       	pop	r29
    2a54:	08 95       	ret

00002a56 <TIMER1A_voidSetCompMatchValue>:

void TIMER1A_voidSetCompMatchValue(u16 Copy_u16Value){
    2a56:	df 93       	push	r29
    2a58:	cf 93       	push	r28
    2a5a:	00 d0       	rcall	.+0      	; 0x2a5c <TIMER1A_voidSetCompMatchValue+0x6>
    2a5c:	cd b7       	in	r28, 0x3d	; 61
    2a5e:	de b7       	in	r29, 0x3e	; 62
    2a60:	9a 83       	std	Y+2, r25	; 0x02
    2a62:	89 83       	std	Y+1, r24	; 0x01
	OCR1A=Copy_u16Value;
    2a64:	ea e4       	ldi	r30, 0x4A	; 74
    2a66:	f0 e0       	ldi	r31, 0x00	; 0
    2a68:	89 81       	ldd	r24, Y+1	; 0x01
    2a6a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a6c:	91 83       	std	Z+1, r25	; 0x01
    2a6e:	80 83       	st	Z, r24
}
    2a70:	0f 90       	pop	r0
    2a72:	0f 90       	pop	r0
    2a74:	cf 91       	pop	r28
    2a76:	df 91       	pop	r29
    2a78:	08 95       	ret

00002a7a <TIMER1B_voidSetCompMatchValue>:

void TIMER1B_voidSetCompMatchValue(u16 Copy_u16Value){
    2a7a:	df 93       	push	r29
    2a7c:	cf 93       	push	r28
    2a7e:	00 d0       	rcall	.+0      	; 0x2a80 <TIMER1B_voidSetCompMatchValue+0x6>
    2a80:	cd b7       	in	r28, 0x3d	; 61
    2a82:	de b7       	in	r29, 0x3e	; 62
    2a84:	9a 83       	std	Y+2, r25	; 0x02
    2a86:	89 83       	std	Y+1, r24	; 0x01
	OCR1B=Copy_u16Value;
    2a88:	e8 e4       	ldi	r30, 0x48	; 72
    2a8a:	f0 e0       	ldi	r31, 0x00	; 0
    2a8c:	89 81       	ldd	r24, Y+1	; 0x01
    2a8e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a90:	91 83       	std	Z+1, r25	; 0x01
    2a92:	80 83       	st	Z, r24
}
    2a94:	0f 90       	pop	r0
    2a96:	0f 90       	pop	r0
    2a98:	cf 91       	pop	r28
    2a9a:	df 91       	pop	r29
    2a9c:	08 95       	ret

00002a9e <TIMER1_voidSetTopValue>:

void TIMER1_voidSetTopValue(u16 Copy_u16Value){
    2a9e:	df 93       	push	r29
    2aa0:	cf 93       	push	r28
    2aa2:	00 d0       	rcall	.+0      	; 0x2aa4 <TIMER1_voidSetTopValue+0x6>
    2aa4:	cd b7       	in	r28, 0x3d	; 61
    2aa6:	de b7       	in	r29, 0x3e	; 62
    2aa8:	9a 83       	std	Y+2, r25	; 0x02
    2aaa:	89 83       	std	Y+1, r24	; 0x01
	ICR1=Copy_u16Value;
    2aac:	e6 e4       	ldi	r30, 0x46	; 70
    2aae:	f0 e0       	ldi	r31, 0x00	; 0
    2ab0:	89 81       	ldd	r24, Y+1	; 0x01
    2ab2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ab4:	91 83       	std	Z+1, r25	; 0x01
    2ab6:	80 83       	st	Z, r24
}
    2ab8:	0f 90       	pop	r0
    2aba:	0f 90       	pop	r0
    2abc:	cf 91       	pop	r28
    2abe:	df 91       	pop	r29
    2ac0:	08 95       	ret

00002ac2 <TIMER2_voidInit>:

/********************************************************TIMER2**********************************************************
 ************************************************************************************************************************/


void TIMER2_voidInit(void){
    2ac2:	df 93       	push	r29
    2ac4:	cf 93       	push	r28
    2ac6:	cd b7       	in	r28, 0x3d	; 61
    2ac8:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR2,TCCR2_WGM20);
#elif TIMER2_GEN_MODE==PWM
	CLR_BIT(TCCR2,TCCR2_WGM21);
	SET_BIT(TCCR2,TCCR2_WGM20);
#elif TIMER2_GEN_MODE==CTC
	SET_BIT(TCCR2,TCCR2_WGM21);
    2aca:	a5 e4       	ldi	r26, 0x45	; 69
    2acc:	b0 e0       	ldi	r27, 0x00	; 0
    2ace:	e5 e4       	ldi	r30, 0x45	; 69
    2ad0:	f0 e0       	ldi	r31, 0x00	; 0
    2ad2:	80 81       	ld	r24, Z
    2ad4:	88 60       	ori	r24, 0x08	; 8
    2ad6:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,TCCR2_WGM20);
    2ad8:	a5 e4       	ldi	r26, 0x45	; 69
    2ada:	b0 e0       	ldi	r27, 0x00	; 0
    2adc:	e5 e4       	ldi	r30, 0x45	; 69
    2ade:	f0 e0       	ldi	r31, 0x00	; 0
    2ae0:	80 81       	ld	r24, Z
    2ae2:	8f 7b       	andi	r24, 0xBF	; 191
    2ae4:	8c 93       	st	X, r24
	SET_BIT(TCCR2,TCCR2_WGM21);
	SET_BIT(TCCR2,TCCR2_WGM20);
#endif

	//Initialize Compare Match Output Mode
	TCCR2&=COMP_MATCH_OUT_MASK;
    2ae6:	a5 e4       	ldi	r26, 0x45	; 69
    2ae8:	b0 e0       	ldi	r27, 0x00	; 0
    2aea:	e5 e4       	ldi	r30, 0x45	; 69
    2aec:	f0 e0       	ldi	r31, 0x00	; 0
    2aee:	80 81       	ld	r24, Z
    2af0:	8f 7c       	andi	r24, 0xCF	; 207
    2af2:	8c 93       	st	X, r24
	TCCR2|=(TIMER2_COMP_MATCH_OUTPUT_MODE<<4);
    2af4:	a5 e4       	ldi	r26, 0x45	; 69
    2af6:	b0 e0       	ldi	r27, 0x00	; 0
    2af8:	e5 e4       	ldi	r30, 0x45	; 69
    2afa:	f0 e0       	ldi	r31, 0x00	; 0
    2afc:	80 81       	ld	r24, Z
    2afe:	8c 93       	st	X, r24

	//Initialize Interrupt Enable pins
#if TIMER2_COMP_MATCH_INT==ENABLE
	SET_BIT(TIMSK,TIMSK_OCIE2);
    2b00:	a9 e5       	ldi	r26, 0x59	; 89
    2b02:	b0 e0       	ldi	r27, 0x00	; 0
    2b04:	e9 e5       	ldi	r30, 0x59	; 89
    2b06:	f0 e0       	ldi	r31, 0x00	; 0
    2b08:	80 81       	ld	r24, Z
    2b0a:	80 68       	ori	r24, 0x80	; 128
    2b0c:	8c 93       	st	X, r24
#elif TIMER2_COMP_MATCH_INT==DISABLE
	CLR_BIT(TIMSK,TIMSK_OCIE2);
#endif

#if TIMER2_OVERFLOW_INT==ENABLE
	SET_BIT(TIMSK,TIMSK_TOIE2);
    2b0e:	a9 e5       	ldi	r26, 0x59	; 89
    2b10:	b0 e0       	ldi	r27, 0x00	; 0
    2b12:	e9 e5       	ldi	r30, 0x59	; 89
    2b14:	f0 e0       	ldi	r31, 0x00	; 0
    2b16:	80 81       	ld	r24, Z
    2b18:	80 64       	ori	r24, 0x40	; 64
    2b1a:	8c 93       	st	X, r24
#elif TIMER0_OVERFLOW_INT==DISABLE
	CLR_BIT(TIMSK,TIMSK_TOIE2);
#endif

	//Initialize Prescaler
	TCCR2&=PRESCALER_MASK;
    2b1c:	a5 e4       	ldi	r26, 0x45	; 69
    2b1e:	b0 e0       	ldi	r27, 0x00	; 0
    2b20:	e5 e4       	ldi	r30, 0x45	; 69
    2b22:	f0 e0       	ldi	r31, 0x00	; 0
    2b24:	80 81       	ld	r24, Z
    2b26:	88 7f       	andi	r24, 0xF8	; 248
    2b28:	8c 93       	st	X, r24
	TCCR2|=TIMER2_PRESCALER;
    2b2a:	a5 e4       	ldi	r26, 0x45	; 69
    2b2c:	b0 e0       	ldi	r27, 0x00	; 0
    2b2e:	e5 e4       	ldi	r30, 0x45	; 69
    2b30:	f0 e0       	ldi	r31, 0x00	; 0
    2b32:	80 81       	ld	r24, Z
    2b34:	82 60       	ori	r24, 0x02	; 2
    2b36:	8c 93       	st	X, r24
}
    2b38:	cf 91       	pop	r28
    2b3a:	df 91       	pop	r29
    2b3c:	08 95       	ret

00002b3e <TIMER2_voidSetCompMatchValue>:

void TIMER2_voidSetCompMatchValue(u8 Copy_u8Value){
    2b3e:	df 93       	push	r29
    2b40:	cf 93       	push	r28
    2b42:	0f 92       	push	r0
    2b44:	cd b7       	in	r28, 0x3d	; 61
    2b46:	de b7       	in	r29, 0x3e	; 62
    2b48:	89 83       	std	Y+1, r24	; 0x01
	OCR2=Copy_u8Value;
    2b4a:	e3 e4       	ldi	r30, 0x43	; 67
    2b4c:	f0 e0       	ldi	r31, 0x00	; 0
    2b4e:	89 81       	ldd	r24, Y+1	; 0x01
    2b50:	80 83       	st	Z, r24
}
    2b52:	0f 90       	pop	r0
    2b54:	cf 91       	pop	r28
    2b56:	df 91       	pop	r29
    2b58:	08 95       	ret

00002b5a <TIMER2_voidSetPreloadValue>:

void TIMER2_voidSetPreloadValue(u8 Copy_u8Value){
    2b5a:	df 93       	push	r29
    2b5c:	cf 93       	push	r28
    2b5e:	0f 92       	push	r0
    2b60:	cd b7       	in	r28, 0x3d	; 61
    2b62:	de b7       	in	r29, 0x3e	; 62
    2b64:	89 83       	std	Y+1, r24	; 0x01
	TCNT2=Copy_u8Value;
    2b66:	e4 e4       	ldi	r30, 0x44	; 68
    2b68:	f0 e0       	ldi	r31, 0x00	; 0
    2b6a:	89 81       	ldd	r24, Y+1	; 0x01
    2b6c:	80 83       	st	Z, r24
}
    2b6e:	0f 90       	pop	r0
    2b70:	cf 91       	pop	r28
    2b72:	df 91       	pop	r29
    2b74:	08 95       	ret

00002b76 <TIMER2_u8SetCallBack>:

u8 TIMER2_u8SetCallBack(void(*Copy_pvCallBackFunc)(void)){
    2b76:	df 93       	push	r29
    2b78:	cf 93       	push	r28
    2b7a:	00 d0       	rcall	.+0      	; 0x2b7c <TIMER2_u8SetCallBack+0x6>
    2b7c:	0f 92       	push	r0
    2b7e:	cd b7       	in	r28, 0x3d	; 61
    2b80:	de b7       	in	r29, 0x3e	; 62
    2b82:	9b 83       	std	Y+3, r25	; 0x03
    2b84:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
    2b86:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvCallBackFunc!=NULL){
    2b88:	8a 81       	ldd	r24, Y+2	; 0x02
    2b8a:	9b 81       	ldd	r25, Y+3	; 0x03
    2b8c:	00 97       	sbiw	r24, 0x00	; 0
    2b8e:	39 f0       	breq	.+14     	; 0x2b9e <TIMER2_u8SetCallBack+0x28>
		TIMER2_pvCallBackFunc=Copy_pvCallBackFunc;
    2b90:	8a 81       	ldd	r24, Y+2	; 0x02
    2b92:	9b 81       	ldd	r25, Y+3	; 0x03
    2b94:	90 93 f4 00 	sts	0x00F4, r25
    2b98:	80 93 f3 00 	sts	0x00F3, r24
    2b9c:	02 c0       	rjmp	.+4      	; 0x2ba2 <TIMER2_u8SetCallBack+0x2c>
	}
	else{
		Local_u8ErrorState=NULL_POINTER;
    2b9e:	82 e0       	ldi	r24, 0x02	; 2
    2ba0:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    2ba2:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ba4:	0f 90       	pop	r0
    2ba6:	0f 90       	pop	r0
    2ba8:	0f 90       	pop	r0
    2baa:	cf 91       	pop	r28
    2bac:	df 91       	pop	r29
    2bae:	08 95       	ret

00002bb0 <__vector_4>:



//TIMER2 Compare Match ISR
void __vector_4(void)  __attribute__((signal));
void __vector_4(void){
    2bb0:	1f 92       	push	r1
    2bb2:	0f 92       	push	r0
    2bb4:	0f b6       	in	r0, 0x3f	; 63
    2bb6:	0f 92       	push	r0
    2bb8:	11 24       	eor	r1, r1
    2bba:	2f 93       	push	r18
    2bbc:	3f 93       	push	r19
    2bbe:	4f 93       	push	r20
    2bc0:	5f 93       	push	r21
    2bc2:	6f 93       	push	r22
    2bc4:	7f 93       	push	r23
    2bc6:	8f 93       	push	r24
    2bc8:	9f 93       	push	r25
    2bca:	af 93       	push	r26
    2bcc:	bf 93       	push	r27
    2bce:	ef 93       	push	r30
    2bd0:	ff 93       	push	r31
    2bd2:	df 93       	push	r29
    2bd4:	cf 93       	push	r28
    2bd6:	cd b7       	in	r28, 0x3d	; 61
    2bd8:	de b7       	in	r29, 0x3e	; 62
	if(TIMER2_pvCallBackFunc!=NULL){
    2bda:	80 91 f3 00 	lds	r24, 0x00F3
    2bde:	90 91 f4 00 	lds	r25, 0x00F4
    2be2:	00 97       	sbiw	r24, 0x00	; 0
    2be4:	29 f0       	breq	.+10     	; 0x2bf0 <__vector_4+0x40>
		TIMER2_pvCallBackFunc();
    2be6:	e0 91 f3 00 	lds	r30, 0x00F3
    2bea:	f0 91 f4 00 	lds	r31, 0x00F4
    2bee:	09 95       	icall
	}
}
    2bf0:	cf 91       	pop	r28
    2bf2:	df 91       	pop	r29
    2bf4:	ff 91       	pop	r31
    2bf6:	ef 91       	pop	r30
    2bf8:	bf 91       	pop	r27
    2bfa:	af 91       	pop	r26
    2bfc:	9f 91       	pop	r25
    2bfe:	8f 91       	pop	r24
    2c00:	7f 91       	pop	r23
    2c02:	6f 91       	pop	r22
    2c04:	5f 91       	pop	r21
    2c06:	4f 91       	pop	r20
    2c08:	3f 91       	pop	r19
    2c0a:	2f 91       	pop	r18
    2c0c:	0f 90       	pop	r0
    2c0e:	0f be       	out	0x3f, r0	; 63
    2c10:	0f 90       	pop	r0
    2c12:	1f 90       	pop	r1
    2c14:	18 95       	reti

00002c16 <__vector_5>:

//TIMER2 Overflow ISR
void __vector_5(void)  __attribute__((signal));
void __vector_5(void){
    2c16:	1f 92       	push	r1
    2c18:	0f 92       	push	r0
    2c1a:	0f b6       	in	r0, 0x3f	; 63
    2c1c:	0f 92       	push	r0
    2c1e:	11 24       	eor	r1, r1
    2c20:	df 93       	push	r29
    2c22:	cf 93       	push	r28
    2c24:	cd b7       	in	r28, 0x3d	; 61
    2c26:	de b7       	in	r29, 0x3e	; 62

}
    2c28:	cf 91       	pop	r28
    2c2a:	df 91       	pop	r29
    2c2c:	0f 90       	pop	r0
    2c2e:	0f be       	out	0x3f, r0	; 63
    2c30:	0f 90       	pop	r0
    2c32:	1f 90       	pop	r1
    2c34:	18 95       	reti

00002c36 <__vector_6>:

//TIMER1 Capture Event ISR
void __vector_6(void)  __attribute__((signal));
void __vector_6(void){
    2c36:	1f 92       	push	r1
    2c38:	0f 92       	push	r0
    2c3a:	0f b6       	in	r0, 0x3f	; 63
    2c3c:	0f 92       	push	r0
    2c3e:	11 24       	eor	r1, r1
    2c40:	df 93       	push	r29
    2c42:	cf 93       	push	r28
    2c44:	cd b7       	in	r28, 0x3d	; 61
    2c46:	de b7       	in	r29, 0x3e	; 62

}
    2c48:	cf 91       	pop	r28
    2c4a:	df 91       	pop	r29
    2c4c:	0f 90       	pop	r0
    2c4e:	0f be       	out	0x3f, r0	; 63
    2c50:	0f 90       	pop	r0
    2c52:	1f 90       	pop	r1
    2c54:	18 95       	reti

00002c56 <__vector_7>:


//TIMER1 Compare Match A ISR
void __vector_7(void)  __attribute__((signal));
void __vector_7(void){
    2c56:	1f 92       	push	r1
    2c58:	0f 92       	push	r0
    2c5a:	0f b6       	in	r0, 0x3f	; 63
    2c5c:	0f 92       	push	r0
    2c5e:	11 24       	eor	r1, r1
    2c60:	df 93       	push	r29
    2c62:	cf 93       	push	r28
    2c64:	cd b7       	in	r28, 0x3d	; 61
    2c66:	de b7       	in	r29, 0x3e	; 62

}
    2c68:	cf 91       	pop	r28
    2c6a:	df 91       	pop	r29
    2c6c:	0f 90       	pop	r0
    2c6e:	0f be       	out	0x3f, r0	; 63
    2c70:	0f 90       	pop	r0
    2c72:	1f 90       	pop	r1
    2c74:	18 95       	reti

00002c76 <__vector_8>:

//TIMER1 Compare Match B ISR
void __vector_8(void)  __attribute__((signal));
void __vector_8(void){
    2c76:	1f 92       	push	r1
    2c78:	0f 92       	push	r0
    2c7a:	0f b6       	in	r0, 0x3f	; 63
    2c7c:	0f 92       	push	r0
    2c7e:	11 24       	eor	r1, r1
    2c80:	df 93       	push	r29
    2c82:	cf 93       	push	r28
    2c84:	cd b7       	in	r28, 0x3d	; 61
    2c86:	de b7       	in	r29, 0x3e	; 62

}
    2c88:	cf 91       	pop	r28
    2c8a:	df 91       	pop	r29
    2c8c:	0f 90       	pop	r0
    2c8e:	0f be       	out	0x3f, r0	; 63
    2c90:	0f 90       	pop	r0
    2c92:	1f 90       	pop	r1
    2c94:	18 95       	reti

00002c96 <__vector_9>:

//TIMER1 Overflow ISR
void __vector_9(void)  __attribute__((signal));
void __vector_9(void){
    2c96:	1f 92       	push	r1
    2c98:	0f 92       	push	r0
    2c9a:	0f b6       	in	r0, 0x3f	; 63
    2c9c:	0f 92       	push	r0
    2c9e:	11 24       	eor	r1, r1
    2ca0:	df 93       	push	r29
    2ca2:	cf 93       	push	r28
    2ca4:	cd b7       	in	r28, 0x3d	; 61
    2ca6:	de b7       	in	r29, 0x3e	; 62

}
    2ca8:	cf 91       	pop	r28
    2caa:	df 91       	pop	r29
    2cac:	0f 90       	pop	r0
    2cae:	0f be       	out	0x3f, r0	; 63
    2cb0:	0f 90       	pop	r0
    2cb2:	1f 90       	pop	r1
    2cb4:	18 95       	reti

00002cb6 <__vector_10>:

//TIMER0 Compare Match ISR
void __vector_10(void)  __attribute__((signal));
void __vector_10(void){
    2cb6:	1f 92       	push	r1
    2cb8:	0f 92       	push	r0
    2cba:	0f b6       	in	r0, 0x3f	; 63
    2cbc:	0f 92       	push	r0
    2cbe:	11 24       	eor	r1, r1
    2cc0:	2f 93       	push	r18
    2cc2:	3f 93       	push	r19
    2cc4:	4f 93       	push	r20
    2cc6:	5f 93       	push	r21
    2cc8:	6f 93       	push	r22
    2cca:	7f 93       	push	r23
    2ccc:	8f 93       	push	r24
    2cce:	9f 93       	push	r25
    2cd0:	af 93       	push	r26
    2cd2:	bf 93       	push	r27
    2cd4:	ef 93       	push	r30
    2cd6:	ff 93       	push	r31
    2cd8:	df 93       	push	r29
    2cda:	cf 93       	push	r28
    2cdc:	cd b7       	in	r28, 0x3d	; 61
    2cde:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_pvCallBackFunc!=NULL){
    2ce0:	80 91 f1 00 	lds	r24, 0x00F1
    2ce4:	90 91 f2 00 	lds	r25, 0x00F2
    2ce8:	00 97       	sbiw	r24, 0x00	; 0
    2cea:	29 f0       	breq	.+10     	; 0x2cf6 <__vector_10+0x40>
		TIMER0_pvCallBackFunc();
    2cec:	e0 91 f1 00 	lds	r30, 0x00F1
    2cf0:	f0 91 f2 00 	lds	r31, 0x00F2
    2cf4:	09 95       	icall
	}
}
    2cf6:	cf 91       	pop	r28
    2cf8:	df 91       	pop	r29
    2cfa:	ff 91       	pop	r31
    2cfc:	ef 91       	pop	r30
    2cfe:	bf 91       	pop	r27
    2d00:	af 91       	pop	r26
    2d02:	9f 91       	pop	r25
    2d04:	8f 91       	pop	r24
    2d06:	7f 91       	pop	r23
    2d08:	6f 91       	pop	r22
    2d0a:	5f 91       	pop	r21
    2d0c:	4f 91       	pop	r20
    2d0e:	3f 91       	pop	r19
    2d10:	2f 91       	pop	r18
    2d12:	0f 90       	pop	r0
    2d14:	0f be       	out	0x3f, r0	; 63
    2d16:	0f 90       	pop	r0
    2d18:	1f 90       	pop	r1
    2d1a:	18 95       	reti

00002d1c <__vector_11>:

//TIMER0 Overflow ISR
void __vector_11(void)  __attribute__((signal));
void __vector_11(void){
    2d1c:	1f 92       	push	r1
    2d1e:	0f 92       	push	r0
    2d20:	0f b6       	in	r0, 0x3f	; 63
    2d22:	0f 92       	push	r0
    2d24:	11 24       	eor	r1, r1
    2d26:	df 93       	push	r29
    2d28:	cf 93       	push	r28
    2d2a:	cd b7       	in	r28, 0x3d	; 61
    2d2c:	de b7       	in	r29, 0x3e	; 62

}
    2d2e:	cf 91       	pop	r28
    2d30:	df 91       	pop	r29
    2d32:	0f 90       	pop	r0
    2d34:	0f be       	out	0x3f, r0	; 63
    2d36:	0f 90       	pop	r0
    2d38:	1f 90       	pop	r1
    2d3a:	18 95       	reti

00002d3c <main>:
#include "APP_interface.h"
u8 Local_u8ChannelArr[2]={THER_CHANNEL,LDR_CHANNEL};
u16 Local_u16ResultArr[2];
SSD_t SSD1 = {CATHODE,DIO_u8PORTD,DIO_u8PORTA,DIO_u8PIN4};
Chain_t ADCChain1 = {Local_u8ChannelArr,Local_u16ResultArr,2,&ADCNotifFunc};
void main(void){
    2d3c:	df 93       	push	r29
    2d3e:	cf 93       	push	r28
    2d40:	cd b7       	in	r28, 0x3d	; 61
    2d42:	de b7       	in	r29, 0x3e	; 62
    2d44:	29 97       	sbiw	r28, 0x09	; 9
    2d46:	0f b6       	in	r0, 0x3f	; 63
    2d48:	f8 94       	cli
    2d4a:	de bf       	out	0x3e, r29	; 62
    2d4c:	0f be       	out	0x3f, r0	; 63
    2d4e:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8ErrorState,Local_u8IDArr[4],Local_u8PassArr[4];
	PORT_voidInit();
    2d50:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <PORT_voidInit>
	ADC_voidInit();
    2d54:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC_voidInit>
	CLCD_voidInit();
    2d58:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <CLCD_voidInit>
	GIE_voidEnable();
    2d5c:	0e 94 f7 11 	call	0x23ee	; 0x23ee <GIE_voidEnable>
	APP_voidShowStartMenu();
    2d60:	0e 94 bb 07 	call	0xf76	; 0xf76 <APP_voidShowStartMenu>
	APP_voidGetID(Local_u8IDArr);
    2d64:	ce 01       	movw	r24, r28
    2d66:	02 96       	adiw	r24, 0x02	; 2
    2d68:	0e 94 4a 08 	call	0x1094	; 0x1094 <APP_voidGetID>
	APP_voidGetPassword(Local_u8PassArr);
    2d6c:	ce 01       	movw	r24, r28
    2d6e:	06 96       	adiw	r24, 0x06	; 6
    2d70:	0e 94 84 08 	call	0x1108	; 0x1108 <APP_voidGetPassword>
	Local_u8ErrorState=APP_voidCheckPassword(&SSD1,Local_u8IDArr,Local_u8PassArr);
    2d74:	8d ed       	ldi	r24, 0xDD	; 221
    2d76:	90 e0       	ldi	r25, 0x00	; 0
    2d78:	9e 01       	movw	r18, r28
    2d7a:	2e 5f       	subi	r18, 0xFE	; 254
    2d7c:	3f 4f       	sbci	r19, 0xFF	; 255
    2d7e:	ae 01       	movw	r20, r28
    2d80:	4a 5f       	subi	r20, 0xFA	; 250
    2d82:	5f 4f       	sbci	r21, 0xFF	; 255
    2d84:	b9 01       	movw	r22, r18
    2d86:	0e 94 c2 08 	call	0x1184	; 0x1184 <APP_voidCheckPassword>
    2d8a:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_voidInit();
    2d8c:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <TIMER1_voidInit>
	while(1){
		if(Local_u8ErrorState==OK){
    2d90:	89 81       	ldd	r24, Y+1	; 0x01
    2d92:	88 23       	and	r24, r24
    2d94:	e9 f7       	brne	.-6      	; 0x2d90 <main+0x54>
			ADC_u8StartChainConversion(&ADCChain1);
    2d96:	81 ee       	ldi	r24, 0xE1	; 225
    2d98:	90 e0       	ldi	r25, 0x00	; 0
    2d9a:	0e 94 c1 06 	call	0xd82	; 0xd82 <ADC_u8StartChainConversion>
    2d9e:	f8 cf       	rjmp	.-16     	; 0x2d90 <main+0x54>

00002da0 <__mulsi3>:
    2da0:	62 9f       	mul	r22, r18
    2da2:	d0 01       	movw	r26, r0
    2da4:	73 9f       	mul	r23, r19
    2da6:	f0 01       	movw	r30, r0
    2da8:	82 9f       	mul	r24, r18
    2daa:	e0 0d       	add	r30, r0
    2dac:	f1 1d       	adc	r31, r1
    2dae:	64 9f       	mul	r22, r20
    2db0:	e0 0d       	add	r30, r0
    2db2:	f1 1d       	adc	r31, r1
    2db4:	92 9f       	mul	r25, r18
    2db6:	f0 0d       	add	r31, r0
    2db8:	83 9f       	mul	r24, r19
    2dba:	f0 0d       	add	r31, r0
    2dbc:	74 9f       	mul	r23, r20
    2dbe:	f0 0d       	add	r31, r0
    2dc0:	65 9f       	mul	r22, r21
    2dc2:	f0 0d       	add	r31, r0
    2dc4:	99 27       	eor	r25, r25
    2dc6:	72 9f       	mul	r23, r18
    2dc8:	b0 0d       	add	r27, r0
    2dca:	e1 1d       	adc	r30, r1
    2dcc:	f9 1f       	adc	r31, r25
    2dce:	63 9f       	mul	r22, r19
    2dd0:	b0 0d       	add	r27, r0
    2dd2:	e1 1d       	adc	r30, r1
    2dd4:	f9 1f       	adc	r31, r25
    2dd6:	bd 01       	movw	r22, r26
    2dd8:	cf 01       	movw	r24, r30
    2dda:	11 24       	eor	r1, r1
    2ddc:	08 95       	ret

00002dde <__udivmodhi4>:
    2dde:	aa 1b       	sub	r26, r26
    2de0:	bb 1b       	sub	r27, r27
    2de2:	51 e1       	ldi	r21, 0x11	; 17
    2de4:	07 c0       	rjmp	.+14     	; 0x2df4 <__udivmodhi4_ep>

00002de6 <__udivmodhi4_loop>:
    2de6:	aa 1f       	adc	r26, r26
    2de8:	bb 1f       	adc	r27, r27
    2dea:	a6 17       	cp	r26, r22
    2dec:	b7 07       	cpc	r27, r23
    2dee:	10 f0       	brcs	.+4      	; 0x2df4 <__udivmodhi4_ep>
    2df0:	a6 1b       	sub	r26, r22
    2df2:	b7 0b       	sbc	r27, r23

00002df4 <__udivmodhi4_ep>:
    2df4:	88 1f       	adc	r24, r24
    2df6:	99 1f       	adc	r25, r25
    2df8:	5a 95       	dec	r21
    2dfa:	a9 f7       	brne	.-22     	; 0x2de6 <__udivmodhi4_loop>
    2dfc:	80 95       	com	r24
    2dfe:	90 95       	com	r25
    2e00:	bc 01       	movw	r22, r24
    2e02:	cd 01       	movw	r24, r26
    2e04:	08 95       	ret

00002e06 <__udivmodsi4>:
    2e06:	a1 e2       	ldi	r26, 0x21	; 33
    2e08:	1a 2e       	mov	r1, r26
    2e0a:	aa 1b       	sub	r26, r26
    2e0c:	bb 1b       	sub	r27, r27
    2e0e:	fd 01       	movw	r30, r26
    2e10:	0d c0       	rjmp	.+26     	; 0x2e2c <__udivmodsi4_ep>

00002e12 <__udivmodsi4_loop>:
    2e12:	aa 1f       	adc	r26, r26
    2e14:	bb 1f       	adc	r27, r27
    2e16:	ee 1f       	adc	r30, r30
    2e18:	ff 1f       	adc	r31, r31
    2e1a:	a2 17       	cp	r26, r18
    2e1c:	b3 07       	cpc	r27, r19
    2e1e:	e4 07       	cpc	r30, r20
    2e20:	f5 07       	cpc	r31, r21
    2e22:	20 f0       	brcs	.+8      	; 0x2e2c <__udivmodsi4_ep>
    2e24:	a2 1b       	sub	r26, r18
    2e26:	b3 0b       	sbc	r27, r19
    2e28:	e4 0b       	sbc	r30, r20
    2e2a:	f5 0b       	sbc	r31, r21

00002e2c <__udivmodsi4_ep>:
    2e2c:	66 1f       	adc	r22, r22
    2e2e:	77 1f       	adc	r23, r23
    2e30:	88 1f       	adc	r24, r24
    2e32:	99 1f       	adc	r25, r25
    2e34:	1a 94       	dec	r1
    2e36:	69 f7       	brne	.-38     	; 0x2e12 <__udivmodsi4_loop>
    2e38:	60 95       	com	r22
    2e3a:	70 95       	com	r23
    2e3c:	80 95       	com	r24
    2e3e:	90 95       	com	r25
    2e40:	9b 01       	movw	r18, r22
    2e42:	ac 01       	movw	r20, r24
    2e44:	bd 01       	movw	r22, r26
    2e46:	cf 01       	movw	r24, r30
    2e48:	08 95       	ret

00002e4a <__divmodsi4>:
    2e4a:	97 fb       	bst	r25, 7
    2e4c:	09 2e       	mov	r0, r25
    2e4e:	05 26       	eor	r0, r21
    2e50:	0e d0       	rcall	.+28     	; 0x2e6e <__divmodsi4_neg1>
    2e52:	57 fd       	sbrc	r21, 7
    2e54:	04 d0       	rcall	.+8      	; 0x2e5e <__divmodsi4_neg2>
    2e56:	d7 df       	rcall	.-82     	; 0x2e06 <__udivmodsi4>
    2e58:	0a d0       	rcall	.+20     	; 0x2e6e <__divmodsi4_neg1>
    2e5a:	00 1c       	adc	r0, r0
    2e5c:	38 f4       	brcc	.+14     	; 0x2e6c <__divmodsi4_exit>

00002e5e <__divmodsi4_neg2>:
    2e5e:	50 95       	com	r21
    2e60:	40 95       	com	r20
    2e62:	30 95       	com	r19
    2e64:	21 95       	neg	r18
    2e66:	3f 4f       	sbci	r19, 0xFF	; 255
    2e68:	4f 4f       	sbci	r20, 0xFF	; 255
    2e6a:	5f 4f       	sbci	r21, 0xFF	; 255

00002e6c <__divmodsi4_exit>:
    2e6c:	08 95       	ret

00002e6e <__divmodsi4_neg1>:
    2e6e:	f6 f7       	brtc	.-4      	; 0x2e6c <__divmodsi4_exit>
    2e70:	90 95       	com	r25
    2e72:	80 95       	com	r24
    2e74:	70 95       	com	r23
    2e76:	61 95       	neg	r22
    2e78:	7f 4f       	sbci	r23, 0xFF	; 255
    2e7a:	8f 4f       	sbci	r24, 0xFF	; 255
    2e7c:	9f 4f       	sbci	r25, 0xFF	; 255
    2e7e:	08 95       	ret

00002e80 <__prologue_saves__>:
    2e80:	2f 92       	push	r2
    2e82:	3f 92       	push	r3
    2e84:	4f 92       	push	r4
    2e86:	5f 92       	push	r5
    2e88:	6f 92       	push	r6
    2e8a:	7f 92       	push	r7
    2e8c:	8f 92       	push	r8
    2e8e:	9f 92       	push	r9
    2e90:	af 92       	push	r10
    2e92:	bf 92       	push	r11
    2e94:	cf 92       	push	r12
    2e96:	df 92       	push	r13
    2e98:	ef 92       	push	r14
    2e9a:	ff 92       	push	r15
    2e9c:	0f 93       	push	r16
    2e9e:	1f 93       	push	r17
    2ea0:	cf 93       	push	r28
    2ea2:	df 93       	push	r29
    2ea4:	cd b7       	in	r28, 0x3d	; 61
    2ea6:	de b7       	in	r29, 0x3e	; 62
    2ea8:	ca 1b       	sub	r28, r26
    2eaa:	db 0b       	sbc	r29, r27
    2eac:	0f b6       	in	r0, 0x3f	; 63
    2eae:	f8 94       	cli
    2eb0:	de bf       	out	0x3e, r29	; 62
    2eb2:	0f be       	out	0x3f, r0	; 63
    2eb4:	cd bf       	out	0x3d, r28	; 61
    2eb6:	09 94       	ijmp

00002eb8 <__epilogue_restores__>:
    2eb8:	2a 88       	ldd	r2, Y+18	; 0x12
    2eba:	39 88       	ldd	r3, Y+17	; 0x11
    2ebc:	48 88       	ldd	r4, Y+16	; 0x10
    2ebe:	5f 84       	ldd	r5, Y+15	; 0x0f
    2ec0:	6e 84       	ldd	r6, Y+14	; 0x0e
    2ec2:	7d 84       	ldd	r7, Y+13	; 0x0d
    2ec4:	8c 84       	ldd	r8, Y+12	; 0x0c
    2ec6:	9b 84       	ldd	r9, Y+11	; 0x0b
    2ec8:	aa 84       	ldd	r10, Y+10	; 0x0a
    2eca:	b9 84       	ldd	r11, Y+9	; 0x09
    2ecc:	c8 84       	ldd	r12, Y+8	; 0x08
    2ece:	df 80       	ldd	r13, Y+7	; 0x07
    2ed0:	ee 80       	ldd	r14, Y+6	; 0x06
    2ed2:	fd 80       	ldd	r15, Y+5	; 0x05
    2ed4:	0c 81       	ldd	r16, Y+4	; 0x04
    2ed6:	1b 81       	ldd	r17, Y+3	; 0x03
    2ed8:	aa 81       	ldd	r26, Y+2	; 0x02
    2eda:	b9 81       	ldd	r27, Y+1	; 0x01
    2edc:	ce 0f       	add	r28, r30
    2ede:	d1 1d       	adc	r29, r1
    2ee0:	0f b6       	in	r0, 0x3f	; 63
    2ee2:	f8 94       	cli
    2ee4:	de bf       	out	0x3e, r29	; 62
    2ee6:	0f be       	out	0x3f, r0	; 63
    2ee8:	cd bf       	out	0x3d, r28	; 61
    2eea:	ed 01       	movw	r28, r26
    2eec:	08 95       	ret

00002eee <_exit>:
    2eee:	f8 94       	cli

00002ef0 <__stop_program>:
    2ef0:	ff cf       	rjmp	.-2      	; 0x2ef0 <__stop_program>
